
Proyecto_Micro_SED_2022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c114  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  0800c2b8  0800c2b8  0001c2b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7b4  0800c7b4  00020300  2**0
                  CONTENTS
  4 .ARM          00000008  0800c7b4  0800c7b4  0001c7b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7bc  0800c7bc  00020300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7bc  0800c7bc  0001c7bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c7c0  0800c7c0  0001c7c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000300  20000000  0800c7c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dc4  20000300  0800cac4  00020300  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200020c4  0800cac4  000220c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020300  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d89  00000000  00000000  00020330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000350d  00000000  00000000  000360b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001328  00000000  00000000  000395c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011a0  00000000  00000000  0003a8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b260  00000000  00000000  0003ba90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000169c9  00000000  00000000  00056cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cdd8  00000000  00000000  0006d6b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010a491  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060b8  00000000  00000000  0010a4e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000300 	.word	0x20000300
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c29c 	.word	0x0800c29c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000304 	.word	0x20000304
 80001dc:	0800c29c 	.word	0x0800c29c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <TemporizadorMinutos>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/************************************* TIEMPO ********************************************/

void TemporizadorMinutos(int tiempo){
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	contando = 1;
 8000ec4:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <TemporizadorMinutos+0x28>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	601a      	str	r2, [r3, #0]
	minutos = 0;
 8000eca:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <TemporizadorMinutos+0x2c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
	tiempo_min = tiempo;
 8000ed0:	4a06      	ldr	r2, [pc, #24]	; (8000eec <TemporizadorMinutos+0x30>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6013      	str	r3, [r2, #0]
	//fin_de_carrera_min = 0;
	HAL_TIM_Base_Start_IT(&htim3);
 8000ed6:	4806      	ldr	r0, [pc, #24]	; (8000ef0 <TemporizadorMinutos+0x34>)
 8000ed8:	f003 fe92 	bl	8004c00 <HAL_TIM_Base_Start_IT>
}
 8000edc:	bf00      	nop
 8000ede:	3708      	adds	r7, #8
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000450 	.word	0x20000450
 8000ee8:	20000440 	.word	0x20000440
 8000eec:	20000448 	.word	0x20000448
 8000ef0:	200003ac 	.word	0x200003ac

08000ef4 <displayModo>:
static State_Type Current_State;
volatile int btn_pressed;

/*********************************** GENERAL ********************************************/

void displayModo(int k){
 8000ef4:	b5b0      	push	{r4, r5, r7, lr}
 8000ef6:	b08e      	sub	sp, #56	; 0x38
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	int i;
	char msg[19];
	switch(k){
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b03      	cmp	r3, #3
 8000f00:	d83e      	bhi.n	8000f80 <displayModo+0x8c>
 8000f02:	a201      	add	r2, pc, #4	; (adr r2, 8000f08 <displayModo+0x14>)
 8000f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f08:	08000f19 	.word	0x08000f19
 8000f0c:	08000f33 	.word	0x08000f33
 8000f10:	08000f4d 	.word	0x08000f4d
 8000f14:	08000f67 	.word	0x08000f67
	case 0:
		strcpy(msg,"MODO: ESPERA    \r\n");
 8000f18:	4b28      	ldr	r3, [pc, #160]	; (8000fbc <displayModo+0xc8>)
 8000f1a:	f107 0420 	add.w	r4, r7, #32
 8000f1e:	461d      	mov	r5, r3
 8000f20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f24:	682b      	ldr	r3, [r5, #0]
 8000f26:	461a      	mov	r2, r3
 8000f28:	8022      	strh	r2, [r4, #0]
 8000f2a:	3402      	adds	r4, #2
 8000f2c:	0c1b      	lsrs	r3, r3, #16
 8000f2e:	7023      	strb	r3, [r4, #0]
		break;
 8000f30:	e026      	b.n	8000f80 <displayModo+0x8c>
	case 1:
		strcpy(msg,"MODO: MANUAL    \r\n");
 8000f32:	4b23      	ldr	r3, [pc, #140]	; (8000fc0 <displayModo+0xcc>)
 8000f34:	f107 0420 	add.w	r4, r7, #32
 8000f38:	461d      	mov	r5, r3
 8000f3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f3e:	682b      	ldr	r3, [r5, #0]
 8000f40:	461a      	mov	r2, r3
 8000f42:	8022      	strh	r2, [r4, #0]
 8000f44:	3402      	adds	r4, #2
 8000f46:	0c1b      	lsrs	r3, r3, #16
 8000f48:	7023      	strb	r3, [r4, #0]
		break;
 8000f4a:	e019      	b.n	8000f80 <displayModo+0x8c>
	case 2:
		strcpy(msg,"MODO: HORARIO   \r\n");
 8000f4c:	4b1d      	ldr	r3, [pc, #116]	; (8000fc4 <displayModo+0xd0>)
 8000f4e:	f107 0420 	add.w	r4, r7, #32
 8000f52:	461d      	mov	r5, r3
 8000f54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f58:	682b      	ldr	r3, [r5, #0]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	8022      	strh	r2, [r4, #0]
 8000f5e:	3402      	adds	r4, #2
 8000f60:	0c1b      	lsrs	r3, r3, #16
 8000f62:	7023      	strb	r3, [r4, #0]
		break;
 8000f64:	e00c      	b.n	8000f80 <displayModo+0x8c>
	case 3:
		strcpy(msg,"MODO: AUTOMATICO\r\n");
 8000f66:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <displayModo+0xd4>)
 8000f68:	f107 0420 	add.w	r4, r7, #32
 8000f6c:	461d      	mov	r5, r3
 8000f6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f72:	682b      	ldr	r3, [r5, #0]
 8000f74:	461a      	mov	r2, r3
 8000f76:	8022      	strh	r2, [r4, #0]
 8000f78:	3402      	adds	r4, #2
 8000f7a:	0c1b      	lsrs	r3, r3, #16
 8000f7c:	7023      	strb	r3, [r4, #0]
		break;
 8000f7e:	bf00      	nop
	}
	uint8_t data[sizeof(msg)];
	for(i = 0;i<=sizeof(msg);i++){
 8000f80:	2300      	movs	r3, #0
 8000f82:	637b      	str	r3, [r7, #52]	; 0x34
 8000f84:	e00d      	b.n	8000fa2 <displayModo+0xae>
	  data[i] = msg[i];
 8000f86:	f107 0220 	add.w	r2, r7, #32
 8000f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f8c:	4413      	add	r3, r2
 8000f8e:	7819      	ldrb	r1, [r3, #0]
 8000f90:	f107 020c 	add.w	r2, r7, #12
 8000f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f96:	4413      	add	r3, r2
 8000f98:	460a      	mov	r2, r1
 8000f9a:	701a      	strb	r2, [r3, #0]
	for(i = 0;i<=sizeof(msg);i++){
 8000f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	637b      	str	r3, [r7, #52]	; 0x34
 8000fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fa4:	2b13      	cmp	r3, #19
 8000fa6:	d9ee      	bls.n	8000f86 <displayModo+0x92>
	};
	CDC_Transmit_FS(data, sizeof(data));
 8000fa8:	f107 030c 	add.w	r3, r7, #12
 8000fac:	2113      	movs	r1, #19
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f007 ff34 	bl	8008e1c <CDC_Transmit_FS>
}
 8000fb4:	bf00      	nop
 8000fb6:	3738      	adds	r7, #56	; 0x38
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bdb0      	pop	{r4, r5, r7, pc}
 8000fbc:	0800c304 	.word	0x0800c304
 8000fc0:	0800c318 	.word	0x0800c318
 8000fc4:	0800c32c 	.word	0x0800c32c
 8000fc8:	0800c340 	.word	0x0800c340

08000fcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd0:	f000 ff16 	bl	8001e00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd4:	f000 f820 	bl	8001018 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd8:	f000 f9c4 	bl	8001364 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000fdc:	f000 f884 	bl	80010e8 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000fe0:	f000 f924 	bl	800122c <MX_TIM3_Init>
  MX_TIM5_Init();
 8000fe4:	f000 f970 	bl	80012c8 <MX_TIM5_Init>
  MX_USB_DEVICE_Init();
 8000fe8:	f007 fe44 	bl	8008c74 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000fec:	f000 f8d0 	bl	8001190 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  state_machine_init();
 8000ff0:	f000 fa4c 	bl	800148c <state_machine_init>
  HAL_TIM_Base_Start(&htim5);
 8000ff4:	4805      	ldr	r0, [pc, #20]	; (800100c <main+0x40>)
 8000ff6:	f003 fda9 	bl	8004b4c <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  state_table[Current_State]();
 8000ffa:	4b05      	ldr	r3, [pc, #20]	; (8001010 <main+0x44>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	461a      	mov	r2, r3
 8001000:	4b04      	ldr	r3, [pc, #16]	; (8001014 <main+0x48>)
 8001002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001006:	4798      	blx	r3
 8001008:	e7f7      	b.n	8000ffa <main+0x2e>
 800100a:	bf00      	nop
 800100c:	200003f4 	.word	0x200003f4
 8001010:	20000498 	.word	0x20000498
 8001014:	2000001c 	.word	0x2000001c

08001018 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b094      	sub	sp, #80	; 0x50
 800101c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800101e:	f107 0320 	add.w	r3, r7, #32
 8001022:	2230      	movs	r2, #48	; 0x30
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f008 fb86 	bl	8009738 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800102c:	f107 030c 	add.w	r3, r7, #12
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800103c:	2300      	movs	r3, #0
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	4b27      	ldr	r3, [pc, #156]	; (80010e0 <SystemClock_Config+0xc8>)
 8001042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001044:	4a26      	ldr	r2, [pc, #152]	; (80010e0 <SystemClock_Config+0xc8>)
 8001046:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800104a:	6413      	str	r3, [r2, #64]	; 0x40
 800104c:	4b24      	ldr	r3, [pc, #144]	; (80010e0 <SystemClock_Config+0xc8>)
 800104e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001058:	2300      	movs	r3, #0
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	4b21      	ldr	r3, [pc, #132]	; (80010e4 <SystemClock_Config+0xcc>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a20      	ldr	r2, [pc, #128]	; (80010e4 <SystemClock_Config+0xcc>)
 8001062:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001066:	6013      	str	r3, [r2, #0]
 8001068:	4b1e      	ldr	r3, [pc, #120]	; (80010e4 <SystemClock_Config+0xcc>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001074:	2301      	movs	r3, #1
 8001076:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001078:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800107e:	2302      	movs	r3, #2
 8001080:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001082:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001086:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001088:	2304      	movs	r3, #4
 800108a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800108c:	23c0      	movs	r3, #192	; 0xc0
 800108e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001090:	2304      	movs	r3, #4
 8001092:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001094:	2308      	movs	r3, #8
 8001096:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001098:	f107 0320 	add.w	r3, r7, #32
 800109c:	4618      	mov	r0, r3
 800109e:	f003 f895 	bl	80041cc <HAL_RCC_OscConfig>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010a8:	f000 fc8c 	bl	80019c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ac:	230f      	movs	r3, #15
 80010ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b0:	2302      	movs	r3, #2
 80010b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80010bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80010c2:	f107 030c 	add.w	r3, r7, #12
 80010c6:	2103      	movs	r1, #3
 80010c8:	4618      	mov	r0, r3
 80010ca:	f003 faf7 	bl	80046bc <HAL_RCC_ClockConfig>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80010d4:	f000 fc76 	bl	80019c4 <Error_Handler>
  }
}
 80010d8:	bf00      	nop
 80010da:	3750      	adds	r7, #80	; 0x50
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40007000 	.word	0x40007000

080010e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ee:	463b      	mov	r3, r7
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80010fa:	4b22      	ldr	r3, [pc, #136]	; (8001184 <MX_ADC1_Init+0x9c>)
 80010fc:	4a22      	ldr	r2, [pc, #136]	; (8001188 <MX_ADC1_Init+0xa0>)
 80010fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001100:	4b20      	ldr	r3, [pc, #128]	; (8001184 <MX_ADC1_Init+0x9c>)
 8001102:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001106:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8001108:	4b1e      	ldr	r3, [pc, #120]	; (8001184 <MX_ADC1_Init+0x9c>)
 800110a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800110e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001110:	4b1c      	ldr	r3, [pc, #112]	; (8001184 <MX_ADC1_Init+0x9c>)
 8001112:	2200      	movs	r2, #0
 8001114:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001116:	4b1b      	ldr	r3, [pc, #108]	; (8001184 <MX_ADC1_Init+0x9c>)
 8001118:	2200      	movs	r2, #0
 800111a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800111c:	4b19      	ldr	r3, [pc, #100]	; (8001184 <MX_ADC1_Init+0x9c>)
 800111e:	2200      	movs	r2, #0
 8001120:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001124:	4b17      	ldr	r3, [pc, #92]	; (8001184 <MX_ADC1_Init+0x9c>)
 8001126:	2200      	movs	r2, #0
 8001128:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800112a:	4b16      	ldr	r3, [pc, #88]	; (8001184 <MX_ADC1_Init+0x9c>)
 800112c:	4a17      	ldr	r2, [pc, #92]	; (800118c <MX_ADC1_Init+0xa4>)
 800112e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <MX_ADC1_Init+0x9c>)
 8001132:	2200      	movs	r2, #0
 8001134:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001136:	4b13      	ldr	r3, [pc, #76]	; (8001184 <MX_ADC1_Init+0x9c>)
 8001138:	2201      	movs	r2, #1
 800113a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800113c:	4b11      	ldr	r3, [pc, #68]	; (8001184 <MX_ADC1_Init+0x9c>)
 800113e:	2200      	movs	r2, #0
 8001140:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001144:	4b0f      	ldr	r3, [pc, #60]	; (8001184 <MX_ADC1_Init+0x9c>)
 8001146:	2201      	movs	r2, #1
 8001148:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800114a:	480e      	ldr	r0, [pc, #56]	; (8001184 <MX_ADC1_Init+0x9c>)
 800114c:	f000 feee 	bl	8001f2c <HAL_ADC_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001156:	f000 fc35 	bl	80019c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800115a:	2304      	movs	r3, #4
 800115c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800115e:	2301      	movs	r3, #1
 8001160:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001162:	2300      	movs	r3, #0
 8001164:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001166:	463b      	mov	r3, r7
 8001168:	4619      	mov	r1, r3
 800116a:	4806      	ldr	r0, [pc, #24]	; (8001184 <MX_ADC1_Init+0x9c>)
 800116c:	f001 f8a2 	bl	80022b4 <HAL_ADC_ConfigChannel>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001176:	f000 fc25 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800117a:	bf00      	nop
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	2000031c 	.word	0x2000031c
 8001188:	40012000 	.word	0x40012000
 800118c:	0f000001 	.word	0x0f000001

08001190 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001196:	f107 0308 	add.w	r3, r7, #8
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a4:	463b      	mov	r3, r7
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011ac:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <MX_TIM2_Init+0x94>)
 80011ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47999;
 80011b4:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <MX_TIM2_Init+0x94>)
 80011b6:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 80011ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011bc:	4b19      	ldr	r3, [pc, #100]	; (8001224 <MX_TIM2_Init+0x94>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3599999;
 80011c2:	4b18      	ldr	r3, [pc, #96]	; (8001224 <MX_TIM2_Init+0x94>)
 80011c4:	4a18      	ldr	r2, [pc, #96]	; (8001228 <MX_TIM2_Init+0x98>)
 80011c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c8:	4b16      	ldr	r3, [pc, #88]	; (8001224 <MX_TIM2_Init+0x94>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <MX_TIM2_Init+0x94>)
 80011d0:	2280      	movs	r2, #128	; 0x80
 80011d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011d4:	4813      	ldr	r0, [pc, #76]	; (8001224 <MX_TIM2_Init+0x94>)
 80011d6:	f003 fc69 	bl	8004aac <HAL_TIM_Base_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011e0:	f000 fbf0 	bl	80019c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011ea:	f107 0308 	add.w	r3, r7, #8
 80011ee:	4619      	mov	r1, r3
 80011f0:	480c      	ldr	r0, [pc, #48]	; (8001224 <MX_TIM2_Init+0x94>)
 80011f2:	f003 fe9e 	bl	8004f32 <HAL_TIM_ConfigClockSource>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80011fc:	f000 fbe2 	bl	80019c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001200:	2300      	movs	r3, #0
 8001202:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001204:	2300      	movs	r3, #0
 8001206:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001208:	463b      	mov	r3, r7
 800120a:	4619      	mov	r1, r3
 800120c:	4805      	ldr	r0, [pc, #20]	; (8001224 <MX_TIM2_Init+0x94>)
 800120e:	f004 f899 	bl	8005344 <HAL_TIMEx_MasterConfigSynchronization>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001218:	f000 fbd4 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800121c:	bf00      	nop
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000364 	.word	0x20000364
 8001228:	0036ee7f 	.word	0x0036ee7f

0800122c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001232:	f107 0308 	add.w	r3, r7, #8
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001240:	463b      	mov	r3, r7
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001248:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <MX_TIM3_Init+0x94>)
 800124a:	4a1e      	ldr	r2, [pc, #120]	; (80012c4 <MX_TIM3_Init+0x98>)
 800124c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47999;
 800124e:	4b1c      	ldr	r3, [pc, #112]	; (80012c0 <MX_TIM3_Init+0x94>)
 8001250:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8001254:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001256:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <MX_TIM3_Init+0x94>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 800125c:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <MX_TIM3_Init+0x94>)
 800125e:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001262:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001264:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <MX_TIM3_Init+0x94>)
 8001266:	2200      	movs	r2, #0
 8001268:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <MX_TIM3_Init+0x94>)
 800126c:	2280      	movs	r2, #128	; 0x80
 800126e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001270:	4813      	ldr	r0, [pc, #76]	; (80012c0 <MX_TIM3_Init+0x94>)
 8001272:	f003 fc1b 	bl	8004aac <HAL_TIM_Base_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800127c:	f000 fba2 	bl	80019c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001280:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001284:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001286:	f107 0308 	add.w	r3, r7, #8
 800128a:	4619      	mov	r1, r3
 800128c:	480c      	ldr	r0, [pc, #48]	; (80012c0 <MX_TIM3_Init+0x94>)
 800128e:	f003 fe50 	bl	8004f32 <HAL_TIM_ConfigClockSource>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001298:	f000 fb94 	bl	80019c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800129c:	2300      	movs	r3, #0
 800129e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012a4:	463b      	mov	r3, r7
 80012a6:	4619      	mov	r1, r3
 80012a8:	4805      	ldr	r0, [pc, #20]	; (80012c0 <MX_TIM3_Init+0x94>)
 80012aa:	f004 f84b 	bl	8005344 <HAL_TIMEx_MasterConfigSynchronization>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80012b4:	f000 fb86 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012b8:	bf00      	nop
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	200003ac 	.word	0x200003ac
 80012c4:	40000400 	.word	0x40000400

080012c8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ce:	f107 0308 	add.w	r3, r7, #8
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012dc:	463b      	mov	r3, r7
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80012e4:	4b1d      	ldr	r3, [pc, #116]	; (800135c <MX_TIM5_Init+0x94>)
 80012e6:	4a1e      	ldr	r2, [pc, #120]	; (8001360 <MX_TIM5_Init+0x98>)
 80012e8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 48-1;
 80012ea:	4b1c      	ldr	r3, [pc, #112]	; (800135c <MX_TIM5_Init+0x94>)
 80012ec:	222f      	movs	r2, #47	; 0x2f
 80012ee:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f0:	4b1a      	ldr	r3, [pc, #104]	; (800135c <MX_TIM5_Init+0x94>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xffff-1;
 80012f6:	4b19      	ldr	r3, [pc, #100]	; (800135c <MX_TIM5_Init+0x94>)
 80012f8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80012fc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fe:	4b17      	ldr	r3, [pc, #92]	; (800135c <MX_TIM5_Init+0x94>)
 8001300:	2200      	movs	r2, #0
 8001302:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001304:	4b15      	ldr	r3, [pc, #84]	; (800135c <MX_TIM5_Init+0x94>)
 8001306:	2200      	movs	r2, #0
 8001308:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800130a:	4814      	ldr	r0, [pc, #80]	; (800135c <MX_TIM5_Init+0x94>)
 800130c:	f003 fbce 	bl	8004aac <HAL_TIM_Base_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001316:	f000 fb55 	bl	80019c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800131a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800131e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001320:	f107 0308 	add.w	r3, r7, #8
 8001324:	4619      	mov	r1, r3
 8001326:	480d      	ldr	r0, [pc, #52]	; (800135c <MX_TIM5_Init+0x94>)
 8001328:	f003 fe03 	bl	8004f32 <HAL_TIM_ConfigClockSource>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001332:	f000 fb47 	bl	80019c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001336:	2300      	movs	r3, #0
 8001338:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800133a:	2300      	movs	r3, #0
 800133c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800133e:	463b      	mov	r3, r7
 8001340:	4619      	mov	r1, r3
 8001342:	4806      	ldr	r0, [pc, #24]	; (800135c <MX_TIM5_Init+0x94>)
 8001344:	f003 fffe 	bl	8005344 <HAL_TIMEx_MasterConfigSynchronization>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800134e:	f000 fb39 	bl	80019c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200003f4 	.word	0x200003f4
 8001360:	40000c00 	.word	0x40000c00

08001364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08a      	sub	sp, #40	; 0x28
 8001368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]
 800137e:	4b32      	ldr	r3, [pc, #200]	; (8001448 <MX_GPIO_Init+0xe4>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a31      	ldr	r2, [pc, #196]	; (8001448 <MX_GPIO_Init+0xe4>)
 8001384:	f043 0304 	orr.w	r3, r3, #4
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b2f      	ldr	r3, [pc, #188]	; (8001448 <MX_GPIO_Init+0xe4>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0304 	and.w	r3, r3, #4
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	4b2b      	ldr	r3, [pc, #172]	; (8001448 <MX_GPIO_Init+0xe4>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a2a      	ldr	r2, [pc, #168]	; (8001448 <MX_GPIO_Init+0xe4>)
 80013a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
 80013a6:	4b28      	ldr	r3, [pc, #160]	; (8001448 <MX_GPIO_Init+0xe4>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	4b24      	ldr	r3, [pc, #144]	; (8001448 <MX_GPIO_Init+0xe4>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a23      	ldr	r2, [pc, #140]	; (8001448 <MX_GPIO_Init+0xe4>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b21      	ldr	r3, [pc, #132]	; (8001448 <MX_GPIO_Init+0xe4>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	4b1d      	ldr	r3, [pc, #116]	; (8001448 <MX_GPIO_Init+0xe4>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a1c      	ldr	r2, [pc, #112]	; (8001448 <MX_GPIO_Init+0xe4>)
 80013d8:	f043 0308 	orr.w	r3, r3, #8
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b1a      	ldr	r3, [pc, #104]	; (8001448 <MX_GPIO_Init+0xe4>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0308 	and.w	r3, r3, #8
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 80013ea:	2200      	movs	r2, #0
 80013ec:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 80013f0:	4816      	ldr	r0, [pc, #88]	; (800144c <MX_GPIO_Init+0xe8>)
 80013f2:	f001 fc3b 	bl	8002c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013f6:	2301      	movs	r3, #1
 80013f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	4619      	mov	r1, r3
 800140a:	4811      	ldr	r0, [pc, #68]	; (8001450 <MX_GPIO_Init+0xec>)
 800140c:	f001 fa92 	bl	8002934 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001410:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001414:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001416:	2301      	movs	r3, #1
 8001418:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141e:	2300      	movs	r3, #0
 8001420:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001422:	f107 0314 	add.w	r3, r7, #20
 8001426:	4619      	mov	r1, r3
 8001428:	4808      	ldr	r0, [pc, #32]	; (800144c <MX_GPIO_Init+0xe8>)
 800142a:	f001 fa83 	bl	8002934 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800142e:	2200      	movs	r2, #0
 8001430:	2100      	movs	r1, #0
 8001432:	2006      	movs	r0, #6
 8001434:	f001 fa47 	bl	80028c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001438:	2006      	movs	r0, #6
 800143a:	f001 fa60 	bl	80028fe <HAL_NVIC_EnableIRQ>

}
 800143e:	bf00      	nop
 8001440:	3728      	adds	r7, #40	; 0x28
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40023800 	.word	0x40023800
 800144c:	40020c00 	.word	0x40020c00
 8001450:	40020000 	.word	0x40020000

08001454 <MedirSensores>:

/* USER CODE BEGIN 4 */

void MedirSensores(){
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
	//DATOS DE LUZ
	HAL_ADC_Start(&hadc1);
 8001458:	480a      	ldr	r0, [pc, #40]	; (8001484 <MedirSensores+0x30>)
 800145a:	f000 fdab 	bl	8001fb4 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK)
 800145e:	2164      	movs	r1, #100	; 0x64
 8001460:	4808      	ldr	r0, [pc, #32]	; (8001484 <MedirSensores+0x30>)
 8001462:	f000 fe8e 	bl	8002182 <HAL_ADC_PollForConversion>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d106      	bne.n	800147a <MedirSensores+0x26>
	{
	ADC_val = HAL_ADC_GetValue(&hadc1);
 800146c:	4805      	ldr	r0, [pc, #20]	; (8001484 <MedirSensores+0x30>)
 800146e:	f000 ff13 	bl	8002298 <HAL_ADC_GetValue>
 8001472:	4603      	mov	r3, r0
 8001474:	b2da      	uxtb	r2, r3
 8001476:	4b04      	ldr	r3, [pc, #16]	; (8001488 <MedirSensores+0x34>)
 8001478:	701a      	strb	r2, [r3, #0]
	}
	HAL_ADC_Stop(&hadc1);
 800147a:	4802      	ldr	r0, [pc, #8]	; (8001484 <MedirSensores+0x30>)
 800147c:	f000 fe4e 	bl	800211c <HAL_ADC_Stop>
//	TEMP = Temp_byte1;
//	RH = Rh_byte1;
//
//	Temperature = (float) TEMP;
//	Humidity = (float) RH;
}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	2000031c 	.word	0x2000031c
 8001488:	2000043c 	.word	0x2000043c

0800148c <state_machine_init>:

void state_machine_init(void){
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
	displayModo(ESPERA);
 8001490:	2000      	movs	r0, #0
 8001492:	f7ff fd2f 	bl	8000ef4 <displayModo>
	Current_State = ESPERA;
 8001496:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <state_machine_init+0x1c>)
 8001498:	2200      	movs	r2, #0
 800149a:	701a      	strb	r2, [r3, #0]
	btn_pressed = 0;
 800149c:	4b03      	ldr	r3, [pc, #12]	; (80014ac <state_machine_init+0x20>)
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000498 	.word	0x20000498
 80014ac:	2000049c 	.word	0x2000049c

080014b0 <ESPERA_function>:
void ESPERA_function(void){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
	char *s  = strstr((char*)buffer,str_CAMBIAR_A_MODO);
 80014b6:	4b2d      	ldr	r3, [pc, #180]	; (800156c <ESPERA_function+0xbc>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4619      	mov	r1, r3
 80014bc:	482c      	ldr	r0, [pc, #176]	; (8001570 <ESPERA_function+0xc0>)
 80014be:	f008 fdad 	bl	800a01c <strstr>
 80014c2:	60f8      	str	r0, [r7, #12]
	char *sH = strstr((char*)buffer,str_HORARIO);
 80014c4:	4b2b      	ldr	r3, [pc, #172]	; (8001574 <ESPERA_function+0xc4>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4619      	mov	r1, r3
 80014ca:	4829      	ldr	r0, [pc, #164]	; (8001570 <ESPERA_function+0xc0>)
 80014cc:	f008 fda6 	bl	800a01c <strstr>
 80014d0:	60b8      	str	r0, [r7, #8]
	char *sM = strstr((char*)buffer,str_MANUAL);
 80014d2:	4b29      	ldr	r3, [pc, #164]	; (8001578 <ESPERA_function+0xc8>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4619      	mov	r1, r3
 80014d8:	4825      	ldr	r0, [pc, #148]	; (8001570 <ESPERA_function+0xc0>)
 80014da:	f008 fd9f 	bl	800a01c <strstr>
 80014de:	6078      	str	r0, [r7, #4]
	char *sA = strstr((char*)buffer,str_AUTOMATICO);
 80014e0:	4b26      	ldr	r3, [pc, #152]	; (800157c <ESPERA_function+0xcc>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4619      	mov	r1, r3
 80014e6:	4822      	ldr	r0, [pc, #136]	; (8001570 <ESPERA_function+0xc0>)
 80014e8:	f008 fd98 	bl	800a01c <strstr>
 80014ec:	6038      	str	r0, [r7, #0]
	//Funcionamiento del modo ESPERA
	//
	if(btn_pressed == 1){
 80014ee:	4b24      	ldr	r3, [pc, #144]	; (8001580 <ESPERA_function+0xd0>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d10c      	bne.n	8001510 <ESPERA_function+0x60>
		btn_pressed = 0;
 80014f6:	4b22      	ldr	r3, [pc, #136]	; (8001580 <ESPERA_function+0xd0>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
		displayModo(MANUAL);
 80014fc:	2001      	movs	r0, #1
 80014fe:	f7ff fcf9 	bl	8000ef4 <displayModo>
		buffer[0] = '\0';
 8001502:	4b1b      	ldr	r3, [pc, #108]	; (8001570 <ESPERA_function+0xc0>)
 8001504:	2200      	movs	r2, #0
 8001506:	701a      	strb	r2, [r3, #0]
		Current_State = MANUAL;
 8001508:	4b1e      	ldr	r3, [pc, #120]	; (8001584 <ESPERA_function+0xd4>)
 800150a:	2201      	movs	r2, #1
 800150c:	701a      	strb	r2, [r3, #0]
			displayModo(AUTOMATICO);
			buffer[0] = '\0';
			Current_State = AUTOMATICO;
		}
	}
}
 800150e:	e028      	b.n	8001562 <ESPERA_function+0xb2>
	else if(s != NULL){
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d025      	beq.n	8001562 <ESPERA_function+0xb2>
		if(sH != NULL){
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d009      	beq.n	8001530 <ESPERA_function+0x80>
			displayModo(HORARIO);
 800151c:	2002      	movs	r0, #2
 800151e:	f7ff fce9 	bl	8000ef4 <displayModo>
			buffer[0] = '\0';
 8001522:	4b13      	ldr	r3, [pc, #76]	; (8001570 <ESPERA_function+0xc0>)
 8001524:	2200      	movs	r2, #0
 8001526:	701a      	strb	r2, [r3, #0]
			Current_State = HORARIO;
 8001528:	4b16      	ldr	r3, [pc, #88]	; (8001584 <ESPERA_function+0xd4>)
 800152a:	2202      	movs	r2, #2
 800152c:	701a      	strb	r2, [r3, #0]
}
 800152e:	e018      	b.n	8001562 <ESPERA_function+0xb2>
		else if(sM != NULL){
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d009      	beq.n	800154a <ESPERA_function+0x9a>
			displayModo(MANUAL);
 8001536:	2001      	movs	r0, #1
 8001538:	f7ff fcdc 	bl	8000ef4 <displayModo>
			buffer[0] = '\0';
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <ESPERA_function+0xc0>)
 800153e:	2200      	movs	r2, #0
 8001540:	701a      	strb	r2, [r3, #0]
			Current_State = MANUAL;
 8001542:	4b10      	ldr	r3, [pc, #64]	; (8001584 <ESPERA_function+0xd4>)
 8001544:	2201      	movs	r2, #1
 8001546:	701a      	strb	r2, [r3, #0]
}
 8001548:	e00b      	b.n	8001562 <ESPERA_function+0xb2>
		else if(sA != NULL){
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d008      	beq.n	8001562 <ESPERA_function+0xb2>
			displayModo(AUTOMATICO);
 8001550:	2003      	movs	r0, #3
 8001552:	f7ff fccf 	bl	8000ef4 <displayModo>
			buffer[0] = '\0';
 8001556:	4b06      	ldr	r3, [pc, #24]	; (8001570 <ESPERA_function+0xc0>)
 8001558:	2200      	movs	r2, #0
 800155a:	701a      	strb	r2, [r3, #0]
			Current_State = AUTOMATICO;
 800155c:	4b09      	ldr	r3, [pc, #36]	; (8001584 <ESPERA_function+0xd4>)
 800155e:	2203      	movs	r2, #3
 8001560:	701a      	strb	r2, [r3, #0]
}
 8001562:	bf00      	nop
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000000 	.word	0x20000000
 8001570:	20000454 	.word	0x20000454
 8001574:	2000000c 	.word	0x2000000c
 8001578:	20000008 	.word	0x20000008
 800157c:	20000010 	.word	0x20000010
 8001580:	2000049c 	.word	0x2000049c
 8001584:	20000498 	.word	0x20000498

08001588 <MANUAL_function>:
void MANUAL_function(void){
 8001588:	b580      	push	{r7, lr}
 800158a:	b088      	sub	sp, #32
 800158c:	af00      	add	r7, sp, #0
	char *s     = strstr((char*)buffer,str_CAMBIAR_A_MODO);
 800158e:	4b3f      	ldr	r3, [pc, #252]	; (800168c <MANUAL_function+0x104>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4619      	mov	r1, r3
 8001594:	483e      	ldr	r0, [pc, #248]	; (8001690 <MANUAL_function+0x108>)
 8001596:	f008 fd41 	bl	800a01c <strstr>
 800159a:	61f8      	str	r0, [r7, #28]
	char *sE    = strstr((char*)buffer,str_ESPERA);
 800159c:	4b3d      	ldr	r3, [pc, #244]	; (8001694 <MANUAL_function+0x10c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4619      	mov	r1, r3
 80015a2:	483b      	ldr	r0, [pc, #236]	; (8001690 <MANUAL_function+0x108>)
 80015a4:	f008 fd3a 	bl	800a01c <strstr>
 80015a8:	61b8      	str	r0, [r7, #24]
	char *sH    = strstr((char*)buffer,str_HORARIO);
 80015aa:	4b3b      	ldr	r3, [pc, #236]	; (8001698 <MANUAL_function+0x110>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4619      	mov	r1, r3
 80015b0:	4837      	ldr	r0, [pc, #220]	; (8001690 <MANUAL_function+0x108>)
 80015b2:	f008 fd33 	bl	800a01c <strstr>
 80015b6:	6178      	str	r0, [r7, #20]
	char *sA    = strstr((char*)buffer,str_AUTOMATICO);
 80015b8:	4b38      	ldr	r3, [pc, #224]	; (800169c <MANUAL_function+0x114>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4619      	mov	r1, r3
 80015be:	4834      	ldr	r0, [pc, #208]	; (8001690 <MANUAL_function+0x108>)
 80015c0:	f008 fd2c 	bl	800a01c <strstr>
 80015c4:	6138      	str	r0, [r7, #16]
	char *s_ON  = strstr((char*)buffer,str_ENCENDER_POR);
 80015c6:	4b36      	ldr	r3, [pc, #216]	; (80016a0 <MANUAL_function+0x118>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4619      	mov	r1, r3
 80015cc:	4830      	ldr	r0, [pc, #192]	; (8001690 <MANUAL_function+0x108>)
 80015ce:	f008 fd25 	bl	800a01c <strstr>
 80015d2:	60f8      	str	r0, [r7, #12]
	//Funcionamiento del modo MANUAL
	if(s_ON != NULL){
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d012      	beq.n	8001600 <MANUAL_function+0x78>
		char arr_tiempo[2] = {buffer[13],buffer[14]};
 80015da:	4b2d      	ldr	r3, [pc, #180]	; (8001690 <MANUAL_function+0x108>)
 80015dc:	7b5b      	ldrb	r3, [r3, #13]
 80015de:	713b      	strb	r3, [r7, #4]
 80015e0:	4b2b      	ldr	r3, [pc, #172]	; (8001690 <MANUAL_function+0x108>)
 80015e2:	7b9b      	ldrb	r3, [r3, #14]
 80015e4:	717b      	strb	r3, [r7, #5]
		int tiempo = atoi(arr_tiempo);
 80015e6:	1d3b      	adds	r3, r7, #4
 80015e8:	4618      	mov	r0, r3
 80015ea:	f008 f869 	bl	80096c0 <atoi>
 80015ee:	60b8      	str	r0, [r7, #8]
		TemporizadorMinutos(tiempo);
 80015f0:	68b8      	ldr	r0, [r7, #8]
 80015f2:	f7ff fc63 	bl	8000ebc <TemporizadorMinutos>
		memset(&buffer[0], 0, sizeof(buffer));
 80015f6:	2240      	movs	r2, #64	; 0x40
 80015f8:	2100      	movs	r1, #0
 80015fa:	4825      	ldr	r0, [pc, #148]	; (8001690 <MANUAL_function+0x108>)
 80015fc:	f008 f89c 	bl	8009738 <memset>
	}
	if(contando == 1){
 8001600:	4b28      	ldr	r3, [pc, #160]	; (80016a4 <MANUAL_function+0x11c>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d102      	bne.n	800160e <MANUAL_function+0x86>
		Current_State = ENCENDIDO;
 8001608:	4b27      	ldr	r3, [pc, #156]	; (80016a8 <MANUAL_function+0x120>)
 800160a:	2204      	movs	r2, #4
 800160c:	701a      	strb	r2, [r3, #0]
	}
	//
	if(btn_pressed == 1){
 800160e:	4b27      	ldr	r3, [pc, #156]	; (80016ac <MANUAL_function+0x124>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d10c      	bne.n	8001630 <MANUAL_function+0xa8>
		btn_pressed = 0;
 8001616:	4b25      	ldr	r3, [pc, #148]	; (80016ac <MANUAL_function+0x124>)
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
		displayModo(HORARIO);
 800161c:	2002      	movs	r0, #2
 800161e:	f7ff fc69 	bl	8000ef4 <displayModo>
		buffer[0] = '\0';
 8001622:	4b1b      	ldr	r3, [pc, #108]	; (8001690 <MANUAL_function+0x108>)
 8001624:	2200      	movs	r2, #0
 8001626:	701a      	strb	r2, [r3, #0]
		Current_State = HORARIO;
 8001628:	4b1f      	ldr	r3, [pc, #124]	; (80016a8 <MANUAL_function+0x120>)
 800162a:	2202      	movs	r2, #2
 800162c:	701a      	strb	r2, [r3, #0]
			displayModo(AUTOMATICO);
			buffer[0] = '\0';
			Current_State = AUTOMATICO;
		}
	}
}
 800162e:	e028      	b.n	8001682 <MANUAL_function+0xfa>
	else if(s != NULL){
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d025      	beq.n	8001682 <MANUAL_function+0xfa>
		if(sH != NULL){
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d009      	beq.n	8001650 <MANUAL_function+0xc8>
			displayModo(HORARIO);
 800163c:	2002      	movs	r0, #2
 800163e:	f7ff fc59 	bl	8000ef4 <displayModo>
			buffer[0] = '\0';
 8001642:	4b13      	ldr	r3, [pc, #76]	; (8001690 <MANUAL_function+0x108>)
 8001644:	2200      	movs	r2, #0
 8001646:	701a      	strb	r2, [r3, #0]
			Current_State = HORARIO;
 8001648:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <MANUAL_function+0x120>)
 800164a:	2202      	movs	r2, #2
 800164c:	701a      	strb	r2, [r3, #0]
}
 800164e:	e018      	b.n	8001682 <MANUAL_function+0xfa>
		else if(sE != NULL){
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d009      	beq.n	800166a <MANUAL_function+0xe2>
			displayModo(ESPERA);
 8001656:	2000      	movs	r0, #0
 8001658:	f7ff fc4c 	bl	8000ef4 <displayModo>
			buffer[0] = '\0';
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <MANUAL_function+0x108>)
 800165e:	2200      	movs	r2, #0
 8001660:	701a      	strb	r2, [r3, #0]
			Current_State = ESPERA;
 8001662:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <MANUAL_function+0x120>)
 8001664:	2200      	movs	r2, #0
 8001666:	701a      	strb	r2, [r3, #0]
}
 8001668:	e00b      	b.n	8001682 <MANUAL_function+0xfa>
		else if(sA != NULL){
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d008      	beq.n	8001682 <MANUAL_function+0xfa>
			displayModo(AUTOMATICO);
 8001670:	2003      	movs	r0, #3
 8001672:	f7ff fc3f 	bl	8000ef4 <displayModo>
			buffer[0] = '\0';
 8001676:	4b06      	ldr	r3, [pc, #24]	; (8001690 <MANUAL_function+0x108>)
 8001678:	2200      	movs	r2, #0
 800167a:	701a      	strb	r2, [r3, #0]
			Current_State = AUTOMATICO;
 800167c:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <MANUAL_function+0x120>)
 800167e:	2203      	movs	r2, #3
 8001680:	701a      	strb	r2, [r3, #0]
}
 8001682:	bf00      	nop
 8001684:	3720      	adds	r7, #32
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	20000000 	.word	0x20000000
 8001690:	20000454 	.word	0x20000454
 8001694:	20000004 	.word	0x20000004
 8001698:	2000000c 	.word	0x2000000c
 800169c:	20000010 	.word	0x20000010
 80016a0:	20000014 	.word	0x20000014
 80016a4:	20000450 	.word	0x20000450
 80016a8:	20000498 	.word	0x20000498
 80016ac:	2000049c 	.word	0x2000049c

080016b0 <HORARIO_function>:
void HORARIO_function(void){
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
	char *s  = strstr((char*)buffer,str_CAMBIAR_A_MODO);
 80016b6:	4b2d      	ldr	r3, [pc, #180]	; (800176c <HORARIO_function+0xbc>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4619      	mov	r1, r3
 80016bc:	482c      	ldr	r0, [pc, #176]	; (8001770 <HORARIO_function+0xc0>)
 80016be:	f008 fcad 	bl	800a01c <strstr>
 80016c2:	60f8      	str	r0, [r7, #12]
	char *sE = strstr((char*)buffer,str_ESPERA);
 80016c4:	4b2b      	ldr	r3, [pc, #172]	; (8001774 <HORARIO_function+0xc4>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4619      	mov	r1, r3
 80016ca:	4829      	ldr	r0, [pc, #164]	; (8001770 <HORARIO_function+0xc0>)
 80016cc:	f008 fca6 	bl	800a01c <strstr>
 80016d0:	60b8      	str	r0, [r7, #8]
	char *sM = strstr((char*)buffer,str_MANUAL);
 80016d2:	4b29      	ldr	r3, [pc, #164]	; (8001778 <HORARIO_function+0xc8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4619      	mov	r1, r3
 80016d8:	4825      	ldr	r0, [pc, #148]	; (8001770 <HORARIO_function+0xc0>)
 80016da:	f008 fc9f 	bl	800a01c <strstr>
 80016de:	6078      	str	r0, [r7, #4]
	char *sA = strstr((char*)buffer,str_AUTOMATICO);
 80016e0:	4b26      	ldr	r3, [pc, #152]	; (800177c <HORARIO_function+0xcc>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4619      	mov	r1, r3
 80016e6:	4822      	ldr	r0, [pc, #136]	; (8001770 <HORARIO_function+0xc0>)
 80016e8:	f008 fc98 	bl	800a01c <strstr>
 80016ec:	6038      	str	r0, [r7, #0]
	//Funcionamiento del modo horario

	//
	if(btn_pressed == 1){
 80016ee:	4b24      	ldr	r3, [pc, #144]	; (8001780 <HORARIO_function+0xd0>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d10c      	bne.n	8001710 <HORARIO_function+0x60>
		btn_pressed = 0;
 80016f6:	4b22      	ldr	r3, [pc, #136]	; (8001780 <HORARIO_function+0xd0>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
		displayModo(AUTOMATICO);
 80016fc:	2003      	movs	r0, #3
 80016fe:	f7ff fbf9 	bl	8000ef4 <displayModo>
		buffer[0] = '\0';
 8001702:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <HORARIO_function+0xc0>)
 8001704:	2200      	movs	r2, #0
 8001706:	701a      	strb	r2, [r3, #0]
		Current_State = AUTOMATICO;
 8001708:	4b1e      	ldr	r3, [pc, #120]	; (8001784 <HORARIO_function+0xd4>)
 800170a:	2203      	movs	r2, #3
 800170c:	701a      	strb	r2, [r3, #0]
			displayModo(AUTOMATICO);
			buffer[0] = '\0';
			Current_State = AUTOMATICO;
		}
	}
}
 800170e:	e028      	b.n	8001762 <HORARIO_function+0xb2>
	else if(s != NULL){
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d025      	beq.n	8001762 <HORARIO_function+0xb2>
		if(sM != NULL){
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d009      	beq.n	8001730 <HORARIO_function+0x80>
			displayModo(MANUAL);
 800171c:	2001      	movs	r0, #1
 800171e:	f7ff fbe9 	bl	8000ef4 <displayModo>
			buffer[0] = '\0';
 8001722:	4b13      	ldr	r3, [pc, #76]	; (8001770 <HORARIO_function+0xc0>)
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]
			Current_State = MANUAL;
 8001728:	4b16      	ldr	r3, [pc, #88]	; (8001784 <HORARIO_function+0xd4>)
 800172a:	2201      	movs	r2, #1
 800172c:	701a      	strb	r2, [r3, #0]
}
 800172e:	e018      	b.n	8001762 <HORARIO_function+0xb2>
		else if(sE != NULL){
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d009      	beq.n	800174a <HORARIO_function+0x9a>
			displayModo(ESPERA);
 8001736:	2000      	movs	r0, #0
 8001738:	f7ff fbdc 	bl	8000ef4 <displayModo>
			buffer[0] = '\0';
 800173c:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <HORARIO_function+0xc0>)
 800173e:	2200      	movs	r2, #0
 8001740:	701a      	strb	r2, [r3, #0]
			Current_State = ESPERA;
 8001742:	4b10      	ldr	r3, [pc, #64]	; (8001784 <HORARIO_function+0xd4>)
 8001744:	2200      	movs	r2, #0
 8001746:	701a      	strb	r2, [r3, #0]
}
 8001748:	e00b      	b.n	8001762 <HORARIO_function+0xb2>
		else if(sA != NULL){
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d008      	beq.n	8001762 <HORARIO_function+0xb2>
			displayModo(AUTOMATICO);
 8001750:	2003      	movs	r0, #3
 8001752:	f7ff fbcf 	bl	8000ef4 <displayModo>
			buffer[0] = '\0';
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HORARIO_function+0xc0>)
 8001758:	2200      	movs	r2, #0
 800175a:	701a      	strb	r2, [r3, #0]
			Current_State = AUTOMATICO;
 800175c:	4b09      	ldr	r3, [pc, #36]	; (8001784 <HORARIO_function+0xd4>)
 800175e:	2203      	movs	r2, #3
 8001760:	701a      	strb	r2, [r3, #0]
}
 8001762:	bf00      	nop
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000000 	.word	0x20000000
 8001770:	20000454 	.word	0x20000454
 8001774:	20000004 	.word	0x20000004
 8001778:	20000008 	.word	0x20000008
 800177c:	20000010 	.word	0x20000010
 8001780:	2000049c 	.word	0x2000049c
 8001784:	20000498 	.word	0x20000498

08001788 <AUTOMATICO_function>:

void AUTOMATICO_function(void){
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
	char *s  = strstr((char*)buffer,str_CAMBIAR_A_MODO);
 800178e:	4b2e      	ldr	r3, [pc, #184]	; (8001848 <AUTOMATICO_function+0xc0>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4619      	mov	r1, r3
 8001794:	482d      	ldr	r0, [pc, #180]	; (800184c <AUTOMATICO_function+0xc4>)
 8001796:	f008 fc41 	bl	800a01c <strstr>
 800179a:	60f8      	str	r0, [r7, #12]
	char *sE = strstr((char*)buffer,str_ESPERA);
 800179c:	4b2c      	ldr	r3, [pc, #176]	; (8001850 <AUTOMATICO_function+0xc8>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4619      	mov	r1, r3
 80017a2:	482a      	ldr	r0, [pc, #168]	; (800184c <AUTOMATICO_function+0xc4>)
 80017a4:	f008 fc3a 	bl	800a01c <strstr>
 80017a8:	60b8      	str	r0, [r7, #8]
	char *sM = strstr((char*)buffer,str_MANUAL);
 80017aa:	4b2a      	ldr	r3, [pc, #168]	; (8001854 <AUTOMATICO_function+0xcc>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4619      	mov	r1, r3
 80017b0:	4826      	ldr	r0, [pc, #152]	; (800184c <AUTOMATICO_function+0xc4>)
 80017b2:	f008 fc33 	bl	800a01c <strstr>
 80017b6:	6078      	str	r0, [r7, #4]
	char *sH = strstr((char*)buffer,str_HORARIO);
 80017b8:	4b27      	ldr	r3, [pc, #156]	; (8001858 <AUTOMATICO_function+0xd0>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4619      	mov	r1, r3
 80017be:	4823      	ldr	r0, [pc, #140]	; (800184c <AUTOMATICO_function+0xc4>)
 80017c0:	f008 fc2c 	bl	800a01c <strstr>
 80017c4:	6038      	str	r0, [r7, #0]
	//Funcionamiento del modo automático
	MedirSensores();
 80017c6:	f7ff fe45 	bl	8001454 <MedirSensores>
	//MOSTRAR LOS DATOS
	//
	if(btn_pressed == 1){
 80017ca:	4b24      	ldr	r3, [pc, #144]	; (800185c <AUTOMATICO_function+0xd4>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d10c      	bne.n	80017ec <AUTOMATICO_function+0x64>
		btn_pressed = 0;
 80017d2:	4b22      	ldr	r3, [pc, #136]	; (800185c <AUTOMATICO_function+0xd4>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
		displayModo(ESPERA);
 80017d8:	2000      	movs	r0, #0
 80017da:	f7ff fb8b 	bl	8000ef4 <displayModo>
		buffer[0] = '\0';
 80017de:	4b1b      	ldr	r3, [pc, #108]	; (800184c <AUTOMATICO_function+0xc4>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]
		Current_State = ESPERA;
 80017e4:	4b1e      	ldr	r3, [pc, #120]	; (8001860 <AUTOMATICO_function+0xd8>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	701a      	strb	r2, [r3, #0]
			displayModo(HORARIO);
			buffer[0] = '\0';
			Current_State = HORARIO;
		}
	}
}
 80017ea:	e028      	b.n	800183e <AUTOMATICO_function+0xb6>
	else if(s != NULL){
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d025      	beq.n	800183e <AUTOMATICO_function+0xb6>
		if(sM != NULL){
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d009      	beq.n	800180c <AUTOMATICO_function+0x84>
			displayModo(MANUAL);
 80017f8:	2001      	movs	r0, #1
 80017fa:	f7ff fb7b 	bl	8000ef4 <displayModo>
			buffer[0] = '\0';
 80017fe:	4b13      	ldr	r3, [pc, #76]	; (800184c <AUTOMATICO_function+0xc4>)
 8001800:	2200      	movs	r2, #0
 8001802:	701a      	strb	r2, [r3, #0]
			Current_State = MANUAL;
 8001804:	4b16      	ldr	r3, [pc, #88]	; (8001860 <AUTOMATICO_function+0xd8>)
 8001806:	2201      	movs	r2, #1
 8001808:	701a      	strb	r2, [r3, #0]
}
 800180a:	e018      	b.n	800183e <AUTOMATICO_function+0xb6>
		else if(sE != NULL){
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d009      	beq.n	8001826 <AUTOMATICO_function+0x9e>
			displayModo(ESPERA);
 8001812:	2000      	movs	r0, #0
 8001814:	f7ff fb6e 	bl	8000ef4 <displayModo>
			buffer[0] = '\0';
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <AUTOMATICO_function+0xc4>)
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]
			Current_State = ESPERA;
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <AUTOMATICO_function+0xd8>)
 8001820:	2200      	movs	r2, #0
 8001822:	701a      	strb	r2, [r3, #0]
}
 8001824:	e00b      	b.n	800183e <AUTOMATICO_function+0xb6>
		else if(sH != NULL){
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d008      	beq.n	800183e <AUTOMATICO_function+0xb6>
			displayModo(HORARIO);
 800182c:	2002      	movs	r0, #2
 800182e:	f7ff fb61 	bl	8000ef4 <displayModo>
			buffer[0] = '\0';
 8001832:	4b06      	ldr	r3, [pc, #24]	; (800184c <AUTOMATICO_function+0xc4>)
 8001834:	2200      	movs	r2, #0
 8001836:	701a      	strb	r2, [r3, #0]
			Current_State = HORARIO;
 8001838:	4b09      	ldr	r3, [pc, #36]	; (8001860 <AUTOMATICO_function+0xd8>)
 800183a:	2202      	movs	r2, #2
 800183c:	701a      	strb	r2, [r3, #0]
}
 800183e:	bf00      	nop
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000000 	.word	0x20000000
 800184c:	20000454 	.word	0x20000454
 8001850:	20000004 	.word	0x20000004
 8001854:	20000008 	.word	0x20000008
 8001858:	2000000c 	.word	0x2000000c
 800185c:	2000049c 	.word	0x2000049c
 8001860:	20000498 	.word	0x20000498

08001864 <ENCENDIDO_function>:

void ENCENDIDO_function(void){
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
	char *s_OFF = strstr((char*)buffer,str_APAGAR);
 800186a:	4b0d      	ldr	r3, [pc, #52]	; (80018a0 <ENCENDIDO_function+0x3c>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4619      	mov	r1, r3
 8001870:	480c      	ldr	r0, [pc, #48]	; (80018a4 <ENCENDIDO_function+0x40>)
 8001872:	f008 fbd3 	bl	800a01c <strstr>
 8001876:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8001878:	2201      	movs	r2, #1
 800187a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800187e:	480a      	ldr	r0, [pc, #40]	; (80018a8 <ENCENDIDO_function+0x44>)
 8001880:	f001 f9f4 	bl	8002c6c <HAL_GPIO_WritePin>
	if(s_OFF != NULL || contando == 0){
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d103      	bne.n	8001892 <ENCENDIDO_function+0x2e>
 800188a:	4b08      	ldr	r3, [pc, #32]	; (80018ac <ENCENDIDO_function+0x48>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d102      	bne.n	8001898 <ENCENDIDO_function+0x34>
		Current_State = APAGADO;
 8001892:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <ENCENDIDO_function+0x4c>)
 8001894:	2205      	movs	r2, #5
 8001896:	701a      	strb	r2, [r3, #0]
	}
}
 8001898:	bf00      	nop
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000018 	.word	0x20000018
 80018a4:	20000454 	.word	0x20000454
 80018a8:	40020c00 	.word	0x40020c00
 80018ac:	20000450 	.word	0x20000450
 80018b0:	20000498 	.word	0x20000498

080018b4 <APAGADO_function>:
void APAGADO_function(void){
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 80018b8:	2200      	movs	r2, #0
 80018ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018be:	4804      	ldr	r0, [pc, #16]	; (80018d0 <APAGADO_function+0x1c>)
 80018c0:	f001 f9d4 	bl	8002c6c <HAL_GPIO_WritePin>
	Current_State = ESPERA;
 80018c4:	4b03      	ldr	r3, [pc, #12]	; (80018d4 <APAGADO_function+0x20>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	701a      	strb	r2, [r3, #0]
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40020c00 	.word	0x40020c00
 80018d4:	20000498 	.word	0x20000498

080018d8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){ //Horas
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018e8:	d113      	bne.n	8001912 <HAL_TIM_PeriodElapsedCallback+0x3a>
		if(horas >= tiempo_hor){
 80018ea:	4b18      	ldr	r3, [pc, #96]	; (800194c <HAL_TIM_PeriodElapsedCallback+0x74>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	4b18      	ldr	r3, [pc, #96]	; (8001950 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	db08      	blt.n	8001908 <HAL_TIM_PeriodElapsedCallback+0x30>
			contando = 0;
 80018f6:	4b17      	ldr	r3, [pc, #92]	; (8001954 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim2);
 80018fc:	4816      	ldr	r0, [pc, #88]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80018fe:	f003 f9e1 	bl	8004cc4 <HAL_TIM_Base_Stop_IT>
			horas = 0;
 8001902:	4b12      	ldr	r3, [pc, #72]	; (800194c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
		}
		horas++;
 8001908:	4b10      	ldr	r3, [pc, #64]	; (800194c <HAL_TIM_PeriodElapsedCallback+0x74>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	3301      	adds	r3, #1
 800190e:	4a0f      	ldr	r2, [pc, #60]	; (800194c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001910:	6013      	str	r3, [r2, #0]
	}
	if(htim->Instance == TIM3){ //Minutos
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a11      	ldr	r2, [pc, #68]	; (800195c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d113      	bne.n	8001944 <HAL_TIM_PeriodElapsedCallback+0x6c>
		if(minutos >= tiempo_min){
 800191c:	4b10      	ldr	r3, [pc, #64]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	4b10      	ldr	r3, [pc, #64]	; (8001964 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	429a      	cmp	r2, r3
 8001926:	db08      	blt.n	800193a <HAL_TIM_PeriodElapsedCallback+0x62>
			contando = 0;
 8001928:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim3);
 800192e:	480e      	ldr	r0, [pc, #56]	; (8001968 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001930:	f003 f9c8 	bl	8004cc4 <HAL_TIM_Base_Stop_IT>
			minutos = 0;
 8001934:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
		}
		minutos++;
 800193a:	4b09      	ldr	r3, [pc, #36]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	3301      	adds	r3, #1
 8001940:	4a07      	ldr	r2, [pc, #28]	; (8001960 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001942:	6013      	str	r3, [r2, #0]
	}
}
 8001944:	bf00      	nop
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20000444 	.word	0x20000444
 8001950:	2000044c 	.word	0x2000044c
 8001954:	20000450 	.word	0x20000450
 8001958:	20000364 	.word	0x20000364
 800195c:	40000400 	.word	0x40000400
 8001960:	20000440 	.word	0x20000440
 8001964:	20000448 	.word	0x20000448
 8001968:	200003ac 	.word	0x200003ac

0800196c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	80fb      	strh	r3, [r7, #6]
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)){};
 8001976:	bf00      	nop
 8001978:	2101      	movs	r1, #1
 800197a:	480f      	ldr	r0, [pc, #60]	; (80019b8 <HAL_GPIO_EXTI_Callback+0x4c>)
 800197c:	f001 f95e 	bl	8002c3c <HAL_GPIO_ReadPin>
 8001980:	4603      	mov	r3, r0
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1f8      	bne.n	8001978 <HAL_GPIO_EXTI_Callback+0xc>
    if (GPIO_Pin == GPIO_PIN_0) // check if the interrupt was triggered by PA0
 8001986:	88fb      	ldrh	r3, [r7, #6]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d111      	bne.n	80019b0 <HAL_GPIO_EXTI_Callback+0x44>
    {
        uint32_t current_time = HAL_GetTick(); // get current time
 800198c:	f000 fa9e 	bl	8001ecc <HAL_GetTick>
 8001990:	60f8      	str	r0, [r7, #12]
        if (current_time < last_interrupt_time + DEBOUNCE_DELAY) // check if the interrupt was triggered within the debounce delay
 8001992:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <HAL_GPIO_EXTI_Callback+0x50>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	3332      	adds	r3, #50	; 0x32
 8001998:	461a      	mov	r2, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	4293      	cmp	r3, r2
 800199e:	d306      	bcc.n	80019ae <HAL_GPIO_EXTI_Callback+0x42>
        {
            return; // ignore interrupt
        }
        last_interrupt_time = current_time; // update last interrupt time
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4a06      	ldr	r2, [pc, #24]	; (80019bc <HAL_GPIO_EXTI_Callback+0x50>)
 80019a4:	6013      	str	r3, [r2, #0]
        btn_pressed = 1;
 80019a6:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <HAL_GPIO_EXTI_Callback+0x54>)
 80019a8:	2201      	movs	r2, #1
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	e000      	b.n	80019b0 <HAL_GPIO_EXTI_Callback+0x44>
            return; // ignore interrupt
 80019ae:	bf00      	nop
    }
}
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40020000 	.word	0x40020000
 80019bc:	20000494 	.word	0x20000494
 80019c0:	2000049c 	.word	0x2000049c

080019c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019c8:	b672      	cpsid	i
}
 80019ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019cc:	e7fe      	b.n	80019cc <Error_Handler+0x8>
	...

080019d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	607b      	str	r3, [r7, #4]
 80019da:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <HAL_MspInit+0x4c>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019de:	4a0f      	ldr	r2, [pc, #60]	; (8001a1c <HAL_MspInit+0x4c>)
 80019e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019e4:	6453      	str	r3, [r2, #68]	; 0x44
 80019e6:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <HAL_MspInit+0x4c>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	603b      	str	r3, [r7, #0]
 80019f6:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <HAL_MspInit+0x4c>)
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	4a08      	ldr	r2, [pc, #32]	; (8001a1c <HAL_MspInit+0x4c>)
 80019fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a00:	6413      	str	r3, [r2, #64]	; 0x40
 8001a02:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <HAL_MspInit+0x4c>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0a:	603b      	str	r3, [r7, #0]
 8001a0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a0e:	2007      	movs	r0, #7
 8001a10:	f000 ff4e 	bl	80028b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a14:	bf00      	nop
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40023800 	.word	0x40023800

08001a20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08a      	sub	sp, #40	; 0x28
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 0314 	add.w	r3, r7, #20
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a17      	ldr	r2, [pc, #92]	; (8001a9c <HAL_ADC_MspInit+0x7c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d127      	bne.n	8001a92 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	4b16      	ldr	r3, [pc, #88]	; (8001aa0 <HAL_ADC_MspInit+0x80>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4a:	4a15      	ldr	r2, [pc, #84]	; (8001aa0 <HAL_ADC_MspInit+0x80>)
 8001a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a50:	6453      	str	r3, [r2, #68]	; 0x44
 8001a52:	4b13      	ldr	r3, [pc, #76]	; (8001aa0 <HAL_ADC_MspInit+0x80>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <HAL_ADC_MspInit+0x80>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	4a0e      	ldr	r2, [pc, #56]	; (8001aa0 <HAL_ADC_MspInit+0x80>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6e:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <HAL_ADC_MspInit+0x80>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a7a:	2310      	movs	r3, #16
 8001a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a86:	f107 0314 	add.w	r3, r7, #20
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <HAL_ADC_MspInit+0x84>)
 8001a8e:	f000 ff51 	bl	8002934 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a92:	bf00      	nop
 8001a94:	3728      	adds	r7, #40	; 0x28
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40012000 	.word	0x40012000
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	40020000 	.word	0x40020000

08001aa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ab8:	d116      	bne.n	8001ae8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	4b24      	ldr	r3, [pc, #144]	; (8001b50 <HAL_TIM_Base_MspInit+0xa8>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	4a23      	ldr	r2, [pc, #140]	; (8001b50 <HAL_TIM_Base_MspInit+0xa8>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aca:	4b21      	ldr	r3, [pc, #132]	; (8001b50 <HAL_TIM_Base_MspInit+0xa8>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	617b      	str	r3, [r7, #20]
 8001ad4:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2100      	movs	r1, #0
 8001ada:	201c      	movs	r0, #28
 8001adc:	f000 fef3 	bl	80028c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ae0:	201c      	movs	r0, #28
 8001ae2:	f000 ff0c 	bl	80028fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001ae6:	e02e      	b.n	8001b46 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a19      	ldr	r2, [pc, #100]	; (8001b54 <HAL_TIM_Base_MspInit+0xac>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d116      	bne.n	8001b20 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	613b      	str	r3, [r7, #16]
 8001af6:	4b16      	ldr	r3, [pc, #88]	; (8001b50 <HAL_TIM_Base_MspInit+0xa8>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	4a15      	ldr	r2, [pc, #84]	; (8001b50 <HAL_TIM_Base_MspInit+0xa8>)
 8001afc:	f043 0302 	orr.w	r3, r3, #2
 8001b00:	6413      	str	r3, [r2, #64]	; 0x40
 8001b02:	4b13      	ldr	r3, [pc, #76]	; (8001b50 <HAL_TIM_Base_MspInit+0xa8>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	613b      	str	r3, [r7, #16]
 8001b0c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	2100      	movs	r1, #0
 8001b12:	201d      	movs	r0, #29
 8001b14:	f000 fed7 	bl	80028c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b18:	201d      	movs	r0, #29
 8001b1a:	f000 fef0 	bl	80028fe <HAL_NVIC_EnableIRQ>
}
 8001b1e:	e012      	b.n	8001b46 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM5)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a0c      	ldr	r2, [pc, #48]	; (8001b58 <HAL_TIM_Base_MspInit+0xb0>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d10d      	bne.n	8001b46 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <HAL_TIM_Base_MspInit+0xa8>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	4a07      	ldr	r2, [pc, #28]	; (8001b50 <HAL_TIM_Base_MspInit+0xa8>)
 8001b34:	f043 0308 	orr.w	r3, r3, #8
 8001b38:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3a:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <HAL_TIM_Base_MspInit+0xa8>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f003 0308 	and.w	r3, r3, #8
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]
}
 8001b46:	bf00      	nop
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40000400 	.word	0x40000400
 8001b58:	40000c00 	.word	0x40000c00

08001b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b60:	e7fe      	b.n	8001b60 <NMI_Handler+0x4>

08001b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b66:	e7fe      	b.n	8001b66 <HardFault_Handler+0x4>

08001b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b6c:	e7fe      	b.n	8001b6c <MemManage_Handler+0x4>

08001b6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b72:	e7fe      	b.n	8001b72 <BusFault_Handler+0x4>

08001b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <UsageFault_Handler+0x4>

08001b7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b96:	b480      	push	{r7}
 8001b98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b9a:	bf00      	nop
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ba8:	f000 f97c 	bl	8001ea4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bac:	bf00      	nop
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	f001 f873 	bl	8002ca0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bc4:	4802      	ldr	r0, [pc, #8]	; (8001bd0 <TIM2_IRQHandler+0x10>)
 8001bc6:	f003 f8ac 	bl	8004d22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000364 	.word	0x20000364

08001bd4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001bd8:	4802      	ldr	r0, [pc, #8]	; (8001be4 <TIM3_IRQHandler+0x10>)
 8001bda:	f003 f8a2 	bl	8004d22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	200003ac 	.word	0x200003ac

08001be8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001bec:	4802      	ldr	r0, [pc, #8]	; (8001bf8 <OTG_FS_IRQHandler+0x10>)
 8001bee:	f001 f9bf 	bl	8002f70 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	20001988 	.word	0x20001988

08001bfc <_getpid>:
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	2301      	movs	r3, #1
 8001c02:	4618      	mov	r0, r3
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <_kill>:
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
 8001c16:	f007 fd57 	bl	80096c8 <__errno>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2216      	movs	r2, #22
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	f04f 33ff 	mov.w	r3, #4294967295
 8001c24:	4618      	mov	r0, r3
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <_exit>:
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	f04f 31ff 	mov.w	r1, #4294967295
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f7ff ffe7 	bl	8001c0c <_kill>
 8001c3e:	e7fe      	b.n	8001c3e <_exit+0x12>

08001c40 <_read>:
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	e00a      	b.n	8001c68 <_read+0x28>
 8001c52:	f3af 8000 	nop.w
 8001c56:	4601      	mov	r1, r0
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	1c5a      	adds	r2, r3, #1
 8001c5c:	60ba      	str	r2, [r7, #8]
 8001c5e:	b2ca      	uxtb	r2, r1
 8001c60:	701a      	strb	r2, [r3, #0]
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	3301      	adds	r3, #1
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	dbf0      	blt.n	8001c52 <_read+0x12>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4618      	mov	r0, r3
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <_write>:
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b086      	sub	sp, #24
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	60f8      	str	r0, [r7, #12]
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	607a      	str	r2, [r7, #4]
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
 8001c8a:	e009      	b.n	8001ca0 <_write+0x26>
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	1c5a      	adds	r2, r3, #1
 8001c90:	60ba      	str	r2, [r7, #8]
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f3af 8000 	nop.w
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	dbf1      	blt.n	8001c8c <_write+0x12>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4618      	mov	r0, r3
 8001cac:	3718      	adds	r7, #24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <_close>:
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
 8001cba:	f04f 33ff 	mov.w	r3, #4294967295
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <_fstat>:
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
 8001cd2:	6039      	str	r1, [r7, #0]
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cda:	605a      	str	r2, [r3, #4]
 8001cdc:	2300      	movs	r3, #0
 8001cde:	4618      	mov	r0, r3
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <_isatty>:
 8001cea:	b480      	push	{r7}
 8001cec:	b083      	sub	sp, #12
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <_lseek>:
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
	...

08001d1c <_sbrk>:
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	4a14      	ldr	r2, [pc, #80]	; (8001d78 <_sbrk+0x5c>)
 8001d26:	4b15      	ldr	r3, [pc, #84]	; (8001d7c <_sbrk+0x60>)
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	617b      	str	r3, [r7, #20]
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	613b      	str	r3, [r7, #16]
 8001d30:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <_sbrk+0x64>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d102      	bne.n	8001d3e <_sbrk+0x22>
 8001d38:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <_sbrk+0x64>)
 8001d3a:	4a12      	ldr	r2, [pc, #72]	; (8001d84 <_sbrk+0x68>)
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	4b10      	ldr	r3, [pc, #64]	; (8001d80 <_sbrk+0x64>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d207      	bcs.n	8001d5c <_sbrk+0x40>
 8001d4c:	f007 fcbc 	bl	80096c8 <__errno>
 8001d50:	4603      	mov	r3, r0
 8001d52:	220c      	movs	r2, #12
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5a:	e009      	b.n	8001d70 <_sbrk+0x54>
 8001d5c:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <_sbrk+0x64>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	4b07      	ldr	r3, [pc, #28]	; (8001d80 <_sbrk+0x64>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4413      	add	r3, r2
 8001d6a:	4a05      	ldr	r2, [pc, #20]	; (8001d80 <_sbrk+0x64>)
 8001d6c:	6013      	str	r3, [r2, #0]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	4618      	mov	r0, r3
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20020000 	.word	0x20020000
 8001d7c:	00000400 	.word	0x00000400
 8001d80:	200004a0 	.word	0x200004a0
 8001d84:	200020c8 	.word	0x200020c8

08001d88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <SystemInit+0x20>)
 8001d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d92:	4a05      	ldr	r2, [pc, #20]	; (8001da8 <SystemInit+0x20>)
 8001d94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d9c:	bf00      	nop
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <Reset_Handler>:
 8001dac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001de4 <LoopFillZerobss+0x12>
 8001db0:	480d      	ldr	r0, [pc, #52]	; (8001de8 <LoopFillZerobss+0x16>)
 8001db2:	490e      	ldr	r1, [pc, #56]	; (8001dec <LoopFillZerobss+0x1a>)
 8001db4:	4a0e      	ldr	r2, [pc, #56]	; (8001df0 <LoopFillZerobss+0x1e>)
 8001db6:	2300      	movs	r3, #0
 8001db8:	e002      	b.n	8001dc0 <LoopCopyDataInit>

08001dba <CopyDataInit>:
 8001dba:	58d4      	ldr	r4, [r2, r3]
 8001dbc:	50c4      	str	r4, [r0, r3]
 8001dbe:	3304      	adds	r3, #4

08001dc0 <LoopCopyDataInit>:
 8001dc0:	18c4      	adds	r4, r0, r3
 8001dc2:	428c      	cmp	r4, r1
 8001dc4:	d3f9      	bcc.n	8001dba <CopyDataInit>
 8001dc6:	4a0b      	ldr	r2, [pc, #44]	; (8001df4 <LoopFillZerobss+0x22>)
 8001dc8:	4c0b      	ldr	r4, [pc, #44]	; (8001df8 <LoopFillZerobss+0x26>)
 8001dca:	2300      	movs	r3, #0
 8001dcc:	e001      	b.n	8001dd2 <LoopFillZerobss>

08001dce <FillZerobss>:
 8001dce:	6013      	str	r3, [r2, #0]
 8001dd0:	3204      	adds	r2, #4

08001dd2 <LoopFillZerobss>:
 8001dd2:	42a2      	cmp	r2, r4
 8001dd4:	d3fb      	bcc.n	8001dce <FillZerobss>
 8001dd6:	f7ff ffd7 	bl	8001d88 <SystemInit>
 8001dda:	f007 fc7b 	bl	80096d4 <__libc_init_array>
 8001dde:	f7ff f8f5 	bl	8000fcc <main>
 8001de2:	4770      	bx	lr
 8001de4:	20020000 	.word	0x20020000
 8001de8:	20000000 	.word	0x20000000
 8001dec:	20000300 	.word	0x20000300
 8001df0:	0800c7c4 	.word	0x0800c7c4
 8001df4:	20000300 	.word	0x20000300
 8001df8:	200020c4 	.word	0x200020c4

08001dfc <ADC_IRQHandler>:
 8001dfc:	e7fe      	b.n	8001dfc <ADC_IRQHandler>
	...

08001e00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e04:	4b0e      	ldr	r3, [pc, #56]	; (8001e40 <HAL_Init+0x40>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a0d      	ldr	r2, [pc, #52]	; (8001e40 <HAL_Init+0x40>)
 8001e0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e10:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <HAL_Init+0x40>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <HAL_Init+0x40>)
 8001e16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e1c:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <HAL_Init+0x40>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a07      	ldr	r2, [pc, #28]	; (8001e40 <HAL_Init+0x40>)
 8001e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e28:	2003      	movs	r0, #3
 8001e2a:	f000 fd41 	bl	80028b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e2e:	2000      	movs	r0, #0
 8001e30:	f000 f808 	bl	8001e44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e34:	f7ff fdcc 	bl	80019d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40023c00 	.word	0x40023c00

08001e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e4c:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <HAL_InitTick+0x54>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <HAL_InitTick+0x58>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	4619      	mov	r1, r3
 8001e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e62:	4618      	mov	r0, r3
 8001e64:	f000 fd59 	bl	800291a <HAL_SYSTICK_Config>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e00e      	b.n	8001e90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b0f      	cmp	r3, #15
 8001e76:	d80a      	bhi.n	8001e8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e78:	2200      	movs	r2, #0
 8001e7a:	6879      	ldr	r1, [r7, #4]
 8001e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e80:	f000 fd21 	bl	80028c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e84:	4a06      	ldr	r2, [pc, #24]	; (8001ea0 <HAL_InitTick+0x5c>)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	e000      	b.n	8001e90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20000034 	.word	0x20000034
 8001e9c:	2000003c 	.word	0x2000003c
 8001ea0:	20000038 	.word	0x20000038

08001ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <HAL_IncTick+0x20>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	461a      	mov	r2, r3
 8001eae:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <HAL_IncTick+0x24>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	4a04      	ldr	r2, [pc, #16]	; (8001ec8 <HAL_IncTick+0x24>)
 8001eb6:	6013      	str	r3, [r2, #0]
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	2000003c 	.word	0x2000003c
 8001ec8:	200004a4 	.word	0x200004a4

08001ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  return uwTick;
 8001ed0:	4b03      	ldr	r3, [pc, #12]	; (8001ee0 <HAL_GetTick+0x14>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	200004a4 	.word	0x200004a4

08001ee4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eec:	f7ff ffee 	bl	8001ecc <HAL_GetTick>
 8001ef0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001efc:	d005      	beq.n	8001f0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001efe:	4b0a      	ldr	r3, [pc, #40]	; (8001f28 <HAL_Delay+0x44>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	461a      	mov	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4413      	add	r3, r2
 8001f08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f0a:	bf00      	nop
 8001f0c:	f7ff ffde 	bl	8001ecc <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d8f7      	bhi.n	8001f0c <HAL_Delay+0x28>
  {
  }
}
 8001f1c:	bf00      	nop
 8001f1e:	bf00      	nop
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	2000003c 	.word	0x2000003c

08001f2c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f34:	2300      	movs	r3, #0
 8001f36:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e033      	b.n	8001faa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d109      	bne.n	8001f5e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7ff fd68 	bl	8001a20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	f003 0310 	and.w	r3, r3, #16
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d118      	bne.n	8001f9c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f72:	f023 0302 	bic.w	r3, r3, #2
 8001f76:	f043 0202 	orr.w	r2, r3, #2
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 faca 	bl	8002518 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	f023 0303 	bic.w	r3, r3, #3
 8001f92:	f043 0201 	orr.w	r2, r3, #1
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	641a      	str	r2, [r3, #64]	; 0x40
 8001f9a:	e001      	b.n	8001fa0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d101      	bne.n	8001fce <HAL_ADC_Start+0x1a>
 8001fca:	2302      	movs	r3, #2
 8001fcc:	e097      	b.n	80020fe <HAL_ADC_Start+0x14a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d018      	beq.n	8002016 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f042 0201 	orr.w	r2, r2, #1
 8001ff2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ff4:	4b45      	ldr	r3, [pc, #276]	; (800210c <HAL_ADC_Start+0x158>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a45      	ldr	r2, [pc, #276]	; (8002110 <HAL_ADC_Start+0x15c>)
 8001ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffe:	0c9a      	lsrs	r2, r3, #18
 8002000:	4613      	mov	r3, r2
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	4413      	add	r3, r2
 8002006:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002008:	e002      	b.n	8002010 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	3b01      	subs	r3, #1
 800200e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1f9      	bne.n	800200a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	2b01      	cmp	r3, #1
 8002022:	d15f      	bne.n	80020e4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002028:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800202c:	f023 0301 	bic.w	r3, r3, #1
 8002030:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002042:	2b00      	cmp	r3, #0
 8002044:	d007      	beq.n	8002056 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800204e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800205e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002062:	d106      	bne.n	8002072 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002068:	f023 0206 	bic.w	r2, r3, #6
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	645a      	str	r2, [r3, #68]	; 0x44
 8002070:	e002      	b.n	8002078 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002080:	4b24      	ldr	r3, [pc, #144]	; (8002114 <HAL_ADC_Start+0x160>)
 8002082:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800208c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f003 031f 	and.w	r3, r3, #31
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10f      	bne.n	80020ba <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d129      	bne.n	80020fc <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	689a      	ldr	r2, [r3, #8]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020b6:	609a      	str	r2, [r3, #8]
 80020b8:	e020      	b.n	80020fc <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a16      	ldr	r2, [pc, #88]	; (8002118 <HAL_ADC_Start+0x164>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d11b      	bne.n	80020fc <HAL_ADC_Start+0x148>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d114      	bne.n	80020fc <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80020e0:	609a      	str	r2, [r3, #8]
 80020e2:	e00b      	b.n	80020fc <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e8:	f043 0210 	orr.w	r2, r3, #16
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f4:	f043 0201 	orr.w	r2, r3, #1
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3714      	adds	r7, #20
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	20000034 	.word	0x20000034
 8002110:	431bde83 	.word	0x431bde83
 8002114:	40012300 	.word	0x40012300
 8002118:	40012000 	.word	0x40012000

0800211c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800212a:	2b01      	cmp	r3, #1
 800212c:	d101      	bne.n	8002132 <HAL_ADC_Stop+0x16>
 800212e:	2302      	movs	r3, #2
 8002130:	e021      	b.n	8002176 <HAL_ADC_Stop+0x5a>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 0201 	bic.w	r2, r2, #1
 8002148:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b00      	cmp	r3, #0
 8002156:	d109      	bne.n	800216c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002160:	f023 0301 	bic.w	r3, r3, #1
 8002164:	f043 0201 	orr.w	r2, r3, #1
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b084      	sub	sp, #16
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
 800218a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800218c:	2300      	movs	r3, #0
 800218e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800219a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800219e:	d113      	bne.n	80021c8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80021aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021ae:	d10b      	bne.n	80021c8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b4:	f043 0220 	orr.w	r2, r3, #32
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e063      	b.n	8002290 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80021c8:	f7ff fe80 	bl	8001ecc <HAL_GetTick>
 80021cc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80021ce:	e021      	b.n	8002214 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d6:	d01d      	beq.n	8002214 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d007      	beq.n	80021ee <HAL_ADC_PollForConversion+0x6c>
 80021de:	f7ff fe75 	bl	8001ecc <HAL_GetTick>
 80021e2:	4602      	mov	r2, r0
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d212      	bcs.n	8002214 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d00b      	beq.n	8002214 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002200:	f043 0204 	orr.w	r2, r3, #4
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e03d      	b.n	8002290 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b02      	cmp	r3, #2
 8002220:	d1d6      	bne.n	80021d0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f06f 0212 	mvn.w	r2, #18
 800222a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002230:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d123      	bne.n	800228e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800224a:	2b00      	cmp	r3, #0
 800224c:	d11f      	bne.n	800228e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002254:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002258:	2b00      	cmp	r3, #0
 800225a:	d006      	beq.n	800226a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002266:	2b00      	cmp	r3, #0
 8002268:	d111      	bne.n	800228e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d105      	bne.n	800228e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	f043 0201 	orr.w	r2, r3, #1
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
	...

080022b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80022be:	2300      	movs	r3, #0
 80022c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d101      	bne.n	80022d0 <HAL_ADC_ConfigChannel+0x1c>
 80022cc:	2302      	movs	r3, #2
 80022ce:	e113      	b.n	80024f8 <HAL_ADC_ConfigChannel+0x244>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b09      	cmp	r3, #9
 80022de:	d925      	bls.n	800232c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68d9      	ldr	r1, [r3, #12]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	461a      	mov	r2, r3
 80022ee:	4613      	mov	r3, r2
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	4413      	add	r3, r2
 80022f4:	3b1e      	subs	r3, #30
 80022f6:	2207      	movs	r2, #7
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	43da      	mvns	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	400a      	ands	r2, r1
 8002304:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68d9      	ldr	r1, [r3, #12]
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	b29b      	uxth	r3, r3
 8002316:	4618      	mov	r0, r3
 8002318:	4603      	mov	r3, r0
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	4403      	add	r3, r0
 800231e:	3b1e      	subs	r3, #30
 8002320:	409a      	lsls	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	430a      	orrs	r2, r1
 8002328:	60da      	str	r2, [r3, #12]
 800232a:	e022      	b.n	8002372 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6919      	ldr	r1, [r3, #16]
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	b29b      	uxth	r3, r3
 8002338:	461a      	mov	r2, r3
 800233a:	4613      	mov	r3, r2
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	4413      	add	r3, r2
 8002340:	2207      	movs	r2, #7
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43da      	mvns	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	400a      	ands	r2, r1
 800234e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6919      	ldr	r1, [r3, #16]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	b29b      	uxth	r3, r3
 8002360:	4618      	mov	r0, r3
 8002362:	4603      	mov	r3, r0
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	4403      	add	r3, r0
 8002368:	409a      	lsls	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b06      	cmp	r3, #6
 8002378:	d824      	bhi.n	80023c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	3b05      	subs	r3, #5
 800238c:	221f      	movs	r2, #31
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43da      	mvns	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	400a      	ands	r2, r1
 800239a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	4618      	mov	r0, r3
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	3b05      	subs	r3, #5
 80023b6:	fa00 f203 	lsl.w	r2, r0, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	635a      	str	r2, [r3, #52]	; 0x34
 80023c2:	e04c      	b.n	800245e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b0c      	cmp	r3, #12
 80023ca:	d824      	bhi.n	8002416 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	4613      	mov	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	3b23      	subs	r3, #35	; 0x23
 80023de:	221f      	movs	r2, #31
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43da      	mvns	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	400a      	ands	r2, r1
 80023ec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	4618      	mov	r0, r3
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	4613      	mov	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4413      	add	r3, r2
 8002406:	3b23      	subs	r3, #35	; 0x23
 8002408:	fa00 f203 	lsl.w	r2, r0, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	631a      	str	r2, [r3, #48]	; 0x30
 8002414:	e023      	b.n	800245e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	4613      	mov	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	3b41      	subs	r3, #65	; 0x41
 8002428:	221f      	movs	r2, #31
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43da      	mvns	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	400a      	ands	r2, r1
 8002436:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	b29b      	uxth	r3, r3
 8002444:	4618      	mov	r0, r3
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	4613      	mov	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	3b41      	subs	r3, #65	; 0x41
 8002452:	fa00 f203 	lsl.w	r2, r0, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800245e:	4b29      	ldr	r3, [pc, #164]	; (8002504 <HAL_ADC_ConfigChannel+0x250>)
 8002460:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a28      	ldr	r2, [pc, #160]	; (8002508 <HAL_ADC_ConfigChannel+0x254>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d10f      	bne.n	800248c <HAL_ADC_ConfigChannel+0x1d8>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2b12      	cmp	r3, #18
 8002472:	d10b      	bne.n	800248c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a1d      	ldr	r2, [pc, #116]	; (8002508 <HAL_ADC_ConfigChannel+0x254>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d12b      	bne.n	80024ee <HAL_ADC_ConfigChannel+0x23a>
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a1c      	ldr	r2, [pc, #112]	; (800250c <HAL_ADC_ConfigChannel+0x258>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d003      	beq.n	80024a8 <HAL_ADC_ConfigChannel+0x1f4>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2b11      	cmp	r3, #17
 80024a6:	d122      	bne.n	80024ee <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a11      	ldr	r2, [pc, #68]	; (800250c <HAL_ADC_ConfigChannel+0x258>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d111      	bne.n	80024ee <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024ca:	4b11      	ldr	r3, [pc, #68]	; (8002510 <HAL_ADC_ConfigChannel+0x25c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a11      	ldr	r2, [pc, #68]	; (8002514 <HAL_ADC_ConfigChannel+0x260>)
 80024d0:	fba2 2303 	umull	r2, r3, r2, r3
 80024d4:	0c9a      	lsrs	r2, r3, #18
 80024d6:	4613      	mov	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024e0:	e002      	b.n	80024e8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	3b01      	subs	r3, #1
 80024e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f9      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3714      	adds	r7, #20
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr
 8002504:	40012300 	.word	0x40012300
 8002508:	40012000 	.word	0x40012000
 800250c:	10000012 	.word	0x10000012
 8002510:	20000034 	.word	0x20000034
 8002514:	431bde83 	.word	0x431bde83

08002518 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002520:	4b79      	ldr	r3, [pc, #484]	; (8002708 <ADC_Init+0x1f0>)
 8002522:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	431a      	orrs	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800254c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6859      	ldr	r1, [r3, #4]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	021a      	lsls	r2, r3, #8
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	430a      	orrs	r2, r1
 8002560:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002570:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6859      	ldr	r1, [r3, #4]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	430a      	orrs	r2, r1
 8002582:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002592:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6899      	ldr	r1, [r3, #8]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	68da      	ldr	r2, [r3, #12]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025aa:	4a58      	ldr	r2, [pc, #352]	; (800270c <ADC_Init+0x1f4>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d022      	beq.n	80025f6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	689a      	ldr	r2, [r3, #8]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6899      	ldr	r1, [r3, #8]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	6899      	ldr	r1, [r3, #8]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	430a      	orrs	r2, r1
 80025f2:	609a      	str	r2, [r3, #8]
 80025f4:	e00f      	b.n	8002616 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689a      	ldr	r2, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002604:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002614:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 0202 	bic.w	r2, r2, #2
 8002624:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6899      	ldr	r1, [r3, #8]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	7e1b      	ldrb	r3, [r3, #24]
 8002630:	005a      	lsls	r2, r3, #1
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	430a      	orrs	r2, r1
 8002638:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d01b      	beq.n	800267c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002652:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002662:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6859      	ldr	r1, [r3, #4]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266e:	3b01      	subs	r3, #1
 8002670:	035a      	lsls	r2, r3, #13
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	430a      	orrs	r2, r1
 8002678:	605a      	str	r2, [r3, #4]
 800267a:	e007      	b.n	800268c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800268a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800269a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	3b01      	subs	r3, #1
 80026a8:	051a      	lsls	r2, r3, #20
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80026c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6899      	ldr	r1, [r3, #8]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026ce:	025a      	lsls	r2, r3, #9
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	430a      	orrs	r2, r1
 80026d6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6899      	ldr	r1, [r3, #8]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	029a      	lsls	r2, r3, #10
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	609a      	str	r2, [r3, #8]
}
 80026fc:	bf00      	nop
 80026fe:	3714      	adds	r7, #20
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr
 8002708:	40012300 	.word	0x40012300
 800270c:	0f000001 	.word	0x0f000001

08002710 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002720:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <__NVIC_SetPriorityGrouping+0x44>)
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800272c:	4013      	ands	r3, r2
 800272e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002738:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800273c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002742:	4a04      	ldr	r2, [pc, #16]	; (8002754 <__NVIC_SetPriorityGrouping+0x44>)
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	60d3      	str	r3, [r2, #12]
}
 8002748:	bf00      	nop
 800274a:	3714      	adds	r7, #20
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800275c:	4b04      	ldr	r3, [pc, #16]	; (8002770 <__NVIC_GetPriorityGrouping+0x18>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	0a1b      	lsrs	r3, r3, #8
 8002762:	f003 0307 	and.w	r3, r3, #7
}
 8002766:	4618      	mov	r0, r3
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800277e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002782:	2b00      	cmp	r3, #0
 8002784:	db0b      	blt.n	800279e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002786:	79fb      	ldrb	r3, [r7, #7]
 8002788:	f003 021f 	and.w	r2, r3, #31
 800278c:	4907      	ldr	r1, [pc, #28]	; (80027ac <__NVIC_EnableIRQ+0x38>)
 800278e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002792:	095b      	lsrs	r3, r3, #5
 8002794:	2001      	movs	r0, #1
 8002796:	fa00 f202 	lsl.w	r2, r0, r2
 800279a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800279e:	bf00      	nop
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	e000e100 	.word	0xe000e100

080027b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	6039      	str	r1, [r7, #0]
 80027ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	db0a      	blt.n	80027da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	490c      	ldr	r1, [pc, #48]	; (80027fc <__NVIC_SetPriority+0x4c>)
 80027ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ce:	0112      	lsls	r2, r2, #4
 80027d0:	b2d2      	uxtb	r2, r2
 80027d2:	440b      	add	r3, r1
 80027d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027d8:	e00a      	b.n	80027f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	4908      	ldr	r1, [pc, #32]	; (8002800 <__NVIC_SetPriority+0x50>)
 80027e0:	79fb      	ldrb	r3, [r7, #7]
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	3b04      	subs	r3, #4
 80027e8:	0112      	lsls	r2, r2, #4
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	440b      	add	r3, r1
 80027ee:	761a      	strb	r2, [r3, #24]
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	e000e100 	.word	0xe000e100
 8002800:	e000ed00 	.word	0xe000ed00

08002804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002804:	b480      	push	{r7}
 8002806:	b089      	sub	sp, #36	; 0x24
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	f1c3 0307 	rsb	r3, r3, #7
 800281e:	2b04      	cmp	r3, #4
 8002820:	bf28      	it	cs
 8002822:	2304      	movcs	r3, #4
 8002824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	3304      	adds	r3, #4
 800282a:	2b06      	cmp	r3, #6
 800282c:	d902      	bls.n	8002834 <NVIC_EncodePriority+0x30>
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	3b03      	subs	r3, #3
 8002832:	e000      	b.n	8002836 <NVIC_EncodePriority+0x32>
 8002834:	2300      	movs	r3, #0
 8002836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002838:	f04f 32ff 	mov.w	r2, #4294967295
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	fa02 f303 	lsl.w	r3, r2, r3
 8002842:	43da      	mvns	r2, r3
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	401a      	ands	r2, r3
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800284c:	f04f 31ff 	mov.w	r1, #4294967295
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	fa01 f303 	lsl.w	r3, r1, r3
 8002856:	43d9      	mvns	r1, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800285c:	4313      	orrs	r3, r2
         );
}
 800285e:	4618      	mov	r0, r3
 8002860:	3724      	adds	r7, #36	; 0x24
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
	...

0800286c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	3b01      	subs	r3, #1
 8002878:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800287c:	d301      	bcc.n	8002882 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800287e:	2301      	movs	r3, #1
 8002880:	e00f      	b.n	80028a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002882:	4a0a      	ldr	r2, [pc, #40]	; (80028ac <SysTick_Config+0x40>)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	3b01      	subs	r3, #1
 8002888:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800288a:	210f      	movs	r1, #15
 800288c:	f04f 30ff 	mov.w	r0, #4294967295
 8002890:	f7ff ff8e 	bl	80027b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002894:	4b05      	ldr	r3, [pc, #20]	; (80028ac <SysTick_Config+0x40>)
 8002896:	2200      	movs	r2, #0
 8002898:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800289a:	4b04      	ldr	r3, [pc, #16]	; (80028ac <SysTick_Config+0x40>)
 800289c:	2207      	movs	r2, #7
 800289e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	e000e010 	.word	0xe000e010

080028b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff ff29 	bl	8002710 <__NVIC_SetPriorityGrouping>
}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b086      	sub	sp, #24
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	4603      	mov	r3, r0
 80028ce:	60b9      	str	r1, [r7, #8]
 80028d0:	607a      	str	r2, [r7, #4]
 80028d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028d8:	f7ff ff3e 	bl	8002758 <__NVIC_GetPriorityGrouping>
 80028dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	68b9      	ldr	r1, [r7, #8]
 80028e2:	6978      	ldr	r0, [r7, #20]
 80028e4:	f7ff ff8e 	bl	8002804 <NVIC_EncodePriority>
 80028e8:	4602      	mov	r2, r0
 80028ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ee:	4611      	mov	r1, r2
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff ff5d 	bl	80027b0 <__NVIC_SetPriority>
}
 80028f6:	bf00      	nop
 80028f8:	3718      	adds	r7, #24
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b082      	sub	sp, #8
 8002902:	af00      	add	r7, sp, #0
 8002904:	4603      	mov	r3, r0
 8002906:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff ff31 	bl	8002774 <__NVIC_EnableIRQ>
}
 8002912:	bf00      	nop
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b082      	sub	sp, #8
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7ff ffa2 	bl	800286c <SysTick_Config>
 8002928:	4603      	mov	r3, r0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
	...

08002934 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002934:	b480      	push	{r7}
 8002936:	b089      	sub	sp, #36	; 0x24
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800293e:	2300      	movs	r3, #0
 8002940:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002942:	2300      	movs	r3, #0
 8002944:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002946:	2300      	movs	r3, #0
 8002948:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800294a:	2300      	movs	r3, #0
 800294c:	61fb      	str	r3, [r7, #28]
 800294e:	e159      	b.n	8002c04 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002950:	2201      	movs	r2, #1
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	4013      	ands	r3, r2
 8002962:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	429a      	cmp	r2, r3
 800296a:	f040 8148 	bne.w	8002bfe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	2b01      	cmp	r3, #1
 8002978:	d005      	beq.n	8002986 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002982:	2b02      	cmp	r3, #2
 8002984:	d130      	bne.n	80029e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	2203      	movs	r2, #3
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	43db      	mvns	r3, r3
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4013      	ands	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	68da      	ldr	r2, [r3, #12]
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	fa02 f303 	lsl.w	r3, r2, r3
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029bc:	2201      	movs	r2, #1
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	43db      	mvns	r3, r3
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4013      	ands	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	091b      	lsrs	r3, r3, #4
 80029d2:	f003 0201 	and.w	r2, r3, #1
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4313      	orrs	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 0303 	and.w	r3, r3, #3
 80029f0:	2b03      	cmp	r3, #3
 80029f2:	d017      	beq.n	8002a24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	2203      	movs	r2, #3
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f003 0303 	and.w	r3, r3, #3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d123      	bne.n	8002a78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	08da      	lsrs	r2, r3, #3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3208      	adds	r2, #8
 8002a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	f003 0307 	and.w	r3, r3, #7
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	220f      	movs	r2, #15
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4013      	ands	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	691a      	ldr	r2, [r3, #16]
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	08da      	lsrs	r2, r3, #3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	3208      	adds	r2, #8
 8002a72:	69b9      	ldr	r1, [r7, #24]
 8002a74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	2203      	movs	r2, #3
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f003 0203 	and.w	r2, r3, #3
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 80a2 	beq.w	8002bfe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aba:	2300      	movs	r3, #0
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	4b57      	ldr	r3, [pc, #348]	; (8002c1c <HAL_GPIO_Init+0x2e8>)
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac2:	4a56      	ldr	r2, [pc, #344]	; (8002c1c <HAL_GPIO_Init+0x2e8>)
 8002ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8002aca:	4b54      	ldr	r3, [pc, #336]	; (8002c1c <HAL_GPIO_Init+0x2e8>)
 8002acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ad6:	4a52      	ldr	r2, [pc, #328]	; (8002c20 <HAL_GPIO_Init+0x2ec>)
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	089b      	lsrs	r3, r3, #2
 8002adc:	3302      	adds	r3, #2
 8002ade:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	220f      	movs	r2, #15
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	43db      	mvns	r3, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4013      	ands	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a49      	ldr	r2, [pc, #292]	; (8002c24 <HAL_GPIO_Init+0x2f0>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d019      	beq.n	8002b36 <HAL_GPIO_Init+0x202>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a48      	ldr	r2, [pc, #288]	; (8002c28 <HAL_GPIO_Init+0x2f4>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d013      	beq.n	8002b32 <HAL_GPIO_Init+0x1fe>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a47      	ldr	r2, [pc, #284]	; (8002c2c <HAL_GPIO_Init+0x2f8>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d00d      	beq.n	8002b2e <HAL_GPIO_Init+0x1fa>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a46      	ldr	r2, [pc, #280]	; (8002c30 <HAL_GPIO_Init+0x2fc>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d007      	beq.n	8002b2a <HAL_GPIO_Init+0x1f6>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a45      	ldr	r2, [pc, #276]	; (8002c34 <HAL_GPIO_Init+0x300>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d101      	bne.n	8002b26 <HAL_GPIO_Init+0x1f2>
 8002b22:	2304      	movs	r3, #4
 8002b24:	e008      	b.n	8002b38 <HAL_GPIO_Init+0x204>
 8002b26:	2307      	movs	r3, #7
 8002b28:	e006      	b.n	8002b38 <HAL_GPIO_Init+0x204>
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e004      	b.n	8002b38 <HAL_GPIO_Init+0x204>
 8002b2e:	2302      	movs	r3, #2
 8002b30:	e002      	b.n	8002b38 <HAL_GPIO_Init+0x204>
 8002b32:	2301      	movs	r3, #1
 8002b34:	e000      	b.n	8002b38 <HAL_GPIO_Init+0x204>
 8002b36:	2300      	movs	r3, #0
 8002b38:	69fa      	ldr	r2, [r7, #28]
 8002b3a:	f002 0203 	and.w	r2, r2, #3
 8002b3e:	0092      	lsls	r2, r2, #2
 8002b40:	4093      	lsls	r3, r2
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b48:	4935      	ldr	r1, [pc, #212]	; (8002c20 <HAL_GPIO_Init+0x2ec>)
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	089b      	lsrs	r3, r3, #2
 8002b4e:	3302      	adds	r3, #2
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b56:	4b38      	ldr	r3, [pc, #224]	; (8002c38 <HAL_GPIO_Init+0x304>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4013      	ands	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b7a:	4a2f      	ldr	r2, [pc, #188]	; (8002c38 <HAL_GPIO_Init+0x304>)
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b80:	4b2d      	ldr	r3, [pc, #180]	; (8002c38 <HAL_GPIO_Init+0x304>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d003      	beq.n	8002ba4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ba4:	4a24      	ldr	r2, [pc, #144]	; (8002c38 <HAL_GPIO_Init+0x304>)
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002baa:	4b23      	ldr	r3, [pc, #140]	; (8002c38 <HAL_GPIO_Init+0x304>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bce:	4a1a      	ldr	r2, [pc, #104]	; (8002c38 <HAL_GPIO_Init+0x304>)
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bd4:	4b18      	ldr	r3, [pc, #96]	; (8002c38 <HAL_GPIO_Init+0x304>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	4013      	ands	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bf8:	4a0f      	ldr	r2, [pc, #60]	; (8002c38 <HAL_GPIO_Init+0x304>)
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	3301      	adds	r3, #1
 8002c02:	61fb      	str	r3, [r7, #28]
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	2b0f      	cmp	r3, #15
 8002c08:	f67f aea2 	bls.w	8002950 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c0c:	bf00      	nop
 8002c0e:	bf00      	nop
 8002c10:	3724      	adds	r7, #36	; 0x24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	40013800 	.word	0x40013800
 8002c24:	40020000 	.word	0x40020000
 8002c28:	40020400 	.word	0x40020400
 8002c2c:	40020800 	.word	0x40020800
 8002c30:	40020c00 	.word	0x40020c00
 8002c34:	40021000 	.word	0x40021000
 8002c38:	40013c00 	.word	0x40013c00

08002c3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	460b      	mov	r3, r1
 8002c46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	691a      	ldr	r2, [r3, #16]
 8002c4c:	887b      	ldrh	r3, [r7, #2]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d002      	beq.n	8002c5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c54:	2301      	movs	r3, #1
 8002c56:	73fb      	strb	r3, [r7, #15]
 8002c58:	e001      	b.n	8002c5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	460b      	mov	r3, r1
 8002c76:	807b      	strh	r3, [r7, #2]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c7c:	787b      	ldrb	r3, [r7, #1]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c82:	887a      	ldrh	r2, [r7, #2]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c88:	e003      	b.n	8002c92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c8a:	887b      	ldrh	r3, [r7, #2]
 8002c8c:	041a      	lsls	r2, r3, #16
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	619a      	str	r2, [r3, #24]
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
	...

08002ca0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002caa:	4b08      	ldr	r3, [pc, #32]	; (8002ccc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cac:	695a      	ldr	r2, [r3, #20]
 8002cae:	88fb      	ldrh	r3, [r7, #6]
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d006      	beq.n	8002cc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002cb6:	4a05      	ldr	r2, [pc, #20]	; (8002ccc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002cb8:	88fb      	ldrh	r3, [r7, #6]
 8002cba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002cbc:	88fb      	ldrh	r3, [r7, #6]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7fe fe54 	bl	800196c <HAL_GPIO_EXTI_Callback>
  }
}
 8002cc4:	bf00      	nop
 8002cc6:	3708      	adds	r7, #8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40013c00 	.word	0x40013c00

08002cd0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cd2:	b08f      	sub	sp, #60	; 0x3c
 8002cd4:	af0a      	add	r7, sp, #40	; 0x28
 8002cd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e10f      	b.n	8002f02 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d106      	bne.n	8002d02 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f006 f9d5 	bl	80090ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2203      	movs	r2, #3
 8002d06:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d102      	bne.n	8002d1c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f002 fca6 	bl	8005672 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	603b      	str	r3, [r7, #0]
 8002d2c:	687e      	ldr	r6, [r7, #4]
 8002d2e:	466d      	mov	r5, sp
 8002d30:	f106 0410 	add.w	r4, r6, #16
 8002d34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d3c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d40:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d44:	1d33      	adds	r3, r6, #4
 8002d46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d48:	6838      	ldr	r0, [r7, #0]
 8002d4a:	f002 fb7d 	bl	8005448 <USB_CoreInit>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d005      	beq.n	8002d60 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2202      	movs	r2, #2
 8002d58:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e0d0      	b.n	8002f02 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2100      	movs	r1, #0
 8002d66:	4618      	mov	r0, r3
 8002d68:	f002 fc94 	bl	8005694 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	73fb      	strb	r3, [r7, #15]
 8002d70:	e04a      	b.n	8002e08 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d72:	7bfa      	ldrb	r2, [r7, #15]
 8002d74:	6879      	ldr	r1, [r7, #4]
 8002d76:	4613      	mov	r3, r2
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	440b      	add	r3, r1
 8002d80:	333d      	adds	r3, #61	; 0x3d
 8002d82:	2201      	movs	r2, #1
 8002d84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d86:	7bfa      	ldrb	r2, [r7, #15]
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	4413      	add	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	440b      	add	r3, r1
 8002d94:	333c      	adds	r3, #60	; 0x3c
 8002d96:	7bfa      	ldrb	r2, [r7, #15]
 8002d98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d9a:	7bfa      	ldrb	r2, [r7, #15]
 8002d9c:	7bfb      	ldrb	r3, [r7, #15]
 8002d9e:	b298      	uxth	r0, r3
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	4613      	mov	r3, r2
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	4413      	add	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	440b      	add	r3, r1
 8002dac:	3344      	adds	r3, #68	; 0x44
 8002dae:	4602      	mov	r2, r0
 8002db0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002db2:	7bfa      	ldrb	r2, [r7, #15]
 8002db4:	6879      	ldr	r1, [r7, #4]
 8002db6:	4613      	mov	r3, r2
 8002db8:	00db      	lsls	r3, r3, #3
 8002dba:	4413      	add	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	440b      	add	r3, r1
 8002dc0:	3340      	adds	r3, #64	; 0x40
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002dc6:	7bfa      	ldrb	r2, [r7, #15]
 8002dc8:	6879      	ldr	r1, [r7, #4]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	4413      	add	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	440b      	add	r3, r1
 8002dd4:	3348      	adds	r3, #72	; 0x48
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002dda:	7bfa      	ldrb	r2, [r7, #15]
 8002ddc:	6879      	ldr	r1, [r7, #4]
 8002dde:	4613      	mov	r3, r2
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	4413      	add	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	440b      	add	r3, r1
 8002de8:	334c      	adds	r3, #76	; 0x4c
 8002dea:	2200      	movs	r2, #0
 8002dec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002dee:	7bfa      	ldrb	r2, [r7, #15]
 8002df0:	6879      	ldr	r1, [r7, #4]
 8002df2:	4613      	mov	r3, r2
 8002df4:	00db      	lsls	r3, r3, #3
 8002df6:	4413      	add	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	440b      	add	r3, r1
 8002dfc:	3354      	adds	r3, #84	; 0x54
 8002dfe:	2200      	movs	r2, #0
 8002e00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
 8002e04:	3301      	adds	r3, #1
 8002e06:	73fb      	strb	r3, [r7, #15]
 8002e08:	7bfa      	ldrb	r2, [r7, #15]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d3af      	bcc.n	8002d72 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e12:	2300      	movs	r3, #0
 8002e14:	73fb      	strb	r3, [r7, #15]
 8002e16:	e044      	b.n	8002ea2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e18:	7bfa      	ldrb	r2, [r7, #15]
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	4413      	add	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e2e:	7bfa      	ldrb	r2, [r7, #15]
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	4613      	mov	r3, r2
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	4413      	add	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	440b      	add	r3, r1
 8002e3c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002e40:	7bfa      	ldrb	r2, [r7, #15]
 8002e42:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e44:	7bfa      	ldrb	r2, [r7, #15]
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	4413      	add	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002e56:	2200      	movs	r2, #0
 8002e58:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e5a:	7bfa      	ldrb	r2, [r7, #15]
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	4413      	add	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	440b      	add	r3, r1
 8002e68:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e70:	7bfa      	ldrb	r2, [r7, #15]
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	4613      	mov	r3, r2
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	4413      	add	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002e82:	2200      	movs	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e86:	7bfa      	ldrb	r2, [r7, #15]
 8002e88:	6879      	ldr	r1, [r7, #4]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	4413      	add	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	440b      	add	r3, r1
 8002e94:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e9c:	7bfb      	ldrb	r3, [r7, #15]
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	73fb      	strb	r3, [r7, #15]
 8002ea2:	7bfa      	ldrb	r2, [r7, #15]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d3b5      	bcc.n	8002e18 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	603b      	str	r3, [r7, #0]
 8002eb2:	687e      	ldr	r6, [r7, #4]
 8002eb4:	466d      	mov	r5, sp
 8002eb6:	f106 0410 	add.w	r4, r6, #16
 8002eba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ebc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ebe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ec0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ec2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ec6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002eca:	1d33      	adds	r3, r6, #4
 8002ecc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ece:	6838      	ldr	r0, [r7, #0]
 8002ed0:	f002 fc2c 	bl	800572c <USB_DevInit>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d005      	beq.n	8002ee6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2202      	movs	r2, #2
 8002ede:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e00d      	b.n	8002f02 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f003 fd7b 	bl	80069f6 <USB_DevDisconnect>

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3714      	adds	r7, #20
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002f0a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b084      	sub	sp, #16
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d101      	bne.n	8002f26 <HAL_PCD_Start+0x1c>
 8002f22:	2302      	movs	r3, #2
 8002f24:	e020      	b.n	8002f68 <HAL_PCD_Start+0x5e>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d109      	bne.n	8002f4a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d005      	beq.n	8002f4a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f42:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f002 fb7e 	bl	8005650 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f003 fd2b 	bl	80069b4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002f70:	b590      	push	{r4, r7, lr}
 8002f72:	b08d      	sub	sp, #52	; 0x34
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
 8002f80:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f003 fde9 	bl	8006b5e <USB_GetMode>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f040 848a 	bne.w	80038a8 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f003 fd4d 	bl	8006a38 <USB_ReadInterrupts>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 8480 	beq.w	80038a6 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	0a1b      	lsrs	r3, r3, #8
 8002fb0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f003 fd3a 	bl	8006a38 <USB_ReadInterrupts>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d107      	bne.n	8002fde <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	695a      	ldr	r2, [r3, #20]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f002 0202 	and.w	r2, r2, #2
 8002fdc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f003 fd28 	bl	8006a38 <USB_ReadInterrupts>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	f003 0310 	and.w	r3, r3, #16
 8002fee:	2b10      	cmp	r3, #16
 8002ff0:	d161      	bne.n	80030b6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	699a      	ldr	r2, [r3, #24]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 0210 	bic.w	r2, r2, #16
 8003000:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003002:	6a3b      	ldr	r3, [r7, #32]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	f003 020f 	and.w	r2, r3, #15
 800300e:	4613      	mov	r3, r2
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	4413      	add	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	4413      	add	r3, r2
 800301e:	3304      	adds	r3, #4
 8003020:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	0c5b      	lsrs	r3, r3, #17
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	2b02      	cmp	r3, #2
 800302c:	d124      	bne.n	8003078 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003034:	4013      	ands	r3, r2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d035      	beq.n	80030a6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	091b      	lsrs	r3, r3, #4
 8003042:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003044:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003048:	b29b      	uxth	r3, r3
 800304a:	461a      	mov	r2, r3
 800304c:	6a38      	ldr	r0, [r7, #32]
 800304e:	f003 fb5f 	bl	8006710 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	691a      	ldr	r2, [r3, #16]
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	091b      	lsrs	r3, r3, #4
 800305a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800305e:	441a      	add	r2, r3
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	6a1a      	ldr	r2, [r3, #32]
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	091b      	lsrs	r3, r3, #4
 800306c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003070:	441a      	add	r2, r3
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	621a      	str	r2, [r3, #32]
 8003076:	e016      	b.n	80030a6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	0c5b      	lsrs	r3, r3, #17
 800307c:	f003 030f 	and.w	r3, r3, #15
 8003080:	2b06      	cmp	r3, #6
 8003082:	d110      	bne.n	80030a6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800308a:	2208      	movs	r2, #8
 800308c:	4619      	mov	r1, r3
 800308e:	6a38      	ldr	r0, [r7, #32]
 8003090:	f003 fb3e 	bl	8006710 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	6a1a      	ldr	r2, [r3, #32]
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	091b      	lsrs	r3, r3, #4
 800309c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030a0:	441a      	add	r2, r3
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	699a      	ldr	r2, [r3, #24]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f042 0210 	orr.w	r2, r2, #16
 80030b4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f003 fcbc 	bl	8006a38 <USB_ReadInterrupts>
 80030c0:	4603      	mov	r3, r0
 80030c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80030ca:	f040 80a7 	bne.w	800321c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80030ce:	2300      	movs	r3, #0
 80030d0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f003 fcc1 	bl	8006a5e <USB_ReadDevAllOutEpInterrupt>
 80030dc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80030de:	e099      	b.n	8003214 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80030e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 808e 	beq.w	8003208 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f2:	b2d2      	uxtb	r2, r2
 80030f4:	4611      	mov	r1, r2
 80030f6:	4618      	mov	r0, r3
 80030f8:	f003 fce5 	bl	8006ac6 <USB_ReadDevOutEPInterrupt>
 80030fc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00c      	beq.n	8003122 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	015a      	lsls	r2, r3, #5
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	4413      	add	r3, r2
 8003110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003114:	461a      	mov	r2, r3
 8003116:	2301      	movs	r3, #1
 8003118:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800311a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 fec3 	bl	8003ea8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	f003 0308 	and.w	r3, r3, #8
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00c      	beq.n	8003146 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	015a      	lsls	r2, r3, #5
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	4413      	add	r3, r2
 8003134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003138:	461a      	mov	r2, r3
 800313a:	2308      	movs	r3, #8
 800313c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800313e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 ff99 	bl	8004078 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	f003 0310 	and.w	r3, r3, #16
 800314c:	2b00      	cmp	r3, #0
 800314e:	d008      	beq.n	8003162 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003152:	015a      	lsls	r2, r3, #5
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	4413      	add	r3, r2
 8003158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800315c:	461a      	mov	r2, r3
 800315e:	2310      	movs	r3, #16
 8003160:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d030      	beq.n	80031ce <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003174:	2b80      	cmp	r3, #128	; 0x80
 8003176:	d109      	bne.n	800318c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	69fa      	ldr	r2, [r7, #28]
 8003182:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003186:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800318a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800318c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800318e:	4613      	mov	r3, r2
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	4413      	add	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	4413      	add	r3, r2
 800319e:	3304      	adds	r3, #4
 80031a0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	78db      	ldrb	r3, [r3, #3]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d108      	bne.n	80031bc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	2200      	movs	r2, #0
 80031ae:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80031b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	4619      	mov	r1, r3
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f006 f874 	bl	80092a4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	015a      	lsls	r2, r3, #5
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	4413      	add	r3, r2
 80031c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031c8:	461a      	mov	r2, r3
 80031ca:	2302      	movs	r3, #2
 80031cc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	f003 0320 	and.w	r3, r3, #32
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d008      	beq.n	80031ea <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031da:	015a      	lsls	r2, r3, #5
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	4413      	add	r3, r2
 80031e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031e4:	461a      	mov	r2, r3
 80031e6:	2320      	movs	r3, #32
 80031e8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d009      	beq.n	8003208 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80031f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f6:	015a      	lsls	r2, r3, #5
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	4413      	add	r3, r2
 80031fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003200:	461a      	mov	r2, r3
 8003202:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003206:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320a:	3301      	adds	r3, #1
 800320c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800320e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003210:	085b      	lsrs	r3, r3, #1
 8003212:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003216:	2b00      	cmp	r3, #0
 8003218:	f47f af62 	bne.w	80030e0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4618      	mov	r0, r3
 8003222:	f003 fc09 	bl	8006a38 <USB_ReadInterrupts>
 8003226:	4603      	mov	r3, r0
 8003228:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800322c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003230:	f040 80db 	bne.w	80033ea <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f003 fc2a 	bl	8006a92 <USB_ReadDevAllInEpInterrupt>
 800323e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003240:	2300      	movs	r3, #0
 8003242:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003244:	e0cd      	b.n	80033e2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 80c2 	beq.w	80033d6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	4611      	mov	r1, r2
 800325c:	4618      	mov	r0, r3
 800325e:	f003 fc50 	bl	8006b02 <USB_ReadDevInEPInterrupt>
 8003262:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	f003 0301 	and.w	r3, r3, #1
 800326a:	2b00      	cmp	r3, #0
 800326c:	d057      	beq.n	800331e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	f003 030f 	and.w	r3, r3, #15
 8003274:	2201      	movs	r2, #1
 8003276:	fa02 f303 	lsl.w	r3, r2, r3
 800327a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003282:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	43db      	mvns	r3, r3
 8003288:	69f9      	ldr	r1, [r7, #28]
 800328a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800328e:	4013      	ands	r3, r2
 8003290:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003294:	015a      	lsls	r2, r3, #5
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	4413      	add	r3, r2
 800329a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800329e:	461a      	mov	r2, r3
 80032a0:	2301      	movs	r3, #1
 80032a2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d132      	bne.n	8003312 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b0:	4613      	mov	r3, r2
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	4413      	add	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	440b      	add	r3, r1
 80032ba:	334c      	adds	r3, #76	; 0x4c
 80032bc:	6819      	ldr	r1, [r3, #0]
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032c2:	4613      	mov	r3, r2
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	4413      	add	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4403      	add	r3, r0
 80032cc:	3348      	adds	r3, #72	; 0x48
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4419      	add	r1, r3
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032d6:	4613      	mov	r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	4413      	add	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4403      	add	r3, r0
 80032e0:	334c      	adds	r3, #76	; 0x4c
 80032e2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d113      	bne.n	8003312 <HAL_PCD_IRQHandler+0x3a2>
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ee:	4613      	mov	r3, r2
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	4413      	add	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	440b      	add	r3, r1
 80032f8:	3354      	adds	r3, #84	; 0x54
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d108      	bne.n	8003312 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6818      	ldr	r0, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800330a:	461a      	mov	r2, r3
 800330c:	2101      	movs	r1, #1
 800330e:	f003 fc57 	bl	8006bc0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003314:	b2db      	uxtb	r3, r3
 8003316:	4619      	mov	r1, r3
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f005 ff48 	bl	80091ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	f003 0308 	and.w	r3, r3, #8
 8003324:	2b00      	cmp	r3, #0
 8003326:	d008      	beq.n	800333a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332a:	015a      	lsls	r2, r3, #5
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	4413      	add	r3, r2
 8003330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003334:	461a      	mov	r2, r3
 8003336:	2308      	movs	r3, #8
 8003338:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	f003 0310 	and.w	r3, r3, #16
 8003340:	2b00      	cmp	r3, #0
 8003342:	d008      	beq.n	8003356 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	015a      	lsls	r2, r3, #5
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	4413      	add	r3, r2
 800334c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003350:	461a      	mov	r2, r3
 8003352:	2310      	movs	r3, #16
 8003354:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335c:	2b00      	cmp	r3, #0
 800335e:	d008      	beq.n	8003372 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	015a      	lsls	r2, r3, #5
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	4413      	add	r3, r2
 8003368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800336c:	461a      	mov	r2, r3
 800336e:	2340      	movs	r3, #64	; 0x40
 8003370:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d023      	beq.n	80033c4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800337c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800337e:	6a38      	ldr	r0, [r7, #32]
 8003380:	f002 fb38 	bl	80059f4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003386:	4613      	mov	r3, r2
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	4413      	add	r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	3338      	adds	r3, #56	; 0x38
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	4413      	add	r3, r2
 8003394:	3304      	adds	r3, #4
 8003396:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	78db      	ldrb	r3, [r3, #3]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d108      	bne.n	80033b2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	2200      	movs	r2, #0
 80033a4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80033a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	4619      	mov	r1, r3
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f005 ff8b 	bl	80092c8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	015a      	lsls	r2, r3, #5
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	4413      	add	r3, r2
 80033ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033be:	461a      	mov	r2, r3
 80033c0:	2302      	movs	r3, #2
 80033c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80033ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 fcdb 	bl	8003d8c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	3301      	adds	r3, #1
 80033da:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80033dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033de:	085b      	lsrs	r3, r3, #1
 80033e0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80033e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	f47f af2e 	bne.w	8003246 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f003 fb22 	bl	8006a38 <USB_ReadInterrupts>
 80033f4:	4603      	mov	r3, r0
 80033f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033fe:	d122      	bne.n	8003446 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	69fa      	ldr	r2, [r7, #28]
 800340a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800340e:	f023 0301 	bic.w	r3, r3, #1
 8003412:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800341a:	2b01      	cmp	r3, #1
 800341c:	d108      	bne.n	8003430 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003426:	2100      	movs	r1, #0
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 fec3 	bl	80041b4 <HAL_PCDEx_LPM_Callback>
 800342e:	e002      	b.n	8003436 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f005 ff29 	bl	8009288 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	695a      	ldr	r2, [r3, #20]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003444:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4618      	mov	r0, r3
 800344c:	f003 faf4 	bl	8006a38 <USB_ReadInterrupts>
 8003450:	4603      	mov	r3, r0
 8003452:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003456:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800345a:	d112      	bne.n	8003482 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	2b01      	cmp	r3, #1
 800346a:	d102      	bne.n	8003472 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f005 fee5 	bl	800923c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	695a      	ldr	r2, [r3, #20]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003480:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f003 fad6 	bl	8006a38 <USB_ReadInterrupts>
 800348c:	4603      	mov	r3, r0
 800348e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003496:	f040 80b7 	bne.w	8003608 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	69fa      	ldr	r2, [r7, #28]
 80034a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034a8:	f023 0301 	bic.w	r3, r3, #1
 80034ac:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2110      	movs	r1, #16
 80034b4:	4618      	mov	r0, r3
 80034b6:	f002 fa9d 	bl	80059f4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034ba:	2300      	movs	r3, #0
 80034bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034be:	e046      	b.n	800354e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80034c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c2:	015a      	lsls	r2, r3, #5
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	4413      	add	r3, r2
 80034c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034cc:	461a      	mov	r2, r3
 80034ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80034d2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80034d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d6:	015a      	lsls	r2, r3, #5
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	4413      	add	r3, r2
 80034dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034e4:	0151      	lsls	r1, r2, #5
 80034e6:	69fa      	ldr	r2, [r7, #28]
 80034e8:	440a      	add	r2, r1
 80034ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80034f2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80034f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f6:	015a      	lsls	r2, r3, #5
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	4413      	add	r3, r2
 80034fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003500:	461a      	mov	r2, r3
 8003502:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003506:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350a:	015a      	lsls	r2, r3, #5
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	4413      	add	r3, r2
 8003510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003518:	0151      	lsls	r1, r2, #5
 800351a:	69fa      	ldr	r2, [r7, #28]
 800351c:	440a      	add	r2, r1
 800351e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003522:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003526:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352a:	015a      	lsls	r2, r3, #5
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	4413      	add	r3, r2
 8003530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003538:	0151      	lsls	r1, r2, #5
 800353a:	69fa      	ldr	r2, [r7, #28]
 800353c:	440a      	add	r2, r1
 800353e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003542:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003546:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800354a:	3301      	adds	r3, #1
 800354c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003554:	429a      	cmp	r2, r3
 8003556:	d3b3      	bcc.n	80034c0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800355e:	69db      	ldr	r3, [r3, #28]
 8003560:	69fa      	ldr	r2, [r7, #28]
 8003562:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003566:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800356a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003570:	2b00      	cmp	r3, #0
 8003572:	d016      	beq.n	80035a2 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800357a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800357e:	69fa      	ldr	r2, [r7, #28]
 8003580:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003584:	f043 030b 	orr.w	r3, r3, #11
 8003588:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003594:	69fa      	ldr	r2, [r7, #28]
 8003596:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800359a:	f043 030b 	orr.w	r3, r3, #11
 800359e:	6453      	str	r3, [r2, #68]	; 0x44
 80035a0:	e015      	b.n	80035ce <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	69fa      	ldr	r2, [r7, #28]
 80035ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80035b4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80035b8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	69fa      	ldr	r2, [r7, #28]
 80035c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035c8:	f043 030b 	orr.w	r3, r3, #11
 80035cc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	69fa      	ldr	r2, [r7, #28]
 80035d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035dc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80035e0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6818      	ldr	r0, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80035f2:	461a      	mov	r2, r3
 80035f4:	f003 fae4 	bl	8006bc0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	695a      	ldr	r2, [r3, #20]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003606:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4618      	mov	r0, r3
 800360e:	f003 fa13 	bl	8006a38 <USB_ReadInterrupts>
 8003612:	4603      	mov	r3, r0
 8003614:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003618:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800361c:	d124      	bne.n	8003668 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f003 faa9 	bl	8006b7a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4618      	mov	r0, r3
 800362e:	f002 fa5e 	bl	8005aee <USB_GetDevSpeed>
 8003632:	4603      	mov	r3, r0
 8003634:	461a      	mov	r2, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681c      	ldr	r4, [r3, #0]
 800363e:	f001 fa29 	bl	8004a94 <HAL_RCC_GetHCLKFreq>
 8003642:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003648:	b2db      	uxtb	r3, r3
 800364a:	461a      	mov	r2, r3
 800364c:	4620      	mov	r0, r4
 800364e:	f001 ff5d 	bl	800550c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f005 fdd3 	bl	80091fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	695a      	ldr	r2, [r3, #20]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003666:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4618      	mov	r0, r3
 800366e:	f003 f9e3 	bl	8006a38 <USB_ReadInterrupts>
 8003672:	4603      	mov	r3, r0
 8003674:	f003 0308 	and.w	r3, r3, #8
 8003678:	2b08      	cmp	r3, #8
 800367a:	d10a      	bne.n	8003692 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f005 fdb0 	bl	80091e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	695a      	ldr	r2, [r3, #20]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f002 0208 	and.w	r2, r2, #8
 8003690:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f003 f9ce 	bl	8006a38 <USB_ReadInterrupts>
 800369c:	4603      	mov	r3, r0
 800369e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a2:	2b80      	cmp	r3, #128	; 0x80
 80036a4:	d122      	bne.n	80036ec <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036ae:	6a3b      	ldr	r3, [r7, #32]
 80036b0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036b2:	2301      	movs	r3, #1
 80036b4:	627b      	str	r3, [r7, #36]	; 0x24
 80036b6:	e014      	b.n	80036e2 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80036b8:	6879      	ldr	r1, [r7, #4]
 80036ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036bc:	4613      	mov	r3, r2
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	4413      	add	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	440b      	add	r3, r1
 80036c6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d105      	bne.n	80036dc <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80036d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	4619      	mov	r1, r3
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 fb27 	bl	8003d2a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036de:	3301      	adds	r3, #1
 80036e0:	627b      	str	r3, [r7, #36]	; 0x24
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d3e5      	bcc.n	80036b8 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f003 f9a1 	bl	8006a38 <USB_ReadInterrupts>
 80036f6:	4603      	mov	r3, r0
 80036f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003700:	d13b      	bne.n	800377a <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003702:	2301      	movs	r3, #1
 8003704:	627b      	str	r3, [r7, #36]	; 0x24
 8003706:	e02b      	b.n	8003760 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370a:	015a      	lsls	r2, r3, #5
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	4413      	add	r3, r2
 8003710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003718:	6879      	ldr	r1, [r7, #4]
 800371a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800371c:	4613      	mov	r3, r2
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	4413      	add	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	440b      	add	r3, r1
 8003726:	3340      	adds	r3, #64	; 0x40
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d115      	bne.n	800375a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800372e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003730:	2b00      	cmp	r3, #0
 8003732:	da12      	bge.n	800375a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003734:	6879      	ldr	r1, [r7, #4]
 8003736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003738:	4613      	mov	r3, r2
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	4413      	add	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	440b      	add	r3, r1
 8003742:	333f      	adds	r3, #63	; 0x3f
 8003744:	2201      	movs	r2, #1
 8003746:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	b2db      	uxtb	r3, r3
 800374c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003750:	b2db      	uxtb	r3, r3
 8003752:	4619      	mov	r1, r3
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 fae8 	bl	8003d2a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800375a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375c:	3301      	adds	r3, #1
 800375e:	627b      	str	r3, [r7, #36]	; 0x24
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003766:	429a      	cmp	r2, r3
 8003768:	d3ce      	bcc.n	8003708 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	695a      	ldr	r2, [r3, #20]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003778:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4618      	mov	r0, r3
 8003780:	f003 f95a 	bl	8006a38 <USB_ReadInterrupts>
 8003784:	4603      	mov	r3, r0
 8003786:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800378a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800378e:	d155      	bne.n	800383c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003790:	2301      	movs	r3, #1
 8003792:	627b      	str	r3, [r7, #36]	; 0x24
 8003794:	e045      	b.n	8003822 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003798:	015a      	lsls	r2, r3, #5
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	4413      	add	r3, r2
 800379e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80037a6:	6879      	ldr	r1, [r7, #4]
 80037a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037aa:	4613      	mov	r3, r2
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	4413      	add	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	440b      	add	r3, r1
 80037b4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80037b8:	781b      	ldrb	r3, [r3, #0]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d12e      	bne.n	800381c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80037be:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	da2b      	bge.n	800381c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80037d0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d121      	bne.n	800381c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80037d8:	6879      	ldr	r1, [r7, #4]
 80037da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037dc:	4613      	mov	r3, r2
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	4413      	add	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80037ea:	2201      	movs	r2, #1
 80037ec:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80037f6:	6a3b      	ldr	r3, [r7, #32]
 80037f8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003802:	2b00      	cmp	r3, #0
 8003804:	d10a      	bne.n	800381c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	69fa      	ldr	r2, [r7, #28]
 8003810:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003814:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003818:	6053      	str	r3, [r2, #4]
            break;
 800381a:	e007      	b.n	800382c <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800381c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381e:	3301      	adds	r3, #1
 8003820:	627b      	str	r3, [r7, #36]	; 0x24
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003828:	429a      	cmp	r2, r3
 800382a:	d3b4      	bcc.n	8003796 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	695a      	ldr	r2, [r3, #20]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800383a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4618      	mov	r0, r3
 8003842:	f003 f8f9 	bl	8006a38 <USB_ReadInterrupts>
 8003846:	4603      	mov	r3, r0
 8003848:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800384c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003850:	d10a      	bne.n	8003868 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f005 fd4a 	bl	80092ec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	695a      	ldr	r2, [r3, #20]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003866:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4618      	mov	r0, r3
 800386e:	f003 f8e3 	bl	8006a38 <USB_ReadInterrupts>
 8003872:	4603      	mov	r3, r0
 8003874:	f003 0304 	and.w	r3, r3, #4
 8003878:	2b04      	cmp	r3, #4
 800387a:	d115      	bne.n	80038a8 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	f003 0304 	and.w	r3, r3, #4
 800388a:	2b00      	cmp	r3, #0
 800388c:	d002      	beq.n	8003894 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f005 fd3a 	bl	8009308 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6859      	ldr	r1, [r3, #4]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	430a      	orrs	r2, r1
 80038a2:	605a      	str	r2, [r3, #4]
 80038a4:	e000      	b.n	80038a8 <HAL_PCD_IRQHandler+0x938>
      return;
 80038a6:	bf00      	nop
    }
  }
}
 80038a8:	3734      	adds	r7, #52	; 0x34
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd90      	pop	{r4, r7, pc}

080038ae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b082      	sub	sp, #8
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
 80038b6:	460b      	mov	r3, r1
 80038b8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d101      	bne.n	80038c8 <HAL_PCD_SetAddress+0x1a>
 80038c4:	2302      	movs	r3, #2
 80038c6:	e013      	b.n	80038f0 <HAL_PCD_SetAddress+0x42>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	78fa      	ldrb	r2, [r7, #3]
 80038d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	78fa      	ldrb	r2, [r7, #3]
 80038de:	4611      	mov	r1, r2
 80038e0:	4618      	mov	r0, r3
 80038e2:	f003 f841 	bl	8006968 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3708      	adds	r7, #8
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	4608      	mov	r0, r1
 8003902:	4611      	mov	r1, r2
 8003904:	461a      	mov	r2, r3
 8003906:	4603      	mov	r3, r0
 8003908:	70fb      	strb	r3, [r7, #3]
 800390a:	460b      	mov	r3, r1
 800390c:	803b      	strh	r3, [r7, #0]
 800390e:	4613      	mov	r3, r2
 8003910:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003912:	2300      	movs	r3, #0
 8003914:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003916:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800391a:	2b00      	cmp	r3, #0
 800391c:	da0f      	bge.n	800393e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800391e:	78fb      	ldrb	r3, [r7, #3]
 8003920:	f003 020f 	and.w	r2, r3, #15
 8003924:	4613      	mov	r3, r2
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	4413      	add	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	3338      	adds	r3, #56	; 0x38
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	4413      	add	r3, r2
 8003932:	3304      	adds	r3, #4
 8003934:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2201      	movs	r2, #1
 800393a:	705a      	strb	r2, [r3, #1]
 800393c:	e00f      	b.n	800395e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800393e:	78fb      	ldrb	r3, [r7, #3]
 8003940:	f003 020f 	and.w	r2, r3, #15
 8003944:	4613      	mov	r3, r2
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	4413      	add	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	4413      	add	r3, r2
 8003954:	3304      	adds	r3, #4
 8003956:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800395e:	78fb      	ldrb	r3, [r7, #3]
 8003960:	f003 030f 	and.w	r3, r3, #15
 8003964:	b2da      	uxtb	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800396a:	883a      	ldrh	r2, [r7, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	78ba      	ldrb	r2, [r7, #2]
 8003974:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	785b      	ldrb	r3, [r3, #1]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d004      	beq.n	8003988 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	b29a      	uxth	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003988:	78bb      	ldrb	r3, [r7, #2]
 800398a:	2b02      	cmp	r3, #2
 800398c:	d102      	bne.n	8003994 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800399a:	2b01      	cmp	r3, #1
 800399c:	d101      	bne.n	80039a2 <HAL_PCD_EP_Open+0xaa>
 800399e:	2302      	movs	r3, #2
 80039a0:	e00e      	b.n	80039c0 <HAL_PCD_EP_Open+0xc8>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68f9      	ldr	r1, [r7, #12]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f002 f8c1 	bl	8005b38 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80039be:	7afb      	ldrb	r3, [r7, #11]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	460b      	mov	r3, r1
 80039d2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	da0f      	bge.n	80039fc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039dc:	78fb      	ldrb	r3, [r7, #3]
 80039de:	f003 020f 	and.w	r2, r3, #15
 80039e2:	4613      	mov	r3, r2
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	4413      	add	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	3338      	adds	r3, #56	; 0x38
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	4413      	add	r3, r2
 80039f0:	3304      	adds	r3, #4
 80039f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2201      	movs	r2, #1
 80039f8:	705a      	strb	r2, [r3, #1]
 80039fa:	e00f      	b.n	8003a1c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039fc:	78fb      	ldrb	r3, [r7, #3]
 80039fe:	f003 020f 	and.w	r2, r3, #15
 8003a02:	4613      	mov	r3, r2
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	4413      	add	r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	4413      	add	r3, r2
 8003a12:	3304      	adds	r3, #4
 8003a14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003a1c:	78fb      	ldrb	r3, [r7, #3]
 8003a1e:	f003 030f 	and.w	r3, r3, #15
 8003a22:	b2da      	uxtb	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d101      	bne.n	8003a36 <HAL_PCD_EP_Close+0x6e>
 8003a32:	2302      	movs	r3, #2
 8003a34:	e00e      	b.n	8003a54 <HAL_PCD_EP_Close+0x8c>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68f9      	ldr	r1, [r7, #12]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f002 f8ff 	bl	8005c48 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003a52:	2300      	movs	r3, #0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	607a      	str	r2, [r7, #4]
 8003a66:	603b      	str	r3, [r7, #0]
 8003a68:	460b      	mov	r3, r1
 8003a6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a6c:	7afb      	ldrb	r3, [r7, #11]
 8003a6e:	f003 020f 	and.w	r2, r3, #15
 8003a72:	4613      	mov	r3, r2
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	4413      	add	r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	4413      	add	r3, r2
 8003a82:	3304      	adds	r3, #4
 8003a84:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	683a      	ldr	r2, [r7, #0]
 8003a90:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	2200      	movs	r2, #0
 8003a96:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a9e:	7afb      	ldrb	r3, [r7, #11]
 8003aa0:	f003 030f 	and.w	r3, r3, #15
 8003aa4:	b2da      	uxtb	r2, r3
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d102      	bne.n	8003ab8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ab8:	7afb      	ldrb	r3, [r7, #11]
 8003aba:	f003 030f 	and.w	r3, r3, #15
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d109      	bne.n	8003ad6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6818      	ldr	r0, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	461a      	mov	r2, r3
 8003ace:	6979      	ldr	r1, [r7, #20]
 8003ad0:	f002 fbde 	bl	8006290 <USB_EP0StartXfer>
 8003ad4:	e008      	b.n	8003ae8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6818      	ldr	r0, [r3, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	6979      	ldr	r1, [r7, #20]
 8003ae4:	f002 f98c 	bl	8005e00 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3718      	adds	r7, #24
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b083      	sub	sp, #12
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
 8003afa:	460b      	mov	r3, r1
 8003afc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003afe:	78fb      	ldrb	r3, [r7, #3]
 8003b00:	f003 020f 	and.w	r2, r3, #15
 8003b04:	6879      	ldr	r1, [r7, #4]
 8003b06:	4613      	mov	r3, r2
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	4413      	add	r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	440b      	add	r3, r1
 8003b10:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003b14:	681b      	ldr	r3, [r3, #0]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b086      	sub	sp, #24
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	60f8      	str	r0, [r7, #12]
 8003b2a:	607a      	str	r2, [r7, #4]
 8003b2c:	603b      	str	r3, [r7, #0]
 8003b2e:	460b      	mov	r3, r1
 8003b30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b32:	7afb      	ldrb	r3, [r7, #11]
 8003b34:	f003 020f 	and.w	r2, r3, #15
 8003b38:	4613      	mov	r3, r2
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	4413      	add	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	3338      	adds	r3, #56	; 0x38
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	4413      	add	r3, r2
 8003b46:	3304      	adds	r3, #4
 8003b48:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b62:	7afb      	ldrb	r3, [r7, #11]
 8003b64:	f003 030f 	and.w	r3, r3, #15
 8003b68:	b2da      	uxtb	r2, r3
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d102      	bne.n	8003b7c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b7c:	7afb      	ldrb	r3, [r7, #11]
 8003b7e:	f003 030f 	and.w	r3, r3, #15
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d109      	bne.n	8003b9a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6818      	ldr	r0, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	461a      	mov	r2, r3
 8003b92:	6979      	ldr	r1, [r7, #20]
 8003b94:	f002 fb7c 	bl	8006290 <USB_EP0StartXfer>
 8003b98:	e008      	b.n	8003bac <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6818      	ldr	r0, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	6979      	ldr	r1, [r7, #20]
 8003ba8:	f002 f92a 	bl	8005e00 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3718      	adds	r7, #24
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}

08003bb6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b084      	sub	sp, #16
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003bc2:	78fb      	ldrb	r3, [r7, #3]
 8003bc4:	f003 020f 	and.w	r2, r3, #15
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d901      	bls.n	8003bd4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e050      	b.n	8003c76 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003bd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	da0f      	bge.n	8003bfc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bdc:	78fb      	ldrb	r3, [r7, #3]
 8003bde:	f003 020f 	and.w	r2, r3, #15
 8003be2:	4613      	mov	r3, r2
 8003be4:	00db      	lsls	r3, r3, #3
 8003be6:	4413      	add	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	3338      	adds	r3, #56	; 0x38
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	4413      	add	r3, r2
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	705a      	strb	r2, [r3, #1]
 8003bfa:	e00d      	b.n	8003c18 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003bfc:	78fa      	ldrb	r2, [r7, #3]
 8003bfe:	4613      	mov	r3, r2
 8003c00:	00db      	lsls	r3, r3, #3
 8003c02:	4413      	add	r3, r2
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	3304      	adds	r3, #4
 8003c10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c1e:	78fb      	ldrb	r3, [r7, #3]
 8003c20:	f003 030f 	and.w	r3, r3, #15
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d101      	bne.n	8003c38 <HAL_PCD_EP_SetStall+0x82>
 8003c34:	2302      	movs	r3, #2
 8003c36:	e01e      	b.n	8003c76 <HAL_PCD_EP_SetStall+0xc0>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68f9      	ldr	r1, [r7, #12]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f002 fdba 	bl	80067c0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c4c:	78fb      	ldrb	r3, [r7, #3]
 8003c4e:	f003 030f 	and.w	r3, r3, #15
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10a      	bne.n	8003c6c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6818      	ldr	r0, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	b2d9      	uxtb	r1, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003c66:	461a      	mov	r2, r3
 8003c68:	f002 ffaa 	bl	8006bc0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b084      	sub	sp, #16
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
 8003c86:	460b      	mov	r3, r1
 8003c88:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003c8a:	78fb      	ldrb	r3, [r7, #3]
 8003c8c:	f003 020f 	and.w	r2, r3, #15
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d901      	bls.n	8003c9c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e042      	b.n	8003d22 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	da0f      	bge.n	8003cc4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ca4:	78fb      	ldrb	r3, [r7, #3]
 8003ca6:	f003 020f 	and.w	r2, r3, #15
 8003caa:	4613      	mov	r3, r2
 8003cac:	00db      	lsls	r3, r3, #3
 8003cae:	4413      	add	r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	3338      	adds	r3, #56	; 0x38
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	3304      	adds	r3, #4
 8003cba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	705a      	strb	r2, [r3, #1]
 8003cc2:	e00f      	b.n	8003ce4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cc4:	78fb      	ldrb	r3, [r7, #3]
 8003cc6:	f003 020f 	and.w	r2, r3, #15
 8003cca:	4613      	mov	r3, r2
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	4413      	add	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	4413      	add	r3, r2
 8003cda:	3304      	adds	r3, #4
 8003cdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cea:	78fb      	ldrb	r3, [r7, #3]
 8003cec:	f003 030f 	and.w	r3, r3, #15
 8003cf0:	b2da      	uxtb	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d101      	bne.n	8003d04 <HAL_PCD_EP_ClrStall+0x86>
 8003d00:	2302      	movs	r3, #2
 8003d02:	e00e      	b.n	8003d22 <HAL_PCD_EP_ClrStall+0xa4>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68f9      	ldr	r1, [r7, #12]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f002 fdc2 	bl	800689c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b084      	sub	sp, #16
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
 8003d32:	460b      	mov	r3, r1
 8003d34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003d36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	da0c      	bge.n	8003d58 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d3e:	78fb      	ldrb	r3, [r7, #3]
 8003d40:	f003 020f 	and.w	r2, r3, #15
 8003d44:	4613      	mov	r3, r2
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	4413      	add	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	3338      	adds	r3, #56	; 0x38
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	4413      	add	r3, r2
 8003d52:	3304      	adds	r3, #4
 8003d54:	60fb      	str	r3, [r7, #12]
 8003d56:	e00c      	b.n	8003d72 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d58:	78fb      	ldrb	r3, [r7, #3]
 8003d5a:	f003 020f 	and.w	r2, r3, #15
 8003d5e:	4613      	mov	r3, r2
 8003d60:	00db      	lsls	r3, r3, #3
 8003d62:	4413      	add	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	3304      	adds	r3, #4
 8003d70:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68f9      	ldr	r1, [r7, #12]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f002 fbe1 	bl	8006540 <USB_EPStopXfer>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003d82:	7afb      	ldrb	r3, [r7, #11]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b08a      	sub	sp, #40	; 0x28
 8003d90:	af02      	add	r7, sp, #8
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	4613      	mov	r3, r2
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	4413      	add	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	3338      	adds	r3, #56	; 0x38
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	4413      	add	r3, r2
 8003db0:	3304      	adds	r3, #4
 8003db2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6a1a      	ldr	r2, [r3, #32]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d901      	bls.n	8003dc4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e06c      	b.n	8003e9e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	699a      	ldr	r2, [r3, #24]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	69fa      	ldr	r2, [r7, #28]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d902      	bls.n	8003de0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	68db      	ldr	r3, [r3, #12]
 8003dde:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	3303      	adds	r3, #3
 8003de4:	089b      	lsrs	r3, r3, #2
 8003de6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003de8:	e02b      	b.n	8003e42 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	699a      	ldr	r2, [r3, #24]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	69fa      	ldr	r2, [r7, #28]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d902      	bls.n	8003e06 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	3303      	adds	r3, #3
 8003e0a:	089b      	lsrs	r3, r3, #2
 8003e0c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6919      	ldr	r1, [r3, #16]
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	b2da      	uxtb	r2, r3
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	9300      	str	r3, [sp, #0]
 8003e22:	4603      	mov	r3, r0
 8003e24:	6978      	ldr	r0, [r7, #20]
 8003e26:	f002 fc35 	bl	8006694 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	691a      	ldr	r2, [r3, #16]
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	441a      	add	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6a1a      	ldr	r2, [r3, #32]
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	441a      	add	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	015a      	lsls	r2, r3, #5
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	4413      	add	r3, r2
 8003e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	69ba      	ldr	r2, [r7, #24]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d809      	bhi.n	8003e6c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6a1a      	ldr	r2, [r3, #32]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d203      	bcs.n	8003e6c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1be      	bne.n	8003dea <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	699a      	ldr	r2, [r3, #24]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d811      	bhi.n	8003e9c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	f003 030f 	and.w	r3, r3, #15
 8003e7e:	2201      	movs	r2, #1
 8003e80:	fa02 f303 	lsl.w	r3, r2, r3
 8003e84:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	43db      	mvns	r3, r3
 8003e92:	6939      	ldr	r1, [r7, #16]
 8003e94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e98:	4013      	ands	r3, r2
 8003e9a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3720      	adds	r7, #32
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
	...

08003ea8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b088      	sub	sp, #32
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	333c      	adds	r3, #60	; 0x3c
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	015a      	lsls	r2, r3, #5
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	4413      	add	r3, r2
 8003ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d17b      	bne.n	8003fd6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	f003 0308 	and.w	r3, r3, #8
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d015      	beq.n	8003f14 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	4a61      	ldr	r2, [pc, #388]	; (8004070 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	f240 80b9 	bls.w	8004064 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 80b3 	beq.w	8004064 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	015a      	lsls	r2, r3, #5
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	4413      	add	r3, r2
 8003f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f10:	6093      	str	r3, [r2, #8]
 8003f12:	e0a7      	b.n	8004064 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	f003 0320 	and.w	r3, r3, #32
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d009      	beq.n	8003f32 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	015a      	lsls	r2, r3, #5
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	4413      	add	r3, r2
 8003f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	2320      	movs	r3, #32
 8003f2e:	6093      	str	r3, [r2, #8]
 8003f30:	e098      	b.n	8004064 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f040 8093 	bne.w	8004064 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	4a4b      	ldr	r2, [pc, #300]	; (8004070 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d90f      	bls.n	8003f66 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00a      	beq.n	8003f66 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	015a      	lsls	r2, r3, #5
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	4413      	add	r3, r2
 8003f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f62:	6093      	str	r3, [r2, #8]
 8003f64:	e07e      	b.n	8004064 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	00db      	lsls	r3, r3, #3
 8003f6c:	4413      	add	r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	4413      	add	r3, r2
 8003f78:	3304      	adds	r3, #4
 8003f7a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	69da      	ldr	r2, [r3, #28]
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	0159      	lsls	r1, r3, #5
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	440b      	add	r3, r1
 8003f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f92:	1ad2      	subs	r2, r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d114      	bne.n	8003fc8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d109      	bne.n	8003fba <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6818      	ldr	r0, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	f002 fe04 	bl	8006bc0 <USB_EP0_OutStart>
 8003fb8:	e006      	b.n	8003fc8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	691a      	ldr	r2, [r3, #16]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	441a      	add	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	4619      	mov	r1, r3
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f005 f8d2 	bl	8009178 <HAL_PCD_DataOutStageCallback>
 8003fd4:	e046      	b.n	8004064 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	4a26      	ldr	r2, [pc, #152]	; (8004074 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d124      	bne.n	8004028 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00a      	beq.n	8003ffe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	015a      	lsls	r2, r3, #5
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	4413      	add	r3, r2
 8003ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ffa:	6093      	str	r3, [r2, #8]
 8003ffc:	e032      	b.n	8004064 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	f003 0320 	and.w	r3, r3, #32
 8004004:	2b00      	cmp	r3, #0
 8004006:	d008      	beq.n	800401a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	015a      	lsls	r2, r3, #5
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	4413      	add	r3, r2
 8004010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004014:	461a      	mov	r2, r3
 8004016:	2320      	movs	r3, #32
 8004018:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	b2db      	uxtb	r3, r3
 800401e:	4619      	mov	r1, r3
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f005 f8a9 	bl	8009178 <HAL_PCD_DataOutStageCallback>
 8004026:	e01d      	b.n	8004064 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d114      	bne.n	8004058 <PCD_EP_OutXfrComplete_int+0x1b0>
 800402e:	6879      	ldr	r1, [r7, #4]
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	4613      	mov	r3, r2
 8004034:	00db      	lsls	r3, r3, #3
 8004036:	4413      	add	r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	440b      	add	r3, r1
 800403c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d108      	bne.n	8004058 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6818      	ldr	r0, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004050:	461a      	mov	r2, r3
 8004052:	2100      	movs	r1, #0
 8004054:	f002 fdb4 	bl	8006bc0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	b2db      	uxtb	r3, r3
 800405c:	4619      	mov	r1, r3
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f005 f88a 	bl	8009178 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3720      	adds	r7, #32
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	4f54300a 	.word	0x4f54300a
 8004074:	4f54310a 	.word	0x4f54310a

08004078 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b086      	sub	sp, #24
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	333c      	adds	r3, #60	; 0x3c
 8004090:	3304      	adds	r3, #4
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	015a      	lsls	r2, r3, #5
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	4413      	add	r3, r2
 800409e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	4a15      	ldr	r2, [pc, #84]	; (8004100 <PCD_EP_OutSetupPacket_int+0x88>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d90e      	bls.n	80040cc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d009      	beq.n	80040cc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	015a      	lsls	r2, r3, #5
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	4413      	add	r3, r2
 80040c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c4:	461a      	mov	r2, r3
 80040c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040ca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f005 f841 	bl	8009154 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	4a0a      	ldr	r2, [pc, #40]	; (8004100 <PCD_EP_OutSetupPacket_int+0x88>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d90c      	bls.n	80040f4 <PCD_EP_OutSetupPacket_int+0x7c>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d108      	bne.n	80040f4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6818      	ldr	r0, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80040ec:	461a      	mov	r2, r3
 80040ee:	2101      	movs	r1, #1
 80040f0:	f002 fd66 	bl	8006bc0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3718      	adds	r7, #24
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	4f54300a 	.word	0x4f54300a

08004104 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	460b      	mov	r3, r1
 800410e:	70fb      	strb	r3, [r7, #3]
 8004110:	4613      	mov	r3, r2
 8004112:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800411c:	78fb      	ldrb	r3, [r7, #3]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d107      	bne.n	8004132 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004122:	883b      	ldrh	r3, [r7, #0]
 8004124:	0419      	lsls	r1, r3, #16
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68ba      	ldr	r2, [r7, #8]
 800412c:	430a      	orrs	r2, r1
 800412e:	629a      	str	r2, [r3, #40]	; 0x28
 8004130:	e028      	b.n	8004184 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004138:	0c1b      	lsrs	r3, r3, #16
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	4413      	add	r3, r2
 800413e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004140:	2300      	movs	r3, #0
 8004142:	73fb      	strb	r3, [r7, #15]
 8004144:	e00d      	b.n	8004162 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	7bfb      	ldrb	r3, [r7, #15]
 800414c:	3340      	adds	r3, #64	; 0x40
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4413      	add	r3, r2
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	0c1b      	lsrs	r3, r3, #16
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	4413      	add	r3, r2
 800415a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800415c:	7bfb      	ldrb	r3, [r7, #15]
 800415e:	3301      	adds	r3, #1
 8004160:	73fb      	strb	r3, [r7, #15]
 8004162:	7bfa      	ldrb	r2, [r7, #15]
 8004164:	78fb      	ldrb	r3, [r7, #3]
 8004166:	3b01      	subs	r3, #1
 8004168:	429a      	cmp	r2, r3
 800416a:	d3ec      	bcc.n	8004146 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800416c:	883b      	ldrh	r3, [r7, #0]
 800416e:	0418      	lsls	r0, r3, #16
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6819      	ldr	r1, [r3, #0]
 8004174:	78fb      	ldrb	r3, [r7, #3]
 8004176:	3b01      	subs	r3, #1
 8004178:	68ba      	ldr	r2, [r7, #8]
 800417a:	4302      	orrs	r2, r0
 800417c:	3340      	adds	r3, #64	; 0x40
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	440b      	add	r3, r1
 8004182:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004192:	b480      	push	{r7}
 8004194:	b083      	sub	sp, #12
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
 800419a:	460b      	mov	r3, r1
 800419c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	887a      	ldrh	r2, [r7, #2]
 80041a4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	460b      	mov	r3, r1
 80041be:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e267      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d075      	beq.n	80042d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041ea:	4b88      	ldr	r3, [pc, #544]	; (800440c <HAL_RCC_OscConfig+0x240>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 030c 	and.w	r3, r3, #12
 80041f2:	2b04      	cmp	r3, #4
 80041f4:	d00c      	beq.n	8004210 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041f6:	4b85      	ldr	r3, [pc, #532]	; (800440c <HAL_RCC_OscConfig+0x240>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041fe:	2b08      	cmp	r3, #8
 8004200:	d112      	bne.n	8004228 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004202:	4b82      	ldr	r3, [pc, #520]	; (800440c <HAL_RCC_OscConfig+0x240>)
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800420a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800420e:	d10b      	bne.n	8004228 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004210:	4b7e      	ldr	r3, [pc, #504]	; (800440c <HAL_RCC_OscConfig+0x240>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d05b      	beq.n	80042d4 <HAL_RCC_OscConfig+0x108>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d157      	bne.n	80042d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e242      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004230:	d106      	bne.n	8004240 <HAL_RCC_OscConfig+0x74>
 8004232:	4b76      	ldr	r3, [pc, #472]	; (800440c <HAL_RCC_OscConfig+0x240>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a75      	ldr	r2, [pc, #468]	; (800440c <HAL_RCC_OscConfig+0x240>)
 8004238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800423c:	6013      	str	r3, [r2, #0]
 800423e:	e01d      	b.n	800427c <HAL_RCC_OscConfig+0xb0>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004248:	d10c      	bne.n	8004264 <HAL_RCC_OscConfig+0x98>
 800424a:	4b70      	ldr	r3, [pc, #448]	; (800440c <HAL_RCC_OscConfig+0x240>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a6f      	ldr	r2, [pc, #444]	; (800440c <HAL_RCC_OscConfig+0x240>)
 8004250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	4b6d      	ldr	r3, [pc, #436]	; (800440c <HAL_RCC_OscConfig+0x240>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a6c      	ldr	r2, [pc, #432]	; (800440c <HAL_RCC_OscConfig+0x240>)
 800425c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	e00b      	b.n	800427c <HAL_RCC_OscConfig+0xb0>
 8004264:	4b69      	ldr	r3, [pc, #420]	; (800440c <HAL_RCC_OscConfig+0x240>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a68      	ldr	r2, [pc, #416]	; (800440c <HAL_RCC_OscConfig+0x240>)
 800426a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800426e:	6013      	str	r3, [r2, #0]
 8004270:	4b66      	ldr	r3, [pc, #408]	; (800440c <HAL_RCC_OscConfig+0x240>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a65      	ldr	r2, [pc, #404]	; (800440c <HAL_RCC_OscConfig+0x240>)
 8004276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800427a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d013      	beq.n	80042ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004284:	f7fd fe22 	bl	8001ecc <HAL_GetTick>
 8004288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800428a:	e008      	b.n	800429e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800428c:	f7fd fe1e 	bl	8001ecc <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b64      	cmp	r3, #100	; 0x64
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e207      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800429e:	4b5b      	ldr	r3, [pc, #364]	; (800440c <HAL_RCC_OscConfig+0x240>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d0f0      	beq.n	800428c <HAL_RCC_OscConfig+0xc0>
 80042aa:	e014      	b.n	80042d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ac:	f7fd fe0e 	bl	8001ecc <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042b2:	e008      	b.n	80042c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042b4:	f7fd fe0a 	bl	8001ecc <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b64      	cmp	r3, #100	; 0x64
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e1f3      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042c6:	4b51      	ldr	r3, [pc, #324]	; (800440c <HAL_RCC_OscConfig+0x240>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1f0      	bne.n	80042b4 <HAL_RCC_OscConfig+0xe8>
 80042d2:	e000      	b.n	80042d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0302 	and.w	r3, r3, #2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d063      	beq.n	80043aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042e2:	4b4a      	ldr	r3, [pc, #296]	; (800440c <HAL_RCC_OscConfig+0x240>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 030c 	and.w	r3, r3, #12
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00b      	beq.n	8004306 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ee:	4b47      	ldr	r3, [pc, #284]	; (800440c <HAL_RCC_OscConfig+0x240>)
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042f6:	2b08      	cmp	r3, #8
 80042f8:	d11c      	bne.n	8004334 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042fa:	4b44      	ldr	r3, [pc, #272]	; (800440c <HAL_RCC_OscConfig+0x240>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d116      	bne.n	8004334 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004306:	4b41      	ldr	r3, [pc, #260]	; (800440c <HAL_RCC_OscConfig+0x240>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d005      	beq.n	800431e <HAL_RCC_OscConfig+0x152>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d001      	beq.n	800431e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e1c7      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800431e:	4b3b      	ldr	r3, [pc, #236]	; (800440c <HAL_RCC_OscConfig+0x240>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	4937      	ldr	r1, [pc, #220]	; (800440c <HAL_RCC_OscConfig+0x240>)
 800432e:	4313      	orrs	r3, r2
 8004330:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004332:	e03a      	b.n	80043aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d020      	beq.n	800437e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800433c:	4b34      	ldr	r3, [pc, #208]	; (8004410 <HAL_RCC_OscConfig+0x244>)
 800433e:	2201      	movs	r2, #1
 8004340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004342:	f7fd fdc3 	bl	8001ecc <HAL_GetTick>
 8004346:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004348:	e008      	b.n	800435c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800434a:	f7fd fdbf 	bl	8001ecc <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d901      	bls.n	800435c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e1a8      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800435c:	4b2b      	ldr	r3, [pc, #172]	; (800440c <HAL_RCC_OscConfig+0x240>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d0f0      	beq.n	800434a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004368:	4b28      	ldr	r3, [pc, #160]	; (800440c <HAL_RCC_OscConfig+0x240>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	4925      	ldr	r1, [pc, #148]	; (800440c <HAL_RCC_OscConfig+0x240>)
 8004378:	4313      	orrs	r3, r2
 800437a:	600b      	str	r3, [r1, #0]
 800437c:	e015      	b.n	80043aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800437e:	4b24      	ldr	r3, [pc, #144]	; (8004410 <HAL_RCC_OscConfig+0x244>)
 8004380:	2200      	movs	r2, #0
 8004382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004384:	f7fd fda2 	bl	8001ecc <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800438c:	f7fd fd9e 	bl	8001ecc <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e187      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800439e:	4b1b      	ldr	r3, [pc, #108]	; (800440c <HAL_RCC_OscConfig+0x240>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1f0      	bne.n	800438c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0308 	and.w	r3, r3, #8
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d036      	beq.n	8004424 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d016      	beq.n	80043ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043be:	4b15      	ldr	r3, [pc, #84]	; (8004414 <HAL_RCC_OscConfig+0x248>)
 80043c0:	2201      	movs	r2, #1
 80043c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c4:	f7fd fd82 	bl	8001ecc <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ca:	e008      	b.n	80043de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043cc:	f7fd fd7e 	bl	8001ecc <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d901      	bls.n	80043de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e167      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043de:	4b0b      	ldr	r3, [pc, #44]	; (800440c <HAL_RCC_OscConfig+0x240>)
 80043e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d0f0      	beq.n	80043cc <HAL_RCC_OscConfig+0x200>
 80043ea:	e01b      	b.n	8004424 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043ec:	4b09      	ldr	r3, [pc, #36]	; (8004414 <HAL_RCC_OscConfig+0x248>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043f2:	f7fd fd6b 	bl	8001ecc <HAL_GetTick>
 80043f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043f8:	e00e      	b.n	8004418 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043fa:	f7fd fd67 	bl	8001ecc <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d907      	bls.n	8004418 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e150      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
 800440c:	40023800 	.word	0x40023800
 8004410:	42470000 	.word	0x42470000
 8004414:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004418:	4b88      	ldr	r3, [pc, #544]	; (800463c <HAL_RCC_OscConfig+0x470>)
 800441a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1ea      	bne.n	80043fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b00      	cmp	r3, #0
 800442e:	f000 8097 	beq.w	8004560 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004432:	2300      	movs	r3, #0
 8004434:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004436:	4b81      	ldr	r3, [pc, #516]	; (800463c <HAL_RCC_OscConfig+0x470>)
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10f      	bne.n	8004462 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004442:	2300      	movs	r3, #0
 8004444:	60bb      	str	r3, [r7, #8]
 8004446:	4b7d      	ldr	r3, [pc, #500]	; (800463c <HAL_RCC_OscConfig+0x470>)
 8004448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444a:	4a7c      	ldr	r2, [pc, #496]	; (800463c <HAL_RCC_OscConfig+0x470>)
 800444c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004450:	6413      	str	r3, [r2, #64]	; 0x40
 8004452:	4b7a      	ldr	r3, [pc, #488]	; (800463c <HAL_RCC_OscConfig+0x470>)
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800445a:	60bb      	str	r3, [r7, #8]
 800445c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800445e:	2301      	movs	r3, #1
 8004460:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004462:	4b77      	ldr	r3, [pc, #476]	; (8004640 <HAL_RCC_OscConfig+0x474>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446a:	2b00      	cmp	r3, #0
 800446c:	d118      	bne.n	80044a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800446e:	4b74      	ldr	r3, [pc, #464]	; (8004640 <HAL_RCC_OscConfig+0x474>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a73      	ldr	r2, [pc, #460]	; (8004640 <HAL_RCC_OscConfig+0x474>)
 8004474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004478:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800447a:	f7fd fd27 	bl	8001ecc <HAL_GetTick>
 800447e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004480:	e008      	b.n	8004494 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004482:	f7fd fd23 	bl	8001ecc <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d901      	bls.n	8004494 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004490:	2303      	movs	r3, #3
 8004492:	e10c      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004494:	4b6a      	ldr	r3, [pc, #424]	; (8004640 <HAL_RCC_OscConfig+0x474>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449c:	2b00      	cmp	r3, #0
 800449e:	d0f0      	beq.n	8004482 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d106      	bne.n	80044b6 <HAL_RCC_OscConfig+0x2ea>
 80044a8:	4b64      	ldr	r3, [pc, #400]	; (800463c <HAL_RCC_OscConfig+0x470>)
 80044aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ac:	4a63      	ldr	r2, [pc, #396]	; (800463c <HAL_RCC_OscConfig+0x470>)
 80044ae:	f043 0301 	orr.w	r3, r3, #1
 80044b2:	6713      	str	r3, [r2, #112]	; 0x70
 80044b4:	e01c      	b.n	80044f0 <HAL_RCC_OscConfig+0x324>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	2b05      	cmp	r3, #5
 80044bc:	d10c      	bne.n	80044d8 <HAL_RCC_OscConfig+0x30c>
 80044be:	4b5f      	ldr	r3, [pc, #380]	; (800463c <HAL_RCC_OscConfig+0x470>)
 80044c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c2:	4a5e      	ldr	r2, [pc, #376]	; (800463c <HAL_RCC_OscConfig+0x470>)
 80044c4:	f043 0304 	orr.w	r3, r3, #4
 80044c8:	6713      	str	r3, [r2, #112]	; 0x70
 80044ca:	4b5c      	ldr	r3, [pc, #368]	; (800463c <HAL_RCC_OscConfig+0x470>)
 80044cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ce:	4a5b      	ldr	r2, [pc, #364]	; (800463c <HAL_RCC_OscConfig+0x470>)
 80044d0:	f043 0301 	orr.w	r3, r3, #1
 80044d4:	6713      	str	r3, [r2, #112]	; 0x70
 80044d6:	e00b      	b.n	80044f0 <HAL_RCC_OscConfig+0x324>
 80044d8:	4b58      	ldr	r3, [pc, #352]	; (800463c <HAL_RCC_OscConfig+0x470>)
 80044da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044dc:	4a57      	ldr	r2, [pc, #348]	; (800463c <HAL_RCC_OscConfig+0x470>)
 80044de:	f023 0301 	bic.w	r3, r3, #1
 80044e2:	6713      	str	r3, [r2, #112]	; 0x70
 80044e4:	4b55      	ldr	r3, [pc, #340]	; (800463c <HAL_RCC_OscConfig+0x470>)
 80044e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e8:	4a54      	ldr	r2, [pc, #336]	; (800463c <HAL_RCC_OscConfig+0x470>)
 80044ea:	f023 0304 	bic.w	r3, r3, #4
 80044ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d015      	beq.n	8004524 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f8:	f7fd fce8 	bl	8001ecc <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044fe:	e00a      	b.n	8004516 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004500:	f7fd fce4 	bl	8001ecc <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	f241 3288 	movw	r2, #5000	; 0x1388
 800450e:	4293      	cmp	r3, r2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e0cb      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004516:	4b49      	ldr	r3, [pc, #292]	; (800463c <HAL_RCC_OscConfig+0x470>)
 8004518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d0ee      	beq.n	8004500 <HAL_RCC_OscConfig+0x334>
 8004522:	e014      	b.n	800454e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004524:	f7fd fcd2 	bl	8001ecc <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800452a:	e00a      	b.n	8004542 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800452c:	f7fd fcce 	bl	8001ecc <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	f241 3288 	movw	r2, #5000	; 0x1388
 800453a:	4293      	cmp	r3, r2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e0b5      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004542:	4b3e      	ldr	r3, [pc, #248]	; (800463c <HAL_RCC_OscConfig+0x470>)
 8004544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1ee      	bne.n	800452c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800454e:	7dfb      	ldrb	r3, [r7, #23]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d105      	bne.n	8004560 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004554:	4b39      	ldr	r3, [pc, #228]	; (800463c <HAL_RCC_OscConfig+0x470>)
 8004556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004558:	4a38      	ldr	r2, [pc, #224]	; (800463c <HAL_RCC_OscConfig+0x470>)
 800455a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800455e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 80a1 	beq.w	80046ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800456a:	4b34      	ldr	r3, [pc, #208]	; (800463c <HAL_RCC_OscConfig+0x470>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f003 030c 	and.w	r3, r3, #12
 8004572:	2b08      	cmp	r3, #8
 8004574:	d05c      	beq.n	8004630 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	2b02      	cmp	r3, #2
 800457c:	d141      	bne.n	8004602 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800457e:	4b31      	ldr	r3, [pc, #196]	; (8004644 <HAL_RCC_OscConfig+0x478>)
 8004580:	2200      	movs	r2, #0
 8004582:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004584:	f7fd fca2 	bl	8001ecc <HAL_GetTick>
 8004588:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800458a:	e008      	b.n	800459e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800458c:	f7fd fc9e 	bl	8001ecc <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b02      	cmp	r3, #2
 8004598:	d901      	bls.n	800459e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e087      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800459e:	4b27      	ldr	r3, [pc, #156]	; (800463c <HAL_RCC_OscConfig+0x470>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1f0      	bne.n	800458c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	69da      	ldr	r2, [r3, #28]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	431a      	orrs	r2, r3
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b8:	019b      	lsls	r3, r3, #6
 80045ba:	431a      	orrs	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c0:	085b      	lsrs	r3, r3, #1
 80045c2:	3b01      	subs	r3, #1
 80045c4:	041b      	lsls	r3, r3, #16
 80045c6:	431a      	orrs	r2, r3
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045cc:	061b      	lsls	r3, r3, #24
 80045ce:	491b      	ldr	r1, [pc, #108]	; (800463c <HAL_RCC_OscConfig+0x470>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045d4:	4b1b      	ldr	r3, [pc, #108]	; (8004644 <HAL_RCC_OscConfig+0x478>)
 80045d6:	2201      	movs	r2, #1
 80045d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045da:	f7fd fc77 	bl	8001ecc <HAL_GetTick>
 80045de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045e0:	e008      	b.n	80045f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045e2:	f7fd fc73 	bl	8001ecc <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d901      	bls.n	80045f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e05c      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045f4:	4b11      	ldr	r3, [pc, #68]	; (800463c <HAL_RCC_OscConfig+0x470>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d0f0      	beq.n	80045e2 <HAL_RCC_OscConfig+0x416>
 8004600:	e054      	b.n	80046ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004602:	4b10      	ldr	r3, [pc, #64]	; (8004644 <HAL_RCC_OscConfig+0x478>)
 8004604:	2200      	movs	r2, #0
 8004606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004608:	f7fd fc60 	bl	8001ecc <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004610:	f7fd fc5c 	bl	8001ecc <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e045      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004622:	4b06      	ldr	r3, [pc, #24]	; (800463c <HAL_RCC_OscConfig+0x470>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1f0      	bne.n	8004610 <HAL_RCC_OscConfig+0x444>
 800462e:	e03d      	b.n	80046ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	699b      	ldr	r3, [r3, #24]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d107      	bne.n	8004648 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e038      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
 800463c:	40023800 	.word	0x40023800
 8004640:	40007000 	.word	0x40007000
 8004644:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004648:	4b1b      	ldr	r3, [pc, #108]	; (80046b8 <HAL_RCC_OscConfig+0x4ec>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d028      	beq.n	80046a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004660:	429a      	cmp	r2, r3
 8004662:	d121      	bne.n	80046a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800466e:	429a      	cmp	r2, r3
 8004670:	d11a      	bne.n	80046a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004672:	68fa      	ldr	r2, [r7, #12]
 8004674:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004678:	4013      	ands	r3, r2
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800467e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004680:	4293      	cmp	r3, r2
 8004682:	d111      	bne.n	80046a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468e:	085b      	lsrs	r3, r3, #1
 8004690:	3b01      	subs	r3, #1
 8004692:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004694:	429a      	cmp	r2, r3
 8004696:	d107      	bne.n	80046a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d001      	beq.n	80046ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e000      	b.n	80046ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3718      	adds	r7, #24
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	40023800 	.word	0x40023800

080046bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e0cc      	b.n	800486a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046d0:	4b68      	ldr	r3, [pc, #416]	; (8004874 <HAL_RCC_ClockConfig+0x1b8>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0307 	and.w	r3, r3, #7
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d90c      	bls.n	80046f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046de:	4b65      	ldr	r3, [pc, #404]	; (8004874 <HAL_RCC_ClockConfig+0x1b8>)
 80046e0:	683a      	ldr	r2, [r7, #0]
 80046e2:	b2d2      	uxtb	r2, r2
 80046e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046e6:	4b63      	ldr	r3, [pc, #396]	; (8004874 <HAL_RCC_ClockConfig+0x1b8>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0307 	and.w	r3, r3, #7
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d001      	beq.n	80046f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e0b8      	b.n	800486a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d020      	beq.n	8004746 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b00      	cmp	r3, #0
 800470e:	d005      	beq.n	800471c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004710:	4b59      	ldr	r3, [pc, #356]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	4a58      	ldr	r2, [pc, #352]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 8004716:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800471a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0308 	and.w	r3, r3, #8
 8004724:	2b00      	cmp	r3, #0
 8004726:	d005      	beq.n	8004734 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004728:	4b53      	ldr	r3, [pc, #332]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	4a52      	ldr	r2, [pc, #328]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800472e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004732:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004734:	4b50      	ldr	r3, [pc, #320]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	494d      	ldr	r1, [pc, #308]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 8004742:	4313      	orrs	r3, r2
 8004744:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d044      	beq.n	80047dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	2b01      	cmp	r3, #1
 8004758:	d107      	bne.n	800476a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800475a:	4b47      	ldr	r3, [pc, #284]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d119      	bne.n	800479a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e07f      	b.n	800486a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	2b02      	cmp	r3, #2
 8004770:	d003      	beq.n	800477a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004776:	2b03      	cmp	r3, #3
 8004778:	d107      	bne.n	800478a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800477a:	4b3f      	ldr	r3, [pc, #252]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d109      	bne.n	800479a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e06f      	b.n	800486a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800478a:	4b3b      	ldr	r3, [pc, #236]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e067      	b.n	800486a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800479a:	4b37      	ldr	r3, [pc, #220]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	f023 0203 	bic.w	r2, r3, #3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	4934      	ldr	r1, [pc, #208]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047ac:	f7fd fb8e 	bl	8001ecc <HAL_GetTick>
 80047b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047b2:	e00a      	b.n	80047ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047b4:	f7fd fb8a 	bl	8001ecc <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d901      	bls.n	80047ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e04f      	b.n	800486a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ca:	4b2b      	ldr	r3, [pc, #172]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f003 020c 	and.w	r2, r3, #12
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	429a      	cmp	r2, r3
 80047da:	d1eb      	bne.n	80047b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047dc:	4b25      	ldr	r3, [pc, #148]	; (8004874 <HAL_RCC_ClockConfig+0x1b8>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d20c      	bcs.n	8004804 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ea:	4b22      	ldr	r3, [pc, #136]	; (8004874 <HAL_RCC_ClockConfig+0x1b8>)
 80047ec:	683a      	ldr	r2, [r7, #0]
 80047ee:	b2d2      	uxtb	r2, r2
 80047f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047f2:	4b20      	ldr	r3, [pc, #128]	; (8004874 <HAL_RCC_ClockConfig+0x1b8>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0307 	and.w	r3, r3, #7
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d001      	beq.n	8004804 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e032      	b.n	800486a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0304 	and.w	r3, r3, #4
 800480c:	2b00      	cmp	r3, #0
 800480e:	d008      	beq.n	8004822 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004810:	4b19      	ldr	r3, [pc, #100]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	4916      	ldr	r1, [pc, #88]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800481e:	4313      	orrs	r3, r2
 8004820:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0308 	and.w	r3, r3, #8
 800482a:	2b00      	cmp	r3, #0
 800482c:	d009      	beq.n	8004842 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800482e:	4b12      	ldr	r3, [pc, #72]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	00db      	lsls	r3, r3, #3
 800483c:	490e      	ldr	r1, [pc, #56]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800483e:	4313      	orrs	r3, r2
 8004840:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004842:	f000 f821 	bl	8004888 <HAL_RCC_GetSysClockFreq>
 8004846:	4602      	mov	r2, r0
 8004848:	4b0b      	ldr	r3, [pc, #44]	; (8004878 <HAL_RCC_ClockConfig+0x1bc>)
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	091b      	lsrs	r3, r3, #4
 800484e:	f003 030f 	and.w	r3, r3, #15
 8004852:	490a      	ldr	r1, [pc, #40]	; (800487c <HAL_RCC_ClockConfig+0x1c0>)
 8004854:	5ccb      	ldrb	r3, [r1, r3]
 8004856:	fa22 f303 	lsr.w	r3, r2, r3
 800485a:	4a09      	ldr	r2, [pc, #36]	; (8004880 <HAL_RCC_ClockConfig+0x1c4>)
 800485c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800485e:	4b09      	ldr	r3, [pc, #36]	; (8004884 <HAL_RCC_ClockConfig+0x1c8>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4618      	mov	r0, r3
 8004864:	f7fd faee 	bl	8001e44 <HAL_InitTick>

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	40023c00 	.word	0x40023c00
 8004878:	40023800 	.word	0x40023800
 800487c:	0800c3c8 	.word	0x0800c3c8
 8004880:	20000034 	.word	0x20000034
 8004884:	20000038 	.word	0x20000038

08004888 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004888:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800488c:	b094      	sub	sp, #80	; 0x50
 800488e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004890:	2300      	movs	r3, #0
 8004892:	647b      	str	r3, [r7, #68]	; 0x44
 8004894:	2300      	movs	r3, #0
 8004896:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004898:	2300      	movs	r3, #0
 800489a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800489c:	2300      	movs	r3, #0
 800489e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048a0:	4b79      	ldr	r3, [pc, #484]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f003 030c 	and.w	r3, r3, #12
 80048a8:	2b08      	cmp	r3, #8
 80048aa:	d00d      	beq.n	80048c8 <HAL_RCC_GetSysClockFreq+0x40>
 80048ac:	2b08      	cmp	r3, #8
 80048ae:	f200 80e1 	bhi.w	8004a74 <HAL_RCC_GetSysClockFreq+0x1ec>
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d002      	beq.n	80048bc <HAL_RCC_GetSysClockFreq+0x34>
 80048b6:	2b04      	cmp	r3, #4
 80048b8:	d003      	beq.n	80048c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80048ba:	e0db      	b.n	8004a74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048bc:	4b73      	ldr	r3, [pc, #460]	; (8004a8c <HAL_RCC_GetSysClockFreq+0x204>)
 80048be:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80048c0:	e0db      	b.n	8004a7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048c2:	4b73      	ldr	r3, [pc, #460]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x208>)
 80048c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048c6:	e0d8      	b.n	8004a7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048c8:	4b6f      	ldr	r3, [pc, #444]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048d0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048d2:	4b6d      	ldr	r3, [pc, #436]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d063      	beq.n	80049a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048de:	4b6a      	ldr	r3, [pc, #424]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	099b      	lsrs	r3, r3, #6
 80048e4:	2200      	movs	r2, #0
 80048e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80048e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80048ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048f0:	633b      	str	r3, [r7, #48]	; 0x30
 80048f2:	2300      	movs	r3, #0
 80048f4:	637b      	str	r3, [r7, #52]	; 0x34
 80048f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80048fa:	4622      	mov	r2, r4
 80048fc:	462b      	mov	r3, r5
 80048fe:	f04f 0000 	mov.w	r0, #0
 8004902:	f04f 0100 	mov.w	r1, #0
 8004906:	0159      	lsls	r1, r3, #5
 8004908:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800490c:	0150      	lsls	r0, r2, #5
 800490e:	4602      	mov	r2, r0
 8004910:	460b      	mov	r3, r1
 8004912:	4621      	mov	r1, r4
 8004914:	1a51      	subs	r1, r2, r1
 8004916:	6139      	str	r1, [r7, #16]
 8004918:	4629      	mov	r1, r5
 800491a:	eb63 0301 	sbc.w	r3, r3, r1
 800491e:	617b      	str	r3, [r7, #20]
 8004920:	f04f 0200 	mov.w	r2, #0
 8004924:	f04f 0300 	mov.w	r3, #0
 8004928:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800492c:	4659      	mov	r1, fp
 800492e:	018b      	lsls	r3, r1, #6
 8004930:	4651      	mov	r1, sl
 8004932:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004936:	4651      	mov	r1, sl
 8004938:	018a      	lsls	r2, r1, #6
 800493a:	4651      	mov	r1, sl
 800493c:	ebb2 0801 	subs.w	r8, r2, r1
 8004940:	4659      	mov	r1, fp
 8004942:	eb63 0901 	sbc.w	r9, r3, r1
 8004946:	f04f 0200 	mov.w	r2, #0
 800494a:	f04f 0300 	mov.w	r3, #0
 800494e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004952:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004956:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800495a:	4690      	mov	r8, r2
 800495c:	4699      	mov	r9, r3
 800495e:	4623      	mov	r3, r4
 8004960:	eb18 0303 	adds.w	r3, r8, r3
 8004964:	60bb      	str	r3, [r7, #8]
 8004966:	462b      	mov	r3, r5
 8004968:	eb49 0303 	adc.w	r3, r9, r3
 800496c:	60fb      	str	r3, [r7, #12]
 800496e:	f04f 0200 	mov.w	r2, #0
 8004972:	f04f 0300 	mov.w	r3, #0
 8004976:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800497a:	4629      	mov	r1, r5
 800497c:	024b      	lsls	r3, r1, #9
 800497e:	4621      	mov	r1, r4
 8004980:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004984:	4621      	mov	r1, r4
 8004986:	024a      	lsls	r2, r1, #9
 8004988:	4610      	mov	r0, r2
 800498a:	4619      	mov	r1, r3
 800498c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800498e:	2200      	movs	r2, #0
 8004990:	62bb      	str	r3, [r7, #40]	; 0x28
 8004992:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004994:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004998:	f7fc f90e 	bl	8000bb8 <__aeabi_uldivmod>
 800499c:	4602      	mov	r2, r0
 800499e:	460b      	mov	r3, r1
 80049a0:	4613      	mov	r3, r2
 80049a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049a4:	e058      	b.n	8004a58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049a6:	4b38      	ldr	r3, [pc, #224]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x200>)
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	099b      	lsrs	r3, r3, #6
 80049ac:	2200      	movs	r2, #0
 80049ae:	4618      	mov	r0, r3
 80049b0:	4611      	mov	r1, r2
 80049b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049b6:	623b      	str	r3, [r7, #32]
 80049b8:	2300      	movs	r3, #0
 80049ba:	627b      	str	r3, [r7, #36]	; 0x24
 80049bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80049c0:	4642      	mov	r2, r8
 80049c2:	464b      	mov	r3, r9
 80049c4:	f04f 0000 	mov.w	r0, #0
 80049c8:	f04f 0100 	mov.w	r1, #0
 80049cc:	0159      	lsls	r1, r3, #5
 80049ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049d2:	0150      	lsls	r0, r2, #5
 80049d4:	4602      	mov	r2, r0
 80049d6:	460b      	mov	r3, r1
 80049d8:	4641      	mov	r1, r8
 80049da:	ebb2 0a01 	subs.w	sl, r2, r1
 80049de:	4649      	mov	r1, r9
 80049e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80049e4:	f04f 0200 	mov.w	r2, #0
 80049e8:	f04f 0300 	mov.w	r3, #0
 80049ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80049f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80049f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80049f8:	ebb2 040a 	subs.w	r4, r2, sl
 80049fc:	eb63 050b 	sbc.w	r5, r3, fp
 8004a00:	f04f 0200 	mov.w	r2, #0
 8004a04:	f04f 0300 	mov.w	r3, #0
 8004a08:	00eb      	lsls	r3, r5, #3
 8004a0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a0e:	00e2      	lsls	r2, r4, #3
 8004a10:	4614      	mov	r4, r2
 8004a12:	461d      	mov	r5, r3
 8004a14:	4643      	mov	r3, r8
 8004a16:	18e3      	adds	r3, r4, r3
 8004a18:	603b      	str	r3, [r7, #0]
 8004a1a:	464b      	mov	r3, r9
 8004a1c:	eb45 0303 	adc.w	r3, r5, r3
 8004a20:	607b      	str	r3, [r7, #4]
 8004a22:	f04f 0200 	mov.w	r2, #0
 8004a26:	f04f 0300 	mov.w	r3, #0
 8004a2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a2e:	4629      	mov	r1, r5
 8004a30:	028b      	lsls	r3, r1, #10
 8004a32:	4621      	mov	r1, r4
 8004a34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a38:	4621      	mov	r1, r4
 8004a3a:	028a      	lsls	r2, r1, #10
 8004a3c:	4610      	mov	r0, r2
 8004a3e:	4619      	mov	r1, r3
 8004a40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a42:	2200      	movs	r2, #0
 8004a44:	61bb      	str	r3, [r7, #24]
 8004a46:	61fa      	str	r2, [r7, #28]
 8004a48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a4c:	f7fc f8b4 	bl	8000bb8 <__aeabi_uldivmod>
 8004a50:	4602      	mov	r2, r0
 8004a52:	460b      	mov	r3, r1
 8004a54:	4613      	mov	r3, r2
 8004a56:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a58:	4b0b      	ldr	r3, [pc, #44]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	0c1b      	lsrs	r3, r3, #16
 8004a5e:	f003 0303 	and.w	r3, r3, #3
 8004a62:	3301      	adds	r3, #1
 8004a64:	005b      	lsls	r3, r3, #1
 8004a66:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004a68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a72:	e002      	b.n	8004a7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a74:	4b05      	ldr	r3, [pc, #20]	; (8004a8c <HAL_RCC_GetSysClockFreq+0x204>)
 8004a76:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3750      	adds	r7, #80	; 0x50
 8004a80:	46bd      	mov	sp, r7
 8004a82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a86:	bf00      	nop
 8004a88:	40023800 	.word	0x40023800
 8004a8c:	00f42400 	.word	0x00f42400
 8004a90:	007a1200 	.word	0x007a1200

08004a94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a94:	b480      	push	{r7}
 8004a96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a98:	4b03      	ldr	r3, [pc, #12]	; (8004aa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	20000034 	.word	0x20000034

08004aac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e041      	b.n	8004b42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d106      	bne.n	8004ad8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f7fc ffe8 	bl	8001aa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2202      	movs	r2, #2
 8004adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	3304      	adds	r3, #4
 8004ae8:	4619      	mov	r1, r3
 8004aea:	4610      	mov	r0, r2
 8004aec:	f000 fb10 	bl	8005110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3708      	adds	r7, #8
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
	...

08004b4c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d001      	beq.n	8004b64 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e03c      	b.n	8004bde <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2202      	movs	r2, #2
 8004b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a1e      	ldr	r2, [pc, #120]	; (8004bec <HAL_TIM_Base_Start+0xa0>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d018      	beq.n	8004ba8 <HAL_TIM_Base_Start+0x5c>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b7e:	d013      	beq.n	8004ba8 <HAL_TIM_Base_Start+0x5c>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a1a      	ldr	r2, [pc, #104]	; (8004bf0 <HAL_TIM_Base_Start+0xa4>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d00e      	beq.n	8004ba8 <HAL_TIM_Base_Start+0x5c>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a19      	ldr	r2, [pc, #100]	; (8004bf4 <HAL_TIM_Base_Start+0xa8>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d009      	beq.n	8004ba8 <HAL_TIM_Base_Start+0x5c>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a17      	ldr	r2, [pc, #92]	; (8004bf8 <HAL_TIM_Base_Start+0xac>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d004      	beq.n	8004ba8 <HAL_TIM_Base_Start+0x5c>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a16      	ldr	r2, [pc, #88]	; (8004bfc <HAL_TIM_Base_Start+0xb0>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d111      	bne.n	8004bcc <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f003 0307 	and.w	r3, r3, #7
 8004bb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2b06      	cmp	r3, #6
 8004bb8:	d010      	beq.n	8004bdc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f042 0201 	orr.w	r2, r2, #1
 8004bc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bca:	e007      	b.n	8004bdc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f042 0201 	orr.w	r2, r2, #1
 8004bda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3714      	adds	r7, #20
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	40010000 	.word	0x40010000
 8004bf0:	40000400 	.word	0x40000400
 8004bf4:	40000800 	.word	0x40000800
 8004bf8:	40000c00 	.word	0x40000c00
 8004bfc:	40014000 	.word	0x40014000

08004c00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d001      	beq.n	8004c18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e044      	b.n	8004ca2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68da      	ldr	r2, [r3, #12]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f042 0201 	orr.w	r2, r2, #1
 8004c2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a1e      	ldr	r2, [pc, #120]	; (8004cb0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d018      	beq.n	8004c6c <HAL_TIM_Base_Start_IT+0x6c>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c42:	d013      	beq.n	8004c6c <HAL_TIM_Base_Start_IT+0x6c>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a1a      	ldr	r2, [pc, #104]	; (8004cb4 <HAL_TIM_Base_Start_IT+0xb4>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d00e      	beq.n	8004c6c <HAL_TIM_Base_Start_IT+0x6c>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a19      	ldr	r2, [pc, #100]	; (8004cb8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d009      	beq.n	8004c6c <HAL_TIM_Base_Start_IT+0x6c>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a17      	ldr	r2, [pc, #92]	; (8004cbc <HAL_TIM_Base_Start_IT+0xbc>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d004      	beq.n	8004c6c <HAL_TIM_Base_Start_IT+0x6c>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a16      	ldr	r2, [pc, #88]	; (8004cc0 <HAL_TIM_Base_Start_IT+0xc0>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d111      	bne.n	8004c90 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f003 0307 	and.w	r3, r3, #7
 8004c76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2b06      	cmp	r3, #6
 8004c7c:	d010      	beq.n	8004ca0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f042 0201 	orr.w	r2, r2, #1
 8004c8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c8e:	e007      	b.n	8004ca0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f042 0201 	orr.w	r2, r2, #1
 8004c9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3714      	adds	r7, #20
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	40010000 	.word	0x40010000
 8004cb4:	40000400 	.word	0x40000400
 8004cb8:	40000800 	.word	0x40000800
 8004cbc:	40000c00 	.word	0x40000c00
 8004cc0:	40014000 	.word	0x40014000

08004cc4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68da      	ldr	r2, [r3, #12]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f022 0201 	bic.w	r2, r2, #1
 8004cda:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6a1a      	ldr	r2, [r3, #32]
 8004ce2:	f241 1311 	movw	r3, #4369	; 0x1111
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d10f      	bne.n	8004d0c <HAL_TIM_Base_Stop_IT+0x48>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6a1a      	ldr	r2, [r3, #32]
 8004cf2:	f240 4344 	movw	r3, #1092	; 0x444
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d107      	bne.n	8004d0c <HAL_TIM_Base_Stop_IT+0x48>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 0201 	bic.w	r2, r2, #1
 8004d0a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	370c      	adds	r7, #12
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b082      	sub	sp, #8
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d122      	bne.n	8004d7e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	f003 0302 	and.w	r3, r3, #2
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d11b      	bne.n	8004d7e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f06f 0202 	mvn.w	r2, #2
 8004d4e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	699b      	ldr	r3, [r3, #24]
 8004d5c:	f003 0303 	and.w	r3, r3, #3
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d003      	beq.n	8004d6c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 f9b5 	bl	80050d4 <HAL_TIM_IC_CaptureCallback>
 8004d6a:	e005      	b.n	8004d78 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 f9a7 	bl	80050c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 f9b8 	bl	80050e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	f003 0304 	and.w	r3, r3, #4
 8004d88:	2b04      	cmp	r3, #4
 8004d8a:	d122      	bne.n	8004dd2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	f003 0304 	and.w	r3, r3, #4
 8004d96:	2b04      	cmp	r3, #4
 8004d98:	d11b      	bne.n	8004dd2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f06f 0204 	mvn.w	r2, #4
 8004da2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2202      	movs	r2, #2
 8004da8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d003      	beq.n	8004dc0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 f98b 	bl	80050d4 <HAL_TIM_IC_CaptureCallback>
 8004dbe:	e005      	b.n	8004dcc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 f97d 	bl	80050c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f98e 	bl	80050e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	f003 0308 	and.w	r3, r3, #8
 8004ddc:	2b08      	cmp	r3, #8
 8004dde:	d122      	bne.n	8004e26 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	f003 0308 	and.w	r3, r3, #8
 8004dea:	2b08      	cmp	r3, #8
 8004dec:	d11b      	bne.n	8004e26 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f06f 0208 	mvn.w	r2, #8
 8004df6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2204      	movs	r2, #4
 8004dfc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	69db      	ldr	r3, [r3, #28]
 8004e04:	f003 0303 	and.w	r3, r3, #3
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d003      	beq.n	8004e14 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 f961 	bl	80050d4 <HAL_TIM_IC_CaptureCallback>
 8004e12:	e005      	b.n	8004e20 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f000 f953 	bl	80050c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f964 	bl	80050e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	f003 0310 	and.w	r3, r3, #16
 8004e30:	2b10      	cmp	r3, #16
 8004e32:	d122      	bne.n	8004e7a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	f003 0310 	and.w	r3, r3, #16
 8004e3e:	2b10      	cmp	r3, #16
 8004e40:	d11b      	bne.n	8004e7a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f06f 0210 	mvn.w	r2, #16
 8004e4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2208      	movs	r2, #8
 8004e50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	69db      	ldr	r3, [r3, #28]
 8004e58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d003      	beq.n	8004e68 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 f937 	bl	80050d4 <HAL_TIM_IC_CaptureCallback>
 8004e66:	e005      	b.n	8004e74 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 f929 	bl	80050c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 f93a 	bl	80050e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	f003 0301 	and.w	r3, r3, #1
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d10e      	bne.n	8004ea6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d107      	bne.n	8004ea6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f06f 0201 	mvn.w	r2, #1
 8004e9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f7fc fd19 	bl	80018d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eb0:	2b80      	cmp	r3, #128	; 0x80
 8004eb2:	d10e      	bne.n	8004ed2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ebe:	2b80      	cmp	r3, #128	; 0x80
 8004ec0:	d107      	bne.n	8004ed2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004eca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 fab1 	bl	8005434 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004edc:	2b40      	cmp	r3, #64	; 0x40
 8004ede:	d10e      	bne.n	8004efe <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eea:	2b40      	cmp	r3, #64	; 0x40
 8004eec:	d107      	bne.n	8004efe <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ef6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 f8ff 	bl	80050fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	f003 0320 	and.w	r3, r3, #32
 8004f08:	2b20      	cmp	r3, #32
 8004f0a:	d10e      	bne.n	8004f2a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	f003 0320 	and.w	r3, r3, #32
 8004f16:	2b20      	cmp	r3, #32
 8004f18:	d107      	bne.n	8004f2a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f06f 0220 	mvn.w	r2, #32
 8004f22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 fa7b 	bl	8005420 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f2a:	bf00      	nop
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b084      	sub	sp, #16
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
 8004f3a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d101      	bne.n	8004f4e <HAL_TIM_ConfigClockSource+0x1c>
 8004f4a:	2302      	movs	r3, #2
 8004f4c:	e0b4      	b.n	80050b8 <HAL_TIM_ConfigClockSource+0x186>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2202      	movs	r2, #2
 8004f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f6c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f74:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f86:	d03e      	beq.n	8005006 <HAL_TIM_ConfigClockSource+0xd4>
 8004f88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f8c:	f200 8087 	bhi.w	800509e <HAL_TIM_ConfigClockSource+0x16c>
 8004f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f94:	f000 8086 	beq.w	80050a4 <HAL_TIM_ConfigClockSource+0x172>
 8004f98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f9c:	d87f      	bhi.n	800509e <HAL_TIM_ConfigClockSource+0x16c>
 8004f9e:	2b70      	cmp	r3, #112	; 0x70
 8004fa0:	d01a      	beq.n	8004fd8 <HAL_TIM_ConfigClockSource+0xa6>
 8004fa2:	2b70      	cmp	r3, #112	; 0x70
 8004fa4:	d87b      	bhi.n	800509e <HAL_TIM_ConfigClockSource+0x16c>
 8004fa6:	2b60      	cmp	r3, #96	; 0x60
 8004fa8:	d050      	beq.n	800504c <HAL_TIM_ConfigClockSource+0x11a>
 8004faa:	2b60      	cmp	r3, #96	; 0x60
 8004fac:	d877      	bhi.n	800509e <HAL_TIM_ConfigClockSource+0x16c>
 8004fae:	2b50      	cmp	r3, #80	; 0x50
 8004fb0:	d03c      	beq.n	800502c <HAL_TIM_ConfigClockSource+0xfa>
 8004fb2:	2b50      	cmp	r3, #80	; 0x50
 8004fb4:	d873      	bhi.n	800509e <HAL_TIM_ConfigClockSource+0x16c>
 8004fb6:	2b40      	cmp	r3, #64	; 0x40
 8004fb8:	d058      	beq.n	800506c <HAL_TIM_ConfigClockSource+0x13a>
 8004fba:	2b40      	cmp	r3, #64	; 0x40
 8004fbc:	d86f      	bhi.n	800509e <HAL_TIM_ConfigClockSource+0x16c>
 8004fbe:	2b30      	cmp	r3, #48	; 0x30
 8004fc0:	d064      	beq.n	800508c <HAL_TIM_ConfigClockSource+0x15a>
 8004fc2:	2b30      	cmp	r3, #48	; 0x30
 8004fc4:	d86b      	bhi.n	800509e <HAL_TIM_ConfigClockSource+0x16c>
 8004fc6:	2b20      	cmp	r3, #32
 8004fc8:	d060      	beq.n	800508c <HAL_TIM_ConfigClockSource+0x15a>
 8004fca:	2b20      	cmp	r3, #32
 8004fcc:	d867      	bhi.n	800509e <HAL_TIM_ConfigClockSource+0x16c>
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d05c      	beq.n	800508c <HAL_TIM_ConfigClockSource+0x15a>
 8004fd2:	2b10      	cmp	r3, #16
 8004fd4:	d05a      	beq.n	800508c <HAL_TIM_ConfigClockSource+0x15a>
 8004fd6:	e062      	b.n	800509e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6818      	ldr	r0, [r3, #0]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	6899      	ldr	r1, [r3, #8]
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	685a      	ldr	r2, [r3, #4]
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f000 f98c 	bl	8005304 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ffa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	609a      	str	r2, [r3, #8]
      break;
 8005004:	e04f      	b.n	80050a6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6818      	ldr	r0, [r3, #0]
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	6899      	ldr	r1, [r3, #8]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	685a      	ldr	r2, [r3, #4]
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	f000 f975 	bl	8005304 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	689a      	ldr	r2, [r3, #8]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005028:	609a      	str	r2, [r3, #8]
      break;
 800502a:	e03c      	b.n	80050a6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6818      	ldr	r0, [r3, #0]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	6859      	ldr	r1, [r3, #4]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	461a      	mov	r2, r3
 800503a:	f000 f8e9 	bl	8005210 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2150      	movs	r1, #80	; 0x50
 8005044:	4618      	mov	r0, r3
 8005046:	f000 f942 	bl	80052ce <TIM_ITRx_SetConfig>
      break;
 800504a:	e02c      	b.n	80050a6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6818      	ldr	r0, [r3, #0]
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	6859      	ldr	r1, [r3, #4]
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	461a      	mov	r2, r3
 800505a:	f000 f908 	bl	800526e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2160      	movs	r1, #96	; 0x60
 8005064:	4618      	mov	r0, r3
 8005066:	f000 f932 	bl	80052ce <TIM_ITRx_SetConfig>
      break;
 800506a:	e01c      	b.n	80050a6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6818      	ldr	r0, [r3, #0]
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	6859      	ldr	r1, [r3, #4]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	461a      	mov	r2, r3
 800507a:	f000 f8c9 	bl	8005210 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2140      	movs	r1, #64	; 0x40
 8005084:	4618      	mov	r0, r3
 8005086:	f000 f922 	bl	80052ce <TIM_ITRx_SetConfig>
      break;
 800508a:	e00c      	b.n	80050a6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4619      	mov	r1, r3
 8005096:	4610      	mov	r0, r2
 8005098:	f000 f919 	bl	80052ce <TIM_ITRx_SetConfig>
      break;
 800509c:	e003      	b.n	80050a6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	73fb      	strb	r3, [r7, #15]
      break;
 80050a2:	e000      	b.n	80050a6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80050a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b083      	sub	sp, #12
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050dc:	bf00      	nop
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050f0:	bf00      	nop
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a34      	ldr	r2, [pc, #208]	; (80051f4 <TIM_Base_SetConfig+0xe4>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d00f      	beq.n	8005148 <TIM_Base_SetConfig+0x38>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800512e:	d00b      	beq.n	8005148 <TIM_Base_SetConfig+0x38>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	4a31      	ldr	r2, [pc, #196]	; (80051f8 <TIM_Base_SetConfig+0xe8>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d007      	beq.n	8005148 <TIM_Base_SetConfig+0x38>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a30      	ldr	r2, [pc, #192]	; (80051fc <TIM_Base_SetConfig+0xec>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d003      	beq.n	8005148 <TIM_Base_SetConfig+0x38>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a2f      	ldr	r2, [pc, #188]	; (8005200 <TIM_Base_SetConfig+0xf0>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d108      	bne.n	800515a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800514e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	4313      	orrs	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a25      	ldr	r2, [pc, #148]	; (80051f4 <TIM_Base_SetConfig+0xe4>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d01b      	beq.n	800519a <TIM_Base_SetConfig+0x8a>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005168:	d017      	beq.n	800519a <TIM_Base_SetConfig+0x8a>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a22      	ldr	r2, [pc, #136]	; (80051f8 <TIM_Base_SetConfig+0xe8>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d013      	beq.n	800519a <TIM_Base_SetConfig+0x8a>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a21      	ldr	r2, [pc, #132]	; (80051fc <TIM_Base_SetConfig+0xec>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d00f      	beq.n	800519a <TIM_Base_SetConfig+0x8a>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a20      	ldr	r2, [pc, #128]	; (8005200 <TIM_Base_SetConfig+0xf0>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d00b      	beq.n	800519a <TIM_Base_SetConfig+0x8a>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a1f      	ldr	r2, [pc, #124]	; (8005204 <TIM_Base_SetConfig+0xf4>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d007      	beq.n	800519a <TIM_Base_SetConfig+0x8a>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a1e      	ldr	r2, [pc, #120]	; (8005208 <TIM_Base_SetConfig+0xf8>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d003      	beq.n	800519a <TIM_Base_SetConfig+0x8a>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a1d      	ldr	r2, [pc, #116]	; (800520c <TIM_Base_SetConfig+0xfc>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d108      	bne.n	80051ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	689a      	ldr	r2, [r3, #8]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a08      	ldr	r2, [pc, #32]	; (80051f4 <TIM_Base_SetConfig+0xe4>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d103      	bne.n	80051e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	691a      	ldr	r2, [r3, #16]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	615a      	str	r2, [r3, #20]
}
 80051e6:	bf00      	nop
 80051e8:	3714      	adds	r7, #20
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	40010000 	.word	0x40010000
 80051f8:	40000400 	.word	0x40000400
 80051fc:	40000800 	.word	0x40000800
 8005200:	40000c00 	.word	0x40000c00
 8005204:	40014000 	.word	0x40014000
 8005208:	40014400 	.word	0x40014400
 800520c:	40014800 	.word	0x40014800

08005210 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005210:	b480      	push	{r7}
 8005212:	b087      	sub	sp, #28
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6a1b      	ldr	r3, [r3, #32]
 8005220:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	f023 0201 	bic.w	r2, r3, #1
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800523a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	011b      	lsls	r3, r3, #4
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	4313      	orrs	r3, r2
 8005244:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	f023 030a 	bic.w	r3, r3, #10
 800524c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	4313      	orrs	r3, r2
 8005254:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	621a      	str	r2, [r3, #32]
}
 8005262:	bf00      	nop
 8005264:	371c      	adds	r7, #28
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr

0800526e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800526e:	b480      	push	{r7}
 8005270:	b087      	sub	sp, #28
 8005272:	af00      	add	r7, sp, #0
 8005274:	60f8      	str	r0, [r7, #12]
 8005276:	60b9      	str	r1, [r7, #8]
 8005278:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	f023 0210 	bic.w	r2, r3, #16
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6a1b      	ldr	r3, [r3, #32]
 8005290:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005298:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	031b      	lsls	r3, r3, #12
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	011b      	lsls	r3, r3, #4
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	4313      	orrs	r3, r2
 80052b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	621a      	str	r2, [r3, #32]
}
 80052c2:	bf00      	nop
 80052c4:	371c      	adds	r7, #28
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr

080052ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052ce:	b480      	push	{r7}
 80052d0:	b085      	sub	sp, #20
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
 80052d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052e6:	683a      	ldr	r2, [r7, #0]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	f043 0307 	orr.w	r3, r3, #7
 80052f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	609a      	str	r2, [r3, #8]
}
 80052f8:	bf00      	nop
 80052fa:	3714      	adds	r7, #20
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005304:	b480      	push	{r7}
 8005306:	b087      	sub	sp, #28
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
 8005310:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800531e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	021a      	lsls	r2, r3, #8
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	431a      	orrs	r2, r3
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	4313      	orrs	r3, r2
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	4313      	orrs	r3, r2
 8005330:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	609a      	str	r2, [r3, #8]
}
 8005338:	bf00      	nop
 800533a:	371c      	adds	r7, #28
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005354:	2b01      	cmp	r3, #1
 8005356:	d101      	bne.n	800535c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005358:	2302      	movs	r3, #2
 800535a:	e050      	b.n	80053fe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2202      	movs	r2, #2
 8005368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005382:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	4313      	orrs	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a1c      	ldr	r2, [pc, #112]	; (800540c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d018      	beq.n	80053d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053a8:	d013      	beq.n	80053d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a18      	ldr	r2, [pc, #96]	; (8005410 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d00e      	beq.n	80053d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a16      	ldr	r2, [pc, #88]	; (8005414 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d009      	beq.n	80053d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a15      	ldr	r2, [pc, #84]	; (8005418 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d004      	beq.n	80053d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a13      	ldr	r2, [pc, #76]	; (800541c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d10c      	bne.n	80053ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	68ba      	ldr	r2, [r7, #8]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3714      	adds	r7, #20
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	40010000 	.word	0x40010000
 8005410:	40000400 	.word	0x40000400
 8005414:	40000800 	.word	0x40000800
 8005418:	40000c00 	.word	0x40000c00
 800541c:	40014000 	.word	0x40014000

08005420 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005448:	b084      	sub	sp, #16
 800544a:	b580      	push	{r7, lr}
 800544c:	b084      	sub	sp, #16
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
 8005452:	f107 001c 	add.w	r0, r7, #28
 8005456:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800545a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545c:	2b01      	cmp	r3, #1
 800545e:	d122      	bne.n	80054a6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005464:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005474:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800548a:	2b01      	cmp	r3, #1
 800548c:	d105      	bne.n	800549a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f001 fbee 	bl	8006c7c <USB_CoreReset>
 80054a0:	4603      	mov	r3, r0
 80054a2:	73fb      	strb	r3, [r7, #15]
 80054a4:	e01a      	b.n	80054dc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f001 fbe2 	bl	8006c7c <USB_CoreReset>
 80054b8:	4603      	mov	r3, r0
 80054ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80054bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d106      	bne.n	80054d0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	639a      	str	r2, [r3, #56]	; 0x38
 80054ce:	e005      	b.n	80054dc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80054dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d10b      	bne.n	80054fa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f043 0206 	orr.w	r2, r3, #6
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f043 0220 	orr.w	r2, r3, #32
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80054fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3710      	adds	r7, #16
 8005500:	46bd      	mov	sp, r7
 8005502:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005506:	b004      	add	sp, #16
 8005508:	4770      	bx	lr
	...

0800550c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800550c:	b480      	push	{r7}
 800550e:	b087      	sub	sp, #28
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	4613      	mov	r3, r2
 8005518:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800551a:	79fb      	ldrb	r3, [r7, #7]
 800551c:	2b02      	cmp	r3, #2
 800551e:	d165      	bne.n	80055ec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	4a41      	ldr	r2, [pc, #260]	; (8005628 <USB_SetTurnaroundTime+0x11c>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d906      	bls.n	8005536 <USB_SetTurnaroundTime+0x2a>
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	4a40      	ldr	r2, [pc, #256]	; (800562c <USB_SetTurnaroundTime+0x120>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d202      	bcs.n	8005536 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005530:	230f      	movs	r3, #15
 8005532:	617b      	str	r3, [r7, #20]
 8005534:	e062      	b.n	80055fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	4a3c      	ldr	r2, [pc, #240]	; (800562c <USB_SetTurnaroundTime+0x120>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d306      	bcc.n	800554c <USB_SetTurnaroundTime+0x40>
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	4a3b      	ldr	r2, [pc, #236]	; (8005630 <USB_SetTurnaroundTime+0x124>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d202      	bcs.n	800554c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005546:	230e      	movs	r3, #14
 8005548:	617b      	str	r3, [r7, #20]
 800554a:	e057      	b.n	80055fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	4a38      	ldr	r2, [pc, #224]	; (8005630 <USB_SetTurnaroundTime+0x124>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d306      	bcc.n	8005562 <USB_SetTurnaroundTime+0x56>
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	4a37      	ldr	r2, [pc, #220]	; (8005634 <USB_SetTurnaroundTime+0x128>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d202      	bcs.n	8005562 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800555c:	230d      	movs	r3, #13
 800555e:	617b      	str	r3, [r7, #20]
 8005560:	e04c      	b.n	80055fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	4a33      	ldr	r2, [pc, #204]	; (8005634 <USB_SetTurnaroundTime+0x128>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d306      	bcc.n	8005578 <USB_SetTurnaroundTime+0x6c>
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	4a32      	ldr	r2, [pc, #200]	; (8005638 <USB_SetTurnaroundTime+0x12c>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d802      	bhi.n	8005578 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005572:	230c      	movs	r3, #12
 8005574:	617b      	str	r3, [r7, #20]
 8005576:	e041      	b.n	80055fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	4a2f      	ldr	r2, [pc, #188]	; (8005638 <USB_SetTurnaroundTime+0x12c>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d906      	bls.n	800558e <USB_SetTurnaroundTime+0x82>
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	4a2e      	ldr	r2, [pc, #184]	; (800563c <USB_SetTurnaroundTime+0x130>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d802      	bhi.n	800558e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005588:	230b      	movs	r3, #11
 800558a:	617b      	str	r3, [r7, #20]
 800558c:	e036      	b.n	80055fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	4a2a      	ldr	r2, [pc, #168]	; (800563c <USB_SetTurnaroundTime+0x130>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d906      	bls.n	80055a4 <USB_SetTurnaroundTime+0x98>
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	4a29      	ldr	r2, [pc, #164]	; (8005640 <USB_SetTurnaroundTime+0x134>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d802      	bhi.n	80055a4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800559e:	230a      	movs	r3, #10
 80055a0:	617b      	str	r3, [r7, #20]
 80055a2:	e02b      	b.n	80055fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	4a26      	ldr	r2, [pc, #152]	; (8005640 <USB_SetTurnaroundTime+0x134>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d906      	bls.n	80055ba <USB_SetTurnaroundTime+0xae>
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	4a25      	ldr	r2, [pc, #148]	; (8005644 <USB_SetTurnaroundTime+0x138>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d202      	bcs.n	80055ba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80055b4:	2309      	movs	r3, #9
 80055b6:	617b      	str	r3, [r7, #20]
 80055b8:	e020      	b.n	80055fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	4a21      	ldr	r2, [pc, #132]	; (8005644 <USB_SetTurnaroundTime+0x138>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d306      	bcc.n	80055d0 <USB_SetTurnaroundTime+0xc4>
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	4a20      	ldr	r2, [pc, #128]	; (8005648 <USB_SetTurnaroundTime+0x13c>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d802      	bhi.n	80055d0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80055ca:	2308      	movs	r3, #8
 80055cc:	617b      	str	r3, [r7, #20]
 80055ce:	e015      	b.n	80055fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	4a1d      	ldr	r2, [pc, #116]	; (8005648 <USB_SetTurnaroundTime+0x13c>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d906      	bls.n	80055e6 <USB_SetTurnaroundTime+0xda>
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	4a1c      	ldr	r2, [pc, #112]	; (800564c <USB_SetTurnaroundTime+0x140>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d202      	bcs.n	80055e6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80055e0:	2307      	movs	r3, #7
 80055e2:	617b      	str	r3, [r7, #20]
 80055e4:	e00a      	b.n	80055fc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80055e6:	2306      	movs	r3, #6
 80055e8:	617b      	str	r3, [r7, #20]
 80055ea:	e007      	b.n	80055fc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80055ec:	79fb      	ldrb	r3, [r7, #7]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d102      	bne.n	80055f8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80055f2:	2309      	movs	r3, #9
 80055f4:	617b      	str	r3, [r7, #20]
 80055f6:	e001      	b.n	80055fc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80055f8:	2309      	movs	r3, #9
 80055fa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	68da      	ldr	r2, [r3, #12]
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	029b      	lsls	r3, r3, #10
 8005610:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005614:	431a      	orrs	r2, r3
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800561a:	2300      	movs	r3, #0
}
 800561c:	4618      	mov	r0, r3
 800561e:	371c      	adds	r7, #28
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr
 8005628:	00d8acbf 	.word	0x00d8acbf
 800562c:	00e4e1c0 	.word	0x00e4e1c0
 8005630:	00f42400 	.word	0x00f42400
 8005634:	01067380 	.word	0x01067380
 8005638:	011a499f 	.word	0x011a499f
 800563c:	01312cff 	.word	0x01312cff
 8005640:	014ca43f 	.word	0x014ca43f
 8005644:	016e3600 	.word	0x016e3600
 8005648:	01a6ab1f 	.word	0x01a6ab1f
 800564c:	01e84800 	.word	0x01e84800

08005650 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	f043 0201 	orr.w	r2, r3, #1
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005672:	b480      	push	{r7}
 8005674:	b083      	sub	sp, #12
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f023 0201 	bic.w	r2, r3, #1
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	370c      	adds	r7, #12
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	460b      	mov	r3, r1
 800569e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80056a0:	2300      	movs	r3, #0
 80056a2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80056b0:	78fb      	ldrb	r3, [r7, #3]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d115      	bne.n	80056e2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80056c2:	2001      	movs	r0, #1
 80056c4:	f7fc fc0e 	bl	8001ee4 <HAL_Delay>
      ms++;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	3301      	adds	r3, #1
 80056cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f001 fa45 	bl	8006b5e <USB_GetMode>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d01e      	beq.n	8005718 <USB_SetCurrentMode+0x84>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2b31      	cmp	r3, #49	; 0x31
 80056de:	d9f0      	bls.n	80056c2 <USB_SetCurrentMode+0x2e>
 80056e0:	e01a      	b.n	8005718 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80056e2:	78fb      	ldrb	r3, [r7, #3]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d115      	bne.n	8005714 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80056f4:	2001      	movs	r0, #1
 80056f6:	f7fc fbf5 	bl	8001ee4 <HAL_Delay>
      ms++;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	3301      	adds	r3, #1
 80056fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f001 fa2c 	bl	8006b5e <USB_GetMode>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d005      	beq.n	8005718 <USB_SetCurrentMode+0x84>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2b31      	cmp	r3, #49	; 0x31
 8005710:	d9f0      	bls.n	80056f4 <USB_SetCurrentMode+0x60>
 8005712:	e001      	b.n	8005718 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e005      	b.n	8005724 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2b32      	cmp	r3, #50	; 0x32
 800571c:	d101      	bne.n	8005722 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e000      	b.n	8005724 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800572c:	b084      	sub	sp, #16
 800572e:	b580      	push	{r7, lr}
 8005730:	b086      	sub	sp, #24
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
 8005736:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800573a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800573e:	2300      	movs	r3, #0
 8005740:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005746:	2300      	movs	r3, #0
 8005748:	613b      	str	r3, [r7, #16]
 800574a:	e009      	b.n	8005760 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	3340      	adds	r3, #64	; 0x40
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	2200      	movs	r2, #0
 8005758:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	3301      	adds	r3, #1
 800575e:	613b      	str	r3, [r7, #16]
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	2b0e      	cmp	r3, #14
 8005764:	d9f2      	bls.n	800574c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005768:	2b00      	cmp	r3, #0
 800576a:	d11c      	bne.n	80057a6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800577a:	f043 0302 	orr.w	r3, r3, #2
 800577e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005784:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005790:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	639a      	str	r2, [r3, #56]	; 0x38
 80057a4:	e00b      	b.n	80057be <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057aa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80057c4:	461a      	mov	r2, r3
 80057c6:	2300      	movs	r3, #0
 80057c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d0:	4619      	mov	r1, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d8:	461a      	mov	r2, r3
 80057da:	680b      	ldr	r3, [r1, #0]
 80057dc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d10c      	bne.n	80057fe <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80057e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d104      	bne.n	80057f4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80057ea:	2100      	movs	r1, #0
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 f965 	bl	8005abc <USB_SetDevSpeed>
 80057f2:	e008      	b.n	8005806 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80057f4:	2101      	movs	r1, #1
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 f960 	bl	8005abc <USB_SetDevSpeed>
 80057fc:	e003      	b.n	8005806 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80057fe:	2103      	movs	r1, #3
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 f95b 	bl	8005abc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005806:	2110      	movs	r1, #16
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 f8f3 	bl	80059f4 <USB_FlushTxFifo>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d001      	beq.n	8005818 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 f91f 	bl	8005a5c <USB_FlushRxFifo>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d001      	beq.n	8005828 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800582e:	461a      	mov	r2, r3
 8005830:	2300      	movs	r3, #0
 8005832:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800583a:	461a      	mov	r2, r3
 800583c:	2300      	movs	r3, #0
 800583e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005846:	461a      	mov	r2, r3
 8005848:	2300      	movs	r3, #0
 800584a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800584c:	2300      	movs	r3, #0
 800584e:	613b      	str	r3, [r7, #16]
 8005850:	e043      	b.n	80058da <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	015a      	lsls	r2, r3, #5
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	4413      	add	r3, r2
 800585a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005864:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005868:	d118      	bne.n	800589c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10a      	bne.n	8005886 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	015a      	lsls	r2, r3, #5
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	4413      	add	r3, r2
 8005878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800587c:	461a      	mov	r2, r3
 800587e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005882:	6013      	str	r3, [r2, #0]
 8005884:	e013      	b.n	80058ae <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	015a      	lsls	r2, r3, #5
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	4413      	add	r3, r2
 800588e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005892:	461a      	mov	r2, r3
 8005894:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005898:	6013      	str	r3, [r2, #0]
 800589a:	e008      	b.n	80058ae <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	015a      	lsls	r2, r3, #5
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	4413      	add	r3, r2
 80058a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a8:	461a      	mov	r2, r3
 80058aa:	2300      	movs	r3, #0
 80058ac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	015a      	lsls	r2, r3, #5
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	4413      	add	r3, r2
 80058b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ba:	461a      	mov	r2, r3
 80058bc:	2300      	movs	r3, #0
 80058be:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	015a      	lsls	r2, r3, #5
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	4413      	add	r3, r2
 80058c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058cc:	461a      	mov	r2, r3
 80058ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80058d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	3301      	adds	r3, #1
 80058d8:	613b      	str	r3, [r7, #16]
 80058da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d3b7      	bcc.n	8005852 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058e2:	2300      	movs	r3, #0
 80058e4:	613b      	str	r3, [r7, #16]
 80058e6:	e043      	b.n	8005970 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	015a      	lsls	r2, r3, #5
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	4413      	add	r3, r2
 80058f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058fe:	d118      	bne.n	8005932 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d10a      	bne.n	800591c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	015a      	lsls	r2, r3, #5
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	4413      	add	r3, r2
 800590e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005912:	461a      	mov	r2, r3
 8005914:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005918:	6013      	str	r3, [r2, #0]
 800591a:	e013      	b.n	8005944 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	015a      	lsls	r2, r3, #5
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	4413      	add	r3, r2
 8005924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005928:	461a      	mov	r2, r3
 800592a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800592e:	6013      	str	r3, [r2, #0]
 8005930:	e008      	b.n	8005944 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	015a      	lsls	r2, r3, #5
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	4413      	add	r3, r2
 800593a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800593e:	461a      	mov	r2, r3
 8005940:	2300      	movs	r3, #0
 8005942:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	015a      	lsls	r2, r3, #5
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	4413      	add	r3, r2
 800594c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005950:	461a      	mov	r2, r3
 8005952:	2300      	movs	r3, #0
 8005954:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	015a      	lsls	r2, r3, #5
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	4413      	add	r3, r2
 800595e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005962:	461a      	mov	r2, r3
 8005964:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005968:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	3301      	adds	r3, #1
 800596e:	613b      	str	r3, [r7, #16]
 8005970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005972:	693a      	ldr	r2, [r7, #16]
 8005974:	429a      	cmp	r2, r3
 8005976:	d3b7      	bcc.n	80058e8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005986:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800598a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005998:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800599a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599c:	2b00      	cmp	r3, #0
 800599e:	d105      	bne.n	80059ac <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	f043 0210 	orr.w	r2, r3, #16
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	699a      	ldr	r2, [r3, #24]
 80059b0:	4b0f      	ldr	r3, [pc, #60]	; (80059f0 <USB_DevInit+0x2c4>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80059b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d005      	beq.n	80059ca <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	f043 0208 	orr.w	r2, r3, #8
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80059ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d107      	bne.n	80059e0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059d8:	f043 0304 	orr.w	r3, r3, #4
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80059e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3718      	adds	r7, #24
 80059e6:	46bd      	mov	sp, r7
 80059e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059ec:	b004      	add	sp, #16
 80059ee:	4770      	bx	lr
 80059f0:	803c3800 	.word	0x803c3800

080059f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b085      	sub	sp, #20
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80059fe:	2300      	movs	r3, #0
 8005a00:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	3301      	adds	r3, #1
 8005a06:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	4a13      	ldr	r2, [pc, #76]	; (8005a58 <USB_FlushTxFifo+0x64>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d901      	bls.n	8005a14 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e01b      	b.n	8005a4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	daf2      	bge.n	8005a02 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	019b      	lsls	r3, r3, #6
 8005a24:	f043 0220 	orr.w	r2, r3, #32
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	4a08      	ldr	r2, [pc, #32]	; (8005a58 <USB_FlushTxFifo+0x64>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d901      	bls.n	8005a3e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e006      	b.n	8005a4c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	f003 0320 	and.w	r3, r3, #32
 8005a46:	2b20      	cmp	r3, #32
 8005a48:	d0f0      	beq.n	8005a2c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3714      	adds	r7, #20
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	00030d40 	.word	0x00030d40

08005a5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a64:	2300      	movs	r3, #0
 8005a66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	4a11      	ldr	r2, [pc, #68]	; (8005ab8 <USB_FlushRxFifo+0x5c>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d901      	bls.n	8005a7a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e018      	b.n	8005aac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	daf2      	bge.n	8005a68 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005a82:	2300      	movs	r3, #0
 8005a84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2210      	movs	r2, #16
 8005a8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	3301      	adds	r3, #1
 8005a90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	4a08      	ldr	r2, [pc, #32]	; (8005ab8 <USB_FlushRxFifo+0x5c>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d901      	bls.n	8005a9e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e006      	b.n	8005aac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	f003 0310 	and.w	r3, r3, #16
 8005aa6:	2b10      	cmp	r3, #16
 8005aa8:	d0f0      	beq.n	8005a8c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3714      	adds	r7, #20
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr
 8005ab8:	00030d40 	.word	0x00030d40

08005abc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	78fb      	ldrb	r3, [r7, #3]
 8005ad6:	68f9      	ldr	r1, [r7, #12]
 8005ad8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005adc:	4313      	orrs	r3, r2
 8005ade:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3714      	adds	r7, #20
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr

08005aee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b087      	sub	sp, #28
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f003 0306 	and.w	r3, r3, #6
 8005b06:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d102      	bne.n	8005b14 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	75fb      	strb	r3, [r7, #23]
 8005b12:	e00a      	b.n	8005b2a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2b02      	cmp	r3, #2
 8005b18:	d002      	beq.n	8005b20 <USB_GetDevSpeed+0x32>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2b06      	cmp	r3, #6
 8005b1e:	d102      	bne.n	8005b26 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005b20:	2302      	movs	r3, #2
 8005b22:	75fb      	strb	r3, [r7, #23]
 8005b24:	e001      	b.n	8005b2a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005b26:	230f      	movs	r3, #15
 8005b28:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	371c      	adds	r7, #28
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b085      	sub	sp, #20
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	785b      	ldrb	r3, [r3, #1]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d13a      	bne.n	8005bca <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b5a:	69da      	ldr	r2, [r3, #28]
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	f003 030f 	and.w	r3, r3, #15
 8005b64:	2101      	movs	r1, #1
 8005b66:	fa01 f303 	lsl.w	r3, r1, r3
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	68f9      	ldr	r1, [r7, #12]
 8005b6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b72:	4313      	orrs	r3, r2
 8005b74:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	015a      	lsls	r2, r3, #5
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d155      	bne.n	8005c38 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	015a      	lsls	r2, r3, #5
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	4413      	add	r3, r2
 8005b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	791b      	ldrb	r3, [r3, #4]
 8005ba6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ba8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	059b      	lsls	r3, r3, #22
 8005bae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	0151      	lsls	r1, r2, #5
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	440a      	add	r2, r1
 8005bba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bc6:	6013      	str	r3, [r2, #0]
 8005bc8:	e036      	b.n	8005c38 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bd0:	69da      	ldr	r2, [r3, #28]
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	f003 030f 	and.w	r3, r3, #15
 8005bda:	2101      	movs	r1, #1
 8005bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8005be0:	041b      	lsls	r3, r3, #16
 8005be2:	68f9      	ldr	r1, [r7, #12]
 8005be4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005be8:	4313      	orrs	r3, r2
 8005bea:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	015a      	lsls	r2, r3, #5
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d11a      	bne.n	8005c38 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	015a      	lsls	r2, r3, #5
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	4413      	add	r3, r2
 8005c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	791b      	ldrb	r3, [r3, #4]
 8005c1c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005c1e:	430b      	orrs	r3, r1
 8005c20:	4313      	orrs	r3, r2
 8005c22:	68ba      	ldr	r2, [r7, #8]
 8005c24:	0151      	lsls	r1, r2, #5
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	440a      	add	r2, r1
 8005c2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c36:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3714      	adds	r7, #20
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
	...

08005c48 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	785b      	ldrb	r3, [r3, #1]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d161      	bne.n	8005d28 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	015a      	lsls	r2, r3, #5
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c7a:	d11f      	bne.n	8005cbc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	015a      	lsls	r2, r3, #5
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	4413      	add	r3, r2
 8005c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	68ba      	ldr	r2, [r7, #8]
 8005c8c:	0151      	lsls	r1, r2, #5
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	440a      	add	r2, r1
 8005c92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c96:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c9a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	015a      	lsls	r2, r3, #5
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	0151      	lsls	r1, r2, #5
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	440a      	add	r2, r1
 8005cb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cb6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	f003 030f 	and.w	r3, r3, #15
 8005ccc:	2101      	movs	r1, #1
 8005cce:	fa01 f303 	lsl.w	r3, r1, r3
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	43db      	mvns	r3, r3
 8005cd6:	68f9      	ldr	r1, [r7, #12]
 8005cd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cdc:	4013      	ands	r3, r2
 8005cde:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce6:	69da      	ldr	r2, [r3, #28]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	f003 030f 	and.w	r3, r3, #15
 8005cf0:	2101      	movs	r1, #1
 8005cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	43db      	mvns	r3, r3
 8005cfa:	68f9      	ldr	r1, [r7, #12]
 8005cfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d00:	4013      	ands	r3, r2
 8005d02:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	015a      	lsls	r2, r3, #5
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	0159      	lsls	r1, r3, #5
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	440b      	add	r3, r1
 8005d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d1e:	4619      	mov	r1, r3
 8005d20:	4b35      	ldr	r3, [pc, #212]	; (8005df8 <USB_DeactivateEndpoint+0x1b0>)
 8005d22:	4013      	ands	r3, r2
 8005d24:	600b      	str	r3, [r1, #0]
 8005d26:	e060      	b.n	8005dea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	015a      	lsls	r2, r3, #5
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	4413      	add	r3, r2
 8005d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d3e:	d11f      	bne.n	8005d80 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	015a      	lsls	r2, r3, #5
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68ba      	ldr	r2, [r7, #8]
 8005d50:	0151      	lsls	r1, r2, #5
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	440a      	add	r2, r1
 8005d56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d5e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	015a      	lsls	r2, r3, #5
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	4413      	add	r3, r2
 8005d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	0151      	lsls	r1, r2, #5
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	440a      	add	r2, r1
 8005d76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d7e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	f003 030f 	and.w	r3, r3, #15
 8005d90:	2101      	movs	r1, #1
 8005d92:	fa01 f303 	lsl.w	r3, r1, r3
 8005d96:	041b      	lsls	r3, r3, #16
 8005d98:	43db      	mvns	r3, r3
 8005d9a:	68f9      	ldr	r1, [r7, #12]
 8005d9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005da0:	4013      	ands	r3, r2
 8005da2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005daa:	69da      	ldr	r2, [r3, #28]
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	f003 030f 	and.w	r3, r3, #15
 8005db4:	2101      	movs	r1, #1
 8005db6:	fa01 f303 	lsl.w	r3, r1, r3
 8005dba:	041b      	lsls	r3, r3, #16
 8005dbc:	43db      	mvns	r3, r3
 8005dbe:	68f9      	ldr	r1, [r7, #12]
 8005dc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	015a      	lsls	r2, r3, #5
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	0159      	lsls	r1, r3, #5
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	440b      	add	r3, r1
 8005dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de2:	4619      	mov	r1, r3
 8005de4:	4b05      	ldr	r3, [pc, #20]	; (8005dfc <USB_DeactivateEndpoint+0x1b4>)
 8005de6:	4013      	ands	r3, r2
 8005de8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3714      	adds	r7, #20
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr
 8005df8:	ec337800 	.word	0xec337800
 8005dfc:	eff37800 	.word	0xeff37800

08005e00 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b08a      	sub	sp, #40	; 0x28
 8005e04:	af02      	add	r7, sp, #8
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	4613      	mov	r3, r2
 8005e0c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	785b      	ldrb	r3, [r3, #1]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	f040 815c 	bne.w	80060da <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	699b      	ldr	r3, [r3, #24]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d132      	bne.n	8005e90 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	015a      	lsls	r2, r3, #5
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	4413      	add	r3, r2
 8005e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	69ba      	ldr	r2, [r7, #24]
 8005e3a:	0151      	lsls	r1, r2, #5
 8005e3c:	69fa      	ldr	r2, [r7, #28]
 8005e3e:	440a      	add	r2, r1
 8005e40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e44:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005e48:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005e4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	015a      	lsls	r2, r3, #5
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	4413      	add	r3, r2
 8005e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	69ba      	ldr	r2, [r7, #24]
 8005e5e:	0151      	lsls	r1, r2, #5
 8005e60:	69fa      	ldr	r2, [r7, #28]
 8005e62:	440a      	add	r2, r1
 8005e64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e6c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	015a      	lsls	r2, r3, #5
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	4413      	add	r3, r2
 8005e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	69ba      	ldr	r2, [r7, #24]
 8005e7e:	0151      	lsls	r1, r2, #5
 8005e80:	69fa      	ldr	r2, [r7, #28]
 8005e82:	440a      	add	r2, r1
 8005e84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e88:	0cdb      	lsrs	r3, r3, #19
 8005e8a:	04db      	lsls	r3, r3, #19
 8005e8c:	6113      	str	r3, [r2, #16]
 8005e8e:	e074      	b.n	8005f7a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	69ba      	ldr	r2, [r7, #24]
 8005ea0:	0151      	lsls	r1, r2, #5
 8005ea2:	69fa      	ldr	r2, [r7, #28]
 8005ea4:	440a      	add	r2, r1
 8005ea6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eaa:	0cdb      	lsrs	r3, r3, #19
 8005eac:	04db      	lsls	r3, r3, #19
 8005eae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	69ba      	ldr	r2, [r7, #24]
 8005ec0:	0151      	lsls	r1, r2, #5
 8005ec2:	69fa      	ldr	r2, [r7, #28]
 8005ec4:	440a      	add	r2, r1
 8005ec6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ece:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ed2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	015a      	lsls	r2, r3, #5
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	4413      	add	r3, r2
 8005edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	6999      	ldr	r1, [r3, #24]
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	440b      	add	r3, r1
 8005eec:	1e59      	subs	r1, r3, #1
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ef6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005ef8:	4b9d      	ldr	r3, [pc, #628]	; (8006170 <USB_EPStartXfer+0x370>)
 8005efa:	400b      	ands	r3, r1
 8005efc:	69b9      	ldr	r1, [r7, #24]
 8005efe:	0148      	lsls	r0, r1, #5
 8005f00:	69f9      	ldr	r1, [r7, #28]
 8005f02:	4401      	add	r1, r0
 8005f04:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	015a      	lsls	r2, r3, #5
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	4413      	add	r3, r2
 8005f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f18:	691a      	ldr	r2, [r3, #16]
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f22:	69b9      	ldr	r1, [r7, #24]
 8005f24:	0148      	lsls	r0, r1, #5
 8005f26:	69f9      	ldr	r1, [r7, #28]
 8005f28:	4401      	add	r1, r0
 8005f2a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	791b      	ldrb	r3, [r3, #4]
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d11f      	bne.n	8005f7a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	015a      	lsls	r2, r3, #5
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	4413      	add	r3, r2
 8005f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	69ba      	ldr	r2, [r7, #24]
 8005f4a:	0151      	lsls	r1, r2, #5
 8005f4c:	69fa      	ldr	r2, [r7, #28]
 8005f4e:	440a      	add	r2, r1
 8005f50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f54:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005f58:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	015a      	lsls	r2, r3, #5
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	4413      	add	r3, r2
 8005f62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	69ba      	ldr	r2, [r7, #24]
 8005f6a:	0151      	lsls	r1, r2, #5
 8005f6c:	69fa      	ldr	r2, [r7, #28]
 8005f6e:	440a      	add	r2, r1
 8005f70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f78:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005f7a:	79fb      	ldrb	r3, [r7, #7]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d14b      	bne.n	8006018 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	695b      	ldr	r3, [r3, #20]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d009      	beq.n	8005f9c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	015a      	lsls	r2, r3, #5
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f94:	461a      	mov	r2, r3
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	791b      	ldrb	r3, [r3, #4]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d128      	bne.n	8005ff6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d110      	bne.n	8005fd6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	69ba      	ldr	r2, [r7, #24]
 8005fc4:	0151      	lsls	r1, r2, #5
 8005fc6:	69fa      	ldr	r2, [r7, #28]
 8005fc8:	440a      	add	r2, r1
 8005fca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005fd2:	6013      	str	r3, [r2, #0]
 8005fd4:	e00f      	b.n	8005ff6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	015a      	lsls	r2, r3, #5
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	4413      	add	r3, r2
 8005fde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	69ba      	ldr	r2, [r7, #24]
 8005fe6:	0151      	lsls	r1, r2, #5
 8005fe8:	69fa      	ldr	r2, [r7, #28]
 8005fea:	440a      	add	r2, r1
 8005fec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ff4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005ff6:	69bb      	ldr	r3, [r7, #24]
 8005ff8:	015a      	lsls	r2, r3, #5
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	69ba      	ldr	r2, [r7, #24]
 8006006:	0151      	lsls	r1, r2, #5
 8006008:	69fa      	ldr	r2, [r7, #28]
 800600a:	440a      	add	r2, r1
 800600c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006010:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006014:	6013      	str	r3, [r2, #0]
 8006016:	e133      	b.n	8006280 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	015a      	lsls	r2, r3, #5
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	4413      	add	r3, r2
 8006020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	69ba      	ldr	r2, [r7, #24]
 8006028:	0151      	lsls	r1, r2, #5
 800602a:	69fa      	ldr	r2, [r7, #28]
 800602c:	440a      	add	r2, r1
 800602e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006032:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006036:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	791b      	ldrb	r3, [r3, #4]
 800603c:	2b01      	cmp	r3, #1
 800603e:	d015      	beq.n	800606c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	699b      	ldr	r3, [r3, #24]
 8006044:	2b00      	cmp	r3, #0
 8006046:	f000 811b 	beq.w	8006280 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006050:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	f003 030f 	and.w	r3, r3, #15
 800605a:	2101      	movs	r1, #1
 800605c:	fa01 f303 	lsl.w	r3, r1, r3
 8006060:	69f9      	ldr	r1, [r7, #28]
 8006062:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006066:	4313      	orrs	r3, r2
 8006068:	634b      	str	r3, [r1, #52]	; 0x34
 800606a:	e109      	b.n	8006280 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006078:	2b00      	cmp	r3, #0
 800607a:	d110      	bne.n	800609e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	015a      	lsls	r2, r3, #5
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	4413      	add	r3, r2
 8006084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	69ba      	ldr	r2, [r7, #24]
 800608c:	0151      	lsls	r1, r2, #5
 800608e:	69fa      	ldr	r2, [r7, #28]
 8006090:	440a      	add	r2, r1
 8006092:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006096:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800609a:	6013      	str	r3, [r2, #0]
 800609c:	e00f      	b.n	80060be <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	015a      	lsls	r2, r3, #5
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	4413      	add	r3, r2
 80060a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	69ba      	ldr	r2, [r7, #24]
 80060ae:	0151      	lsls	r1, r2, #5
 80060b0:	69fa      	ldr	r2, [r7, #28]
 80060b2:	440a      	add	r2, r1
 80060b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060bc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	6919      	ldr	r1, [r3, #16]
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	781a      	ldrb	r2, [r3, #0]
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	b298      	uxth	r0, r3
 80060cc:	79fb      	ldrb	r3, [r7, #7]
 80060ce:	9300      	str	r3, [sp, #0]
 80060d0:	4603      	mov	r3, r0
 80060d2:	68f8      	ldr	r0, [r7, #12]
 80060d4:	f000 fade 	bl	8006694 <USB_WritePacket>
 80060d8:	e0d2      	b.n	8006280 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	015a      	lsls	r2, r3, #5
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	4413      	add	r3, r2
 80060e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	69ba      	ldr	r2, [r7, #24]
 80060ea:	0151      	lsls	r1, r2, #5
 80060ec:	69fa      	ldr	r2, [r7, #28]
 80060ee:	440a      	add	r2, r1
 80060f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060f4:	0cdb      	lsrs	r3, r3, #19
 80060f6:	04db      	lsls	r3, r3, #19
 80060f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	015a      	lsls	r2, r3, #5
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	4413      	add	r3, r2
 8006102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	69ba      	ldr	r2, [r7, #24]
 800610a:	0151      	lsls	r1, r2, #5
 800610c:	69fa      	ldr	r2, [r7, #28]
 800610e:	440a      	add	r2, r1
 8006110:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006114:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006118:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800611c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d126      	bne.n	8006174 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	015a      	lsls	r2, r3, #5
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	4413      	add	r3, r2
 800612e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006132:	691a      	ldr	r2, [r3, #16]
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800613c:	69b9      	ldr	r1, [r7, #24]
 800613e:	0148      	lsls	r0, r1, #5
 8006140:	69f9      	ldr	r1, [r7, #28]
 8006142:	4401      	add	r1, r0
 8006144:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006148:	4313      	orrs	r3, r2
 800614a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	015a      	lsls	r2, r3, #5
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	4413      	add	r3, r2
 8006154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	69ba      	ldr	r2, [r7, #24]
 800615c:	0151      	lsls	r1, r2, #5
 800615e:	69fa      	ldr	r2, [r7, #28]
 8006160:	440a      	add	r2, r1
 8006162:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006166:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800616a:	6113      	str	r3, [r2, #16]
 800616c:	e03a      	b.n	80061e4 <USB_EPStartXfer+0x3e4>
 800616e:	bf00      	nop
 8006170:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	699a      	ldr	r2, [r3, #24]
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	4413      	add	r3, r2
 800617e:	1e5a      	subs	r2, r3, #1
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	68db      	ldr	r3, [r3, #12]
 8006184:	fbb2 f3f3 	udiv	r3, r2, r3
 8006188:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	8afa      	ldrh	r2, [r7, #22]
 8006190:	fb03 f202 	mul.w	r2, r3, r2
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	015a      	lsls	r2, r3, #5
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	4413      	add	r3, r2
 80061a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a4:	691a      	ldr	r2, [r3, #16]
 80061a6:	8afb      	ldrh	r3, [r7, #22]
 80061a8:	04d9      	lsls	r1, r3, #19
 80061aa:	4b38      	ldr	r3, [pc, #224]	; (800628c <USB_EPStartXfer+0x48c>)
 80061ac:	400b      	ands	r3, r1
 80061ae:	69b9      	ldr	r1, [r7, #24]
 80061b0:	0148      	lsls	r0, r1, #5
 80061b2:	69f9      	ldr	r1, [r7, #28]
 80061b4:	4401      	add	r1, r0
 80061b6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80061ba:	4313      	orrs	r3, r2
 80061bc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80061be:	69bb      	ldr	r3, [r7, #24]
 80061c0:	015a      	lsls	r2, r3, #5
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	4413      	add	r3, r2
 80061c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ca:	691a      	ldr	r2, [r3, #16]
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	69db      	ldr	r3, [r3, #28]
 80061d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061d4:	69b9      	ldr	r1, [r7, #24]
 80061d6:	0148      	lsls	r0, r1, #5
 80061d8:	69f9      	ldr	r1, [r7, #28]
 80061da:	4401      	add	r1, r0
 80061dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80061e0:	4313      	orrs	r3, r2
 80061e2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80061e4:	79fb      	ldrb	r3, [r7, #7]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d10d      	bne.n	8006206 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d009      	beq.n	8006206 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	6919      	ldr	r1, [r3, #16]
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	015a      	lsls	r2, r3, #5
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	4413      	add	r3, r2
 80061fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006202:	460a      	mov	r2, r1
 8006204:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	791b      	ldrb	r3, [r3, #4]
 800620a:	2b01      	cmp	r3, #1
 800620c:	d128      	bne.n	8006260 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800621a:	2b00      	cmp	r3, #0
 800621c:	d110      	bne.n	8006240 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	015a      	lsls	r2, r3, #5
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	4413      	add	r3, r2
 8006226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	69ba      	ldr	r2, [r7, #24]
 800622e:	0151      	lsls	r1, r2, #5
 8006230:	69fa      	ldr	r2, [r7, #28]
 8006232:	440a      	add	r2, r1
 8006234:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006238:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800623c:	6013      	str	r3, [r2, #0]
 800623e:	e00f      	b.n	8006260 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	015a      	lsls	r2, r3, #5
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	4413      	add	r3, r2
 8006248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	69ba      	ldr	r2, [r7, #24]
 8006250:	0151      	lsls	r1, r2, #5
 8006252:	69fa      	ldr	r2, [r7, #28]
 8006254:	440a      	add	r2, r1
 8006256:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800625a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800625e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	015a      	lsls	r2, r3, #5
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	4413      	add	r3, r2
 8006268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	69ba      	ldr	r2, [r7, #24]
 8006270:	0151      	lsls	r1, r2, #5
 8006272:	69fa      	ldr	r2, [r7, #28]
 8006274:	440a      	add	r2, r1
 8006276:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800627a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800627e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3720      	adds	r7, #32
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	1ff80000 	.word	0x1ff80000

08006290 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006290:	b480      	push	{r7}
 8006292:	b087      	sub	sp, #28
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	4613      	mov	r3, r2
 800629c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	785b      	ldrb	r3, [r3, #1]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	f040 80ce 	bne.w	800644e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d132      	bne.n	8006320 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	015a      	lsls	r2, r3, #5
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	4413      	add	r3, r2
 80062c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c6:	691b      	ldr	r3, [r3, #16]
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	0151      	lsls	r1, r2, #5
 80062cc:	697a      	ldr	r2, [r7, #20]
 80062ce:	440a      	add	r2, r1
 80062d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80062d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80062dc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	015a      	lsls	r2, r3, #5
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	4413      	add	r3, r2
 80062e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ea:	691b      	ldr	r3, [r3, #16]
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	0151      	lsls	r1, r2, #5
 80062f0:	697a      	ldr	r2, [r7, #20]
 80062f2:	440a      	add	r2, r1
 80062f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	015a      	lsls	r2, r3, #5
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	4413      	add	r3, r2
 8006306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	693a      	ldr	r2, [r7, #16]
 800630e:	0151      	lsls	r1, r2, #5
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	440a      	add	r2, r1
 8006314:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006318:	0cdb      	lsrs	r3, r3, #19
 800631a:	04db      	lsls	r3, r3, #19
 800631c:	6113      	str	r3, [r2, #16]
 800631e:	e04e      	b.n	80063be <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	015a      	lsls	r2, r3, #5
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	4413      	add	r3, r2
 8006328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	0151      	lsls	r1, r2, #5
 8006332:	697a      	ldr	r2, [r7, #20]
 8006334:	440a      	add	r2, r1
 8006336:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800633a:	0cdb      	lsrs	r3, r3, #19
 800633c:	04db      	lsls	r3, r3, #19
 800633e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	015a      	lsls	r2, r3, #5
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	4413      	add	r3, r2
 8006348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	0151      	lsls	r1, r2, #5
 8006352:	697a      	ldr	r2, [r7, #20]
 8006354:	440a      	add	r2, r1
 8006356:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800635a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800635e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006362:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	699a      	ldr	r2, [r3, #24]
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	429a      	cmp	r2, r3
 800636e:	d903      	bls.n	8006378 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	68da      	ldr	r2, [r3, #12]
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	015a      	lsls	r2, r3, #5
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	4413      	add	r3, r2
 8006380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	693a      	ldr	r2, [r7, #16]
 8006388:	0151      	lsls	r1, r2, #5
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	440a      	add	r2, r1
 800638e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006392:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006396:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	015a      	lsls	r2, r3, #5
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	4413      	add	r3, r2
 80063a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063a4:	691a      	ldr	r2, [r3, #16]
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063ae:	6939      	ldr	r1, [r7, #16]
 80063b0:	0148      	lsls	r0, r1, #5
 80063b2:	6979      	ldr	r1, [r7, #20]
 80063b4:	4401      	add	r1, r0
 80063b6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80063ba:	4313      	orrs	r3, r2
 80063bc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80063be:	79fb      	ldrb	r3, [r7, #7]
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d11e      	bne.n	8006402 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	695b      	ldr	r3, [r3, #20]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d009      	beq.n	80063e0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	015a      	lsls	r2, r3, #5
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	4413      	add	r3, r2
 80063d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063d8:	461a      	mov	r2, r3
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	695b      	ldr	r3, [r3, #20]
 80063de:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	015a      	lsls	r2, r3, #5
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	4413      	add	r3, r2
 80063e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	0151      	lsls	r1, r2, #5
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	440a      	add	r2, r1
 80063f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063fe:	6013      	str	r3, [r2, #0]
 8006400:	e097      	b.n	8006532 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	015a      	lsls	r2, r3, #5
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	4413      	add	r3, r2
 800640a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	693a      	ldr	r2, [r7, #16]
 8006412:	0151      	lsls	r1, r2, #5
 8006414:	697a      	ldr	r2, [r7, #20]
 8006416:	440a      	add	r2, r1
 8006418:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800641c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006420:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	2b00      	cmp	r3, #0
 8006428:	f000 8083 	beq.w	8006532 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006432:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	f003 030f 	and.w	r3, r3, #15
 800643c:	2101      	movs	r1, #1
 800643e:	fa01 f303 	lsl.w	r3, r1, r3
 8006442:	6979      	ldr	r1, [r7, #20]
 8006444:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006448:	4313      	orrs	r3, r2
 800644a:	634b      	str	r3, [r1, #52]	; 0x34
 800644c:	e071      	b.n	8006532 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	015a      	lsls	r2, r3, #5
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	4413      	add	r3, r2
 8006456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	693a      	ldr	r2, [r7, #16]
 800645e:	0151      	lsls	r1, r2, #5
 8006460:	697a      	ldr	r2, [r7, #20]
 8006462:	440a      	add	r2, r1
 8006464:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006468:	0cdb      	lsrs	r3, r3, #19
 800646a:	04db      	lsls	r3, r3, #19
 800646c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	015a      	lsls	r2, r3, #5
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	4413      	add	r3, r2
 8006476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	0151      	lsls	r1, r2, #5
 8006480:	697a      	ldr	r2, [r7, #20]
 8006482:	440a      	add	r2, r1
 8006484:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006488:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800648c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006490:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	699b      	ldr	r3, [r3, #24]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d003      	beq.n	80064a2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	68da      	ldr	r2, [r3, #12]
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	68da      	ldr	r2, [r3, #12]
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	015a      	lsls	r2, r3, #5
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	4413      	add	r3, r2
 80064b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b6:	691b      	ldr	r3, [r3, #16]
 80064b8:	693a      	ldr	r2, [r7, #16]
 80064ba:	0151      	lsls	r1, r2, #5
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	440a      	add	r2, r1
 80064c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	015a      	lsls	r2, r3, #5
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	4413      	add	r3, r2
 80064d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d6:	691a      	ldr	r2, [r3, #16]
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	69db      	ldr	r3, [r3, #28]
 80064dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064e0:	6939      	ldr	r1, [r7, #16]
 80064e2:	0148      	lsls	r0, r1, #5
 80064e4:	6979      	ldr	r1, [r7, #20]
 80064e6:	4401      	add	r1, r0
 80064e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80064ec:	4313      	orrs	r3, r2
 80064ee:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80064f0:	79fb      	ldrb	r3, [r7, #7]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d10d      	bne.n	8006512 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d009      	beq.n	8006512 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	6919      	ldr	r1, [r3, #16]
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	015a      	lsls	r2, r3, #5
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	4413      	add	r3, r2
 800650a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800650e:	460a      	mov	r2, r1
 8006510:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	015a      	lsls	r2, r3, #5
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	4413      	add	r3, r2
 800651a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	0151      	lsls	r1, r2, #5
 8006524:	697a      	ldr	r2, [r7, #20]
 8006526:	440a      	add	r2, r1
 8006528:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800652c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006530:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	371c      	adds	r7, #28
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr

08006540 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006540:	b480      	push	{r7}
 8006542:	b087      	sub	sp, #28
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800654a:	2300      	movs	r3, #0
 800654c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800654e:	2300      	movs	r3, #0
 8006550:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	785b      	ldrb	r3, [r3, #1]
 800655a:	2b01      	cmp	r3, #1
 800655c:	d14a      	bne.n	80065f4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	015a      	lsls	r2, r3, #5
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	4413      	add	r3, r2
 8006568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006572:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006576:	f040 8086 	bne.w	8006686 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	781b      	ldrb	r3, [r3, #0]
 800657e:	015a      	lsls	r2, r3, #5
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	4413      	add	r3, r2
 8006584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	683a      	ldr	r2, [r7, #0]
 800658c:	7812      	ldrb	r2, [r2, #0]
 800658e:	0151      	lsls	r1, r2, #5
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	440a      	add	r2, r1
 8006594:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006598:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800659c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	015a      	lsls	r2, r3, #5
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	4413      	add	r3, r2
 80065a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	683a      	ldr	r2, [r7, #0]
 80065b0:	7812      	ldrb	r2, [r2, #0]
 80065b2:	0151      	lsls	r1, r2, #5
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	440a      	add	r2, r1
 80065b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065c0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	3301      	adds	r3, #1
 80065c6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f242 7210 	movw	r2, #10000	; 0x2710
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d902      	bls.n	80065d8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	75fb      	strb	r3, [r7, #23]
          break;
 80065d6:	e056      	b.n	8006686 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	015a      	lsls	r2, r3, #5
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	4413      	add	r3, r2
 80065e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065f0:	d0e7      	beq.n	80065c2 <USB_EPStopXfer+0x82>
 80065f2:	e048      	b.n	8006686 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	015a      	lsls	r2, r3, #5
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	4413      	add	r3, r2
 80065fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006608:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800660c:	d13b      	bne.n	8006686 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	015a      	lsls	r2, r3, #5
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	4413      	add	r3, r2
 8006618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	683a      	ldr	r2, [r7, #0]
 8006620:	7812      	ldrb	r2, [r2, #0]
 8006622:	0151      	lsls	r1, r2, #5
 8006624:	693a      	ldr	r2, [r7, #16]
 8006626:	440a      	add	r2, r1
 8006628:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800662c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006630:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	015a      	lsls	r2, r3, #5
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	4413      	add	r3, r2
 800663c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	683a      	ldr	r2, [r7, #0]
 8006644:	7812      	ldrb	r2, [r2, #0]
 8006646:	0151      	lsls	r1, r2, #5
 8006648:	693a      	ldr	r2, [r7, #16]
 800664a:	440a      	add	r2, r1
 800664c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006650:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006654:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	3301      	adds	r3, #1
 800665a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006662:	4293      	cmp	r3, r2
 8006664:	d902      	bls.n	800666c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	75fb      	strb	r3, [r7, #23]
          break;
 800666a:	e00c      	b.n	8006686 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	015a      	lsls	r2, r3, #5
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	4413      	add	r3, r2
 8006676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006680:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006684:	d0e7      	beq.n	8006656 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006686:	7dfb      	ldrb	r3, [r7, #23]
}
 8006688:	4618      	mov	r0, r3
 800668a:	371c      	adds	r7, #28
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006694:	b480      	push	{r7}
 8006696:	b089      	sub	sp, #36	; 0x24
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	4611      	mov	r1, r2
 80066a0:	461a      	mov	r2, r3
 80066a2:	460b      	mov	r3, r1
 80066a4:	71fb      	strb	r3, [r7, #7]
 80066a6:	4613      	mov	r3, r2
 80066a8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80066b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d123      	bne.n	8006702 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80066ba:	88bb      	ldrh	r3, [r7, #4]
 80066bc:	3303      	adds	r3, #3
 80066be:	089b      	lsrs	r3, r3, #2
 80066c0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80066c2:	2300      	movs	r3, #0
 80066c4:	61bb      	str	r3, [r7, #24]
 80066c6:	e018      	b.n	80066fa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80066c8:	79fb      	ldrb	r3, [r7, #7]
 80066ca:	031a      	lsls	r2, r3, #12
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	4413      	add	r3, r2
 80066d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066d4:	461a      	mov	r2, r3
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	6013      	str	r3, [r2, #0]
      pSrc++;
 80066dc:	69fb      	ldr	r3, [r7, #28]
 80066de:	3301      	adds	r3, #1
 80066e0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	3301      	adds	r3, #1
 80066e6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	3301      	adds	r3, #1
 80066ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	3301      	adds	r3, #1
 80066f2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	3301      	adds	r3, #1
 80066f8:	61bb      	str	r3, [r7, #24]
 80066fa:	69ba      	ldr	r2, [r7, #24]
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d3e2      	bcc.n	80066c8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006702:	2300      	movs	r3, #0
}
 8006704:	4618      	mov	r0, r3
 8006706:	3724      	adds	r7, #36	; 0x24
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006710:	b480      	push	{r7}
 8006712:	b08b      	sub	sp, #44	; 0x2c
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	4613      	mov	r3, r2
 800671c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006726:	88fb      	ldrh	r3, [r7, #6]
 8006728:	089b      	lsrs	r3, r3, #2
 800672a:	b29b      	uxth	r3, r3
 800672c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800672e:	88fb      	ldrh	r3, [r7, #6]
 8006730:	f003 0303 	and.w	r3, r3, #3
 8006734:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006736:	2300      	movs	r3, #0
 8006738:	623b      	str	r3, [r7, #32]
 800673a:	e014      	b.n	8006766 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006746:	601a      	str	r2, [r3, #0]
    pDest++;
 8006748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674a:	3301      	adds	r3, #1
 800674c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800674e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006750:	3301      	adds	r3, #1
 8006752:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006756:	3301      	adds	r3, #1
 8006758:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800675a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675c:	3301      	adds	r3, #1
 800675e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006760:	6a3b      	ldr	r3, [r7, #32]
 8006762:	3301      	adds	r3, #1
 8006764:	623b      	str	r3, [r7, #32]
 8006766:	6a3a      	ldr	r2, [r7, #32]
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	429a      	cmp	r2, r3
 800676c:	d3e6      	bcc.n	800673c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800676e:	8bfb      	ldrh	r3, [r7, #30]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d01e      	beq.n	80067b2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006774:	2300      	movs	r3, #0
 8006776:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800677e:	461a      	mov	r2, r3
 8006780:	f107 0310 	add.w	r3, r7, #16
 8006784:	6812      	ldr	r2, [r2, #0]
 8006786:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006788:	693a      	ldr	r2, [r7, #16]
 800678a:	6a3b      	ldr	r3, [r7, #32]
 800678c:	b2db      	uxtb	r3, r3
 800678e:	00db      	lsls	r3, r3, #3
 8006790:	fa22 f303 	lsr.w	r3, r2, r3
 8006794:	b2da      	uxtb	r2, r3
 8006796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006798:	701a      	strb	r2, [r3, #0]
      i++;
 800679a:	6a3b      	ldr	r3, [r7, #32]
 800679c:	3301      	adds	r3, #1
 800679e:	623b      	str	r3, [r7, #32]
      pDest++;
 80067a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a2:	3301      	adds	r3, #1
 80067a4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80067a6:	8bfb      	ldrh	r3, [r7, #30]
 80067a8:	3b01      	subs	r3, #1
 80067aa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80067ac:	8bfb      	ldrh	r3, [r7, #30]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d1ea      	bne.n	8006788 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80067b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	372c      	adds	r7, #44	; 0x2c
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	785b      	ldrb	r3, [r3, #1]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d12c      	bne.n	8006836 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	015a      	lsls	r2, r3, #5
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	4413      	add	r3, r2
 80067e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	db12      	blt.n	8006814 <USB_EPSetStall+0x54>
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00f      	beq.n	8006814 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	015a      	lsls	r2, r3, #5
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	4413      	add	r3, r2
 80067fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68ba      	ldr	r2, [r7, #8]
 8006804:	0151      	lsls	r1, r2, #5
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	440a      	add	r2, r1
 800680a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800680e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006812:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	015a      	lsls	r2, r3, #5
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	4413      	add	r3, r2
 800681c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68ba      	ldr	r2, [r7, #8]
 8006824:	0151      	lsls	r1, r2, #5
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	440a      	add	r2, r1
 800682a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800682e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006832:	6013      	str	r3, [r2, #0]
 8006834:	e02b      	b.n	800688e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	015a      	lsls	r2, r3, #5
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	4413      	add	r3, r2
 800683e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	db12      	blt.n	800686e <USB_EPSetStall+0xae>
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00f      	beq.n	800686e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	015a      	lsls	r2, r3, #5
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	4413      	add	r3, r2
 8006856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	0151      	lsls	r1, r2, #5
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	440a      	add	r2, r1
 8006864:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006868:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800686c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	015a      	lsls	r2, r3, #5
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	4413      	add	r3, r2
 8006876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68ba      	ldr	r2, [r7, #8]
 800687e:	0151      	lsls	r1, r2, #5
 8006880:	68fa      	ldr	r2, [r7, #12]
 8006882:	440a      	add	r2, r1
 8006884:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006888:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800688c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800688e:	2300      	movs	r3, #0
}
 8006890:	4618      	mov	r0, r3
 8006892:	3714      	adds	r7, #20
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800689c:	b480      	push	{r7}
 800689e:	b085      	sub	sp, #20
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	785b      	ldrb	r3, [r3, #1]
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d128      	bne.n	800690a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	015a      	lsls	r2, r3, #5
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	4413      	add	r3, r2
 80068c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68ba      	ldr	r2, [r7, #8]
 80068c8:	0151      	lsls	r1, r2, #5
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	440a      	add	r2, r1
 80068ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80068d6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	791b      	ldrb	r3, [r3, #4]
 80068dc:	2b03      	cmp	r3, #3
 80068de:	d003      	beq.n	80068e8 <USB_EPClearStall+0x4c>
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	791b      	ldrb	r3, [r3, #4]
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d138      	bne.n	800695a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	015a      	lsls	r2, r3, #5
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	4413      	add	r3, r2
 80068f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	68ba      	ldr	r2, [r7, #8]
 80068f8:	0151      	lsls	r1, r2, #5
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	440a      	add	r2, r1
 80068fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006906:	6013      	str	r3, [r2, #0]
 8006908:	e027      	b.n	800695a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	015a      	lsls	r2, r3, #5
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	4413      	add	r3, r2
 8006912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	0151      	lsls	r1, r2, #5
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	440a      	add	r2, r1
 8006920:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006924:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006928:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	791b      	ldrb	r3, [r3, #4]
 800692e:	2b03      	cmp	r3, #3
 8006930:	d003      	beq.n	800693a <USB_EPClearStall+0x9e>
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	791b      	ldrb	r3, [r3, #4]
 8006936:	2b02      	cmp	r3, #2
 8006938:	d10f      	bne.n	800695a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	015a      	lsls	r2, r3, #5
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	4413      	add	r3, r2
 8006942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68ba      	ldr	r2, [r7, #8]
 800694a:	0151      	lsls	r1, r2, #5
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	440a      	add	r2, r1
 8006950:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006958:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800695a:	2300      	movs	r3, #0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3714      	adds	r7, #20
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	460b      	mov	r3, r1
 8006972:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006986:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800698a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	78fb      	ldrb	r3, [r7, #3]
 8006996:	011b      	lsls	r3, r3, #4
 8006998:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800699c:	68f9      	ldr	r1, [r7, #12]
 800699e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069a2:	4313      	orrs	r3, r2
 80069a4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3714      	adds	r7, #20
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80069ce:	f023 0303 	bic.w	r3, r3, #3
 80069d2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069e2:	f023 0302 	bic.w	r3, r3, #2
 80069e6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3714      	adds	r7, #20
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr

080069f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80069f6:	b480      	push	{r7}
 80069f8:	b085      	sub	sp, #20
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a10:	f023 0303 	bic.w	r3, r3, #3
 8006a14:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a24:	f043 0302 	orr.w	r3, r3, #2
 8006a28:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3714      	adds	r7, #20
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b085      	sub	sp, #20
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	695b      	ldr	r3, [r3, #20]
 8006a44:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	699b      	ldr	r3, [r3, #24]
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006a50:	68fb      	ldr	r3, [r7, #12]
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3714      	adds	r7, #20
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr

08006a5e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a5e:	b480      	push	{r7}
 8006a60:	b085      	sub	sp, #20
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a7a:	69db      	ldr	r3, [r3, #28]
 8006a7c:	68ba      	ldr	r2, [r7, #8]
 8006a7e:	4013      	ands	r3, r2
 8006a80:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	0c1b      	lsrs	r3, r3, #16
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3714      	adds	r7, #20
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr

08006a92 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a92:	b480      	push	{r7}
 8006a94:	b085      	sub	sp, #20
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aa4:	699b      	ldr	r3, [r3, #24]
 8006aa6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aae:	69db      	ldr	r3, [r3, #28]
 8006ab0:	68ba      	ldr	r2, [r7, #8]
 8006ab2:	4013      	ands	r3, r2
 8006ab4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	b29b      	uxth	r3, r3
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3714      	adds	r7, #20
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr

08006ac6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006ac6:	b480      	push	{r7}
 8006ac8:	b085      	sub	sp, #20
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
 8006ace:	460b      	mov	r3, r1
 8006ad0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006ad6:	78fb      	ldrb	r3, [r7, #3]
 8006ad8:	015a      	lsls	r2, r3, #5
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	4413      	add	r3, r2
 8006ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aec:	695b      	ldr	r3, [r3, #20]
 8006aee:	68ba      	ldr	r2, [r7, #8]
 8006af0:	4013      	ands	r3, r2
 8006af2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006af4:	68bb      	ldr	r3, [r7, #8]
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3714      	adds	r7, #20
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr

08006b02 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006b02:	b480      	push	{r7}
 8006b04:	b087      	sub	sp, #28
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b24:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006b26:	78fb      	ldrb	r3, [r7, #3]
 8006b28:	f003 030f 	and.w	r3, r3, #15
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8006b32:	01db      	lsls	r3, r3, #7
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	693a      	ldr	r2, [r7, #16]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006b3c:	78fb      	ldrb	r3, [r7, #3]
 8006b3e:	015a      	lsls	r2, r3, #5
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	4413      	add	r3, r2
 8006b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	693a      	ldr	r2, [r7, #16]
 8006b4c:	4013      	ands	r3, r2
 8006b4e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006b50:	68bb      	ldr	r3, [r7, #8]
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	371c      	adds	r7, #28
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr

08006b5e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006b5e:	b480      	push	{r7}
 8006b60:	b083      	sub	sp, #12
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	695b      	ldr	r3, [r3, #20]
 8006b6a:	f003 0301 	and.w	r3, r3, #1
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	370c      	adds	r7, #12
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr

08006b7a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b085      	sub	sp, #20
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68fa      	ldr	r2, [r7, #12]
 8006b90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b94:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006b98:	f023 0307 	bic.w	r3, r3, #7
 8006b9c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bb0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3714      	adds	r7, #20
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b087      	sub	sp, #28
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	460b      	mov	r3, r1
 8006bca:	607a      	str	r2, [r7, #4]
 8006bcc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	333c      	adds	r3, #60	; 0x3c
 8006bd6:	3304      	adds	r3, #4
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	4a26      	ldr	r2, [pc, #152]	; (8006c78 <USB_EP0_OutStart+0xb8>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d90a      	bls.n	8006bfa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bf0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bf4:	d101      	bne.n	8006bfa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	e037      	b.n	8006c6a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c00:	461a      	mov	r2, r3
 8006c02:	2300      	movs	r3, #0
 8006c04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	697a      	ldr	r2, [r7, #20]
 8006c10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	697a      	ldr	r2, [r7, #20]
 8006c24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c28:	f043 0318 	orr.w	r3, r3, #24
 8006c2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	697a      	ldr	r2, [r7, #20]
 8006c38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c3c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006c40:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006c42:	7afb      	ldrb	r3, [r7, #11]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d10f      	bne.n	8006c68 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c4e:	461a      	mov	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	697a      	ldr	r2, [r7, #20]
 8006c5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c62:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006c66:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c68:	2300      	movs	r3, #0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	371c      	adds	r7, #28
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	4f54300a 	.word	0x4f54300a

08006c7c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c84:	2300      	movs	r3, #0
 8006c86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	4a13      	ldr	r2, [pc, #76]	; (8006ce0 <USB_CoreReset+0x64>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d901      	bls.n	8006c9a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e01b      	b.n	8006cd2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	daf2      	bge.n	8006c88 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	f043 0201 	orr.w	r2, r3, #1
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	4a09      	ldr	r2, [pc, #36]	; (8006ce0 <USB_CoreReset+0x64>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d901      	bls.n	8006cc4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006cc0:	2303      	movs	r3, #3
 8006cc2:	e006      	b.n	8006cd2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	691b      	ldr	r3, [r3, #16]
 8006cc8:	f003 0301 	and.w	r3, r3, #1
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d0f0      	beq.n	8006cb2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3714      	adds	r7, #20
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop
 8006ce0:	00030d40 	.word	0x00030d40

08006ce4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	460b      	mov	r3, r1
 8006cee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006cf0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006cf4:	f002 fca0 	bl	8009638 <USBD_static_malloc>
 8006cf8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d109      	bne.n	8006d14 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	32b0      	adds	r2, #176	; 0xb0
 8006d0a:	2100      	movs	r1, #0
 8006d0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006d10:	2302      	movs	r3, #2
 8006d12:	e0d4      	b.n	8006ebe <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006d14:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006d18:	2100      	movs	r1, #0
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f002 fd0c 	bl	8009738 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	32b0      	adds	r2, #176	; 0xb0
 8006d2a:	68f9      	ldr	r1, [r7, #12]
 8006d2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	32b0      	adds	r2, #176	; 0xb0
 8006d3a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	7c1b      	ldrb	r3, [r3, #16]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d138      	bne.n	8006dbe <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006d4c:	4b5e      	ldr	r3, [pc, #376]	; (8006ec8 <USBD_CDC_Init+0x1e4>)
 8006d4e:	7819      	ldrb	r1, [r3, #0]
 8006d50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d54:	2202      	movs	r2, #2
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f002 fb4b 	bl	80093f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006d5c:	4b5a      	ldr	r3, [pc, #360]	; (8006ec8 <USBD_CDC_Init+0x1e4>)
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	f003 020f 	and.w	r2, r3, #15
 8006d64:	6879      	ldr	r1, [r7, #4]
 8006d66:	4613      	mov	r3, r2
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4413      	add	r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	440b      	add	r3, r1
 8006d70:	3324      	adds	r3, #36	; 0x24
 8006d72:	2201      	movs	r2, #1
 8006d74:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006d76:	4b55      	ldr	r3, [pc, #340]	; (8006ecc <USBD_CDC_Init+0x1e8>)
 8006d78:	7819      	ldrb	r1, [r3, #0]
 8006d7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d7e:	2202      	movs	r2, #2
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f002 fb36 	bl	80093f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006d86:	4b51      	ldr	r3, [pc, #324]	; (8006ecc <USBD_CDC_Init+0x1e8>)
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	f003 020f 	and.w	r2, r3, #15
 8006d8e:	6879      	ldr	r1, [r7, #4]
 8006d90:	4613      	mov	r3, r2
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	4413      	add	r3, r2
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	440b      	add	r3, r1
 8006d9a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006d9e:	2201      	movs	r2, #1
 8006da0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006da2:	4b4b      	ldr	r3, [pc, #300]	; (8006ed0 <USBD_CDC_Init+0x1ec>)
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	f003 020f 	and.w	r2, r3, #15
 8006daa:	6879      	ldr	r1, [r7, #4]
 8006dac:	4613      	mov	r3, r2
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	4413      	add	r3, r2
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	440b      	add	r3, r1
 8006db6:	3326      	adds	r3, #38	; 0x26
 8006db8:	2210      	movs	r2, #16
 8006dba:	801a      	strh	r2, [r3, #0]
 8006dbc:	e035      	b.n	8006e2a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006dbe:	4b42      	ldr	r3, [pc, #264]	; (8006ec8 <USBD_CDC_Init+0x1e4>)
 8006dc0:	7819      	ldrb	r1, [r3, #0]
 8006dc2:	2340      	movs	r3, #64	; 0x40
 8006dc4:	2202      	movs	r2, #2
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f002 fb13 	bl	80093f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006dcc:	4b3e      	ldr	r3, [pc, #248]	; (8006ec8 <USBD_CDC_Init+0x1e4>)
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	f003 020f 	and.w	r2, r3, #15
 8006dd4:	6879      	ldr	r1, [r7, #4]
 8006dd6:	4613      	mov	r3, r2
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	4413      	add	r3, r2
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	440b      	add	r3, r1
 8006de0:	3324      	adds	r3, #36	; 0x24
 8006de2:	2201      	movs	r2, #1
 8006de4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006de6:	4b39      	ldr	r3, [pc, #228]	; (8006ecc <USBD_CDC_Init+0x1e8>)
 8006de8:	7819      	ldrb	r1, [r3, #0]
 8006dea:	2340      	movs	r3, #64	; 0x40
 8006dec:	2202      	movs	r2, #2
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f002 faff 	bl	80093f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006df4:	4b35      	ldr	r3, [pc, #212]	; (8006ecc <USBD_CDC_Init+0x1e8>)
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	f003 020f 	and.w	r2, r3, #15
 8006dfc:	6879      	ldr	r1, [r7, #4]
 8006dfe:	4613      	mov	r3, r2
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	4413      	add	r3, r2
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	440b      	add	r3, r1
 8006e08:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006e10:	4b2f      	ldr	r3, [pc, #188]	; (8006ed0 <USBD_CDC_Init+0x1ec>)
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	f003 020f 	and.w	r2, r3, #15
 8006e18:	6879      	ldr	r1, [r7, #4]
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	4413      	add	r3, r2
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	440b      	add	r3, r1
 8006e24:	3326      	adds	r3, #38	; 0x26
 8006e26:	2210      	movs	r2, #16
 8006e28:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006e2a:	4b29      	ldr	r3, [pc, #164]	; (8006ed0 <USBD_CDC_Init+0x1ec>)
 8006e2c:	7819      	ldrb	r1, [r3, #0]
 8006e2e:	2308      	movs	r3, #8
 8006e30:	2203      	movs	r2, #3
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f002 fadd 	bl	80093f2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006e38:	4b25      	ldr	r3, [pc, #148]	; (8006ed0 <USBD_CDC_Init+0x1ec>)
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	f003 020f 	and.w	r2, r3, #15
 8006e40:	6879      	ldr	r1, [r7, #4]
 8006e42:	4613      	mov	r3, r2
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	4413      	add	r3, r2
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	440b      	add	r3, r1
 8006e4c:	3324      	adds	r3, #36	; 0x24
 8006e4e:	2201      	movs	r2, #1
 8006e50:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	33b0      	adds	r3, #176	; 0xb0
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	4413      	add	r3, r2
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d101      	bne.n	8006e8c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006e88:	2302      	movs	r3, #2
 8006e8a:	e018      	b.n	8006ebe <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	7c1b      	ldrb	r3, [r3, #16]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d10a      	bne.n	8006eaa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006e94:	4b0d      	ldr	r3, [pc, #52]	; (8006ecc <USBD_CDC_Init+0x1e8>)
 8006e96:	7819      	ldrb	r1, [r3, #0]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f002 fb94 	bl	80095d0 <USBD_LL_PrepareReceive>
 8006ea8:	e008      	b.n	8006ebc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006eaa:	4b08      	ldr	r3, [pc, #32]	; (8006ecc <USBD_CDC_Init+0x1e8>)
 8006eac:	7819      	ldrb	r1, [r3, #0]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006eb4:	2340      	movs	r3, #64	; 0x40
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f002 fb8a 	bl	80095d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	200000c7 	.word	0x200000c7
 8006ecc:	200000c8 	.word	0x200000c8
 8006ed0:	200000c9 	.word	0x200000c9

08006ed4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	460b      	mov	r3, r1
 8006ede:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006ee0:	4b3a      	ldr	r3, [pc, #232]	; (8006fcc <USBD_CDC_DeInit+0xf8>)
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f002 faa9 	bl	800943e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006eec:	4b37      	ldr	r3, [pc, #220]	; (8006fcc <USBD_CDC_DeInit+0xf8>)
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	f003 020f 	and.w	r2, r3, #15
 8006ef4:	6879      	ldr	r1, [r7, #4]
 8006ef6:	4613      	mov	r3, r2
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	4413      	add	r3, r2
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	440b      	add	r3, r1
 8006f00:	3324      	adds	r3, #36	; 0x24
 8006f02:	2200      	movs	r2, #0
 8006f04:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006f06:	4b32      	ldr	r3, [pc, #200]	; (8006fd0 <USBD_CDC_DeInit+0xfc>)
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f002 fa96 	bl	800943e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006f12:	4b2f      	ldr	r3, [pc, #188]	; (8006fd0 <USBD_CDC_DeInit+0xfc>)
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	f003 020f 	and.w	r2, r3, #15
 8006f1a:	6879      	ldr	r1, [r7, #4]
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	4413      	add	r3, r2
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	440b      	add	r3, r1
 8006f26:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006f2e:	4b29      	ldr	r3, [pc, #164]	; (8006fd4 <USBD_CDC_DeInit+0x100>)
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	4619      	mov	r1, r3
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f002 fa82 	bl	800943e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006f3a:	4b26      	ldr	r3, [pc, #152]	; (8006fd4 <USBD_CDC_DeInit+0x100>)
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	f003 020f 	and.w	r2, r3, #15
 8006f42:	6879      	ldr	r1, [r7, #4]
 8006f44:	4613      	mov	r3, r2
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	4413      	add	r3, r2
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	440b      	add	r3, r1
 8006f4e:	3324      	adds	r3, #36	; 0x24
 8006f50:	2200      	movs	r2, #0
 8006f52:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006f54:	4b1f      	ldr	r3, [pc, #124]	; (8006fd4 <USBD_CDC_DeInit+0x100>)
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	f003 020f 	and.w	r2, r3, #15
 8006f5c:	6879      	ldr	r1, [r7, #4]
 8006f5e:	4613      	mov	r3, r2
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	4413      	add	r3, r2
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	440b      	add	r3, r1
 8006f68:	3326      	adds	r3, #38	; 0x26
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	32b0      	adds	r2, #176	; 0xb0
 8006f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d01f      	beq.n	8006fc0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	33b0      	adds	r3, #176	; 0xb0
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	4413      	add	r3, r2
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	32b0      	adds	r2, #176	; 0xb0
 8006f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f002 fb56 	bl	8009654 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	32b0      	adds	r2, #176	; 0xb0
 8006fb2:	2100      	movs	r1, #0
 8006fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3708      	adds	r7, #8
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	200000c7 	.word	0x200000c7
 8006fd0:	200000c8 	.word	0x200000c8
 8006fd4:	200000c9 	.word	0x200000c9

08006fd8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b086      	sub	sp, #24
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	32b0      	adds	r2, #176	; 0xb0
 8006fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ff0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d101      	bne.n	8007008 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007004:	2303      	movs	r3, #3
 8007006:	e0bf      	b.n	8007188 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007010:	2b00      	cmp	r3, #0
 8007012:	d050      	beq.n	80070b6 <USBD_CDC_Setup+0xde>
 8007014:	2b20      	cmp	r3, #32
 8007016:	f040 80af 	bne.w	8007178 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	88db      	ldrh	r3, [r3, #6]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d03a      	beq.n	8007098 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	b25b      	sxtb	r3, r3
 8007028:	2b00      	cmp	r3, #0
 800702a:	da1b      	bge.n	8007064 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	33b0      	adds	r3, #176	; 0xb0
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	4413      	add	r3, r2
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	683a      	ldr	r2, [r7, #0]
 8007040:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007042:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007044:	683a      	ldr	r2, [r7, #0]
 8007046:	88d2      	ldrh	r2, [r2, #6]
 8007048:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	88db      	ldrh	r3, [r3, #6]
 800704e:	2b07      	cmp	r3, #7
 8007050:	bf28      	it	cs
 8007052:	2307      	movcs	r3, #7
 8007054:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	89fa      	ldrh	r2, [r7, #14]
 800705a:	4619      	mov	r1, r3
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f001 fd89 	bl	8008b74 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007062:	e090      	b.n	8007186 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	785a      	ldrb	r2, [r3, #1]
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	88db      	ldrh	r3, [r3, #6]
 8007072:	2b3f      	cmp	r3, #63	; 0x3f
 8007074:	d803      	bhi.n	800707e <USBD_CDC_Setup+0xa6>
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	88db      	ldrh	r3, [r3, #6]
 800707a:	b2da      	uxtb	r2, r3
 800707c:	e000      	b.n	8007080 <USBD_CDC_Setup+0xa8>
 800707e:	2240      	movs	r2, #64	; 0x40
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007086:	6939      	ldr	r1, [r7, #16]
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800708e:	461a      	mov	r2, r3
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f001 fd9b 	bl	8008bcc <USBD_CtlPrepareRx>
      break;
 8007096:	e076      	b.n	8007186 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	33b0      	adds	r3, #176	; 0xb0
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	4413      	add	r3, r2
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	683a      	ldr	r2, [r7, #0]
 80070ac:	7850      	ldrb	r0, [r2, #1]
 80070ae:	2200      	movs	r2, #0
 80070b0:	6839      	ldr	r1, [r7, #0]
 80070b2:	4798      	blx	r3
      break;
 80070b4:	e067      	b.n	8007186 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	785b      	ldrb	r3, [r3, #1]
 80070ba:	2b0b      	cmp	r3, #11
 80070bc:	d851      	bhi.n	8007162 <USBD_CDC_Setup+0x18a>
 80070be:	a201      	add	r2, pc, #4	; (adr r2, 80070c4 <USBD_CDC_Setup+0xec>)
 80070c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c4:	080070f5 	.word	0x080070f5
 80070c8:	08007171 	.word	0x08007171
 80070cc:	08007163 	.word	0x08007163
 80070d0:	08007163 	.word	0x08007163
 80070d4:	08007163 	.word	0x08007163
 80070d8:	08007163 	.word	0x08007163
 80070dc:	08007163 	.word	0x08007163
 80070e0:	08007163 	.word	0x08007163
 80070e4:	08007163 	.word	0x08007163
 80070e8:	08007163 	.word	0x08007163
 80070ec:	0800711f 	.word	0x0800711f
 80070f0:	08007149 	.word	0x08007149
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	2b03      	cmp	r3, #3
 80070fe:	d107      	bne.n	8007110 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007100:	f107 030a 	add.w	r3, r7, #10
 8007104:	2202      	movs	r2, #2
 8007106:	4619      	mov	r1, r3
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f001 fd33 	bl	8008b74 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800710e:	e032      	b.n	8007176 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007110:	6839      	ldr	r1, [r7, #0]
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f001 fcbd 	bl	8008a92 <USBD_CtlError>
            ret = USBD_FAIL;
 8007118:	2303      	movs	r3, #3
 800711a:	75fb      	strb	r3, [r7, #23]
          break;
 800711c:	e02b      	b.n	8007176 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007124:	b2db      	uxtb	r3, r3
 8007126:	2b03      	cmp	r3, #3
 8007128:	d107      	bne.n	800713a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800712a:	f107 030d 	add.w	r3, r7, #13
 800712e:	2201      	movs	r2, #1
 8007130:	4619      	mov	r1, r3
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f001 fd1e 	bl	8008b74 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007138:	e01d      	b.n	8007176 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800713a:	6839      	ldr	r1, [r7, #0]
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f001 fca8 	bl	8008a92 <USBD_CtlError>
            ret = USBD_FAIL;
 8007142:	2303      	movs	r3, #3
 8007144:	75fb      	strb	r3, [r7, #23]
          break;
 8007146:	e016      	b.n	8007176 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800714e:	b2db      	uxtb	r3, r3
 8007150:	2b03      	cmp	r3, #3
 8007152:	d00f      	beq.n	8007174 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007154:	6839      	ldr	r1, [r7, #0]
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f001 fc9b 	bl	8008a92 <USBD_CtlError>
            ret = USBD_FAIL;
 800715c:	2303      	movs	r3, #3
 800715e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007160:	e008      	b.n	8007174 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007162:	6839      	ldr	r1, [r7, #0]
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f001 fc94 	bl	8008a92 <USBD_CtlError>
          ret = USBD_FAIL;
 800716a:	2303      	movs	r3, #3
 800716c:	75fb      	strb	r3, [r7, #23]
          break;
 800716e:	e002      	b.n	8007176 <USBD_CDC_Setup+0x19e>
          break;
 8007170:	bf00      	nop
 8007172:	e008      	b.n	8007186 <USBD_CDC_Setup+0x1ae>
          break;
 8007174:	bf00      	nop
      }
      break;
 8007176:	e006      	b.n	8007186 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007178:	6839      	ldr	r1, [r7, #0]
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f001 fc89 	bl	8008a92 <USBD_CtlError>
      ret = USBD_FAIL;
 8007180:	2303      	movs	r3, #3
 8007182:	75fb      	strb	r3, [r7, #23]
      break;
 8007184:	bf00      	nop
  }

  return (uint8_t)ret;
 8007186:	7dfb      	ldrb	r3, [r7, #23]
}
 8007188:	4618      	mov	r0, r3
 800718a:	3718      	adds	r7, #24
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	460b      	mov	r3, r1
 800719a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80071a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	32b0      	adds	r2, #176	; 0xb0
 80071ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d101      	bne.n	80071ba <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80071b6:	2303      	movs	r3, #3
 80071b8:	e065      	b.n	8007286 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	32b0      	adds	r2, #176	; 0xb0
 80071c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071c8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80071ca:	78fb      	ldrb	r3, [r7, #3]
 80071cc:	f003 020f 	and.w	r2, r3, #15
 80071d0:	6879      	ldr	r1, [r7, #4]
 80071d2:	4613      	mov	r3, r2
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	4413      	add	r3, r2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	440b      	add	r3, r1
 80071dc:	3318      	adds	r3, #24
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d02f      	beq.n	8007244 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80071e4:	78fb      	ldrb	r3, [r7, #3]
 80071e6:	f003 020f 	and.w	r2, r3, #15
 80071ea:	6879      	ldr	r1, [r7, #4]
 80071ec:	4613      	mov	r3, r2
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	4413      	add	r3, r2
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	440b      	add	r3, r1
 80071f6:	3318      	adds	r3, #24
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	78fb      	ldrb	r3, [r7, #3]
 80071fc:	f003 010f 	and.w	r1, r3, #15
 8007200:	68f8      	ldr	r0, [r7, #12]
 8007202:	460b      	mov	r3, r1
 8007204:	00db      	lsls	r3, r3, #3
 8007206:	440b      	add	r3, r1
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	4403      	add	r3, r0
 800720c:	3348      	adds	r3, #72	; 0x48
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	fbb2 f1f3 	udiv	r1, r2, r3
 8007214:	fb01 f303 	mul.w	r3, r1, r3
 8007218:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800721a:	2b00      	cmp	r3, #0
 800721c:	d112      	bne.n	8007244 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800721e:	78fb      	ldrb	r3, [r7, #3]
 8007220:	f003 020f 	and.w	r2, r3, #15
 8007224:	6879      	ldr	r1, [r7, #4]
 8007226:	4613      	mov	r3, r2
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	4413      	add	r3, r2
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	440b      	add	r3, r1
 8007230:	3318      	adds	r3, #24
 8007232:	2200      	movs	r2, #0
 8007234:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007236:	78f9      	ldrb	r1, [r7, #3]
 8007238:	2300      	movs	r3, #0
 800723a:	2200      	movs	r2, #0
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f002 f9a6 	bl	800958e <USBD_LL_Transmit>
 8007242:	e01f      	b.n	8007284 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	2200      	movs	r2, #0
 8007248:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	33b0      	adds	r3, #176	; 0xb0
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	4413      	add	r3, r2
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d010      	beq.n	8007284 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	33b0      	adds	r3, #176	; 0xb0
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	4413      	add	r3, r2
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800727a:	68ba      	ldr	r2, [r7, #8]
 800727c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007280:	78fa      	ldrb	r2, [r7, #3]
 8007282:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b084      	sub	sp, #16
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
 8007296:	460b      	mov	r3, r1
 8007298:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	32b0      	adds	r2, #176	; 0xb0
 80072a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072a8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	32b0      	adds	r2, #176	; 0xb0
 80072b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d101      	bne.n	80072c0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80072bc:	2303      	movs	r3, #3
 80072be:	e01a      	b.n	80072f6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80072c0:	78fb      	ldrb	r3, [r7, #3]
 80072c2:	4619      	mov	r1, r3
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f002 f9a4 	bl	8009612 <USBD_LL_GetRxDataSize>
 80072ca:	4602      	mov	r2, r0
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	33b0      	adds	r3, #176	; 0xb0
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	4413      	add	r3, r2
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	68fa      	ldr	r2, [r7, #12]
 80072e6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80072ea:	68fa      	ldr	r2, [r7, #12]
 80072ec:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80072f0:	4611      	mov	r1, r2
 80072f2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b084      	sub	sp, #16
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	32b0      	adds	r2, #176	; 0xb0
 8007310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007314:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d101      	bne.n	8007320 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800731c:	2303      	movs	r3, #3
 800731e:	e025      	b.n	800736c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	33b0      	adds	r3, #176	; 0xb0
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	4413      	add	r3, r2
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d01a      	beq.n	800736a <USBD_CDC_EP0_RxReady+0x6c>
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800733a:	2bff      	cmp	r3, #255	; 0xff
 800733c:	d015      	beq.n	800736a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	33b0      	adds	r3, #176	; 0xb0
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	4413      	add	r3, r2
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	68fa      	ldr	r2, [r7, #12]
 8007352:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007356:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007358:	68fa      	ldr	r2, [r7, #12]
 800735a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800735e:	b292      	uxth	r2, r2
 8007360:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	22ff      	movs	r2, #255	; 0xff
 8007366:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3710      	adds	r7, #16
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b086      	sub	sp, #24
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800737c:	2182      	movs	r1, #130	; 0x82
 800737e:	4818      	ldr	r0, [pc, #96]	; (80073e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007380:	f000 fd4f 	bl	8007e22 <USBD_GetEpDesc>
 8007384:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007386:	2101      	movs	r1, #1
 8007388:	4815      	ldr	r0, [pc, #84]	; (80073e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800738a:	f000 fd4a 	bl	8007e22 <USBD_GetEpDesc>
 800738e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007390:	2181      	movs	r1, #129	; 0x81
 8007392:	4813      	ldr	r0, [pc, #76]	; (80073e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007394:	f000 fd45 	bl	8007e22 <USBD_GetEpDesc>
 8007398:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d002      	beq.n	80073a6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	2210      	movs	r2, #16
 80073a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d006      	beq.n	80073ba <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073b4:	711a      	strb	r2, [r3, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d006      	beq.n	80073ce <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073c8:	711a      	strb	r2, [r3, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2243      	movs	r2, #67	; 0x43
 80073d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80073d4:	4b02      	ldr	r3, [pc, #8]	; (80073e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3718      	adds	r7, #24
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	20000084 	.word	0x20000084

080073e4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b086      	sub	sp, #24
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80073ec:	2182      	movs	r1, #130	; 0x82
 80073ee:	4818      	ldr	r0, [pc, #96]	; (8007450 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80073f0:	f000 fd17 	bl	8007e22 <USBD_GetEpDesc>
 80073f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80073f6:	2101      	movs	r1, #1
 80073f8:	4815      	ldr	r0, [pc, #84]	; (8007450 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80073fa:	f000 fd12 	bl	8007e22 <USBD_GetEpDesc>
 80073fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007400:	2181      	movs	r1, #129	; 0x81
 8007402:	4813      	ldr	r0, [pc, #76]	; (8007450 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007404:	f000 fd0d 	bl	8007e22 <USBD_GetEpDesc>
 8007408:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d002      	beq.n	8007416 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	2210      	movs	r2, #16
 8007414:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d006      	beq.n	800742a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	2200      	movs	r2, #0
 8007420:	711a      	strb	r2, [r3, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	f042 0202 	orr.w	r2, r2, #2
 8007428:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d006      	beq.n	800743e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	711a      	strb	r2, [r3, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	f042 0202 	orr.w	r2, r2, #2
 800743c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2243      	movs	r2, #67	; 0x43
 8007442:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007444:	4b02      	ldr	r3, [pc, #8]	; (8007450 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007446:	4618      	mov	r0, r3
 8007448:	3718      	adds	r7, #24
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	20000084 	.word	0x20000084

08007454 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b086      	sub	sp, #24
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800745c:	2182      	movs	r1, #130	; 0x82
 800745e:	4818      	ldr	r0, [pc, #96]	; (80074c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007460:	f000 fcdf 	bl	8007e22 <USBD_GetEpDesc>
 8007464:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007466:	2101      	movs	r1, #1
 8007468:	4815      	ldr	r0, [pc, #84]	; (80074c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800746a:	f000 fcda 	bl	8007e22 <USBD_GetEpDesc>
 800746e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007470:	2181      	movs	r1, #129	; 0x81
 8007472:	4813      	ldr	r0, [pc, #76]	; (80074c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007474:	f000 fcd5 	bl	8007e22 <USBD_GetEpDesc>
 8007478:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d002      	beq.n	8007486 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	2210      	movs	r2, #16
 8007484:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d006      	beq.n	800749a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	2200      	movs	r2, #0
 8007490:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007494:	711a      	strb	r2, [r3, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d006      	beq.n	80074ae <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074a8:	711a      	strb	r2, [r3, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2243      	movs	r2, #67	; 0x43
 80074b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80074b4:	4b02      	ldr	r3, [pc, #8]	; (80074c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3718      	adds	r7, #24
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	20000084 	.word	0x20000084

080074c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	220a      	movs	r2, #10
 80074d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80074d2:	4b03      	ldr	r3, [pc, #12]	; (80074e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	370c      	adds	r7, #12
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr
 80074e0:	20000040 	.word	0x20000040

080074e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d101      	bne.n	80074f8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80074f4:	2303      	movs	r3, #3
 80074f6:	e009      	b.n	800750c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	33b0      	adds	r3, #176	; 0xb0
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	4413      	add	r3, r2
 8007506:	683a      	ldr	r2, [r7, #0]
 8007508:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007518:	b480      	push	{r7}
 800751a:	b087      	sub	sp, #28
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	32b0      	adds	r2, #176	; 0xb0
 800752e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007532:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d101      	bne.n	800753e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800753a:	2303      	movs	r3, #3
 800753c:	e008      	b.n	8007550 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	68ba      	ldr	r2, [r7, #8]
 8007542:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	371c      	adds	r7, #28
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800755c:	b480      	push	{r7}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	32b0      	adds	r2, #176	; 0xb0
 8007570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007574:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d101      	bne.n	8007580 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800757c:	2303      	movs	r3, #3
 800757e:	e004      	b.n	800758a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	683a      	ldr	r2, [r7, #0]
 8007584:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3714      	adds	r7, #20
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr
	...

08007598 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	32b0      	adds	r2, #176	; 0xb0
 80075aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ae:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80075b0:	2301      	movs	r3, #1
 80075b2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	32b0      	adds	r2, #176	; 0xb0
 80075be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d101      	bne.n	80075ca <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80075c6:	2303      	movs	r3, #3
 80075c8:	e025      	b.n	8007616 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d11f      	bne.n	8007614 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80075dc:	4b10      	ldr	r3, [pc, #64]	; (8007620 <USBD_CDC_TransmitPacket+0x88>)
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	f003 020f 	and.w	r2, r3, #15
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	4613      	mov	r3, r2
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	4413      	add	r3, r2
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	4403      	add	r3, r0
 80075f6:	3318      	adds	r3, #24
 80075f8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80075fa:	4b09      	ldr	r3, [pc, #36]	; (8007620 <USBD_CDC_TransmitPacket+0x88>)
 80075fc:	7819      	ldrb	r1, [r3, #0]
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f001 ffbf 	bl	800958e <USBD_LL_Transmit>

    ret = USBD_OK;
 8007610:	2300      	movs	r3, #0
 8007612:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007614:	7bfb      	ldrb	r3, [r7, #15]
}
 8007616:	4618      	mov	r0, r3
 8007618:	3710      	adds	r7, #16
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	200000c7 	.word	0x200000c7

08007624 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	32b0      	adds	r2, #176	; 0xb0
 8007636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800763a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	32b0      	adds	r2, #176	; 0xb0
 8007646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d101      	bne.n	8007652 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800764e:	2303      	movs	r3, #3
 8007650:	e018      	b.n	8007684 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	7c1b      	ldrb	r3, [r3, #16]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d10a      	bne.n	8007670 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800765a:	4b0c      	ldr	r3, [pc, #48]	; (800768c <USBD_CDC_ReceivePacket+0x68>)
 800765c:	7819      	ldrb	r1, [r3, #0]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007664:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f001 ffb1 	bl	80095d0 <USBD_LL_PrepareReceive>
 800766e:	e008      	b.n	8007682 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007670:	4b06      	ldr	r3, [pc, #24]	; (800768c <USBD_CDC_ReceivePacket+0x68>)
 8007672:	7819      	ldrb	r1, [r3, #0]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800767a:	2340      	movs	r3, #64	; 0x40
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f001 ffa7 	bl	80095d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	3710      	adds	r7, #16
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}
 800768c:	200000c8 	.word	0x200000c8

08007690 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b086      	sub	sp, #24
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	4613      	mov	r3, r2
 800769c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d101      	bne.n	80076a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80076a4:	2303      	movs	r3, #3
 80076a6:	e01f      	b.n	80076e8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2200      	movs	r2, #0
 80076bc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d003      	beq.n	80076ce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	68ba      	ldr	r2, [r7, #8]
 80076ca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2201      	movs	r2, #1
 80076d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	79fa      	ldrb	r2, [r7, #7]
 80076da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80076dc:	68f8      	ldr	r0, [r7, #12]
 80076de:	f001 fe21 	bl	8009324 <USBD_LL_Init>
 80076e2:	4603      	mov	r3, r0
 80076e4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80076e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3718      	adds	r7, #24
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80076fa:	2300      	movs	r3, #0
 80076fc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d101      	bne.n	8007708 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007704:	2303      	movs	r3, #3
 8007706:	e025      	b.n	8007754 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	683a      	ldr	r2, [r7, #0]
 800770c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	32ae      	adds	r2, #174	; 0xae
 800771a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800771e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007720:	2b00      	cmp	r3, #0
 8007722:	d00f      	beq.n	8007744 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	32ae      	adds	r2, #174	; 0xae
 800772e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007734:	f107 020e 	add.w	r2, r7, #14
 8007738:	4610      	mov	r0, r2
 800773a:	4798      	blx	r3
 800773c:	4602      	mov	r2, r0
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800774a:	1c5a      	adds	r2, r3, #1
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007752:	2300      	movs	r3, #0
}
 8007754:	4618      	mov	r0, r3
 8007756:	3710      	adds	r7, #16
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b082      	sub	sp, #8
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f001 fe29 	bl	80093bc <USBD_LL_Start>
 800776a:	4603      	mov	r3, r0
}
 800776c:	4618      	mov	r0, r3
 800776e:	3708      	adds	r7, #8
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800777c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800777e:	4618      	mov	r0, r3
 8007780:	370c      	adds	r7, #12
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr

0800778a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b084      	sub	sp, #16
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
 8007792:	460b      	mov	r3, r1
 8007794:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007796:	2300      	movs	r3, #0
 8007798:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d009      	beq.n	80077b8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	78fa      	ldrb	r2, [r7, #3]
 80077ae:	4611      	mov	r1, r2
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	4798      	blx	r3
 80077b4:	4603      	mov	r3, r0
 80077b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80077b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b084      	sub	sp, #16
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
 80077ca:	460b      	mov	r3, r1
 80077cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80077ce:	2300      	movs	r3, #0
 80077d0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	78fa      	ldrb	r2, [r7, #3]
 80077dc:	4611      	mov	r1, r2
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	4798      	blx	r3
 80077e2:	4603      	mov	r3, r0
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d001      	beq.n	80077ec <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80077e8:	2303      	movs	r3, #3
 80077ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80077ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3710      	adds	r7, #16
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}

080077f6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b084      	sub	sp, #16
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
 80077fe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007806:	6839      	ldr	r1, [r7, #0]
 8007808:	4618      	mov	r0, r3
 800780a:	f001 f908 	bl	8008a1e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2201      	movs	r2, #1
 8007812:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800781c:	461a      	mov	r2, r3
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800782a:	f003 031f 	and.w	r3, r3, #31
 800782e:	2b02      	cmp	r3, #2
 8007830:	d01a      	beq.n	8007868 <USBD_LL_SetupStage+0x72>
 8007832:	2b02      	cmp	r3, #2
 8007834:	d822      	bhi.n	800787c <USBD_LL_SetupStage+0x86>
 8007836:	2b00      	cmp	r3, #0
 8007838:	d002      	beq.n	8007840 <USBD_LL_SetupStage+0x4a>
 800783a:	2b01      	cmp	r3, #1
 800783c:	d00a      	beq.n	8007854 <USBD_LL_SetupStage+0x5e>
 800783e:	e01d      	b.n	800787c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007846:	4619      	mov	r1, r3
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 fb5f 	bl	8007f0c <USBD_StdDevReq>
 800784e:	4603      	mov	r3, r0
 8007850:	73fb      	strb	r3, [r7, #15]
      break;
 8007852:	e020      	b.n	8007896 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800785a:	4619      	mov	r1, r3
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 fbc7 	bl	8007ff0 <USBD_StdItfReq>
 8007862:	4603      	mov	r3, r0
 8007864:	73fb      	strb	r3, [r7, #15]
      break;
 8007866:	e016      	b.n	8007896 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800786e:	4619      	mov	r1, r3
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 fc29 	bl	80080c8 <USBD_StdEPReq>
 8007876:	4603      	mov	r3, r0
 8007878:	73fb      	strb	r3, [r7, #15]
      break;
 800787a:	e00c      	b.n	8007896 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007882:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007886:	b2db      	uxtb	r3, r3
 8007888:	4619      	mov	r1, r3
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f001 fdf6 	bl	800947c <USBD_LL_StallEP>
 8007890:	4603      	mov	r3, r0
 8007892:	73fb      	strb	r3, [r7, #15]
      break;
 8007894:	bf00      	nop
  }

  return ret;
 8007896:	7bfb      	ldrb	r3, [r7, #15]
}
 8007898:	4618      	mov	r0, r3
 800789a:	3710      	adds	r7, #16
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b086      	sub	sp, #24
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	460b      	mov	r3, r1
 80078aa:	607a      	str	r2, [r7, #4]
 80078ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80078ae:	2300      	movs	r3, #0
 80078b0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80078b2:	7afb      	ldrb	r3, [r7, #11]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d16e      	bne.n	8007996 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80078be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80078c6:	2b03      	cmp	r3, #3
 80078c8:	f040 8098 	bne.w	80079fc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	689a      	ldr	r2, [r3, #8]
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d913      	bls.n	8007900 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	689a      	ldr	r2, [r3, #8]
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	1ad2      	subs	r2, r2, r3
 80078e2:	693b      	ldr	r3, [r7, #16]
 80078e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	68da      	ldr	r2, [r3, #12]
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	4293      	cmp	r3, r2
 80078f0:	bf28      	it	cs
 80078f2:	4613      	movcs	r3, r2
 80078f4:	461a      	mov	r2, r3
 80078f6:	6879      	ldr	r1, [r7, #4]
 80078f8:	68f8      	ldr	r0, [r7, #12]
 80078fa:	f001 f984 	bl	8008c06 <USBD_CtlContinueRx>
 80078fe:	e07d      	b.n	80079fc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007906:	f003 031f 	and.w	r3, r3, #31
 800790a:	2b02      	cmp	r3, #2
 800790c:	d014      	beq.n	8007938 <USBD_LL_DataOutStage+0x98>
 800790e:	2b02      	cmp	r3, #2
 8007910:	d81d      	bhi.n	800794e <USBD_LL_DataOutStage+0xae>
 8007912:	2b00      	cmp	r3, #0
 8007914:	d002      	beq.n	800791c <USBD_LL_DataOutStage+0x7c>
 8007916:	2b01      	cmp	r3, #1
 8007918:	d003      	beq.n	8007922 <USBD_LL_DataOutStage+0x82>
 800791a:	e018      	b.n	800794e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800791c:	2300      	movs	r3, #0
 800791e:	75bb      	strb	r3, [r7, #22]
            break;
 8007920:	e018      	b.n	8007954 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007928:	b2db      	uxtb	r3, r3
 800792a:	4619      	mov	r1, r3
 800792c:	68f8      	ldr	r0, [r7, #12]
 800792e:	f000 fa5e 	bl	8007dee <USBD_CoreFindIF>
 8007932:	4603      	mov	r3, r0
 8007934:	75bb      	strb	r3, [r7, #22]
            break;
 8007936:	e00d      	b.n	8007954 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800793e:	b2db      	uxtb	r3, r3
 8007940:	4619      	mov	r1, r3
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f000 fa60 	bl	8007e08 <USBD_CoreFindEP>
 8007948:	4603      	mov	r3, r0
 800794a:	75bb      	strb	r3, [r7, #22]
            break;
 800794c:	e002      	b.n	8007954 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800794e:	2300      	movs	r3, #0
 8007950:	75bb      	strb	r3, [r7, #22]
            break;
 8007952:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007954:	7dbb      	ldrb	r3, [r7, #22]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d119      	bne.n	800798e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007960:	b2db      	uxtb	r3, r3
 8007962:	2b03      	cmp	r3, #3
 8007964:	d113      	bne.n	800798e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007966:	7dba      	ldrb	r2, [r7, #22]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	32ae      	adds	r2, #174	; 0xae
 800796c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007970:	691b      	ldr	r3, [r3, #16]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d00b      	beq.n	800798e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007976:	7dba      	ldrb	r2, [r7, #22]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800797e:	7dba      	ldrb	r2, [r7, #22]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	32ae      	adds	r2, #174	; 0xae
 8007984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	68f8      	ldr	r0, [r7, #12]
 800798c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800798e:	68f8      	ldr	r0, [r7, #12]
 8007990:	f001 f94a 	bl	8008c28 <USBD_CtlSendStatus>
 8007994:	e032      	b.n	80079fc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007996:	7afb      	ldrb	r3, [r7, #11]
 8007998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800799c:	b2db      	uxtb	r3, r3
 800799e:	4619      	mov	r1, r3
 80079a0:	68f8      	ldr	r0, [r7, #12]
 80079a2:	f000 fa31 	bl	8007e08 <USBD_CoreFindEP>
 80079a6:	4603      	mov	r3, r0
 80079a8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80079aa:	7dbb      	ldrb	r3, [r7, #22]
 80079ac:	2bff      	cmp	r3, #255	; 0xff
 80079ae:	d025      	beq.n	80079fc <USBD_LL_DataOutStage+0x15c>
 80079b0:	7dbb      	ldrb	r3, [r7, #22]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d122      	bne.n	80079fc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	2b03      	cmp	r3, #3
 80079c0:	d117      	bne.n	80079f2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80079c2:	7dba      	ldrb	r2, [r7, #22]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	32ae      	adds	r2, #174	; 0xae
 80079c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079cc:	699b      	ldr	r3, [r3, #24]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00f      	beq.n	80079f2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80079d2:	7dba      	ldrb	r2, [r7, #22]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80079da:	7dba      	ldrb	r2, [r7, #22]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	32ae      	adds	r2, #174	; 0xae
 80079e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079e4:	699b      	ldr	r3, [r3, #24]
 80079e6:	7afa      	ldrb	r2, [r7, #11]
 80079e8:	4611      	mov	r1, r2
 80079ea:	68f8      	ldr	r0, [r7, #12]
 80079ec:	4798      	blx	r3
 80079ee:	4603      	mov	r3, r0
 80079f0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80079f2:	7dfb      	ldrb	r3, [r7, #23]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d001      	beq.n	80079fc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80079f8:	7dfb      	ldrb	r3, [r7, #23]
 80079fa:	e000      	b.n	80079fe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80079fc:	2300      	movs	r3, #0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3718      	adds	r7, #24
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b086      	sub	sp, #24
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	60f8      	str	r0, [r7, #12]
 8007a0e:	460b      	mov	r3, r1
 8007a10:	607a      	str	r2, [r7, #4]
 8007a12:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007a14:	7afb      	ldrb	r3, [r7, #11]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d16f      	bne.n	8007afa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	3314      	adds	r3, #20
 8007a1e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a26:	2b02      	cmp	r3, #2
 8007a28:	d15a      	bne.n	8007ae0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	689a      	ldr	r2, [r3, #8]
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d914      	bls.n	8007a60 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	689a      	ldr	r2, [r3, #8]
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	68db      	ldr	r3, [r3, #12]
 8007a3e:	1ad2      	subs	r2, r2, r3
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	461a      	mov	r2, r3
 8007a4a:	6879      	ldr	r1, [r7, #4]
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	f001 f8ac 	bl	8008baa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a52:	2300      	movs	r3, #0
 8007a54:	2200      	movs	r2, #0
 8007a56:	2100      	movs	r1, #0
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f001 fdb9 	bl	80095d0 <USBD_LL_PrepareReceive>
 8007a5e:	e03f      	b.n	8007ae0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	68da      	ldr	r2, [r3, #12]
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d11c      	bne.n	8007aa6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	685a      	ldr	r2, [r3, #4]
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d316      	bcc.n	8007aa6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	685a      	ldr	r2, [r3, #4]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d20f      	bcs.n	8007aa6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007a86:	2200      	movs	r2, #0
 8007a88:	2100      	movs	r1, #0
 8007a8a:	68f8      	ldr	r0, [r7, #12]
 8007a8c:	f001 f88d 	bl	8008baa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a98:	2300      	movs	r3, #0
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	2100      	movs	r1, #0
 8007a9e:	68f8      	ldr	r0, [r7, #12]
 8007aa0:	f001 fd96 	bl	80095d0 <USBD_LL_PrepareReceive>
 8007aa4:	e01c      	b.n	8007ae0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	2b03      	cmp	r3, #3
 8007ab0:	d10f      	bne.n	8007ad2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d009      	beq.n	8007ad2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007acc:	68db      	ldr	r3, [r3, #12]
 8007ace:	68f8      	ldr	r0, [r7, #12]
 8007ad0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ad2:	2180      	movs	r1, #128	; 0x80
 8007ad4:	68f8      	ldr	r0, [r7, #12]
 8007ad6:	f001 fcd1 	bl	800947c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007ada:	68f8      	ldr	r0, [r7, #12]
 8007adc:	f001 f8b7 	bl	8008c4e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d03a      	beq.n	8007b60 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007aea:	68f8      	ldr	r0, [r7, #12]
 8007aec:	f7ff fe42 	bl	8007774 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007af8:	e032      	b.n	8007b60 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007afa:	7afb      	ldrb	r3, [r7, #11]
 8007afc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	4619      	mov	r1, r3
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f000 f97f 	bl	8007e08 <USBD_CoreFindEP>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b0e:	7dfb      	ldrb	r3, [r7, #23]
 8007b10:	2bff      	cmp	r3, #255	; 0xff
 8007b12:	d025      	beq.n	8007b60 <USBD_LL_DataInStage+0x15a>
 8007b14:	7dfb      	ldrb	r3, [r7, #23]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d122      	bne.n	8007b60 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	2b03      	cmp	r3, #3
 8007b24:	d11c      	bne.n	8007b60 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007b26:	7dfa      	ldrb	r2, [r7, #23]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	32ae      	adds	r2, #174	; 0xae
 8007b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b30:	695b      	ldr	r3, [r3, #20]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d014      	beq.n	8007b60 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007b36:	7dfa      	ldrb	r2, [r7, #23]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007b3e:	7dfa      	ldrb	r2, [r7, #23]
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	32ae      	adds	r2, #174	; 0xae
 8007b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b48:	695b      	ldr	r3, [r3, #20]
 8007b4a:	7afa      	ldrb	r2, [r7, #11]
 8007b4c:	4611      	mov	r1, r2
 8007b4e:	68f8      	ldr	r0, [r7, #12]
 8007b50:	4798      	blx	r3
 8007b52:	4603      	mov	r3, r0
 8007b54:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007b56:	7dbb      	ldrb	r3, [r7, #22]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d001      	beq.n	8007b60 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007b5c:	7dbb      	ldrb	r3, [r7, #22]
 8007b5e:	e000      	b.n	8007b62 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007b60:	2300      	movs	r3, #0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3718      	adds	r7, #24
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}

08007b6a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b084      	sub	sp, #16
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b72:	2300      	movs	r3, #0
 8007b74:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d014      	beq.n	8007bd0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d00e      	beq.n	8007bd0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	6852      	ldr	r2, [r2, #4]
 8007bbe:	b2d2      	uxtb	r2, r2
 8007bc0:	4611      	mov	r1, r2
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	4798      	blx	r3
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d001      	beq.n	8007bd0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007bcc:	2303      	movs	r3, #3
 8007bce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007bd0:	2340      	movs	r3, #64	; 0x40
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	2100      	movs	r1, #0
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f001 fc0b 	bl	80093f2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2240      	movs	r2, #64	; 0x40
 8007be8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007bec:	2340      	movs	r3, #64	; 0x40
 8007bee:	2200      	movs	r2, #0
 8007bf0:	2180      	movs	r1, #128	; 0x80
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f001 fbfd 	bl	80093f2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2240      	movs	r2, #64	; 0x40
 8007c02:	621a      	str	r2, [r3, #32]

  return ret;
 8007c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3710      	adds	r7, #16
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}

08007c0e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007c0e:	b480      	push	{r7}
 8007c10:	b083      	sub	sp, #12
 8007c12:	af00      	add	r7, sp, #0
 8007c14:	6078      	str	r0, [r7, #4]
 8007c16:	460b      	mov	r3, r1
 8007c18:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	78fa      	ldrb	r2, [r7, #3]
 8007c1e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007c20:	2300      	movs	r3, #0
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	370c      	adds	r7, #12
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr

08007c2e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007c2e:	b480      	push	{r7}
 8007c30:	b083      	sub	sp, #12
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c3c:	b2da      	uxtb	r2, r3
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2204      	movs	r2, #4
 8007c48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	370c      	adds	r7, #12
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr

08007c5a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007c5a:	b480      	push	{r7}
 8007c5c:	b083      	sub	sp, #12
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	2b04      	cmp	r3, #4
 8007c6c:	d106      	bne.n	8007c7c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007c74:	b2da      	uxtb	r2, r3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007c7c:	2300      	movs	r3, #0
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	370c      	adds	r7, #12
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr

08007c8a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b082      	sub	sp, #8
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	2b03      	cmp	r3, #3
 8007c9c:	d110      	bne.n	8007cc0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d00b      	beq.n	8007cc0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cae:	69db      	ldr	r3, [r3, #28]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d005      	beq.n	8007cc0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cba:	69db      	ldr	r3, [r3, #28]
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3708      	adds	r7, #8
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007cca:	b580      	push	{r7, lr}
 8007ccc:	b082      	sub	sp, #8
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	32ae      	adds	r2, #174	; 0xae
 8007ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d101      	bne.n	8007cec <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007ce8:	2303      	movs	r3, #3
 8007cea:	e01c      	b.n	8007d26 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	2b03      	cmp	r3, #3
 8007cf6:	d115      	bne.n	8007d24 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	32ae      	adds	r2, #174	; 0xae
 8007d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d06:	6a1b      	ldr	r3, [r3, #32]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d00b      	beq.n	8007d24 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	32ae      	adds	r2, #174	; 0xae
 8007d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d1a:	6a1b      	ldr	r3, [r3, #32]
 8007d1c:	78fa      	ldrb	r2, [r7, #3]
 8007d1e:	4611      	mov	r1, r2
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3708      	adds	r7, #8
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}

08007d2e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b082      	sub	sp, #8
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
 8007d36:	460b      	mov	r3, r1
 8007d38:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	32ae      	adds	r2, #174	; 0xae
 8007d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d101      	bne.n	8007d50 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007d4c:	2303      	movs	r3, #3
 8007d4e:	e01c      	b.n	8007d8a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d56:	b2db      	uxtb	r3, r3
 8007d58:	2b03      	cmp	r3, #3
 8007d5a:	d115      	bne.n	8007d88 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	32ae      	adds	r2, #174	; 0xae
 8007d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00b      	beq.n	8007d88 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	32ae      	adds	r2, #174	; 0xae
 8007d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d80:	78fa      	ldrb	r2, [r7, #3]
 8007d82:	4611      	mov	r1, r2
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007d88:	2300      	movs	r3, #0
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3708      	adds	r7, #8
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}

08007d92 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007d92:	b480      	push	{r7}
 8007d94:	b083      	sub	sp, #12
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007d9a:	2300      	movs	r3, #0
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	370c      	adds	r7, #12
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007db0:	2300      	movs	r3, #0
 8007db2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00e      	beq.n	8007de4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	6852      	ldr	r2, [r2, #4]
 8007dd2:	b2d2      	uxtb	r2, r2
 8007dd4:	4611      	mov	r1, r2
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	4798      	blx	r3
 8007dda:	4603      	mov	r3, r0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d001      	beq.n	8007de4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007de0:	2303      	movs	r3, #3
 8007de2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3710      	adds	r7, #16
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}

08007dee <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007dee:	b480      	push	{r7}
 8007df0:	b083      	sub	sp, #12
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
 8007df6:	460b      	mov	r3, r1
 8007df8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007dfa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	370c      	adds	r7, #12
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b083      	sub	sp, #12
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	460b      	mov	r3, r1
 8007e12:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007e14:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	370c      	adds	r7, #12
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr

08007e22 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b086      	sub	sp, #24
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007e36:	2300      	movs	r3, #0
 8007e38:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	885b      	ldrh	r3, [r3, #2]
 8007e3e:	b29a      	uxth	r2, r3
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d920      	bls.n	8007e8c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007e52:	e013      	b.n	8007e7c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007e54:	f107 030a 	add.w	r3, r7, #10
 8007e58:	4619      	mov	r1, r3
 8007e5a:	6978      	ldr	r0, [r7, #20]
 8007e5c:	f000 f81b 	bl	8007e96 <USBD_GetNextDesc>
 8007e60:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	785b      	ldrb	r3, [r3, #1]
 8007e66:	2b05      	cmp	r3, #5
 8007e68:	d108      	bne.n	8007e7c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	789b      	ldrb	r3, [r3, #2]
 8007e72:	78fa      	ldrb	r2, [r7, #3]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d008      	beq.n	8007e8a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	885b      	ldrh	r3, [r3, #2]
 8007e80:	b29a      	uxth	r2, r3
 8007e82:	897b      	ldrh	r3, [r7, #10]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d8e5      	bhi.n	8007e54 <USBD_GetEpDesc+0x32>
 8007e88:	e000      	b.n	8007e8c <USBD_GetEpDesc+0x6a>
          break;
 8007e8a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007e8c:	693b      	ldr	r3, [r7, #16]
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3718      	adds	r7, #24
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}

08007e96 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007e96:	b480      	push	{r7}
 8007e98:	b085      	sub	sp, #20
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
 8007e9e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	881a      	ldrh	r2, [r3, #0]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	4413      	add	r3, r2
 8007eb0:	b29a      	uxth	r2, r3
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	461a      	mov	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	4413      	add	r3, r2
 8007ec0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3714      	adds	r7, #20
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b087      	sub	sp, #28
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007eee:	8a3b      	ldrh	r3, [r7, #16]
 8007ef0:	021b      	lsls	r3, r3, #8
 8007ef2:	b21a      	sxth	r2, r3
 8007ef4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	b21b      	sxth	r3, r3
 8007efc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007efe:	89fb      	ldrh	r3, [r7, #14]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	371c      	adds	r7, #28
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f16:	2300      	movs	r3, #0
 8007f18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f22:	2b40      	cmp	r3, #64	; 0x40
 8007f24:	d005      	beq.n	8007f32 <USBD_StdDevReq+0x26>
 8007f26:	2b40      	cmp	r3, #64	; 0x40
 8007f28:	d857      	bhi.n	8007fda <USBD_StdDevReq+0xce>
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d00f      	beq.n	8007f4e <USBD_StdDevReq+0x42>
 8007f2e:	2b20      	cmp	r3, #32
 8007f30:	d153      	bne.n	8007fda <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	32ae      	adds	r2, #174	; 0xae
 8007f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	6839      	ldr	r1, [r7, #0]
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	4798      	blx	r3
 8007f48:	4603      	mov	r3, r0
 8007f4a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f4c:	e04a      	b.n	8007fe4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	785b      	ldrb	r3, [r3, #1]
 8007f52:	2b09      	cmp	r3, #9
 8007f54:	d83b      	bhi.n	8007fce <USBD_StdDevReq+0xc2>
 8007f56:	a201      	add	r2, pc, #4	; (adr r2, 8007f5c <USBD_StdDevReq+0x50>)
 8007f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f5c:	08007fb1 	.word	0x08007fb1
 8007f60:	08007fc5 	.word	0x08007fc5
 8007f64:	08007fcf 	.word	0x08007fcf
 8007f68:	08007fbb 	.word	0x08007fbb
 8007f6c:	08007fcf 	.word	0x08007fcf
 8007f70:	08007f8f 	.word	0x08007f8f
 8007f74:	08007f85 	.word	0x08007f85
 8007f78:	08007fcf 	.word	0x08007fcf
 8007f7c:	08007fa7 	.word	0x08007fa7
 8007f80:	08007f99 	.word	0x08007f99
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007f84:	6839      	ldr	r1, [r7, #0]
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 fa3c 	bl	8008404 <USBD_GetDescriptor>
          break;
 8007f8c:	e024      	b.n	8007fd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007f8e:	6839      	ldr	r1, [r7, #0]
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 fba1 	bl	80086d8 <USBD_SetAddress>
          break;
 8007f96:	e01f      	b.n	8007fd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007f98:	6839      	ldr	r1, [r7, #0]
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 fbe0 	bl	8008760 <USBD_SetConfig>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	73fb      	strb	r3, [r7, #15]
          break;
 8007fa4:	e018      	b.n	8007fd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007fa6:	6839      	ldr	r1, [r7, #0]
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 fc83 	bl	80088b4 <USBD_GetConfig>
          break;
 8007fae:	e013      	b.n	8007fd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007fb0:	6839      	ldr	r1, [r7, #0]
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 fcb4 	bl	8008920 <USBD_GetStatus>
          break;
 8007fb8:	e00e      	b.n	8007fd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007fba:	6839      	ldr	r1, [r7, #0]
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 fce3 	bl	8008988 <USBD_SetFeature>
          break;
 8007fc2:	e009      	b.n	8007fd8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007fc4:	6839      	ldr	r1, [r7, #0]
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 fd07 	bl	80089da <USBD_ClrFeature>
          break;
 8007fcc:	e004      	b.n	8007fd8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007fce:	6839      	ldr	r1, [r7, #0]
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f000 fd5e 	bl	8008a92 <USBD_CtlError>
          break;
 8007fd6:	bf00      	nop
      }
      break;
 8007fd8:	e004      	b.n	8007fe4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007fda:	6839      	ldr	r1, [r7, #0]
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 fd58 	bl	8008a92 <USBD_CtlError>
      break;
 8007fe2:	bf00      	nop
  }

  return ret;
 8007fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop

08007ff0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008006:	2b40      	cmp	r3, #64	; 0x40
 8008008:	d005      	beq.n	8008016 <USBD_StdItfReq+0x26>
 800800a:	2b40      	cmp	r3, #64	; 0x40
 800800c:	d852      	bhi.n	80080b4 <USBD_StdItfReq+0xc4>
 800800e:	2b00      	cmp	r3, #0
 8008010:	d001      	beq.n	8008016 <USBD_StdItfReq+0x26>
 8008012:	2b20      	cmp	r3, #32
 8008014:	d14e      	bne.n	80080b4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800801c:	b2db      	uxtb	r3, r3
 800801e:	3b01      	subs	r3, #1
 8008020:	2b02      	cmp	r3, #2
 8008022:	d840      	bhi.n	80080a6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	889b      	ldrh	r3, [r3, #4]
 8008028:	b2db      	uxtb	r3, r3
 800802a:	2b01      	cmp	r3, #1
 800802c:	d836      	bhi.n	800809c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	889b      	ldrh	r3, [r3, #4]
 8008032:	b2db      	uxtb	r3, r3
 8008034:	4619      	mov	r1, r3
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f7ff fed9 	bl	8007dee <USBD_CoreFindIF>
 800803c:	4603      	mov	r3, r0
 800803e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008040:	7bbb      	ldrb	r3, [r7, #14]
 8008042:	2bff      	cmp	r3, #255	; 0xff
 8008044:	d01d      	beq.n	8008082 <USBD_StdItfReq+0x92>
 8008046:	7bbb      	ldrb	r3, [r7, #14]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d11a      	bne.n	8008082 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800804c:	7bba      	ldrb	r2, [r7, #14]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	32ae      	adds	r2, #174	; 0xae
 8008052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d00f      	beq.n	800807c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800805c:	7bba      	ldrb	r2, [r7, #14]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008064:	7bba      	ldrb	r2, [r7, #14]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	32ae      	adds	r2, #174	; 0xae
 800806a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	6839      	ldr	r1, [r7, #0]
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	4798      	blx	r3
 8008076:	4603      	mov	r3, r0
 8008078:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800807a:	e004      	b.n	8008086 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800807c:	2303      	movs	r3, #3
 800807e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008080:	e001      	b.n	8008086 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008082:	2303      	movs	r3, #3
 8008084:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	88db      	ldrh	r3, [r3, #6]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d110      	bne.n	80080b0 <USBD_StdItfReq+0xc0>
 800808e:	7bfb      	ldrb	r3, [r7, #15]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d10d      	bne.n	80080b0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 fdc7 	bl	8008c28 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800809a:	e009      	b.n	80080b0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800809c:	6839      	ldr	r1, [r7, #0]
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 fcf7 	bl	8008a92 <USBD_CtlError>
          break;
 80080a4:	e004      	b.n	80080b0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80080a6:	6839      	ldr	r1, [r7, #0]
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 fcf2 	bl	8008a92 <USBD_CtlError>
          break;
 80080ae:	e000      	b.n	80080b2 <USBD_StdItfReq+0xc2>
          break;
 80080b0:	bf00      	nop
      }
      break;
 80080b2:	e004      	b.n	80080be <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80080b4:	6839      	ldr	r1, [r7, #0]
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 fceb 	bl	8008a92 <USBD_CtlError>
      break;
 80080bc:	bf00      	nop
  }

  return ret;
 80080be:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3710      	adds	r7, #16
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80080d2:	2300      	movs	r3, #0
 80080d4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	889b      	ldrh	r3, [r3, #4]
 80080da:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080e4:	2b40      	cmp	r3, #64	; 0x40
 80080e6:	d007      	beq.n	80080f8 <USBD_StdEPReq+0x30>
 80080e8:	2b40      	cmp	r3, #64	; 0x40
 80080ea:	f200 817f 	bhi.w	80083ec <USBD_StdEPReq+0x324>
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d02a      	beq.n	8008148 <USBD_StdEPReq+0x80>
 80080f2:	2b20      	cmp	r3, #32
 80080f4:	f040 817a 	bne.w	80083ec <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80080f8:	7bbb      	ldrb	r3, [r7, #14]
 80080fa:	4619      	mov	r1, r3
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f7ff fe83 	bl	8007e08 <USBD_CoreFindEP>
 8008102:	4603      	mov	r3, r0
 8008104:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008106:	7b7b      	ldrb	r3, [r7, #13]
 8008108:	2bff      	cmp	r3, #255	; 0xff
 800810a:	f000 8174 	beq.w	80083f6 <USBD_StdEPReq+0x32e>
 800810e:	7b7b      	ldrb	r3, [r7, #13]
 8008110:	2b00      	cmp	r3, #0
 8008112:	f040 8170 	bne.w	80083f6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008116:	7b7a      	ldrb	r2, [r7, #13]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800811e:	7b7a      	ldrb	r2, [r7, #13]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	32ae      	adds	r2, #174	; 0xae
 8008124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	2b00      	cmp	r3, #0
 800812c:	f000 8163 	beq.w	80083f6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008130:	7b7a      	ldrb	r2, [r7, #13]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	32ae      	adds	r2, #174	; 0xae
 8008136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	6839      	ldr	r1, [r7, #0]
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	4798      	blx	r3
 8008142:	4603      	mov	r3, r0
 8008144:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008146:	e156      	b.n	80083f6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	785b      	ldrb	r3, [r3, #1]
 800814c:	2b03      	cmp	r3, #3
 800814e:	d008      	beq.n	8008162 <USBD_StdEPReq+0x9a>
 8008150:	2b03      	cmp	r3, #3
 8008152:	f300 8145 	bgt.w	80083e0 <USBD_StdEPReq+0x318>
 8008156:	2b00      	cmp	r3, #0
 8008158:	f000 809b 	beq.w	8008292 <USBD_StdEPReq+0x1ca>
 800815c:	2b01      	cmp	r3, #1
 800815e:	d03c      	beq.n	80081da <USBD_StdEPReq+0x112>
 8008160:	e13e      	b.n	80083e0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008168:	b2db      	uxtb	r3, r3
 800816a:	2b02      	cmp	r3, #2
 800816c:	d002      	beq.n	8008174 <USBD_StdEPReq+0xac>
 800816e:	2b03      	cmp	r3, #3
 8008170:	d016      	beq.n	80081a0 <USBD_StdEPReq+0xd8>
 8008172:	e02c      	b.n	80081ce <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008174:	7bbb      	ldrb	r3, [r7, #14]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00d      	beq.n	8008196 <USBD_StdEPReq+0xce>
 800817a:	7bbb      	ldrb	r3, [r7, #14]
 800817c:	2b80      	cmp	r3, #128	; 0x80
 800817e:	d00a      	beq.n	8008196 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008180:	7bbb      	ldrb	r3, [r7, #14]
 8008182:	4619      	mov	r1, r3
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f001 f979 	bl	800947c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800818a:	2180      	movs	r1, #128	; 0x80
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f001 f975 	bl	800947c <USBD_LL_StallEP>
 8008192:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008194:	e020      	b.n	80081d8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008196:	6839      	ldr	r1, [r7, #0]
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 fc7a 	bl	8008a92 <USBD_CtlError>
              break;
 800819e:	e01b      	b.n	80081d8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	885b      	ldrh	r3, [r3, #2]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d10e      	bne.n	80081c6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80081a8:	7bbb      	ldrb	r3, [r7, #14]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d00b      	beq.n	80081c6 <USBD_StdEPReq+0xfe>
 80081ae:	7bbb      	ldrb	r3, [r7, #14]
 80081b0:	2b80      	cmp	r3, #128	; 0x80
 80081b2:	d008      	beq.n	80081c6 <USBD_StdEPReq+0xfe>
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	88db      	ldrh	r3, [r3, #6]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d104      	bne.n	80081c6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80081bc:	7bbb      	ldrb	r3, [r7, #14]
 80081be:	4619      	mov	r1, r3
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f001 f95b 	bl	800947c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 fd2e 	bl	8008c28 <USBD_CtlSendStatus>

              break;
 80081cc:	e004      	b.n	80081d8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80081ce:	6839      	ldr	r1, [r7, #0]
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 fc5e 	bl	8008a92 <USBD_CtlError>
              break;
 80081d6:	bf00      	nop
          }
          break;
 80081d8:	e107      	b.n	80083ea <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	2b02      	cmp	r3, #2
 80081e4:	d002      	beq.n	80081ec <USBD_StdEPReq+0x124>
 80081e6:	2b03      	cmp	r3, #3
 80081e8:	d016      	beq.n	8008218 <USBD_StdEPReq+0x150>
 80081ea:	e04b      	b.n	8008284 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80081ec:	7bbb      	ldrb	r3, [r7, #14]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d00d      	beq.n	800820e <USBD_StdEPReq+0x146>
 80081f2:	7bbb      	ldrb	r3, [r7, #14]
 80081f4:	2b80      	cmp	r3, #128	; 0x80
 80081f6:	d00a      	beq.n	800820e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80081f8:	7bbb      	ldrb	r3, [r7, #14]
 80081fa:	4619      	mov	r1, r3
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f001 f93d 	bl	800947c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008202:	2180      	movs	r1, #128	; 0x80
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f001 f939 	bl	800947c <USBD_LL_StallEP>
 800820a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800820c:	e040      	b.n	8008290 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800820e:	6839      	ldr	r1, [r7, #0]
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 fc3e 	bl	8008a92 <USBD_CtlError>
              break;
 8008216:	e03b      	b.n	8008290 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	885b      	ldrh	r3, [r3, #2]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d136      	bne.n	800828e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008220:	7bbb      	ldrb	r3, [r7, #14]
 8008222:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008226:	2b00      	cmp	r3, #0
 8008228:	d004      	beq.n	8008234 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800822a:	7bbb      	ldrb	r3, [r7, #14]
 800822c:	4619      	mov	r1, r3
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f001 f943 	bl	80094ba <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 fcf7 	bl	8008c28 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800823a:	7bbb      	ldrb	r3, [r7, #14]
 800823c:	4619      	mov	r1, r3
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f7ff fde2 	bl	8007e08 <USBD_CoreFindEP>
 8008244:	4603      	mov	r3, r0
 8008246:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008248:	7b7b      	ldrb	r3, [r7, #13]
 800824a:	2bff      	cmp	r3, #255	; 0xff
 800824c:	d01f      	beq.n	800828e <USBD_StdEPReq+0x1c6>
 800824e:	7b7b      	ldrb	r3, [r7, #13]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d11c      	bne.n	800828e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008254:	7b7a      	ldrb	r2, [r7, #13]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800825c:	7b7a      	ldrb	r2, [r7, #13]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	32ae      	adds	r2, #174	; 0xae
 8008262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d010      	beq.n	800828e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800826c:	7b7a      	ldrb	r2, [r7, #13]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	32ae      	adds	r2, #174	; 0xae
 8008272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	6839      	ldr	r1, [r7, #0]
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	4798      	blx	r3
 800827e:	4603      	mov	r3, r0
 8008280:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008282:	e004      	b.n	800828e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008284:	6839      	ldr	r1, [r7, #0]
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 fc03 	bl	8008a92 <USBD_CtlError>
              break;
 800828c:	e000      	b.n	8008290 <USBD_StdEPReq+0x1c8>
              break;
 800828e:	bf00      	nop
          }
          break;
 8008290:	e0ab      	b.n	80083ea <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008298:	b2db      	uxtb	r3, r3
 800829a:	2b02      	cmp	r3, #2
 800829c:	d002      	beq.n	80082a4 <USBD_StdEPReq+0x1dc>
 800829e:	2b03      	cmp	r3, #3
 80082a0:	d032      	beq.n	8008308 <USBD_StdEPReq+0x240>
 80082a2:	e097      	b.n	80083d4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082a4:	7bbb      	ldrb	r3, [r7, #14]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d007      	beq.n	80082ba <USBD_StdEPReq+0x1f2>
 80082aa:	7bbb      	ldrb	r3, [r7, #14]
 80082ac:	2b80      	cmp	r3, #128	; 0x80
 80082ae:	d004      	beq.n	80082ba <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80082b0:	6839      	ldr	r1, [r7, #0]
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 fbed 	bl	8008a92 <USBD_CtlError>
                break;
 80082b8:	e091      	b.n	80083de <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	da0b      	bge.n	80082da <USBD_StdEPReq+0x212>
 80082c2:	7bbb      	ldrb	r3, [r7, #14]
 80082c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80082c8:	4613      	mov	r3, r2
 80082ca:	009b      	lsls	r3, r3, #2
 80082cc:	4413      	add	r3, r2
 80082ce:	009b      	lsls	r3, r3, #2
 80082d0:	3310      	adds	r3, #16
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	4413      	add	r3, r2
 80082d6:	3304      	adds	r3, #4
 80082d8:	e00b      	b.n	80082f2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80082da:	7bbb      	ldrb	r3, [r7, #14]
 80082dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082e0:	4613      	mov	r3, r2
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	4413      	add	r3, r2
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	4413      	add	r3, r2
 80082f0:	3304      	adds	r3, #4
 80082f2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	2200      	movs	r2, #0
 80082f8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80082fa:	68bb      	ldr	r3, [r7, #8]
 80082fc:	2202      	movs	r2, #2
 80082fe:	4619      	mov	r1, r3
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 fc37 	bl	8008b74 <USBD_CtlSendData>
              break;
 8008306:	e06a      	b.n	80083de <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008308:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800830c:	2b00      	cmp	r3, #0
 800830e:	da11      	bge.n	8008334 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008310:	7bbb      	ldrb	r3, [r7, #14]
 8008312:	f003 020f 	and.w	r2, r3, #15
 8008316:	6879      	ldr	r1, [r7, #4]
 8008318:	4613      	mov	r3, r2
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	4413      	add	r3, r2
 800831e:	009b      	lsls	r3, r3, #2
 8008320:	440b      	add	r3, r1
 8008322:	3324      	adds	r3, #36	; 0x24
 8008324:	881b      	ldrh	r3, [r3, #0]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d117      	bne.n	800835a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800832a:	6839      	ldr	r1, [r7, #0]
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 fbb0 	bl	8008a92 <USBD_CtlError>
                  break;
 8008332:	e054      	b.n	80083de <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008334:	7bbb      	ldrb	r3, [r7, #14]
 8008336:	f003 020f 	and.w	r2, r3, #15
 800833a:	6879      	ldr	r1, [r7, #4]
 800833c:	4613      	mov	r3, r2
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	4413      	add	r3, r2
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	440b      	add	r3, r1
 8008346:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800834a:	881b      	ldrh	r3, [r3, #0]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d104      	bne.n	800835a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008350:	6839      	ldr	r1, [r7, #0]
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 fb9d 	bl	8008a92 <USBD_CtlError>
                  break;
 8008358:	e041      	b.n	80083de <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800835a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800835e:	2b00      	cmp	r3, #0
 8008360:	da0b      	bge.n	800837a <USBD_StdEPReq+0x2b2>
 8008362:	7bbb      	ldrb	r3, [r7, #14]
 8008364:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008368:	4613      	mov	r3, r2
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	4413      	add	r3, r2
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	3310      	adds	r3, #16
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	4413      	add	r3, r2
 8008376:	3304      	adds	r3, #4
 8008378:	e00b      	b.n	8008392 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800837a:	7bbb      	ldrb	r3, [r7, #14]
 800837c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008380:	4613      	mov	r3, r2
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	4413      	add	r3, r2
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	4413      	add	r3, r2
 8008390:	3304      	adds	r3, #4
 8008392:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008394:	7bbb      	ldrb	r3, [r7, #14]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d002      	beq.n	80083a0 <USBD_StdEPReq+0x2d8>
 800839a:	7bbb      	ldrb	r3, [r7, #14]
 800839c:	2b80      	cmp	r3, #128	; 0x80
 800839e:	d103      	bne.n	80083a8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	2200      	movs	r2, #0
 80083a4:	601a      	str	r2, [r3, #0]
 80083a6:	e00e      	b.n	80083c6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80083a8:	7bbb      	ldrb	r3, [r7, #14]
 80083aa:	4619      	mov	r1, r3
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f001 f8a3 	bl	80094f8 <USBD_LL_IsStallEP>
 80083b2:	4603      	mov	r3, r0
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d003      	beq.n	80083c0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	2201      	movs	r2, #1
 80083bc:	601a      	str	r2, [r3, #0]
 80083be:	e002      	b.n	80083c6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	2200      	movs	r2, #0
 80083c4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	2202      	movs	r2, #2
 80083ca:	4619      	mov	r1, r3
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 fbd1 	bl	8008b74 <USBD_CtlSendData>
              break;
 80083d2:	e004      	b.n	80083de <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80083d4:	6839      	ldr	r1, [r7, #0]
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 fb5b 	bl	8008a92 <USBD_CtlError>
              break;
 80083dc:	bf00      	nop
          }
          break;
 80083de:	e004      	b.n	80083ea <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80083e0:	6839      	ldr	r1, [r7, #0]
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 fb55 	bl	8008a92 <USBD_CtlError>
          break;
 80083e8:	bf00      	nop
      }
      break;
 80083ea:	e005      	b.n	80083f8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80083ec:	6839      	ldr	r1, [r7, #0]
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 fb4f 	bl	8008a92 <USBD_CtlError>
      break;
 80083f4:	e000      	b.n	80083f8 <USBD_StdEPReq+0x330>
      break;
 80083f6:	bf00      	nop
  }

  return ret;
 80083f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
	...

08008404 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800840e:	2300      	movs	r3, #0
 8008410:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008412:	2300      	movs	r3, #0
 8008414:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008416:	2300      	movs	r3, #0
 8008418:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	885b      	ldrh	r3, [r3, #2]
 800841e:	0a1b      	lsrs	r3, r3, #8
 8008420:	b29b      	uxth	r3, r3
 8008422:	3b01      	subs	r3, #1
 8008424:	2b06      	cmp	r3, #6
 8008426:	f200 8128 	bhi.w	800867a <USBD_GetDescriptor+0x276>
 800842a:	a201      	add	r2, pc, #4	; (adr r2, 8008430 <USBD_GetDescriptor+0x2c>)
 800842c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008430:	0800844d 	.word	0x0800844d
 8008434:	08008465 	.word	0x08008465
 8008438:	080084a5 	.word	0x080084a5
 800843c:	0800867b 	.word	0x0800867b
 8008440:	0800867b 	.word	0x0800867b
 8008444:	0800861b 	.word	0x0800861b
 8008448:	08008647 	.word	0x08008647
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	7c12      	ldrb	r2, [r2, #16]
 8008458:	f107 0108 	add.w	r1, r7, #8
 800845c:	4610      	mov	r0, r2
 800845e:	4798      	blx	r3
 8008460:	60f8      	str	r0, [r7, #12]
      break;
 8008462:	e112      	b.n	800868a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	7c1b      	ldrb	r3, [r3, #16]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d10d      	bne.n	8008488 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008474:	f107 0208 	add.w	r2, r7, #8
 8008478:	4610      	mov	r0, r2
 800847a:	4798      	blx	r3
 800847c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	3301      	adds	r3, #1
 8008482:	2202      	movs	r2, #2
 8008484:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008486:	e100      	b.n	800868a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800848e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008490:	f107 0208 	add.w	r2, r7, #8
 8008494:	4610      	mov	r0, r2
 8008496:	4798      	blx	r3
 8008498:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	3301      	adds	r3, #1
 800849e:	2202      	movs	r2, #2
 80084a0:	701a      	strb	r2, [r3, #0]
      break;
 80084a2:	e0f2      	b.n	800868a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	885b      	ldrh	r3, [r3, #2]
 80084a8:	b2db      	uxtb	r3, r3
 80084aa:	2b05      	cmp	r3, #5
 80084ac:	f200 80ac 	bhi.w	8008608 <USBD_GetDescriptor+0x204>
 80084b0:	a201      	add	r2, pc, #4	; (adr r2, 80084b8 <USBD_GetDescriptor+0xb4>)
 80084b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084b6:	bf00      	nop
 80084b8:	080084d1 	.word	0x080084d1
 80084bc:	08008505 	.word	0x08008505
 80084c0:	08008539 	.word	0x08008539
 80084c4:	0800856d 	.word	0x0800856d
 80084c8:	080085a1 	.word	0x080085a1
 80084cc:	080085d5 	.word	0x080085d5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00b      	beq.n	80084f4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	7c12      	ldrb	r2, [r2, #16]
 80084e8:	f107 0108 	add.w	r1, r7, #8
 80084ec:	4610      	mov	r0, r2
 80084ee:	4798      	blx	r3
 80084f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084f2:	e091      	b.n	8008618 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80084f4:	6839      	ldr	r1, [r7, #0]
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 facb 	bl	8008a92 <USBD_CtlError>
            err++;
 80084fc:	7afb      	ldrb	r3, [r7, #11]
 80084fe:	3301      	adds	r3, #1
 8008500:	72fb      	strb	r3, [r7, #11]
          break;
 8008502:	e089      	b.n	8008618 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d00b      	beq.n	8008528 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	687a      	ldr	r2, [r7, #4]
 800851a:	7c12      	ldrb	r2, [r2, #16]
 800851c:	f107 0108 	add.w	r1, r7, #8
 8008520:	4610      	mov	r0, r2
 8008522:	4798      	blx	r3
 8008524:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008526:	e077      	b.n	8008618 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008528:	6839      	ldr	r1, [r7, #0]
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 fab1 	bl	8008a92 <USBD_CtlError>
            err++;
 8008530:	7afb      	ldrb	r3, [r7, #11]
 8008532:	3301      	adds	r3, #1
 8008534:	72fb      	strb	r3, [r7, #11]
          break;
 8008536:	e06f      	b.n	8008618 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d00b      	beq.n	800855c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800854a:	68db      	ldr	r3, [r3, #12]
 800854c:	687a      	ldr	r2, [r7, #4]
 800854e:	7c12      	ldrb	r2, [r2, #16]
 8008550:	f107 0108 	add.w	r1, r7, #8
 8008554:	4610      	mov	r0, r2
 8008556:	4798      	blx	r3
 8008558:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800855a:	e05d      	b.n	8008618 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800855c:	6839      	ldr	r1, [r7, #0]
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 fa97 	bl	8008a92 <USBD_CtlError>
            err++;
 8008564:	7afb      	ldrb	r3, [r7, #11]
 8008566:	3301      	adds	r3, #1
 8008568:	72fb      	strb	r3, [r7, #11]
          break;
 800856a:	e055      	b.n	8008618 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008572:	691b      	ldr	r3, [r3, #16]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d00b      	beq.n	8008590 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800857e:	691b      	ldr	r3, [r3, #16]
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	7c12      	ldrb	r2, [r2, #16]
 8008584:	f107 0108 	add.w	r1, r7, #8
 8008588:	4610      	mov	r0, r2
 800858a:	4798      	blx	r3
 800858c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800858e:	e043      	b.n	8008618 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008590:	6839      	ldr	r1, [r7, #0]
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 fa7d 	bl	8008a92 <USBD_CtlError>
            err++;
 8008598:	7afb      	ldrb	r3, [r7, #11]
 800859a:	3301      	adds	r3, #1
 800859c:	72fb      	strb	r3, [r7, #11]
          break;
 800859e:	e03b      	b.n	8008618 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085a6:	695b      	ldr	r3, [r3, #20]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d00b      	beq.n	80085c4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085b2:	695b      	ldr	r3, [r3, #20]
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	7c12      	ldrb	r2, [r2, #16]
 80085b8:	f107 0108 	add.w	r1, r7, #8
 80085bc:	4610      	mov	r0, r2
 80085be:	4798      	blx	r3
 80085c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085c2:	e029      	b.n	8008618 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085c4:	6839      	ldr	r1, [r7, #0]
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 fa63 	bl	8008a92 <USBD_CtlError>
            err++;
 80085cc:	7afb      	ldrb	r3, [r7, #11]
 80085ce:	3301      	adds	r3, #1
 80085d0:	72fb      	strb	r3, [r7, #11]
          break;
 80085d2:	e021      	b.n	8008618 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085da:	699b      	ldr	r3, [r3, #24]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00b      	beq.n	80085f8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085e6:	699b      	ldr	r3, [r3, #24]
 80085e8:	687a      	ldr	r2, [r7, #4]
 80085ea:	7c12      	ldrb	r2, [r2, #16]
 80085ec:	f107 0108 	add.w	r1, r7, #8
 80085f0:	4610      	mov	r0, r2
 80085f2:	4798      	blx	r3
 80085f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085f6:	e00f      	b.n	8008618 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085f8:	6839      	ldr	r1, [r7, #0]
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 fa49 	bl	8008a92 <USBD_CtlError>
            err++;
 8008600:	7afb      	ldrb	r3, [r7, #11]
 8008602:	3301      	adds	r3, #1
 8008604:	72fb      	strb	r3, [r7, #11]
          break;
 8008606:	e007      	b.n	8008618 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008608:	6839      	ldr	r1, [r7, #0]
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 fa41 	bl	8008a92 <USBD_CtlError>
          err++;
 8008610:	7afb      	ldrb	r3, [r7, #11]
 8008612:	3301      	adds	r3, #1
 8008614:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008616:	bf00      	nop
      }
      break;
 8008618:	e037      	b.n	800868a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	7c1b      	ldrb	r3, [r3, #16]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d109      	bne.n	8008636 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800862a:	f107 0208 	add.w	r2, r7, #8
 800862e:	4610      	mov	r0, r2
 8008630:	4798      	blx	r3
 8008632:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008634:	e029      	b.n	800868a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008636:	6839      	ldr	r1, [r7, #0]
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 fa2a 	bl	8008a92 <USBD_CtlError>
        err++;
 800863e:	7afb      	ldrb	r3, [r7, #11]
 8008640:	3301      	adds	r3, #1
 8008642:	72fb      	strb	r3, [r7, #11]
      break;
 8008644:	e021      	b.n	800868a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	7c1b      	ldrb	r3, [r3, #16]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d10d      	bne.n	800866a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008656:	f107 0208 	add.w	r2, r7, #8
 800865a:	4610      	mov	r0, r2
 800865c:	4798      	blx	r3
 800865e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	3301      	adds	r3, #1
 8008664:	2207      	movs	r2, #7
 8008666:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008668:	e00f      	b.n	800868a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800866a:	6839      	ldr	r1, [r7, #0]
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 fa10 	bl	8008a92 <USBD_CtlError>
        err++;
 8008672:	7afb      	ldrb	r3, [r7, #11]
 8008674:	3301      	adds	r3, #1
 8008676:	72fb      	strb	r3, [r7, #11]
      break;
 8008678:	e007      	b.n	800868a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800867a:	6839      	ldr	r1, [r7, #0]
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 fa08 	bl	8008a92 <USBD_CtlError>
      err++;
 8008682:	7afb      	ldrb	r3, [r7, #11]
 8008684:	3301      	adds	r3, #1
 8008686:	72fb      	strb	r3, [r7, #11]
      break;
 8008688:	bf00      	nop
  }

  if (err != 0U)
 800868a:	7afb      	ldrb	r3, [r7, #11]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d11e      	bne.n	80086ce <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	88db      	ldrh	r3, [r3, #6]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d016      	beq.n	80086c6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008698:	893b      	ldrh	r3, [r7, #8]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d00e      	beq.n	80086bc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	88da      	ldrh	r2, [r3, #6]
 80086a2:	893b      	ldrh	r3, [r7, #8]
 80086a4:	4293      	cmp	r3, r2
 80086a6:	bf28      	it	cs
 80086a8:	4613      	movcs	r3, r2
 80086aa:	b29b      	uxth	r3, r3
 80086ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80086ae:	893b      	ldrh	r3, [r7, #8]
 80086b0:	461a      	mov	r2, r3
 80086b2:	68f9      	ldr	r1, [r7, #12]
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 fa5d 	bl	8008b74 <USBD_CtlSendData>
 80086ba:	e009      	b.n	80086d0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80086bc:	6839      	ldr	r1, [r7, #0]
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 f9e7 	bl	8008a92 <USBD_CtlError>
 80086c4:	e004      	b.n	80086d0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 faae 	bl	8008c28 <USBD_CtlSendStatus>
 80086cc:	e000      	b.n	80086d0 <USBD_GetDescriptor+0x2cc>
    return;
 80086ce:	bf00      	nop
  }
}
 80086d0:	3710      	adds	r7, #16
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
 80086d6:	bf00      	nop

080086d8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	889b      	ldrh	r3, [r3, #4]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d131      	bne.n	800874e <USBD_SetAddress+0x76>
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	88db      	ldrh	r3, [r3, #6]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d12d      	bne.n	800874e <USBD_SetAddress+0x76>
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	885b      	ldrh	r3, [r3, #2]
 80086f6:	2b7f      	cmp	r3, #127	; 0x7f
 80086f8:	d829      	bhi.n	800874e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	885b      	ldrh	r3, [r3, #2]
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008704:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800870c:	b2db      	uxtb	r3, r3
 800870e:	2b03      	cmp	r3, #3
 8008710:	d104      	bne.n	800871c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008712:	6839      	ldr	r1, [r7, #0]
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 f9bc 	bl	8008a92 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800871a:	e01d      	b.n	8008758 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	7bfa      	ldrb	r2, [r7, #15]
 8008720:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008724:	7bfb      	ldrb	r3, [r7, #15]
 8008726:	4619      	mov	r1, r3
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 ff11 	bl	8009550 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 fa7a 	bl	8008c28 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008734:	7bfb      	ldrb	r3, [r7, #15]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d004      	beq.n	8008744 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2202      	movs	r2, #2
 800873e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008742:	e009      	b.n	8008758 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800874c:	e004      	b.n	8008758 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800874e:	6839      	ldr	r1, [r7, #0]
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 f99e 	bl	8008a92 <USBD_CtlError>
  }
}
 8008756:	bf00      	nop
 8008758:	bf00      	nop
 800875a:	3710      	adds	r7, #16
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800876a:	2300      	movs	r3, #0
 800876c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	885b      	ldrh	r3, [r3, #2]
 8008772:	b2da      	uxtb	r2, r3
 8008774:	4b4e      	ldr	r3, [pc, #312]	; (80088b0 <USBD_SetConfig+0x150>)
 8008776:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008778:	4b4d      	ldr	r3, [pc, #308]	; (80088b0 <USBD_SetConfig+0x150>)
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	2b01      	cmp	r3, #1
 800877e:	d905      	bls.n	800878c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008780:	6839      	ldr	r1, [r7, #0]
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f000 f985 	bl	8008a92 <USBD_CtlError>
    return USBD_FAIL;
 8008788:	2303      	movs	r3, #3
 800878a:	e08c      	b.n	80088a6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008792:	b2db      	uxtb	r3, r3
 8008794:	2b02      	cmp	r3, #2
 8008796:	d002      	beq.n	800879e <USBD_SetConfig+0x3e>
 8008798:	2b03      	cmp	r3, #3
 800879a:	d029      	beq.n	80087f0 <USBD_SetConfig+0x90>
 800879c:	e075      	b.n	800888a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800879e:	4b44      	ldr	r3, [pc, #272]	; (80088b0 <USBD_SetConfig+0x150>)
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d020      	beq.n	80087e8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80087a6:	4b42      	ldr	r3, [pc, #264]	; (80088b0 <USBD_SetConfig+0x150>)
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	461a      	mov	r2, r3
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80087b0:	4b3f      	ldr	r3, [pc, #252]	; (80088b0 <USBD_SetConfig+0x150>)
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	4619      	mov	r1, r3
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f7fe ffe7 	bl	800778a <USBD_SetClassConfig>
 80087bc:	4603      	mov	r3, r0
 80087be:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80087c0:	7bfb      	ldrb	r3, [r7, #15]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d008      	beq.n	80087d8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80087c6:	6839      	ldr	r1, [r7, #0]
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f000 f962 	bl	8008a92 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2202      	movs	r2, #2
 80087d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80087d6:	e065      	b.n	80088a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 fa25 	bl	8008c28 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2203      	movs	r2, #3
 80087e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80087e6:	e05d      	b.n	80088a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 fa1d 	bl	8008c28 <USBD_CtlSendStatus>
      break;
 80087ee:	e059      	b.n	80088a4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80087f0:	4b2f      	ldr	r3, [pc, #188]	; (80088b0 <USBD_SetConfig+0x150>)
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d112      	bne.n	800881e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2202      	movs	r2, #2
 80087fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008800:	4b2b      	ldr	r3, [pc, #172]	; (80088b0 <USBD_SetConfig+0x150>)
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	461a      	mov	r2, r3
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800880a:	4b29      	ldr	r3, [pc, #164]	; (80088b0 <USBD_SetConfig+0x150>)
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	4619      	mov	r1, r3
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f7fe ffd6 	bl	80077c2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 fa06 	bl	8008c28 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800881c:	e042      	b.n	80088a4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800881e:	4b24      	ldr	r3, [pc, #144]	; (80088b0 <USBD_SetConfig+0x150>)
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	461a      	mov	r2, r3
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	429a      	cmp	r2, r3
 800882a:	d02a      	beq.n	8008882 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	b2db      	uxtb	r3, r3
 8008832:	4619      	mov	r1, r3
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f7fe ffc4 	bl	80077c2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800883a:	4b1d      	ldr	r3, [pc, #116]	; (80088b0 <USBD_SetConfig+0x150>)
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	461a      	mov	r2, r3
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008844:	4b1a      	ldr	r3, [pc, #104]	; (80088b0 <USBD_SetConfig+0x150>)
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	4619      	mov	r1, r3
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f7fe ff9d 	bl	800778a <USBD_SetClassConfig>
 8008850:	4603      	mov	r3, r0
 8008852:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008854:	7bfb      	ldrb	r3, [r7, #15]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d00f      	beq.n	800887a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800885a:	6839      	ldr	r1, [r7, #0]
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 f918 	bl	8008a92 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	b2db      	uxtb	r3, r3
 8008868:	4619      	mov	r1, r3
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f7fe ffa9 	bl	80077c2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2202      	movs	r2, #2
 8008874:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008878:	e014      	b.n	80088a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 f9d4 	bl	8008c28 <USBD_CtlSendStatus>
      break;
 8008880:	e010      	b.n	80088a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 f9d0 	bl	8008c28 <USBD_CtlSendStatus>
      break;
 8008888:	e00c      	b.n	80088a4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800888a:	6839      	ldr	r1, [r7, #0]
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 f900 	bl	8008a92 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008892:	4b07      	ldr	r3, [pc, #28]	; (80088b0 <USBD_SetConfig+0x150>)
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	4619      	mov	r1, r3
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f7fe ff92 	bl	80077c2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800889e:	2303      	movs	r3, #3
 80088a0:	73fb      	strb	r3, [r7, #15]
      break;
 80088a2:	bf00      	nop
  }

  return ret;
 80088a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	200004a8 	.word	0x200004a8

080088b4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	88db      	ldrh	r3, [r3, #6]
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	d004      	beq.n	80088d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80088c6:	6839      	ldr	r1, [r7, #0]
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 f8e2 	bl	8008a92 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80088ce:	e023      	b.n	8008918 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	2b02      	cmp	r3, #2
 80088da:	dc02      	bgt.n	80088e2 <USBD_GetConfig+0x2e>
 80088dc:	2b00      	cmp	r3, #0
 80088de:	dc03      	bgt.n	80088e8 <USBD_GetConfig+0x34>
 80088e0:	e015      	b.n	800890e <USBD_GetConfig+0x5a>
 80088e2:	2b03      	cmp	r3, #3
 80088e4:	d00b      	beq.n	80088fe <USBD_GetConfig+0x4a>
 80088e6:	e012      	b.n	800890e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2200      	movs	r2, #0
 80088ec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	3308      	adds	r3, #8
 80088f2:	2201      	movs	r2, #1
 80088f4:	4619      	mov	r1, r3
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 f93c 	bl	8008b74 <USBD_CtlSendData>
        break;
 80088fc:	e00c      	b.n	8008918 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	3304      	adds	r3, #4
 8008902:	2201      	movs	r2, #1
 8008904:	4619      	mov	r1, r3
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 f934 	bl	8008b74 <USBD_CtlSendData>
        break;
 800890c:	e004      	b.n	8008918 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800890e:	6839      	ldr	r1, [r7, #0]
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 f8be 	bl	8008a92 <USBD_CtlError>
        break;
 8008916:	bf00      	nop
}
 8008918:	bf00      	nop
 800891a:	3708      	adds	r7, #8
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
 8008928:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008930:	b2db      	uxtb	r3, r3
 8008932:	3b01      	subs	r3, #1
 8008934:	2b02      	cmp	r3, #2
 8008936:	d81e      	bhi.n	8008976 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	88db      	ldrh	r3, [r3, #6]
 800893c:	2b02      	cmp	r3, #2
 800893e:	d004      	beq.n	800894a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008940:	6839      	ldr	r1, [r7, #0]
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 f8a5 	bl	8008a92 <USBD_CtlError>
        break;
 8008948:	e01a      	b.n	8008980 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2201      	movs	r2, #1
 800894e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008956:	2b00      	cmp	r3, #0
 8008958:	d005      	beq.n	8008966 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	68db      	ldr	r3, [r3, #12]
 800895e:	f043 0202 	orr.w	r2, r3, #2
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	330c      	adds	r3, #12
 800896a:	2202      	movs	r2, #2
 800896c:	4619      	mov	r1, r3
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 f900 	bl	8008b74 <USBD_CtlSendData>
      break;
 8008974:	e004      	b.n	8008980 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008976:	6839      	ldr	r1, [r7, #0]
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 f88a 	bl	8008a92 <USBD_CtlError>
      break;
 800897e:	bf00      	nop
  }
}
 8008980:	bf00      	nop
 8008982:	3708      	adds	r7, #8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}

08008988 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b082      	sub	sp, #8
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	885b      	ldrh	r3, [r3, #2]
 8008996:	2b01      	cmp	r3, #1
 8008998:	d107      	bne.n	80089aa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2201      	movs	r2, #1
 800899e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 f940 	bl	8008c28 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80089a8:	e013      	b.n	80089d2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	885b      	ldrh	r3, [r3, #2]
 80089ae:	2b02      	cmp	r3, #2
 80089b0:	d10b      	bne.n	80089ca <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	889b      	ldrh	r3, [r3, #4]
 80089b6:	0a1b      	lsrs	r3, r3, #8
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	b2da      	uxtb	r2, r3
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 f930 	bl	8008c28 <USBD_CtlSendStatus>
}
 80089c8:	e003      	b.n	80089d2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80089ca:	6839      	ldr	r1, [r7, #0]
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 f860 	bl	8008a92 <USBD_CtlError>
}
 80089d2:	bf00      	nop
 80089d4:	3708      	adds	r7, #8
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}

080089da <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089da:	b580      	push	{r7, lr}
 80089dc:	b082      	sub	sp, #8
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
 80089e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089ea:	b2db      	uxtb	r3, r3
 80089ec:	3b01      	subs	r3, #1
 80089ee:	2b02      	cmp	r3, #2
 80089f0:	d80b      	bhi.n	8008a0a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	885b      	ldrh	r3, [r3, #2]
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d10c      	bne.n	8008a14 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2200      	movs	r2, #0
 80089fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 f910 	bl	8008c28 <USBD_CtlSendStatus>
      }
      break;
 8008a08:	e004      	b.n	8008a14 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008a0a:	6839      	ldr	r1, [r7, #0]
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f000 f840 	bl	8008a92 <USBD_CtlError>
      break;
 8008a12:	e000      	b.n	8008a16 <USBD_ClrFeature+0x3c>
      break;
 8008a14:	bf00      	nop
  }
}
 8008a16:	bf00      	nop
 8008a18:	3708      	adds	r7, #8
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b084      	sub	sp, #16
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
 8008a26:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	781a      	ldrb	r2, [r3, #0]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	3301      	adds	r3, #1
 8008a38:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	781a      	ldrb	r2, [r3, #0]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	3301      	adds	r3, #1
 8008a46:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008a48:	68f8      	ldr	r0, [r7, #12]
 8008a4a:	f7ff fa41 	bl	8007ed0 <SWAPBYTE>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	461a      	mov	r2, r3
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	3301      	adds	r3, #1
 8008a5a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	3301      	adds	r3, #1
 8008a60:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008a62:	68f8      	ldr	r0, [r7, #12]
 8008a64:	f7ff fa34 	bl	8007ed0 <SWAPBYTE>
 8008a68:	4603      	mov	r3, r0
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	3301      	adds	r3, #1
 8008a74:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	3301      	adds	r3, #1
 8008a7a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008a7c:	68f8      	ldr	r0, [r7, #12]
 8008a7e:	f7ff fa27 	bl	8007ed0 <SWAPBYTE>
 8008a82:	4603      	mov	r3, r0
 8008a84:	461a      	mov	r2, r3
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	80da      	strh	r2, [r3, #6]
}
 8008a8a:	bf00      	nop
 8008a8c:	3710      	adds	r7, #16
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}

08008a92 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a92:	b580      	push	{r7, lr}
 8008a94:	b082      	sub	sp, #8
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
 8008a9a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a9c:	2180      	movs	r1, #128	; 0x80
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 fcec 	bl	800947c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008aa4:	2100      	movs	r1, #0
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 fce8 	bl	800947c <USBD_LL_StallEP>
}
 8008aac:	bf00      	nop
 8008aae:	3708      	adds	r7, #8
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b086      	sub	sp, #24
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	60f8      	str	r0, [r7, #12]
 8008abc:	60b9      	str	r1, [r7, #8]
 8008abe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d036      	beq.n	8008b38 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008ace:	6938      	ldr	r0, [r7, #16]
 8008ad0:	f000 f836 	bl	8008b40 <USBD_GetLen>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	005b      	lsls	r3, r3, #1
 8008adc:	b29a      	uxth	r2, r3
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008ae2:	7dfb      	ldrb	r3, [r7, #23]
 8008ae4:	68ba      	ldr	r2, [r7, #8]
 8008ae6:	4413      	add	r3, r2
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	7812      	ldrb	r2, [r2, #0]
 8008aec:	701a      	strb	r2, [r3, #0]
  idx++;
 8008aee:	7dfb      	ldrb	r3, [r7, #23]
 8008af0:	3301      	adds	r3, #1
 8008af2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008af4:	7dfb      	ldrb	r3, [r7, #23]
 8008af6:	68ba      	ldr	r2, [r7, #8]
 8008af8:	4413      	add	r3, r2
 8008afa:	2203      	movs	r2, #3
 8008afc:	701a      	strb	r2, [r3, #0]
  idx++;
 8008afe:	7dfb      	ldrb	r3, [r7, #23]
 8008b00:	3301      	adds	r3, #1
 8008b02:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008b04:	e013      	b.n	8008b2e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008b06:	7dfb      	ldrb	r3, [r7, #23]
 8008b08:	68ba      	ldr	r2, [r7, #8]
 8008b0a:	4413      	add	r3, r2
 8008b0c:	693a      	ldr	r2, [r7, #16]
 8008b0e:	7812      	ldrb	r2, [r2, #0]
 8008b10:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	3301      	adds	r3, #1
 8008b16:	613b      	str	r3, [r7, #16]
    idx++;
 8008b18:	7dfb      	ldrb	r3, [r7, #23]
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008b1e:	7dfb      	ldrb	r3, [r7, #23]
 8008b20:	68ba      	ldr	r2, [r7, #8]
 8008b22:	4413      	add	r3, r2
 8008b24:	2200      	movs	r2, #0
 8008b26:	701a      	strb	r2, [r3, #0]
    idx++;
 8008b28:	7dfb      	ldrb	r3, [r7, #23]
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d1e7      	bne.n	8008b06 <USBD_GetString+0x52>
 8008b36:	e000      	b.n	8008b3a <USBD_GetString+0x86>
    return;
 8008b38:	bf00      	nop
  }
}
 8008b3a:	3718      	adds	r7, #24
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b085      	sub	sp, #20
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008b50:	e005      	b.n	8008b5e <USBD_GetLen+0x1e>
  {
    len++;
 8008b52:	7bfb      	ldrb	r3, [r7, #15]
 8008b54:	3301      	adds	r3, #1
 8008b56:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d1f5      	bne.n	8008b52 <USBD_GetLen+0x12>
  }

  return len;
 8008b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3714      	adds	r7, #20
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	60f8      	str	r0, [r7, #12]
 8008b7c:	60b9      	str	r1, [r7, #8]
 8008b7e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	2202      	movs	r2, #2
 8008b84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	687a      	ldr	r2, [r7, #4]
 8008b92:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	68ba      	ldr	r2, [r7, #8]
 8008b98:	2100      	movs	r1, #0
 8008b9a:	68f8      	ldr	r0, [r7, #12]
 8008b9c:	f000 fcf7 	bl	800958e <USBD_LL_Transmit>

  return USBD_OK;
 8008ba0:	2300      	movs	r3, #0
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b084      	sub	sp, #16
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	60f8      	str	r0, [r7, #12]
 8008bb2:	60b9      	str	r1, [r7, #8]
 8008bb4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	68ba      	ldr	r2, [r7, #8]
 8008bba:	2100      	movs	r1, #0
 8008bbc:	68f8      	ldr	r0, [r7, #12]
 8008bbe:	f000 fce6 	bl	800958e <USBD_LL_Transmit>

  return USBD_OK;
 8008bc2:	2300      	movs	r3, #0
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3710      	adds	r7, #16
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	60f8      	str	r0, [r7, #12]
 8008bd4:	60b9      	str	r1, [r7, #8]
 8008bd6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2203      	movs	r2, #3
 8008bdc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	687a      	ldr	r2, [r7, #4]
 8008be4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	687a      	ldr	r2, [r7, #4]
 8008bec:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	68ba      	ldr	r2, [r7, #8]
 8008bf4:	2100      	movs	r1, #0
 8008bf6:	68f8      	ldr	r0, [r7, #12]
 8008bf8:	f000 fcea 	bl	80095d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008bfc:	2300      	movs	r3, #0
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3710      	adds	r7, #16
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}

08008c06 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b084      	sub	sp, #16
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	60f8      	str	r0, [r7, #12]
 8008c0e:	60b9      	str	r1, [r7, #8]
 8008c10:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	68ba      	ldr	r2, [r7, #8]
 8008c16:	2100      	movs	r1, #0
 8008c18:	68f8      	ldr	r0, [r7, #12]
 8008c1a:	f000 fcd9 	bl	80095d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c1e:	2300      	movs	r3, #0
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3710      	adds	r7, #16
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}

08008c28 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b082      	sub	sp, #8
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2204      	movs	r2, #4
 8008c34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008c38:	2300      	movs	r3, #0
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	2100      	movs	r1, #0
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f000 fca5 	bl	800958e <USBD_LL_Transmit>

  return USBD_OK;
 8008c44:	2300      	movs	r3, #0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3708      	adds	r7, #8
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}

08008c4e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b082      	sub	sp, #8
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2205      	movs	r2, #5
 8008c5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c5e:	2300      	movs	r3, #0
 8008c60:	2200      	movs	r2, #0
 8008c62:	2100      	movs	r1, #0
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 fcb3 	bl	80095d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c6a:	2300      	movs	r3, #0
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	3708      	adds	r7, #8
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008c78:	2200      	movs	r2, #0
 8008c7a:	4912      	ldr	r1, [pc, #72]	; (8008cc4 <MX_USB_DEVICE_Init+0x50>)
 8008c7c:	4812      	ldr	r0, [pc, #72]	; (8008cc8 <MX_USB_DEVICE_Init+0x54>)
 8008c7e:	f7fe fd07 	bl	8007690 <USBD_Init>
 8008c82:	4603      	mov	r3, r0
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d001      	beq.n	8008c8c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008c88:	f7f8 fe9c 	bl	80019c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008c8c:	490f      	ldr	r1, [pc, #60]	; (8008ccc <MX_USB_DEVICE_Init+0x58>)
 8008c8e:	480e      	ldr	r0, [pc, #56]	; (8008cc8 <MX_USB_DEVICE_Init+0x54>)
 8008c90:	f7fe fd2e 	bl	80076f0 <USBD_RegisterClass>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d001      	beq.n	8008c9e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008c9a:	f7f8 fe93 	bl	80019c4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008c9e:	490c      	ldr	r1, [pc, #48]	; (8008cd0 <MX_USB_DEVICE_Init+0x5c>)
 8008ca0:	4809      	ldr	r0, [pc, #36]	; (8008cc8 <MX_USB_DEVICE_Init+0x54>)
 8008ca2:	f7fe fc1f 	bl	80074e4 <USBD_CDC_RegisterInterface>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d001      	beq.n	8008cb0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008cac:	f7f8 fe8a 	bl	80019c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008cb0:	4805      	ldr	r0, [pc, #20]	; (8008cc8 <MX_USB_DEVICE_Init+0x54>)
 8008cb2:	f7fe fd53 	bl	800775c <USBD_Start>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d001      	beq.n	8008cc0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008cbc:	f7f8 fe82 	bl	80019c4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008cc0:	bf00      	nop
 8008cc2:	bd80      	pop	{r7, pc}
 8008cc4:	200000e0 	.word	0x200000e0
 8008cc8:	200004ac 	.word	0x200004ac
 8008ccc:	2000004c 	.word	0x2000004c
 8008cd0:	200000cc 	.word	0x200000cc

08008cd4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008cd8:	2200      	movs	r2, #0
 8008cda:	4905      	ldr	r1, [pc, #20]	; (8008cf0 <CDC_Init_FS+0x1c>)
 8008cdc:	4805      	ldr	r0, [pc, #20]	; (8008cf4 <CDC_Init_FS+0x20>)
 8008cde:	f7fe fc1b 	bl	8007518 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008ce2:	4905      	ldr	r1, [pc, #20]	; (8008cf8 <CDC_Init_FS+0x24>)
 8008ce4:	4803      	ldr	r0, [pc, #12]	; (8008cf4 <CDC_Init_FS+0x20>)
 8008ce6:	f7fe fc39 	bl	800755c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008cea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	bd80      	pop	{r7, pc}
 8008cf0:	20000f88 	.word	0x20000f88
 8008cf4:	200004ac 	.word	0x200004ac
 8008cf8:	20000788 	.word	0x20000788

08008cfc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008d00:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr

08008d0c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b083      	sub	sp, #12
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	4603      	mov	r3, r0
 8008d14:	6039      	str	r1, [r7, #0]
 8008d16:	71fb      	strb	r3, [r7, #7]
 8008d18:	4613      	mov	r3, r2
 8008d1a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008d1c:	79fb      	ldrb	r3, [r7, #7]
 8008d1e:	2b23      	cmp	r3, #35	; 0x23
 8008d20:	d84a      	bhi.n	8008db8 <CDC_Control_FS+0xac>
 8008d22:	a201      	add	r2, pc, #4	; (adr r2, 8008d28 <CDC_Control_FS+0x1c>)
 8008d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d28:	08008db9 	.word	0x08008db9
 8008d2c:	08008db9 	.word	0x08008db9
 8008d30:	08008db9 	.word	0x08008db9
 8008d34:	08008db9 	.word	0x08008db9
 8008d38:	08008db9 	.word	0x08008db9
 8008d3c:	08008db9 	.word	0x08008db9
 8008d40:	08008db9 	.word	0x08008db9
 8008d44:	08008db9 	.word	0x08008db9
 8008d48:	08008db9 	.word	0x08008db9
 8008d4c:	08008db9 	.word	0x08008db9
 8008d50:	08008db9 	.word	0x08008db9
 8008d54:	08008db9 	.word	0x08008db9
 8008d58:	08008db9 	.word	0x08008db9
 8008d5c:	08008db9 	.word	0x08008db9
 8008d60:	08008db9 	.word	0x08008db9
 8008d64:	08008db9 	.word	0x08008db9
 8008d68:	08008db9 	.word	0x08008db9
 8008d6c:	08008db9 	.word	0x08008db9
 8008d70:	08008db9 	.word	0x08008db9
 8008d74:	08008db9 	.word	0x08008db9
 8008d78:	08008db9 	.word	0x08008db9
 8008d7c:	08008db9 	.word	0x08008db9
 8008d80:	08008db9 	.word	0x08008db9
 8008d84:	08008db9 	.word	0x08008db9
 8008d88:	08008db9 	.word	0x08008db9
 8008d8c:	08008db9 	.word	0x08008db9
 8008d90:	08008db9 	.word	0x08008db9
 8008d94:	08008db9 	.word	0x08008db9
 8008d98:	08008db9 	.word	0x08008db9
 8008d9c:	08008db9 	.word	0x08008db9
 8008da0:	08008db9 	.word	0x08008db9
 8008da4:	08008db9 	.word	0x08008db9
 8008da8:	08008db9 	.word	0x08008db9
 8008dac:	08008db9 	.word	0x08008db9
 8008db0:	08008db9 	.word	0x08008db9
 8008db4:	08008db9 	.word	0x08008db9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008db8:	bf00      	nop
  }

  return (USBD_OK);
 8008dba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	370c      	adds	r7, #12
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008dd2:	6879      	ldr	r1, [r7, #4]
 8008dd4:	480f      	ldr	r0, [pc, #60]	; (8008e14 <CDC_Receive_FS+0x4c>)
 8008dd6:	f7fe fbc1 	bl	800755c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008dda:	480e      	ldr	r0, [pc, #56]	; (8008e14 <CDC_Receive_FS+0x4c>)
 8008ddc:	f7fe fc22 	bl	8007624 <USBD_CDC_ReceivePacket>
  memset (buffer, '\0', 64);  // clear the buffer
 8008de0:	2240      	movs	r2, #64	; 0x40
 8008de2:	2100      	movs	r1, #0
 8008de4:	480c      	ldr	r0, [pc, #48]	; (8008e18 <CDC_Receive_FS+0x50>)
 8008de6:	f000 fca7 	bl	8009738 <memset>
  uint8_t len = (uint8_t)*Len;
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	73fb      	strb	r3, [r7, #15]
  memcpy(buffer, Buf, len);  // copy the data to the buffer
 8008df0:	7bfb      	ldrb	r3, [r7, #15]
 8008df2:	461a      	mov	r2, r3
 8008df4:	6879      	ldr	r1, [r7, #4]
 8008df6:	4808      	ldr	r0, [pc, #32]	; (8008e18 <CDC_Receive_FS+0x50>)
 8008df8:	f000 fc90 	bl	800971c <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 8008dfc:	7bfb      	ldrb	r3, [r7, #15]
 8008dfe:	461a      	mov	r2, r3
 8008e00:	2100      	movs	r1, #0
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 fc98 	bl	8009738 <memset>
  return (USBD_OK);
 8008e08:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3710      	adds	r7, #16
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	200004ac 	.word	0x200004ac
 8008e18:	20000454 	.word	0x20000454

08008e1c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	460b      	mov	r3, r1
 8008e26:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008e2c:	4b0d      	ldr	r3, [pc, #52]	; (8008e64 <CDC_Transmit_FS+0x48>)
 8008e2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e32:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d001      	beq.n	8008e42 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e00b      	b.n	8008e5a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008e42:	887b      	ldrh	r3, [r7, #2]
 8008e44:	461a      	mov	r2, r3
 8008e46:	6879      	ldr	r1, [r7, #4]
 8008e48:	4806      	ldr	r0, [pc, #24]	; (8008e64 <CDC_Transmit_FS+0x48>)
 8008e4a:	f7fe fb65 	bl	8007518 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008e4e:	4805      	ldr	r0, [pc, #20]	; (8008e64 <CDC_Transmit_FS+0x48>)
 8008e50:	f7fe fba2 	bl	8007598 <USBD_CDC_TransmitPacket>
 8008e54:	4603      	mov	r3, r0
 8008e56:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3710      	adds	r7, #16
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}
 8008e62:	bf00      	nop
 8008e64:	200004ac 	.word	0x200004ac

08008e68 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b087      	sub	sp, #28
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	60f8      	str	r0, [r7, #12]
 8008e70:	60b9      	str	r1, [r7, #8]
 8008e72:	4613      	mov	r3, r2
 8008e74:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008e76:	2300      	movs	r3, #0
 8008e78:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008e7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	371c      	adds	r7, #28
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr
	...

08008e8c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b083      	sub	sp, #12
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	4603      	mov	r3, r0
 8008e94:	6039      	str	r1, [r7, #0]
 8008e96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	2212      	movs	r2, #18
 8008e9c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008e9e:	4b03      	ldr	r3, [pc, #12]	; (8008eac <USBD_FS_DeviceDescriptor+0x20>)
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr
 8008eac:	200000fc 	.word	0x200000fc

08008eb0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b083      	sub	sp, #12
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	6039      	str	r1, [r7, #0]
 8008eba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	2204      	movs	r2, #4
 8008ec0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008ec2:	4b03      	ldr	r3, [pc, #12]	; (8008ed0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	370c      	adds	r7, #12
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr
 8008ed0:	20000110 	.word	0x20000110

08008ed4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b082      	sub	sp, #8
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	4603      	mov	r3, r0
 8008edc:	6039      	str	r1, [r7, #0]
 8008ede:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ee0:	79fb      	ldrb	r3, [r7, #7]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d105      	bne.n	8008ef2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008ee6:	683a      	ldr	r2, [r7, #0]
 8008ee8:	4907      	ldr	r1, [pc, #28]	; (8008f08 <USBD_FS_ProductStrDescriptor+0x34>)
 8008eea:	4808      	ldr	r0, [pc, #32]	; (8008f0c <USBD_FS_ProductStrDescriptor+0x38>)
 8008eec:	f7ff fde2 	bl	8008ab4 <USBD_GetString>
 8008ef0:	e004      	b.n	8008efc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008ef2:	683a      	ldr	r2, [r7, #0]
 8008ef4:	4904      	ldr	r1, [pc, #16]	; (8008f08 <USBD_FS_ProductStrDescriptor+0x34>)
 8008ef6:	4805      	ldr	r0, [pc, #20]	; (8008f0c <USBD_FS_ProductStrDescriptor+0x38>)
 8008ef8:	f7ff fddc 	bl	8008ab4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008efc:	4b02      	ldr	r3, [pc, #8]	; (8008f08 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3708      	adds	r7, #8
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
 8008f06:	bf00      	nop
 8008f08:	20001788 	.word	0x20001788
 8008f0c:	0800c380 	.word	0x0800c380

08008f10 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b082      	sub	sp, #8
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	4603      	mov	r3, r0
 8008f18:	6039      	str	r1, [r7, #0]
 8008f1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008f1c:	683a      	ldr	r2, [r7, #0]
 8008f1e:	4904      	ldr	r1, [pc, #16]	; (8008f30 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008f20:	4804      	ldr	r0, [pc, #16]	; (8008f34 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008f22:	f7ff fdc7 	bl	8008ab4 <USBD_GetString>
  return USBD_StrDesc;
 8008f26:	4b02      	ldr	r3, [pc, #8]	; (8008f30 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3708      	adds	r7, #8
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}
 8008f30:	20001788 	.word	0x20001788
 8008f34:	0800c398 	.word	0x0800c398

08008f38 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b082      	sub	sp, #8
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	4603      	mov	r3, r0
 8008f40:	6039      	str	r1, [r7, #0]
 8008f42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	221a      	movs	r2, #26
 8008f48:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008f4a:	f000 f843 	bl	8008fd4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008f4e:	4b02      	ldr	r3, [pc, #8]	; (8008f58 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3708      	adds	r7, #8
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}
 8008f58:	20000114 	.word	0x20000114

08008f5c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b082      	sub	sp, #8
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	4603      	mov	r3, r0
 8008f64:	6039      	str	r1, [r7, #0]
 8008f66:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008f68:	79fb      	ldrb	r3, [r7, #7]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d105      	bne.n	8008f7a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f6e:	683a      	ldr	r2, [r7, #0]
 8008f70:	4907      	ldr	r1, [pc, #28]	; (8008f90 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f72:	4808      	ldr	r0, [pc, #32]	; (8008f94 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f74:	f7ff fd9e 	bl	8008ab4 <USBD_GetString>
 8008f78:	e004      	b.n	8008f84 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f7a:	683a      	ldr	r2, [r7, #0]
 8008f7c:	4904      	ldr	r1, [pc, #16]	; (8008f90 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f7e:	4805      	ldr	r0, [pc, #20]	; (8008f94 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f80:	f7ff fd98 	bl	8008ab4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f84:	4b02      	ldr	r3, [pc, #8]	; (8008f90 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3708      	adds	r7, #8
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	20001788 	.word	0x20001788
 8008f94:	0800c3ac 	.word	0x0800c3ac

08008f98 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b082      	sub	sp, #8
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	6039      	str	r1, [r7, #0]
 8008fa2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008fa4:	79fb      	ldrb	r3, [r7, #7]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d105      	bne.n	8008fb6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008faa:	683a      	ldr	r2, [r7, #0]
 8008fac:	4907      	ldr	r1, [pc, #28]	; (8008fcc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008fae:	4808      	ldr	r0, [pc, #32]	; (8008fd0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008fb0:	f7ff fd80 	bl	8008ab4 <USBD_GetString>
 8008fb4:	e004      	b.n	8008fc0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008fb6:	683a      	ldr	r2, [r7, #0]
 8008fb8:	4904      	ldr	r1, [pc, #16]	; (8008fcc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008fba:	4805      	ldr	r0, [pc, #20]	; (8008fd0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008fbc:	f7ff fd7a 	bl	8008ab4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008fc0:	4b02      	ldr	r3, [pc, #8]	; (8008fcc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3708      	adds	r7, #8
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	20001788 	.word	0x20001788
 8008fd0:	0800c3b8 	.word	0x0800c3b8

08008fd4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b084      	sub	sp, #16
 8008fd8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008fda:	4b0f      	ldr	r3, [pc, #60]	; (8009018 <Get_SerialNum+0x44>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008fe0:	4b0e      	ldr	r3, [pc, #56]	; (800901c <Get_SerialNum+0x48>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008fe6:	4b0e      	ldr	r3, [pc, #56]	; (8009020 <Get_SerialNum+0x4c>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008fec:	68fa      	ldr	r2, [r7, #12]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d009      	beq.n	800900e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008ffa:	2208      	movs	r2, #8
 8008ffc:	4909      	ldr	r1, [pc, #36]	; (8009024 <Get_SerialNum+0x50>)
 8008ffe:	68f8      	ldr	r0, [r7, #12]
 8009000:	f000 f814 	bl	800902c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009004:	2204      	movs	r2, #4
 8009006:	4908      	ldr	r1, [pc, #32]	; (8009028 <Get_SerialNum+0x54>)
 8009008:	68b8      	ldr	r0, [r7, #8]
 800900a:	f000 f80f 	bl	800902c <IntToUnicode>
  }
}
 800900e:	bf00      	nop
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop
 8009018:	1fff7a10 	.word	0x1fff7a10
 800901c:	1fff7a14 	.word	0x1fff7a14
 8009020:	1fff7a18 	.word	0x1fff7a18
 8009024:	20000116 	.word	0x20000116
 8009028:	20000126 	.word	0x20000126

0800902c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800902c:	b480      	push	{r7}
 800902e:	b087      	sub	sp, #28
 8009030:	af00      	add	r7, sp, #0
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	60b9      	str	r1, [r7, #8]
 8009036:	4613      	mov	r3, r2
 8009038:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800903a:	2300      	movs	r3, #0
 800903c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800903e:	2300      	movs	r3, #0
 8009040:	75fb      	strb	r3, [r7, #23]
 8009042:	e027      	b.n	8009094 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	0f1b      	lsrs	r3, r3, #28
 8009048:	2b09      	cmp	r3, #9
 800904a:	d80b      	bhi.n	8009064 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	0f1b      	lsrs	r3, r3, #28
 8009050:	b2da      	uxtb	r2, r3
 8009052:	7dfb      	ldrb	r3, [r7, #23]
 8009054:	005b      	lsls	r3, r3, #1
 8009056:	4619      	mov	r1, r3
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	440b      	add	r3, r1
 800905c:	3230      	adds	r2, #48	; 0x30
 800905e:	b2d2      	uxtb	r2, r2
 8009060:	701a      	strb	r2, [r3, #0]
 8009062:	e00a      	b.n	800907a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	0f1b      	lsrs	r3, r3, #28
 8009068:	b2da      	uxtb	r2, r3
 800906a:	7dfb      	ldrb	r3, [r7, #23]
 800906c:	005b      	lsls	r3, r3, #1
 800906e:	4619      	mov	r1, r3
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	440b      	add	r3, r1
 8009074:	3237      	adds	r2, #55	; 0x37
 8009076:	b2d2      	uxtb	r2, r2
 8009078:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	011b      	lsls	r3, r3, #4
 800907e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009080:	7dfb      	ldrb	r3, [r7, #23]
 8009082:	005b      	lsls	r3, r3, #1
 8009084:	3301      	adds	r3, #1
 8009086:	68ba      	ldr	r2, [r7, #8]
 8009088:	4413      	add	r3, r2
 800908a:	2200      	movs	r2, #0
 800908c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800908e:	7dfb      	ldrb	r3, [r7, #23]
 8009090:	3301      	adds	r3, #1
 8009092:	75fb      	strb	r3, [r7, #23]
 8009094:	7dfa      	ldrb	r2, [r7, #23]
 8009096:	79fb      	ldrb	r3, [r7, #7]
 8009098:	429a      	cmp	r2, r3
 800909a:	d3d3      	bcc.n	8009044 <IntToUnicode+0x18>
  }
}
 800909c:	bf00      	nop
 800909e:	bf00      	nop
 80090a0:	371c      	adds	r7, #28
 80090a2:	46bd      	mov	sp, r7
 80090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a8:	4770      	bx	lr
	...

080090ac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b08a      	sub	sp, #40	; 0x28
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090b4:	f107 0314 	add.w	r3, r7, #20
 80090b8:	2200      	movs	r2, #0
 80090ba:	601a      	str	r2, [r3, #0]
 80090bc:	605a      	str	r2, [r3, #4]
 80090be:	609a      	str	r2, [r3, #8]
 80090c0:	60da      	str	r2, [r3, #12]
 80090c2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80090cc:	d13a      	bne.n	8009144 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80090ce:	2300      	movs	r3, #0
 80090d0:	613b      	str	r3, [r7, #16]
 80090d2:	4b1e      	ldr	r3, [pc, #120]	; (800914c <HAL_PCD_MspInit+0xa0>)
 80090d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090d6:	4a1d      	ldr	r2, [pc, #116]	; (800914c <HAL_PCD_MspInit+0xa0>)
 80090d8:	f043 0301 	orr.w	r3, r3, #1
 80090dc:	6313      	str	r3, [r2, #48]	; 0x30
 80090de:	4b1b      	ldr	r3, [pc, #108]	; (800914c <HAL_PCD_MspInit+0xa0>)
 80090e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090e2:	f003 0301 	and.w	r3, r3, #1
 80090e6:	613b      	str	r3, [r7, #16]
 80090e8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80090ea:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80090ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090f0:	2302      	movs	r3, #2
 80090f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090f4:	2300      	movs	r3, #0
 80090f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80090f8:	2303      	movs	r3, #3
 80090fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80090fc:	230a      	movs	r3, #10
 80090fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009100:	f107 0314 	add.w	r3, r7, #20
 8009104:	4619      	mov	r1, r3
 8009106:	4812      	ldr	r0, [pc, #72]	; (8009150 <HAL_PCD_MspInit+0xa4>)
 8009108:	f7f9 fc14 	bl	8002934 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800910c:	4b0f      	ldr	r3, [pc, #60]	; (800914c <HAL_PCD_MspInit+0xa0>)
 800910e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009110:	4a0e      	ldr	r2, [pc, #56]	; (800914c <HAL_PCD_MspInit+0xa0>)
 8009112:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009116:	6353      	str	r3, [r2, #52]	; 0x34
 8009118:	2300      	movs	r3, #0
 800911a:	60fb      	str	r3, [r7, #12]
 800911c:	4b0b      	ldr	r3, [pc, #44]	; (800914c <HAL_PCD_MspInit+0xa0>)
 800911e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009120:	4a0a      	ldr	r2, [pc, #40]	; (800914c <HAL_PCD_MspInit+0xa0>)
 8009122:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009126:	6453      	str	r3, [r2, #68]	; 0x44
 8009128:	4b08      	ldr	r3, [pc, #32]	; (800914c <HAL_PCD_MspInit+0xa0>)
 800912a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800912c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009130:	60fb      	str	r3, [r7, #12]
 8009132:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009134:	2200      	movs	r2, #0
 8009136:	2100      	movs	r1, #0
 8009138:	2043      	movs	r0, #67	; 0x43
 800913a:	f7f9 fbc4 	bl	80028c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800913e:	2043      	movs	r0, #67	; 0x43
 8009140:	f7f9 fbdd 	bl	80028fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009144:	bf00      	nop
 8009146:	3728      	adds	r7, #40	; 0x28
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}
 800914c:	40023800 	.word	0x40023800
 8009150:	40020000 	.word	0x40020000

08009154 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b082      	sub	sp, #8
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009168:	4619      	mov	r1, r3
 800916a:	4610      	mov	r0, r2
 800916c:	f7fe fb43 	bl	80077f6 <USBD_LL_SetupStage>
}
 8009170:	bf00      	nop
 8009172:	3708      	adds	r7, #8
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	460b      	mov	r3, r1
 8009182:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800918a:	78fa      	ldrb	r2, [r7, #3]
 800918c:	6879      	ldr	r1, [r7, #4]
 800918e:	4613      	mov	r3, r2
 8009190:	00db      	lsls	r3, r3, #3
 8009192:	4413      	add	r3, r2
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	440b      	add	r3, r1
 8009198:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	78fb      	ldrb	r3, [r7, #3]
 80091a0:	4619      	mov	r1, r3
 80091a2:	f7fe fb7d 	bl	80078a0 <USBD_LL_DataOutStage>
}
 80091a6:	bf00      	nop
 80091a8:	3708      	adds	r7, #8
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b082      	sub	sp, #8
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
 80091b6:	460b      	mov	r3, r1
 80091b8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80091c0:	78fa      	ldrb	r2, [r7, #3]
 80091c2:	6879      	ldr	r1, [r7, #4]
 80091c4:	4613      	mov	r3, r2
 80091c6:	00db      	lsls	r3, r3, #3
 80091c8:	4413      	add	r3, r2
 80091ca:	009b      	lsls	r3, r3, #2
 80091cc:	440b      	add	r3, r1
 80091ce:	334c      	adds	r3, #76	; 0x4c
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	78fb      	ldrb	r3, [r7, #3]
 80091d4:	4619      	mov	r1, r3
 80091d6:	f7fe fc16 	bl	8007a06 <USBD_LL_DataInStage>
}
 80091da:	bf00      	nop
 80091dc:	3708      	adds	r7, #8
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091e2:	b580      	push	{r7, lr}
 80091e4:	b082      	sub	sp, #8
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80091f0:	4618      	mov	r0, r3
 80091f2:	f7fe fd4a 	bl	8007c8a <USBD_LL_SOF>
}
 80091f6:	bf00      	nop
 80091f8:	3708      	adds	r7, #8
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}

080091fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091fe:	b580      	push	{r7, lr}
 8009200:	b084      	sub	sp, #16
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009206:	2301      	movs	r3, #1
 8009208:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	68db      	ldr	r3, [r3, #12]
 800920e:	2b02      	cmp	r3, #2
 8009210:	d001      	beq.n	8009216 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009212:	f7f8 fbd7 	bl	80019c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800921c:	7bfa      	ldrb	r2, [r7, #15]
 800921e:	4611      	mov	r1, r2
 8009220:	4618      	mov	r0, r3
 8009222:	f7fe fcf4 	bl	8007c0e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800922c:	4618      	mov	r0, r3
 800922e:	f7fe fc9c 	bl	8007b6a <USBD_LL_Reset>
}
 8009232:	bf00      	nop
 8009234:	3710      	adds	r7, #16
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}
	...

0800923c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b082      	sub	sp, #8
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800924a:	4618      	mov	r0, r3
 800924c:	f7fe fcef 	bl	8007c2e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	687a      	ldr	r2, [r7, #4]
 800925c:	6812      	ldr	r2, [r2, #0]
 800925e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009262:	f043 0301 	orr.w	r3, r3, #1
 8009266:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6a1b      	ldr	r3, [r3, #32]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d005      	beq.n	800927c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009270:	4b04      	ldr	r3, [pc, #16]	; (8009284 <HAL_PCD_SuspendCallback+0x48>)
 8009272:	691b      	ldr	r3, [r3, #16]
 8009274:	4a03      	ldr	r2, [pc, #12]	; (8009284 <HAL_PCD_SuspendCallback+0x48>)
 8009276:	f043 0306 	orr.w	r3, r3, #6
 800927a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800927c:	bf00      	nop
 800927e:	3708      	adds	r7, #8
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}
 8009284:	e000ed00 	.word	0xe000ed00

08009288 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b082      	sub	sp, #8
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009296:	4618      	mov	r0, r3
 8009298:	f7fe fcdf 	bl	8007c5a <USBD_LL_Resume>
}
 800929c:	bf00      	nop
 800929e:	3708      	adds	r7, #8
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b082      	sub	sp, #8
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	460b      	mov	r3, r1
 80092ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80092b6:	78fa      	ldrb	r2, [r7, #3]
 80092b8:	4611      	mov	r1, r2
 80092ba:	4618      	mov	r0, r3
 80092bc:	f7fe fd37 	bl	8007d2e <USBD_LL_IsoOUTIncomplete>
}
 80092c0:	bf00      	nop
 80092c2:	3708      	adds	r7, #8
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	460b      	mov	r3, r1
 80092d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80092da:	78fa      	ldrb	r2, [r7, #3]
 80092dc:	4611      	mov	r1, r2
 80092de:	4618      	mov	r0, r3
 80092e0:	f7fe fcf3 	bl	8007cca <USBD_LL_IsoINIncomplete>
}
 80092e4:	bf00      	nop
 80092e6:	3708      	adds	r7, #8
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80092fa:	4618      	mov	r0, r3
 80092fc:	f7fe fd49 	bl	8007d92 <USBD_LL_DevConnected>
}
 8009300:	bf00      	nop
 8009302:	3708      	adds	r7, #8
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}

08009308 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b082      	sub	sp, #8
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009316:	4618      	mov	r0, r3
 8009318:	f7fe fd46 	bl	8007da8 <USBD_LL_DevDisconnected>
}
 800931c:	bf00      	nop
 800931e:	3708      	adds	r7, #8
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b082      	sub	sp, #8
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d13c      	bne.n	80093ae <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009334:	4a20      	ldr	r2, [pc, #128]	; (80093b8 <USBD_LL_Init+0x94>)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	4a1e      	ldr	r2, [pc, #120]	; (80093b8 <USBD_LL_Init+0x94>)
 8009340:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009344:	4b1c      	ldr	r3, [pc, #112]	; (80093b8 <USBD_LL_Init+0x94>)
 8009346:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800934a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800934c:	4b1a      	ldr	r3, [pc, #104]	; (80093b8 <USBD_LL_Init+0x94>)
 800934e:	2204      	movs	r2, #4
 8009350:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009352:	4b19      	ldr	r3, [pc, #100]	; (80093b8 <USBD_LL_Init+0x94>)
 8009354:	2202      	movs	r2, #2
 8009356:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009358:	4b17      	ldr	r3, [pc, #92]	; (80093b8 <USBD_LL_Init+0x94>)
 800935a:	2200      	movs	r2, #0
 800935c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800935e:	4b16      	ldr	r3, [pc, #88]	; (80093b8 <USBD_LL_Init+0x94>)
 8009360:	2202      	movs	r2, #2
 8009362:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009364:	4b14      	ldr	r3, [pc, #80]	; (80093b8 <USBD_LL_Init+0x94>)
 8009366:	2200      	movs	r2, #0
 8009368:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800936a:	4b13      	ldr	r3, [pc, #76]	; (80093b8 <USBD_LL_Init+0x94>)
 800936c:	2200      	movs	r2, #0
 800936e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009370:	4b11      	ldr	r3, [pc, #68]	; (80093b8 <USBD_LL_Init+0x94>)
 8009372:	2200      	movs	r2, #0
 8009374:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009376:	4b10      	ldr	r3, [pc, #64]	; (80093b8 <USBD_LL_Init+0x94>)
 8009378:	2200      	movs	r2, #0
 800937a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800937c:	4b0e      	ldr	r3, [pc, #56]	; (80093b8 <USBD_LL_Init+0x94>)
 800937e:	2200      	movs	r2, #0
 8009380:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009382:	480d      	ldr	r0, [pc, #52]	; (80093b8 <USBD_LL_Init+0x94>)
 8009384:	f7f9 fca4 	bl	8002cd0 <HAL_PCD_Init>
 8009388:	4603      	mov	r3, r0
 800938a:	2b00      	cmp	r3, #0
 800938c:	d001      	beq.n	8009392 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800938e:	f7f8 fb19 	bl	80019c4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009392:	2180      	movs	r1, #128	; 0x80
 8009394:	4808      	ldr	r0, [pc, #32]	; (80093b8 <USBD_LL_Init+0x94>)
 8009396:	f7fa fefc 	bl	8004192 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800939a:	2240      	movs	r2, #64	; 0x40
 800939c:	2100      	movs	r1, #0
 800939e:	4806      	ldr	r0, [pc, #24]	; (80093b8 <USBD_LL_Init+0x94>)
 80093a0:	f7fa feb0 	bl	8004104 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80093a4:	2280      	movs	r2, #128	; 0x80
 80093a6:	2101      	movs	r1, #1
 80093a8:	4803      	ldr	r0, [pc, #12]	; (80093b8 <USBD_LL_Init+0x94>)
 80093aa:	f7fa feab 	bl	8004104 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80093ae:	2300      	movs	r3, #0
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3708      	adds	r7, #8
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	20001988 	.word	0x20001988

080093bc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093c4:	2300      	movs	r3, #0
 80093c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093c8:	2300      	movs	r3, #0
 80093ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80093d2:	4618      	mov	r0, r3
 80093d4:	f7f9 fd99 	bl	8002f0a <HAL_PCD_Start>
 80093d8:	4603      	mov	r3, r0
 80093da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093dc:	7bfb      	ldrb	r3, [r7, #15]
 80093de:	4618      	mov	r0, r3
 80093e0:	f000 f942 	bl	8009668 <USBD_Get_USB_Status>
 80093e4:	4603      	mov	r3, r0
 80093e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3710      	adds	r7, #16
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b084      	sub	sp, #16
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
 80093fa:	4608      	mov	r0, r1
 80093fc:	4611      	mov	r1, r2
 80093fe:	461a      	mov	r2, r3
 8009400:	4603      	mov	r3, r0
 8009402:	70fb      	strb	r3, [r7, #3]
 8009404:	460b      	mov	r3, r1
 8009406:	70bb      	strb	r3, [r7, #2]
 8009408:	4613      	mov	r3, r2
 800940a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800940c:	2300      	movs	r3, #0
 800940e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009410:	2300      	movs	r3, #0
 8009412:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800941a:	78bb      	ldrb	r3, [r7, #2]
 800941c:	883a      	ldrh	r2, [r7, #0]
 800941e:	78f9      	ldrb	r1, [r7, #3]
 8009420:	f7fa fa6a 	bl	80038f8 <HAL_PCD_EP_Open>
 8009424:	4603      	mov	r3, r0
 8009426:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009428:	7bfb      	ldrb	r3, [r7, #15]
 800942a:	4618      	mov	r0, r3
 800942c:	f000 f91c 	bl	8009668 <USBD_Get_USB_Status>
 8009430:	4603      	mov	r3, r0
 8009432:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009434:	7bbb      	ldrb	r3, [r7, #14]
}
 8009436:	4618      	mov	r0, r3
 8009438:	3710      	adds	r7, #16
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}

0800943e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800943e:	b580      	push	{r7, lr}
 8009440:	b084      	sub	sp, #16
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
 8009446:	460b      	mov	r3, r1
 8009448:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800944a:	2300      	movs	r3, #0
 800944c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800944e:	2300      	movs	r3, #0
 8009450:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009458:	78fa      	ldrb	r2, [r7, #3]
 800945a:	4611      	mov	r1, r2
 800945c:	4618      	mov	r0, r3
 800945e:	f7fa fab3 	bl	80039c8 <HAL_PCD_EP_Close>
 8009462:	4603      	mov	r3, r0
 8009464:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009466:	7bfb      	ldrb	r3, [r7, #15]
 8009468:	4618      	mov	r0, r3
 800946a:	f000 f8fd 	bl	8009668 <USBD_Get_USB_Status>
 800946e:	4603      	mov	r3, r0
 8009470:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009472:	7bbb      	ldrb	r3, [r7, #14]
}
 8009474:	4618      	mov	r0, r3
 8009476:	3710      	adds	r7, #16
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b084      	sub	sp, #16
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	460b      	mov	r3, r1
 8009486:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009488:	2300      	movs	r3, #0
 800948a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800948c:	2300      	movs	r3, #0
 800948e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009496:	78fa      	ldrb	r2, [r7, #3]
 8009498:	4611      	mov	r1, r2
 800949a:	4618      	mov	r0, r3
 800949c:	f7fa fb8b 	bl	8003bb6 <HAL_PCD_EP_SetStall>
 80094a0:	4603      	mov	r3, r0
 80094a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094a4:	7bfb      	ldrb	r3, [r7, #15]
 80094a6:	4618      	mov	r0, r3
 80094a8:	f000 f8de 	bl	8009668 <USBD_Get_USB_Status>
 80094ac:	4603      	mov	r3, r0
 80094ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3710      	adds	r7, #16
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b084      	sub	sp, #16
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
 80094c2:	460b      	mov	r3, r1
 80094c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094c6:	2300      	movs	r3, #0
 80094c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094ca:	2300      	movs	r3, #0
 80094cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80094d4:	78fa      	ldrb	r2, [r7, #3]
 80094d6:	4611      	mov	r1, r2
 80094d8:	4618      	mov	r0, r3
 80094da:	f7fa fbd0 	bl	8003c7e <HAL_PCD_EP_ClrStall>
 80094de:	4603      	mov	r3, r0
 80094e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094e2:	7bfb      	ldrb	r3, [r7, #15]
 80094e4:	4618      	mov	r0, r3
 80094e6:	f000 f8bf 	bl	8009668 <USBD_Get_USB_Status>
 80094ea:	4603      	mov	r3, r0
 80094ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3710      	adds	r7, #16
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b085      	sub	sp, #20
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	460b      	mov	r3, r1
 8009502:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800950a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800950c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009510:	2b00      	cmp	r3, #0
 8009512:	da0b      	bge.n	800952c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009514:	78fb      	ldrb	r3, [r7, #3]
 8009516:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800951a:	68f9      	ldr	r1, [r7, #12]
 800951c:	4613      	mov	r3, r2
 800951e:	00db      	lsls	r3, r3, #3
 8009520:	4413      	add	r3, r2
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	440b      	add	r3, r1
 8009526:	333e      	adds	r3, #62	; 0x3e
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	e00b      	b.n	8009544 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800952c:	78fb      	ldrb	r3, [r7, #3]
 800952e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009532:	68f9      	ldr	r1, [r7, #12]
 8009534:	4613      	mov	r3, r2
 8009536:	00db      	lsls	r3, r3, #3
 8009538:	4413      	add	r3, r2
 800953a:	009b      	lsls	r3, r3, #2
 800953c:	440b      	add	r3, r1
 800953e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009542:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009544:	4618      	mov	r0, r3
 8009546:	3714      	adds	r7, #20
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr

08009550 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	460b      	mov	r3, r1
 800955a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800955c:	2300      	movs	r3, #0
 800955e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009560:	2300      	movs	r3, #0
 8009562:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800956a:	78fa      	ldrb	r2, [r7, #3]
 800956c:	4611      	mov	r1, r2
 800956e:	4618      	mov	r0, r3
 8009570:	f7fa f99d 	bl	80038ae <HAL_PCD_SetAddress>
 8009574:	4603      	mov	r3, r0
 8009576:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009578:	7bfb      	ldrb	r3, [r7, #15]
 800957a:	4618      	mov	r0, r3
 800957c:	f000 f874 	bl	8009668 <USBD_Get_USB_Status>
 8009580:	4603      	mov	r3, r0
 8009582:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009584:	7bbb      	ldrb	r3, [r7, #14]
}
 8009586:	4618      	mov	r0, r3
 8009588:	3710      	adds	r7, #16
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}

0800958e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800958e:	b580      	push	{r7, lr}
 8009590:	b086      	sub	sp, #24
 8009592:	af00      	add	r7, sp, #0
 8009594:	60f8      	str	r0, [r7, #12]
 8009596:	607a      	str	r2, [r7, #4]
 8009598:	603b      	str	r3, [r7, #0]
 800959a:	460b      	mov	r3, r1
 800959c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800959e:	2300      	movs	r3, #0
 80095a0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095a2:	2300      	movs	r3, #0
 80095a4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80095ac:	7af9      	ldrb	r1, [r7, #11]
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	f7fa fab6 	bl	8003b22 <HAL_PCD_EP_Transmit>
 80095b6:	4603      	mov	r3, r0
 80095b8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095ba:	7dfb      	ldrb	r3, [r7, #23]
 80095bc:	4618      	mov	r0, r3
 80095be:	f000 f853 	bl	8009668 <USBD_Get_USB_Status>
 80095c2:	4603      	mov	r3, r0
 80095c4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80095c6:	7dbb      	ldrb	r3, [r7, #22]
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3718      	adds	r7, #24
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b086      	sub	sp, #24
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	60f8      	str	r0, [r7, #12]
 80095d8:	607a      	str	r2, [r7, #4]
 80095da:	603b      	str	r3, [r7, #0]
 80095dc:	460b      	mov	r3, r1
 80095de:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095e0:	2300      	movs	r3, #0
 80095e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095e4:	2300      	movs	r3, #0
 80095e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80095ee:	7af9      	ldrb	r1, [r7, #11]
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	f7fa fa32 	bl	8003a5c <HAL_PCD_EP_Receive>
 80095f8:	4603      	mov	r3, r0
 80095fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095fc:	7dfb      	ldrb	r3, [r7, #23]
 80095fe:	4618      	mov	r0, r3
 8009600:	f000 f832 	bl	8009668 <USBD_Get_USB_Status>
 8009604:	4603      	mov	r3, r0
 8009606:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009608:	7dbb      	ldrb	r3, [r7, #22]
}
 800960a:	4618      	mov	r0, r3
 800960c:	3718      	adds	r7, #24
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}

08009612 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009612:	b580      	push	{r7, lr}
 8009614:	b082      	sub	sp, #8
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
 800961a:	460b      	mov	r3, r1
 800961c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009624:	78fa      	ldrb	r2, [r7, #3]
 8009626:	4611      	mov	r1, r2
 8009628:	4618      	mov	r0, r3
 800962a:	f7fa fa62 	bl	8003af2 <HAL_PCD_EP_GetRxCount>
 800962e:	4603      	mov	r3, r0
}
 8009630:	4618      	mov	r0, r3
 8009632:	3708      	adds	r7, #8
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}

08009638 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009638:	b480      	push	{r7}
 800963a:	b083      	sub	sp, #12
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009640:	4b03      	ldr	r3, [pc, #12]	; (8009650 <USBD_static_malloc+0x18>)
}
 8009642:	4618      	mov	r0, r3
 8009644:	370c      	adds	r7, #12
 8009646:	46bd      	mov	sp, r7
 8009648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964c:	4770      	bx	lr
 800964e:	bf00      	nop
 8009650:	20001e94 	.word	0x20001e94

08009654 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009654:	b480      	push	{r7}
 8009656:	b083      	sub	sp, #12
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]

}
 800965c:	bf00      	nop
 800965e:	370c      	adds	r7, #12
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr

08009668 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009668:	b480      	push	{r7}
 800966a:	b085      	sub	sp, #20
 800966c:	af00      	add	r7, sp, #0
 800966e:	4603      	mov	r3, r0
 8009670:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009672:	2300      	movs	r3, #0
 8009674:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009676:	79fb      	ldrb	r3, [r7, #7]
 8009678:	2b03      	cmp	r3, #3
 800967a:	d817      	bhi.n	80096ac <USBD_Get_USB_Status+0x44>
 800967c:	a201      	add	r2, pc, #4	; (adr r2, 8009684 <USBD_Get_USB_Status+0x1c>)
 800967e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009682:	bf00      	nop
 8009684:	08009695 	.word	0x08009695
 8009688:	0800969b 	.word	0x0800969b
 800968c:	080096a1 	.word	0x080096a1
 8009690:	080096a7 	.word	0x080096a7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009694:	2300      	movs	r3, #0
 8009696:	73fb      	strb	r3, [r7, #15]
    break;
 8009698:	e00b      	b.n	80096b2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800969a:	2303      	movs	r3, #3
 800969c:	73fb      	strb	r3, [r7, #15]
    break;
 800969e:	e008      	b.n	80096b2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80096a0:	2301      	movs	r3, #1
 80096a2:	73fb      	strb	r3, [r7, #15]
    break;
 80096a4:	e005      	b.n	80096b2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80096a6:	2303      	movs	r3, #3
 80096a8:	73fb      	strb	r3, [r7, #15]
    break;
 80096aa:	e002      	b.n	80096b2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80096ac:	2303      	movs	r3, #3
 80096ae:	73fb      	strb	r3, [r7, #15]
    break;
 80096b0:	bf00      	nop
  }
  return usb_status;
 80096b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3714      	adds	r7, #20
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr

080096c0 <atoi>:
 80096c0:	220a      	movs	r2, #10
 80096c2:	2100      	movs	r1, #0
 80096c4:	f000 bd42 	b.w	800a14c <strtol>

080096c8 <__errno>:
 80096c8:	4b01      	ldr	r3, [pc, #4]	; (80096d0 <__errno+0x8>)
 80096ca:	6818      	ldr	r0, [r3, #0]
 80096cc:	4770      	bx	lr
 80096ce:	bf00      	nop
 80096d0:	20000130 	.word	0x20000130

080096d4 <__libc_init_array>:
 80096d4:	b570      	push	{r4, r5, r6, lr}
 80096d6:	4d0d      	ldr	r5, [pc, #52]	; (800970c <__libc_init_array+0x38>)
 80096d8:	4c0d      	ldr	r4, [pc, #52]	; (8009710 <__libc_init_array+0x3c>)
 80096da:	1b64      	subs	r4, r4, r5
 80096dc:	10a4      	asrs	r4, r4, #2
 80096de:	2600      	movs	r6, #0
 80096e0:	42a6      	cmp	r6, r4
 80096e2:	d109      	bne.n	80096f8 <__libc_init_array+0x24>
 80096e4:	4d0b      	ldr	r5, [pc, #44]	; (8009714 <__libc_init_array+0x40>)
 80096e6:	4c0c      	ldr	r4, [pc, #48]	; (8009718 <__libc_init_array+0x44>)
 80096e8:	f002 fdd8 	bl	800c29c <_init>
 80096ec:	1b64      	subs	r4, r4, r5
 80096ee:	10a4      	asrs	r4, r4, #2
 80096f0:	2600      	movs	r6, #0
 80096f2:	42a6      	cmp	r6, r4
 80096f4:	d105      	bne.n	8009702 <__libc_init_array+0x2e>
 80096f6:	bd70      	pop	{r4, r5, r6, pc}
 80096f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80096fc:	4798      	blx	r3
 80096fe:	3601      	adds	r6, #1
 8009700:	e7ee      	b.n	80096e0 <__libc_init_array+0xc>
 8009702:	f855 3b04 	ldr.w	r3, [r5], #4
 8009706:	4798      	blx	r3
 8009708:	3601      	adds	r6, #1
 800970a:	e7f2      	b.n	80096f2 <__libc_init_array+0x1e>
 800970c:	0800c7bc 	.word	0x0800c7bc
 8009710:	0800c7bc 	.word	0x0800c7bc
 8009714:	0800c7bc 	.word	0x0800c7bc
 8009718:	0800c7c0 	.word	0x0800c7c0

0800971c <memcpy>:
 800971c:	440a      	add	r2, r1
 800971e:	4291      	cmp	r1, r2
 8009720:	f100 33ff 	add.w	r3, r0, #4294967295
 8009724:	d100      	bne.n	8009728 <memcpy+0xc>
 8009726:	4770      	bx	lr
 8009728:	b510      	push	{r4, lr}
 800972a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800972e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009732:	4291      	cmp	r1, r2
 8009734:	d1f9      	bne.n	800972a <memcpy+0xe>
 8009736:	bd10      	pop	{r4, pc}

08009738 <memset>:
 8009738:	4402      	add	r2, r0
 800973a:	4603      	mov	r3, r0
 800973c:	4293      	cmp	r3, r2
 800973e:	d100      	bne.n	8009742 <memset+0xa>
 8009740:	4770      	bx	lr
 8009742:	f803 1b01 	strb.w	r1, [r3], #1
 8009746:	e7f9      	b.n	800973c <memset+0x4>

08009748 <__cvt>:
 8009748:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800974c:	ec55 4b10 	vmov	r4, r5, d0
 8009750:	2d00      	cmp	r5, #0
 8009752:	460e      	mov	r6, r1
 8009754:	4619      	mov	r1, r3
 8009756:	462b      	mov	r3, r5
 8009758:	bfbb      	ittet	lt
 800975a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800975e:	461d      	movlt	r5, r3
 8009760:	2300      	movge	r3, #0
 8009762:	232d      	movlt	r3, #45	; 0x2d
 8009764:	700b      	strb	r3, [r1, #0]
 8009766:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009768:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800976c:	4691      	mov	r9, r2
 800976e:	f023 0820 	bic.w	r8, r3, #32
 8009772:	bfbc      	itt	lt
 8009774:	4622      	movlt	r2, r4
 8009776:	4614      	movlt	r4, r2
 8009778:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800977c:	d005      	beq.n	800978a <__cvt+0x42>
 800977e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009782:	d100      	bne.n	8009786 <__cvt+0x3e>
 8009784:	3601      	adds	r6, #1
 8009786:	2102      	movs	r1, #2
 8009788:	e000      	b.n	800978c <__cvt+0x44>
 800978a:	2103      	movs	r1, #3
 800978c:	ab03      	add	r3, sp, #12
 800978e:	9301      	str	r3, [sp, #4]
 8009790:	ab02      	add	r3, sp, #8
 8009792:	9300      	str	r3, [sp, #0]
 8009794:	ec45 4b10 	vmov	d0, r4, r5
 8009798:	4653      	mov	r3, sl
 800979a:	4632      	mov	r2, r6
 800979c:	f000 fd6c 	bl	800a278 <_dtoa_r>
 80097a0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80097a4:	4607      	mov	r7, r0
 80097a6:	d102      	bne.n	80097ae <__cvt+0x66>
 80097a8:	f019 0f01 	tst.w	r9, #1
 80097ac:	d022      	beq.n	80097f4 <__cvt+0xac>
 80097ae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80097b2:	eb07 0906 	add.w	r9, r7, r6
 80097b6:	d110      	bne.n	80097da <__cvt+0x92>
 80097b8:	783b      	ldrb	r3, [r7, #0]
 80097ba:	2b30      	cmp	r3, #48	; 0x30
 80097bc:	d10a      	bne.n	80097d4 <__cvt+0x8c>
 80097be:	2200      	movs	r2, #0
 80097c0:	2300      	movs	r3, #0
 80097c2:	4620      	mov	r0, r4
 80097c4:	4629      	mov	r1, r5
 80097c6:	f7f7 f987 	bl	8000ad8 <__aeabi_dcmpeq>
 80097ca:	b918      	cbnz	r0, 80097d4 <__cvt+0x8c>
 80097cc:	f1c6 0601 	rsb	r6, r6, #1
 80097d0:	f8ca 6000 	str.w	r6, [sl]
 80097d4:	f8da 3000 	ldr.w	r3, [sl]
 80097d8:	4499      	add	r9, r3
 80097da:	2200      	movs	r2, #0
 80097dc:	2300      	movs	r3, #0
 80097de:	4620      	mov	r0, r4
 80097e0:	4629      	mov	r1, r5
 80097e2:	f7f7 f979 	bl	8000ad8 <__aeabi_dcmpeq>
 80097e6:	b108      	cbz	r0, 80097ec <__cvt+0xa4>
 80097e8:	f8cd 900c 	str.w	r9, [sp, #12]
 80097ec:	2230      	movs	r2, #48	; 0x30
 80097ee:	9b03      	ldr	r3, [sp, #12]
 80097f0:	454b      	cmp	r3, r9
 80097f2:	d307      	bcc.n	8009804 <__cvt+0xbc>
 80097f4:	9b03      	ldr	r3, [sp, #12]
 80097f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80097f8:	1bdb      	subs	r3, r3, r7
 80097fa:	4638      	mov	r0, r7
 80097fc:	6013      	str	r3, [r2, #0]
 80097fe:	b004      	add	sp, #16
 8009800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009804:	1c59      	adds	r1, r3, #1
 8009806:	9103      	str	r1, [sp, #12]
 8009808:	701a      	strb	r2, [r3, #0]
 800980a:	e7f0      	b.n	80097ee <__cvt+0xa6>

0800980c <__exponent>:
 800980c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800980e:	4603      	mov	r3, r0
 8009810:	2900      	cmp	r1, #0
 8009812:	bfb8      	it	lt
 8009814:	4249      	neglt	r1, r1
 8009816:	f803 2b02 	strb.w	r2, [r3], #2
 800981a:	bfb4      	ite	lt
 800981c:	222d      	movlt	r2, #45	; 0x2d
 800981e:	222b      	movge	r2, #43	; 0x2b
 8009820:	2909      	cmp	r1, #9
 8009822:	7042      	strb	r2, [r0, #1]
 8009824:	dd2a      	ble.n	800987c <__exponent+0x70>
 8009826:	f10d 0407 	add.w	r4, sp, #7
 800982a:	46a4      	mov	ip, r4
 800982c:	270a      	movs	r7, #10
 800982e:	46a6      	mov	lr, r4
 8009830:	460a      	mov	r2, r1
 8009832:	fb91 f6f7 	sdiv	r6, r1, r7
 8009836:	fb07 1516 	mls	r5, r7, r6, r1
 800983a:	3530      	adds	r5, #48	; 0x30
 800983c:	2a63      	cmp	r2, #99	; 0x63
 800983e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009842:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009846:	4631      	mov	r1, r6
 8009848:	dcf1      	bgt.n	800982e <__exponent+0x22>
 800984a:	3130      	adds	r1, #48	; 0x30
 800984c:	f1ae 0502 	sub.w	r5, lr, #2
 8009850:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009854:	1c44      	adds	r4, r0, #1
 8009856:	4629      	mov	r1, r5
 8009858:	4561      	cmp	r1, ip
 800985a:	d30a      	bcc.n	8009872 <__exponent+0x66>
 800985c:	f10d 0209 	add.w	r2, sp, #9
 8009860:	eba2 020e 	sub.w	r2, r2, lr
 8009864:	4565      	cmp	r5, ip
 8009866:	bf88      	it	hi
 8009868:	2200      	movhi	r2, #0
 800986a:	4413      	add	r3, r2
 800986c:	1a18      	subs	r0, r3, r0
 800986e:	b003      	add	sp, #12
 8009870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009872:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009876:	f804 2f01 	strb.w	r2, [r4, #1]!
 800987a:	e7ed      	b.n	8009858 <__exponent+0x4c>
 800987c:	2330      	movs	r3, #48	; 0x30
 800987e:	3130      	adds	r1, #48	; 0x30
 8009880:	7083      	strb	r3, [r0, #2]
 8009882:	70c1      	strb	r1, [r0, #3]
 8009884:	1d03      	adds	r3, r0, #4
 8009886:	e7f1      	b.n	800986c <__exponent+0x60>

08009888 <_printf_float>:
 8009888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800988c:	ed2d 8b02 	vpush	{d8}
 8009890:	b08d      	sub	sp, #52	; 0x34
 8009892:	460c      	mov	r4, r1
 8009894:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009898:	4616      	mov	r6, r2
 800989a:	461f      	mov	r7, r3
 800989c:	4605      	mov	r5, r0
 800989e:	f001 fad9 	bl	800ae54 <_localeconv_r>
 80098a2:	f8d0 a000 	ldr.w	sl, [r0]
 80098a6:	4650      	mov	r0, sl
 80098a8:	f7f6 fc9a 	bl	80001e0 <strlen>
 80098ac:	2300      	movs	r3, #0
 80098ae:	930a      	str	r3, [sp, #40]	; 0x28
 80098b0:	6823      	ldr	r3, [r4, #0]
 80098b2:	9305      	str	r3, [sp, #20]
 80098b4:	f8d8 3000 	ldr.w	r3, [r8]
 80098b8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80098bc:	3307      	adds	r3, #7
 80098be:	f023 0307 	bic.w	r3, r3, #7
 80098c2:	f103 0208 	add.w	r2, r3, #8
 80098c6:	f8c8 2000 	str.w	r2, [r8]
 80098ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80098d2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80098d6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80098da:	9307      	str	r3, [sp, #28]
 80098dc:	f8cd 8018 	str.w	r8, [sp, #24]
 80098e0:	ee08 0a10 	vmov	s16, r0
 80098e4:	4b9f      	ldr	r3, [pc, #636]	; (8009b64 <_printf_float+0x2dc>)
 80098e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80098ea:	f04f 32ff 	mov.w	r2, #4294967295
 80098ee:	f7f7 f925 	bl	8000b3c <__aeabi_dcmpun>
 80098f2:	bb88      	cbnz	r0, 8009958 <_printf_float+0xd0>
 80098f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80098f8:	4b9a      	ldr	r3, [pc, #616]	; (8009b64 <_printf_float+0x2dc>)
 80098fa:	f04f 32ff 	mov.w	r2, #4294967295
 80098fe:	f7f7 f8ff 	bl	8000b00 <__aeabi_dcmple>
 8009902:	bb48      	cbnz	r0, 8009958 <_printf_float+0xd0>
 8009904:	2200      	movs	r2, #0
 8009906:	2300      	movs	r3, #0
 8009908:	4640      	mov	r0, r8
 800990a:	4649      	mov	r1, r9
 800990c:	f7f7 f8ee 	bl	8000aec <__aeabi_dcmplt>
 8009910:	b110      	cbz	r0, 8009918 <_printf_float+0x90>
 8009912:	232d      	movs	r3, #45	; 0x2d
 8009914:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009918:	4b93      	ldr	r3, [pc, #588]	; (8009b68 <_printf_float+0x2e0>)
 800991a:	4894      	ldr	r0, [pc, #592]	; (8009b6c <_printf_float+0x2e4>)
 800991c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009920:	bf94      	ite	ls
 8009922:	4698      	movls	r8, r3
 8009924:	4680      	movhi	r8, r0
 8009926:	2303      	movs	r3, #3
 8009928:	6123      	str	r3, [r4, #16]
 800992a:	9b05      	ldr	r3, [sp, #20]
 800992c:	f023 0204 	bic.w	r2, r3, #4
 8009930:	6022      	str	r2, [r4, #0]
 8009932:	f04f 0900 	mov.w	r9, #0
 8009936:	9700      	str	r7, [sp, #0]
 8009938:	4633      	mov	r3, r6
 800993a:	aa0b      	add	r2, sp, #44	; 0x2c
 800993c:	4621      	mov	r1, r4
 800993e:	4628      	mov	r0, r5
 8009940:	f000 f9d8 	bl	8009cf4 <_printf_common>
 8009944:	3001      	adds	r0, #1
 8009946:	f040 8090 	bne.w	8009a6a <_printf_float+0x1e2>
 800994a:	f04f 30ff 	mov.w	r0, #4294967295
 800994e:	b00d      	add	sp, #52	; 0x34
 8009950:	ecbd 8b02 	vpop	{d8}
 8009954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009958:	4642      	mov	r2, r8
 800995a:	464b      	mov	r3, r9
 800995c:	4640      	mov	r0, r8
 800995e:	4649      	mov	r1, r9
 8009960:	f7f7 f8ec 	bl	8000b3c <__aeabi_dcmpun>
 8009964:	b140      	cbz	r0, 8009978 <_printf_float+0xf0>
 8009966:	464b      	mov	r3, r9
 8009968:	2b00      	cmp	r3, #0
 800996a:	bfbc      	itt	lt
 800996c:	232d      	movlt	r3, #45	; 0x2d
 800996e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009972:	487f      	ldr	r0, [pc, #508]	; (8009b70 <_printf_float+0x2e8>)
 8009974:	4b7f      	ldr	r3, [pc, #508]	; (8009b74 <_printf_float+0x2ec>)
 8009976:	e7d1      	b.n	800991c <_printf_float+0x94>
 8009978:	6863      	ldr	r3, [r4, #4]
 800997a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800997e:	9206      	str	r2, [sp, #24]
 8009980:	1c5a      	adds	r2, r3, #1
 8009982:	d13f      	bne.n	8009a04 <_printf_float+0x17c>
 8009984:	2306      	movs	r3, #6
 8009986:	6063      	str	r3, [r4, #4]
 8009988:	9b05      	ldr	r3, [sp, #20]
 800998a:	6861      	ldr	r1, [r4, #4]
 800998c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009990:	2300      	movs	r3, #0
 8009992:	9303      	str	r3, [sp, #12]
 8009994:	ab0a      	add	r3, sp, #40	; 0x28
 8009996:	e9cd b301 	strd	fp, r3, [sp, #4]
 800999a:	ab09      	add	r3, sp, #36	; 0x24
 800999c:	ec49 8b10 	vmov	d0, r8, r9
 80099a0:	9300      	str	r3, [sp, #0]
 80099a2:	6022      	str	r2, [r4, #0]
 80099a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80099a8:	4628      	mov	r0, r5
 80099aa:	f7ff fecd 	bl	8009748 <__cvt>
 80099ae:	9b06      	ldr	r3, [sp, #24]
 80099b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80099b2:	2b47      	cmp	r3, #71	; 0x47
 80099b4:	4680      	mov	r8, r0
 80099b6:	d108      	bne.n	80099ca <_printf_float+0x142>
 80099b8:	1cc8      	adds	r0, r1, #3
 80099ba:	db02      	blt.n	80099c2 <_printf_float+0x13a>
 80099bc:	6863      	ldr	r3, [r4, #4]
 80099be:	4299      	cmp	r1, r3
 80099c0:	dd41      	ble.n	8009a46 <_printf_float+0x1be>
 80099c2:	f1ab 0b02 	sub.w	fp, fp, #2
 80099c6:	fa5f fb8b 	uxtb.w	fp, fp
 80099ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80099ce:	d820      	bhi.n	8009a12 <_printf_float+0x18a>
 80099d0:	3901      	subs	r1, #1
 80099d2:	465a      	mov	r2, fp
 80099d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80099d8:	9109      	str	r1, [sp, #36]	; 0x24
 80099da:	f7ff ff17 	bl	800980c <__exponent>
 80099de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099e0:	1813      	adds	r3, r2, r0
 80099e2:	2a01      	cmp	r2, #1
 80099e4:	4681      	mov	r9, r0
 80099e6:	6123      	str	r3, [r4, #16]
 80099e8:	dc02      	bgt.n	80099f0 <_printf_float+0x168>
 80099ea:	6822      	ldr	r2, [r4, #0]
 80099ec:	07d2      	lsls	r2, r2, #31
 80099ee:	d501      	bpl.n	80099f4 <_printf_float+0x16c>
 80099f0:	3301      	adds	r3, #1
 80099f2:	6123      	str	r3, [r4, #16]
 80099f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d09c      	beq.n	8009936 <_printf_float+0xae>
 80099fc:	232d      	movs	r3, #45	; 0x2d
 80099fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a02:	e798      	b.n	8009936 <_printf_float+0xae>
 8009a04:	9a06      	ldr	r2, [sp, #24]
 8009a06:	2a47      	cmp	r2, #71	; 0x47
 8009a08:	d1be      	bne.n	8009988 <_printf_float+0x100>
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d1bc      	bne.n	8009988 <_printf_float+0x100>
 8009a0e:	2301      	movs	r3, #1
 8009a10:	e7b9      	b.n	8009986 <_printf_float+0xfe>
 8009a12:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009a16:	d118      	bne.n	8009a4a <_printf_float+0x1c2>
 8009a18:	2900      	cmp	r1, #0
 8009a1a:	6863      	ldr	r3, [r4, #4]
 8009a1c:	dd0b      	ble.n	8009a36 <_printf_float+0x1ae>
 8009a1e:	6121      	str	r1, [r4, #16]
 8009a20:	b913      	cbnz	r3, 8009a28 <_printf_float+0x1a0>
 8009a22:	6822      	ldr	r2, [r4, #0]
 8009a24:	07d0      	lsls	r0, r2, #31
 8009a26:	d502      	bpl.n	8009a2e <_printf_float+0x1a6>
 8009a28:	3301      	adds	r3, #1
 8009a2a:	440b      	add	r3, r1
 8009a2c:	6123      	str	r3, [r4, #16]
 8009a2e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009a30:	f04f 0900 	mov.w	r9, #0
 8009a34:	e7de      	b.n	80099f4 <_printf_float+0x16c>
 8009a36:	b913      	cbnz	r3, 8009a3e <_printf_float+0x1b6>
 8009a38:	6822      	ldr	r2, [r4, #0]
 8009a3a:	07d2      	lsls	r2, r2, #31
 8009a3c:	d501      	bpl.n	8009a42 <_printf_float+0x1ba>
 8009a3e:	3302      	adds	r3, #2
 8009a40:	e7f4      	b.n	8009a2c <_printf_float+0x1a4>
 8009a42:	2301      	movs	r3, #1
 8009a44:	e7f2      	b.n	8009a2c <_printf_float+0x1a4>
 8009a46:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009a4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a4c:	4299      	cmp	r1, r3
 8009a4e:	db05      	blt.n	8009a5c <_printf_float+0x1d4>
 8009a50:	6823      	ldr	r3, [r4, #0]
 8009a52:	6121      	str	r1, [r4, #16]
 8009a54:	07d8      	lsls	r0, r3, #31
 8009a56:	d5ea      	bpl.n	8009a2e <_printf_float+0x1a6>
 8009a58:	1c4b      	adds	r3, r1, #1
 8009a5a:	e7e7      	b.n	8009a2c <_printf_float+0x1a4>
 8009a5c:	2900      	cmp	r1, #0
 8009a5e:	bfd4      	ite	le
 8009a60:	f1c1 0202 	rsble	r2, r1, #2
 8009a64:	2201      	movgt	r2, #1
 8009a66:	4413      	add	r3, r2
 8009a68:	e7e0      	b.n	8009a2c <_printf_float+0x1a4>
 8009a6a:	6823      	ldr	r3, [r4, #0]
 8009a6c:	055a      	lsls	r2, r3, #21
 8009a6e:	d407      	bmi.n	8009a80 <_printf_float+0x1f8>
 8009a70:	6923      	ldr	r3, [r4, #16]
 8009a72:	4642      	mov	r2, r8
 8009a74:	4631      	mov	r1, r6
 8009a76:	4628      	mov	r0, r5
 8009a78:	47b8      	blx	r7
 8009a7a:	3001      	adds	r0, #1
 8009a7c:	d12c      	bne.n	8009ad8 <_printf_float+0x250>
 8009a7e:	e764      	b.n	800994a <_printf_float+0xc2>
 8009a80:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009a84:	f240 80e0 	bls.w	8009c48 <_printf_float+0x3c0>
 8009a88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	2300      	movs	r3, #0
 8009a90:	f7f7 f822 	bl	8000ad8 <__aeabi_dcmpeq>
 8009a94:	2800      	cmp	r0, #0
 8009a96:	d034      	beq.n	8009b02 <_printf_float+0x27a>
 8009a98:	4a37      	ldr	r2, [pc, #220]	; (8009b78 <_printf_float+0x2f0>)
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	4631      	mov	r1, r6
 8009a9e:	4628      	mov	r0, r5
 8009aa0:	47b8      	blx	r7
 8009aa2:	3001      	adds	r0, #1
 8009aa4:	f43f af51 	beq.w	800994a <_printf_float+0xc2>
 8009aa8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009aac:	429a      	cmp	r2, r3
 8009aae:	db02      	blt.n	8009ab6 <_printf_float+0x22e>
 8009ab0:	6823      	ldr	r3, [r4, #0]
 8009ab2:	07d8      	lsls	r0, r3, #31
 8009ab4:	d510      	bpl.n	8009ad8 <_printf_float+0x250>
 8009ab6:	ee18 3a10 	vmov	r3, s16
 8009aba:	4652      	mov	r2, sl
 8009abc:	4631      	mov	r1, r6
 8009abe:	4628      	mov	r0, r5
 8009ac0:	47b8      	blx	r7
 8009ac2:	3001      	adds	r0, #1
 8009ac4:	f43f af41 	beq.w	800994a <_printf_float+0xc2>
 8009ac8:	f04f 0800 	mov.w	r8, #0
 8009acc:	f104 091a 	add.w	r9, r4, #26
 8009ad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ad2:	3b01      	subs	r3, #1
 8009ad4:	4543      	cmp	r3, r8
 8009ad6:	dc09      	bgt.n	8009aec <_printf_float+0x264>
 8009ad8:	6823      	ldr	r3, [r4, #0]
 8009ada:	079b      	lsls	r3, r3, #30
 8009adc:	f100 8105 	bmi.w	8009cea <_printf_float+0x462>
 8009ae0:	68e0      	ldr	r0, [r4, #12]
 8009ae2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ae4:	4298      	cmp	r0, r3
 8009ae6:	bfb8      	it	lt
 8009ae8:	4618      	movlt	r0, r3
 8009aea:	e730      	b.n	800994e <_printf_float+0xc6>
 8009aec:	2301      	movs	r3, #1
 8009aee:	464a      	mov	r2, r9
 8009af0:	4631      	mov	r1, r6
 8009af2:	4628      	mov	r0, r5
 8009af4:	47b8      	blx	r7
 8009af6:	3001      	adds	r0, #1
 8009af8:	f43f af27 	beq.w	800994a <_printf_float+0xc2>
 8009afc:	f108 0801 	add.w	r8, r8, #1
 8009b00:	e7e6      	b.n	8009ad0 <_printf_float+0x248>
 8009b02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	dc39      	bgt.n	8009b7c <_printf_float+0x2f4>
 8009b08:	4a1b      	ldr	r2, [pc, #108]	; (8009b78 <_printf_float+0x2f0>)
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	4631      	mov	r1, r6
 8009b0e:	4628      	mov	r0, r5
 8009b10:	47b8      	blx	r7
 8009b12:	3001      	adds	r0, #1
 8009b14:	f43f af19 	beq.w	800994a <_printf_float+0xc2>
 8009b18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	d102      	bne.n	8009b26 <_printf_float+0x29e>
 8009b20:	6823      	ldr	r3, [r4, #0]
 8009b22:	07d9      	lsls	r1, r3, #31
 8009b24:	d5d8      	bpl.n	8009ad8 <_printf_float+0x250>
 8009b26:	ee18 3a10 	vmov	r3, s16
 8009b2a:	4652      	mov	r2, sl
 8009b2c:	4631      	mov	r1, r6
 8009b2e:	4628      	mov	r0, r5
 8009b30:	47b8      	blx	r7
 8009b32:	3001      	adds	r0, #1
 8009b34:	f43f af09 	beq.w	800994a <_printf_float+0xc2>
 8009b38:	f04f 0900 	mov.w	r9, #0
 8009b3c:	f104 0a1a 	add.w	sl, r4, #26
 8009b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b42:	425b      	negs	r3, r3
 8009b44:	454b      	cmp	r3, r9
 8009b46:	dc01      	bgt.n	8009b4c <_printf_float+0x2c4>
 8009b48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b4a:	e792      	b.n	8009a72 <_printf_float+0x1ea>
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	4652      	mov	r2, sl
 8009b50:	4631      	mov	r1, r6
 8009b52:	4628      	mov	r0, r5
 8009b54:	47b8      	blx	r7
 8009b56:	3001      	adds	r0, #1
 8009b58:	f43f aef7 	beq.w	800994a <_printf_float+0xc2>
 8009b5c:	f109 0901 	add.w	r9, r9, #1
 8009b60:	e7ee      	b.n	8009b40 <_printf_float+0x2b8>
 8009b62:	bf00      	nop
 8009b64:	7fefffff 	.word	0x7fefffff
 8009b68:	0800c3dc 	.word	0x0800c3dc
 8009b6c:	0800c3e0 	.word	0x0800c3e0
 8009b70:	0800c3e8 	.word	0x0800c3e8
 8009b74:	0800c3e4 	.word	0x0800c3e4
 8009b78:	0800c3ec 	.word	0x0800c3ec
 8009b7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009b80:	429a      	cmp	r2, r3
 8009b82:	bfa8      	it	ge
 8009b84:	461a      	movge	r2, r3
 8009b86:	2a00      	cmp	r2, #0
 8009b88:	4691      	mov	r9, r2
 8009b8a:	dc37      	bgt.n	8009bfc <_printf_float+0x374>
 8009b8c:	f04f 0b00 	mov.w	fp, #0
 8009b90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b94:	f104 021a 	add.w	r2, r4, #26
 8009b98:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009b9a:	9305      	str	r3, [sp, #20]
 8009b9c:	eba3 0309 	sub.w	r3, r3, r9
 8009ba0:	455b      	cmp	r3, fp
 8009ba2:	dc33      	bgt.n	8009c0c <_printf_float+0x384>
 8009ba4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	db3b      	blt.n	8009c24 <_printf_float+0x39c>
 8009bac:	6823      	ldr	r3, [r4, #0]
 8009bae:	07da      	lsls	r2, r3, #31
 8009bb0:	d438      	bmi.n	8009c24 <_printf_float+0x39c>
 8009bb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bb4:	9a05      	ldr	r2, [sp, #20]
 8009bb6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009bb8:	1a9a      	subs	r2, r3, r2
 8009bba:	eba3 0901 	sub.w	r9, r3, r1
 8009bbe:	4591      	cmp	r9, r2
 8009bc0:	bfa8      	it	ge
 8009bc2:	4691      	movge	r9, r2
 8009bc4:	f1b9 0f00 	cmp.w	r9, #0
 8009bc8:	dc35      	bgt.n	8009c36 <_printf_float+0x3ae>
 8009bca:	f04f 0800 	mov.w	r8, #0
 8009bce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009bd2:	f104 0a1a 	add.w	sl, r4, #26
 8009bd6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009bda:	1a9b      	subs	r3, r3, r2
 8009bdc:	eba3 0309 	sub.w	r3, r3, r9
 8009be0:	4543      	cmp	r3, r8
 8009be2:	f77f af79 	ble.w	8009ad8 <_printf_float+0x250>
 8009be6:	2301      	movs	r3, #1
 8009be8:	4652      	mov	r2, sl
 8009bea:	4631      	mov	r1, r6
 8009bec:	4628      	mov	r0, r5
 8009bee:	47b8      	blx	r7
 8009bf0:	3001      	adds	r0, #1
 8009bf2:	f43f aeaa 	beq.w	800994a <_printf_float+0xc2>
 8009bf6:	f108 0801 	add.w	r8, r8, #1
 8009bfa:	e7ec      	b.n	8009bd6 <_printf_float+0x34e>
 8009bfc:	4613      	mov	r3, r2
 8009bfe:	4631      	mov	r1, r6
 8009c00:	4642      	mov	r2, r8
 8009c02:	4628      	mov	r0, r5
 8009c04:	47b8      	blx	r7
 8009c06:	3001      	adds	r0, #1
 8009c08:	d1c0      	bne.n	8009b8c <_printf_float+0x304>
 8009c0a:	e69e      	b.n	800994a <_printf_float+0xc2>
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	4631      	mov	r1, r6
 8009c10:	4628      	mov	r0, r5
 8009c12:	9205      	str	r2, [sp, #20]
 8009c14:	47b8      	blx	r7
 8009c16:	3001      	adds	r0, #1
 8009c18:	f43f ae97 	beq.w	800994a <_printf_float+0xc2>
 8009c1c:	9a05      	ldr	r2, [sp, #20]
 8009c1e:	f10b 0b01 	add.w	fp, fp, #1
 8009c22:	e7b9      	b.n	8009b98 <_printf_float+0x310>
 8009c24:	ee18 3a10 	vmov	r3, s16
 8009c28:	4652      	mov	r2, sl
 8009c2a:	4631      	mov	r1, r6
 8009c2c:	4628      	mov	r0, r5
 8009c2e:	47b8      	blx	r7
 8009c30:	3001      	adds	r0, #1
 8009c32:	d1be      	bne.n	8009bb2 <_printf_float+0x32a>
 8009c34:	e689      	b.n	800994a <_printf_float+0xc2>
 8009c36:	9a05      	ldr	r2, [sp, #20]
 8009c38:	464b      	mov	r3, r9
 8009c3a:	4442      	add	r2, r8
 8009c3c:	4631      	mov	r1, r6
 8009c3e:	4628      	mov	r0, r5
 8009c40:	47b8      	blx	r7
 8009c42:	3001      	adds	r0, #1
 8009c44:	d1c1      	bne.n	8009bca <_printf_float+0x342>
 8009c46:	e680      	b.n	800994a <_printf_float+0xc2>
 8009c48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c4a:	2a01      	cmp	r2, #1
 8009c4c:	dc01      	bgt.n	8009c52 <_printf_float+0x3ca>
 8009c4e:	07db      	lsls	r3, r3, #31
 8009c50:	d538      	bpl.n	8009cc4 <_printf_float+0x43c>
 8009c52:	2301      	movs	r3, #1
 8009c54:	4642      	mov	r2, r8
 8009c56:	4631      	mov	r1, r6
 8009c58:	4628      	mov	r0, r5
 8009c5a:	47b8      	blx	r7
 8009c5c:	3001      	adds	r0, #1
 8009c5e:	f43f ae74 	beq.w	800994a <_printf_float+0xc2>
 8009c62:	ee18 3a10 	vmov	r3, s16
 8009c66:	4652      	mov	r2, sl
 8009c68:	4631      	mov	r1, r6
 8009c6a:	4628      	mov	r0, r5
 8009c6c:	47b8      	blx	r7
 8009c6e:	3001      	adds	r0, #1
 8009c70:	f43f ae6b 	beq.w	800994a <_printf_float+0xc2>
 8009c74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009c78:	2200      	movs	r2, #0
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	f7f6 ff2c 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c80:	b9d8      	cbnz	r0, 8009cba <_printf_float+0x432>
 8009c82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c84:	f108 0201 	add.w	r2, r8, #1
 8009c88:	3b01      	subs	r3, #1
 8009c8a:	4631      	mov	r1, r6
 8009c8c:	4628      	mov	r0, r5
 8009c8e:	47b8      	blx	r7
 8009c90:	3001      	adds	r0, #1
 8009c92:	d10e      	bne.n	8009cb2 <_printf_float+0x42a>
 8009c94:	e659      	b.n	800994a <_printf_float+0xc2>
 8009c96:	2301      	movs	r3, #1
 8009c98:	4652      	mov	r2, sl
 8009c9a:	4631      	mov	r1, r6
 8009c9c:	4628      	mov	r0, r5
 8009c9e:	47b8      	blx	r7
 8009ca0:	3001      	adds	r0, #1
 8009ca2:	f43f ae52 	beq.w	800994a <_printf_float+0xc2>
 8009ca6:	f108 0801 	add.w	r8, r8, #1
 8009caa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cac:	3b01      	subs	r3, #1
 8009cae:	4543      	cmp	r3, r8
 8009cb0:	dcf1      	bgt.n	8009c96 <_printf_float+0x40e>
 8009cb2:	464b      	mov	r3, r9
 8009cb4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009cb8:	e6dc      	b.n	8009a74 <_printf_float+0x1ec>
 8009cba:	f04f 0800 	mov.w	r8, #0
 8009cbe:	f104 0a1a 	add.w	sl, r4, #26
 8009cc2:	e7f2      	b.n	8009caa <_printf_float+0x422>
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	4642      	mov	r2, r8
 8009cc8:	e7df      	b.n	8009c8a <_printf_float+0x402>
 8009cca:	2301      	movs	r3, #1
 8009ccc:	464a      	mov	r2, r9
 8009cce:	4631      	mov	r1, r6
 8009cd0:	4628      	mov	r0, r5
 8009cd2:	47b8      	blx	r7
 8009cd4:	3001      	adds	r0, #1
 8009cd6:	f43f ae38 	beq.w	800994a <_printf_float+0xc2>
 8009cda:	f108 0801 	add.w	r8, r8, #1
 8009cde:	68e3      	ldr	r3, [r4, #12]
 8009ce0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009ce2:	1a5b      	subs	r3, r3, r1
 8009ce4:	4543      	cmp	r3, r8
 8009ce6:	dcf0      	bgt.n	8009cca <_printf_float+0x442>
 8009ce8:	e6fa      	b.n	8009ae0 <_printf_float+0x258>
 8009cea:	f04f 0800 	mov.w	r8, #0
 8009cee:	f104 0919 	add.w	r9, r4, #25
 8009cf2:	e7f4      	b.n	8009cde <_printf_float+0x456>

08009cf4 <_printf_common>:
 8009cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cf8:	4616      	mov	r6, r2
 8009cfa:	4699      	mov	r9, r3
 8009cfc:	688a      	ldr	r2, [r1, #8]
 8009cfe:	690b      	ldr	r3, [r1, #16]
 8009d00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d04:	4293      	cmp	r3, r2
 8009d06:	bfb8      	it	lt
 8009d08:	4613      	movlt	r3, r2
 8009d0a:	6033      	str	r3, [r6, #0]
 8009d0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d10:	4607      	mov	r7, r0
 8009d12:	460c      	mov	r4, r1
 8009d14:	b10a      	cbz	r2, 8009d1a <_printf_common+0x26>
 8009d16:	3301      	adds	r3, #1
 8009d18:	6033      	str	r3, [r6, #0]
 8009d1a:	6823      	ldr	r3, [r4, #0]
 8009d1c:	0699      	lsls	r1, r3, #26
 8009d1e:	bf42      	ittt	mi
 8009d20:	6833      	ldrmi	r3, [r6, #0]
 8009d22:	3302      	addmi	r3, #2
 8009d24:	6033      	strmi	r3, [r6, #0]
 8009d26:	6825      	ldr	r5, [r4, #0]
 8009d28:	f015 0506 	ands.w	r5, r5, #6
 8009d2c:	d106      	bne.n	8009d3c <_printf_common+0x48>
 8009d2e:	f104 0a19 	add.w	sl, r4, #25
 8009d32:	68e3      	ldr	r3, [r4, #12]
 8009d34:	6832      	ldr	r2, [r6, #0]
 8009d36:	1a9b      	subs	r3, r3, r2
 8009d38:	42ab      	cmp	r3, r5
 8009d3a:	dc26      	bgt.n	8009d8a <_printf_common+0x96>
 8009d3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009d40:	1e13      	subs	r3, r2, #0
 8009d42:	6822      	ldr	r2, [r4, #0]
 8009d44:	bf18      	it	ne
 8009d46:	2301      	movne	r3, #1
 8009d48:	0692      	lsls	r2, r2, #26
 8009d4a:	d42b      	bmi.n	8009da4 <_printf_common+0xb0>
 8009d4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d50:	4649      	mov	r1, r9
 8009d52:	4638      	mov	r0, r7
 8009d54:	47c0      	blx	r8
 8009d56:	3001      	adds	r0, #1
 8009d58:	d01e      	beq.n	8009d98 <_printf_common+0xa4>
 8009d5a:	6823      	ldr	r3, [r4, #0]
 8009d5c:	68e5      	ldr	r5, [r4, #12]
 8009d5e:	6832      	ldr	r2, [r6, #0]
 8009d60:	f003 0306 	and.w	r3, r3, #6
 8009d64:	2b04      	cmp	r3, #4
 8009d66:	bf08      	it	eq
 8009d68:	1aad      	subeq	r5, r5, r2
 8009d6a:	68a3      	ldr	r3, [r4, #8]
 8009d6c:	6922      	ldr	r2, [r4, #16]
 8009d6e:	bf0c      	ite	eq
 8009d70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d74:	2500      	movne	r5, #0
 8009d76:	4293      	cmp	r3, r2
 8009d78:	bfc4      	itt	gt
 8009d7a:	1a9b      	subgt	r3, r3, r2
 8009d7c:	18ed      	addgt	r5, r5, r3
 8009d7e:	2600      	movs	r6, #0
 8009d80:	341a      	adds	r4, #26
 8009d82:	42b5      	cmp	r5, r6
 8009d84:	d11a      	bne.n	8009dbc <_printf_common+0xc8>
 8009d86:	2000      	movs	r0, #0
 8009d88:	e008      	b.n	8009d9c <_printf_common+0xa8>
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	4652      	mov	r2, sl
 8009d8e:	4649      	mov	r1, r9
 8009d90:	4638      	mov	r0, r7
 8009d92:	47c0      	blx	r8
 8009d94:	3001      	adds	r0, #1
 8009d96:	d103      	bne.n	8009da0 <_printf_common+0xac>
 8009d98:	f04f 30ff 	mov.w	r0, #4294967295
 8009d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009da0:	3501      	adds	r5, #1
 8009da2:	e7c6      	b.n	8009d32 <_printf_common+0x3e>
 8009da4:	18e1      	adds	r1, r4, r3
 8009da6:	1c5a      	adds	r2, r3, #1
 8009da8:	2030      	movs	r0, #48	; 0x30
 8009daa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009dae:	4422      	add	r2, r4
 8009db0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009db4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009db8:	3302      	adds	r3, #2
 8009dba:	e7c7      	b.n	8009d4c <_printf_common+0x58>
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	4622      	mov	r2, r4
 8009dc0:	4649      	mov	r1, r9
 8009dc2:	4638      	mov	r0, r7
 8009dc4:	47c0      	blx	r8
 8009dc6:	3001      	adds	r0, #1
 8009dc8:	d0e6      	beq.n	8009d98 <_printf_common+0xa4>
 8009dca:	3601      	adds	r6, #1
 8009dcc:	e7d9      	b.n	8009d82 <_printf_common+0x8e>
	...

08009dd0 <_printf_i>:
 8009dd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009dd4:	7e0f      	ldrb	r7, [r1, #24]
 8009dd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009dd8:	2f78      	cmp	r7, #120	; 0x78
 8009dda:	4691      	mov	r9, r2
 8009ddc:	4680      	mov	r8, r0
 8009dde:	460c      	mov	r4, r1
 8009de0:	469a      	mov	sl, r3
 8009de2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009de6:	d807      	bhi.n	8009df8 <_printf_i+0x28>
 8009de8:	2f62      	cmp	r7, #98	; 0x62
 8009dea:	d80a      	bhi.n	8009e02 <_printf_i+0x32>
 8009dec:	2f00      	cmp	r7, #0
 8009dee:	f000 80d8 	beq.w	8009fa2 <_printf_i+0x1d2>
 8009df2:	2f58      	cmp	r7, #88	; 0x58
 8009df4:	f000 80a3 	beq.w	8009f3e <_printf_i+0x16e>
 8009df8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009dfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009e00:	e03a      	b.n	8009e78 <_printf_i+0xa8>
 8009e02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009e06:	2b15      	cmp	r3, #21
 8009e08:	d8f6      	bhi.n	8009df8 <_printf_i+0x28>
 8009e0a:	a101      	add	r1, pc, #4	; (adr r1, 8009e10 <_printf_i+0x40>)
 8009e0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e10:	08009e69 	.word	0x08009e69
 8009e14:	08009e7d 	.word	0x08009e7d
 8009e18:	08009df9 	.word	0x08009df9
 8009e1c:	08009df9 	.word	0x08009df9
 8009e20:	08009df9 	.word	0x08009df9
 8009e24:	08009df9 	.word	0x08009df9
 8009e28:	08009e7d 	.word	0x08009e7d
 8009e2c:	08009df9 	.word	0x08009df9
 8009e30:	08009df9 	.word	0x08009df9
 8009e34:	08009df9 	.word	0x08009df9
 8009e38:	08009df9 	.word	0x08009df9
 8009e3c:	08009f89 	.word	0x08009f89
 8009e40:	08009ead 	.word	0x08009ead
 8009e44:	08009f6b 	.word	0x08009f6b
 8009e48:	08009df9 	.word	0x08009df9
 8009e4c:	08009df9 	.word	0x08009df9
 8009e50:	08009fab 	.word	0x08009fab
 8009e54:	08009df9 	.word	0x08009df9
 8009e58:	08009ead 	.word	0x08009ead
 8009e5c:	08009df9 	.word	0x08009df9
 8009e60:	08009df9 	.word	0x08009df9
 8009e64:	08009f73 	.word	0x08009f73
 8009e68:	682b      	ldr	r3, [r5, #0]
 8009e6a:	1d1a      	adds	r2, r3, #4
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	602a      	str	r2, [r5, #0]
 8009e70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e78:	2301      	movs	r3, #1
 8009e7a:	e0a3      	b.n	8009fc4 <_printf_i+0x1f4>
 8009e7c:	6820      	ldr	r0, [r4, #0]
 8009e7e:	6829      	ldr	r1, [r5, #0]
 8009e80:	0606      	lsls	r6, r0, #24
 8009e82:	f101 0304 	add.w	r3, r1, #4
 8009e86:	d50a      	bpl.n	8009e9e <_printf_i+0xce>
 8009e88:	680e      	ldr	r6, [r1, #0]
 8009e8a:	602b      	str	r3, [r5, #0]
 8009e8c:	2e00      	cmp	r6, #0
 8009e8e:	da03      	bge.n	8009e98 <_printf_i+0xc8>
 8009e90:	232d      	movs	r3, #45	; 0x2d
 8009e92:	4276      	negs	r6, r6
 8009e94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e98:	485e      	ldr	r0, [pc, #376]	; (800a014 <_printf_i+0x244>)
 8009e9a:	230a      	movs	r3, #10
 8009e9c:	e019      	b.n	8009ed2 <_printf_i+0x102>
 8009e9e:	680e      	ldr	r6, [r1, #0]
 8009ea0:	602b      	str	r3, [r5, #0]
 8009ea2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009ea6:	bf18      	it	ne
 8009ea8:	b236      	sxthne	r6, r6
 8009eaa:	e7ef      	b.n	8009e8c <_printf_i+0xbc>
 8009eac:	682b      	ldr	r3, [r5, #0]
 8009eae:	6820      	ldr	r0, [r4, #0]
 8009eb0:	1d19      	adds	r1, r3, #4
 8009eb2:	6029      	str	r1, [r5, #0]
 8009eb4:	0601      	lsls	r1, r0, #24
 8009eb6:	d501      	bpl.n	8009ebc <_printf_i+0xec>
 8009eb8:	681e      	ldr	r6, [r3, #0]
 8009eba:	e002      	b.n	8009ec2 <_printf_i+0xf2>
 8009ebc:	0646      	lsls	r6, r0, #25
 8009ebe:	d5fb      	bpl.n	8009eb8 <_printf_i+0xe8>
 8009ec0:	881e      	ldrh	r6, [r3, #0]
 8009ec2:	4854      	ldr	r0, [pc, #336]	; (800a014 <_printf_i+0x244>)
 8009ec4:	2f6f      	cmp	r7, #111	; 0x6f
 8009ec6:	bf0c      	ite	eq
 8009ec8:	2308      	moveq	r3, #8
 8009eca:	230a      	movne	r3, #10
 8009ecc:	2100      	movs	r1, #0
 8009ece:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ed2:	6865      	ldr	r5, [r4, #4]
 8009ed4:	60a5      	str	r5, [r4, #8]
 8009ed6:	2d00      	cmp	r5, #0
 8009ed8:	bfa2      	ittt	ge
 8009eda:	6821      	ldrge	r1, [r4, #0]
 8009edc:	f021 0104 	bicge.w	r1, r1, #4
 8009ee0:	6021      	strge	r1, [r4, #0]
 8009ee2:	b90e      	cbnz	r6, 8009ee8 <_printf_i+0x118>
 8009ee4:	2d00      	cmp	r5, #0
 8009ee6:	d04d      	beq.n	8009f84 <_printf_i+0x1b4>
 8009ee8:	4615      	mov	r5, r2
 8009eea:	fbb6 f1f3 	udiv	r1, r6, r3
 8009eee:	fb03 6711 	mls	r7, r3, r1, r6
 8009ef2:	5dc7      	ldrb	r7, [r0, r7]
 8009ef4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009ef8:	4637      	mov	r7, r6
 8009efa:	42bb      	cmp	r3, r7
 8009efc:	460e      	mov	r6, r1
 8009efe:	d9f4      	bls.n	8009eea <_printf_i+0x11a>
 8009f00:	2b08      	cmp	r3, #8
 8009f02:	d10b      	bne.n	8009f1c <_printf_i+0x14c>
 8009f04:	6823      	ldr	r3, [r4, #0]
 8009f06:	07de      	lsls	r6, r3, #31
 8009f08:	d508      	bpl.n	8009f1c <_printf_i+0x14c>
 8009f0a:	6923      	ldr	r3, [r4, #16]
 8009f0c:	6861      	ldr	r1, [r4, #4]
 8009f0e:	4299      	cmp	r1, r3
 8009f10:	bfde      	ittt	le
 8009f12:	2330      	movle	r3, #48	; 0x30
 8009f14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009f18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009f1c:	1b52      	subs	r2, r2, r5
 8009f1e:	6122      	str	r2, [r4, #16]
 8009f20:	f8cd a000 	str.w	sl, [sp]
 8009f24:	464b      	mov	r3, r9
 8009f26:	aa03      	add	r2, sp, #12
 8009f28:	4621      	mov	r1, r4
 8009f2a:	4640      	mov	r0, r8
 8009f2c:	f7ff fee2 	bl	8009cf4 <_printf_common>
 8009f30:	3001      	adds	r0, #1
 8009f32:	d14c      	bne.n	8009fce <_printf_i+0x1fe>
 8009f34:	f04f 30ff 	mov.w	r0, #4294967295
 8009f38:	b004      	add	sp, #16
 8009f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f3e:	4835      	ldr	r0, [pc, #212]	; (800a014 <_printf_i+0x244>)
 8009f40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009f44:	6829      	ldr	r1, [r5, #0]
 8009f46:	6823      	ldr	r3, [r4, #0]
 8009f48:	f851 6b04 	ldr.w	r6, [r1], #4
 8009f4c:	6029      	str	r1, [r5, #0]
 8009f4e:	061d      	lsls	r5, r3, #24
 8009f50:	d514      	bpl.n	8009f7c <_printf_i+0x1ac>
 8009f52:	07df      	lsls	r7, r3, #31
 8009f54:	bf44      	itt	mi
 8009f56:	f043 0320 	orrmi.w	r3, r3, #32
 8009f5a:	6023      	strmi	r3, [r4, #0]
 8009f5c:	b91e      	cbnz	r6, 8009f66 <_printf_i+0x196>
 8009f5e:	6823      	ldr	r3, [r4, #0]
 8009f60:	f023 0320 	bic.w	r3, r3, #32
 8009f64:	6023      	str	r3, [r4, #0]
 8009f66:	2310      	movs	r3, #16
 8009f68:	e7b0      	b.n	8009ecc <_printf_i+0xfc>
 8009f6a:	6823      	ldr	r3, [r4, #0]
 8009f6c:	f043 0320 	orr.w	r3, r3, #32
 8009f70:	6023      	str	r3, [r4, #0]
 8009f72:	2378      	movs	r3, #120	; 0x78
 8009f74:	4828      	ldr	r0, [pc, #160]	; (800a018 <_printf_i+0x248>)
 8009f76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009f7a:	e7e3      	b.n	8009f44 <_printf_i+0x174>
 8009f7c:	0659      	lsls	r1, r3, #25
 8009f7e:	bf48      	it	mi
 8009f80:	b2b6      	uxthmi	r6, r6
 8009f82:	e7e6      	b.n	8009f52 <_printf_i+0x182>
 8009f84:	4615      	mov	r5, r2
 8009f86:	e7bb      	b.n	8009f00 <_printf_i+0x130>
 8009f88:	682b      	ldr	r3, [r5, #0]
 8009f8a:	6826      	ldr	r6, [r4, #0]
 8009f8c:	6961      	ldr	r1, [r4, #20]
 8009f8e:	1d18      	adds	r0, r3, #4
 8009f90:	6028      	str	r0, [r5, #0]
 8009f92:	0635      	lsls	r5, r6, #24
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	d501      	bpl.n	8009f9c <_printf_i+0x1cc>
 8009f98:	6019      	str	r1, [r3, #0]
 8009f9a:	e002      	b.n	8009fa2 <_printf_i+0x1d2>
 8009f9c:	0670      	lsls	r0, r6, #25
 8009f9e:	d5fb      	bpl.n	8009f98 <_printf_i+0x1c8>
 8009fa0:	8019      	strh	r1, [r3, #0]
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	6123      	str	r3, [r4, #16]
 8009fa6:	4615      	mov	r5, r2
 8009fa8:	e7ba      	b.n	8009f20 <_printf_i+0x150>
 8009faa:	682b      	ldr	r3, [r5, #0]
 8009fac:	1d1a      	adds	r2, r3, #4
 8009fae:	602a      	str	r2, [r5, #0]
 8009fb0:	681d      	ldr	r5, [r3, #0]
 8009fb2:	6862      	ldr	r2, [r4, #4]
 8009fb4:	2100      	movs	r1, #0
 8009fb6:	4628      	mov	r0, r5
 8009fb8:	f7f6 f91a 	bl	80001f0 <memchr>
 8009fbc:	b108      	cbz	r0, 8009fc2 <_printf_i+0x1f2>
 8009fbe:	1b40      	subs	r0, r0, r5
 8009fc0:	6060      	str	r0, [r4, #4]
 8009fc2:	6863      	ldr	r3, [r4, #4]
 8009fc4:	6123      	str	r3, [r4, #16]
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fcc:	e7a8      	b.n	8009f20 <_printf_i+0x150>
 8009fce:	6923      	ldr	r3, [r4, #16]
 8009fd0:	462a      	mov	r2, r5
 8009fd2:	4649      	mov	r1, r9
 8009fd4:	4640      	mov	r0, r8
 8009fd6:	47d0      	blx	sl
 8009fd8:	3001      	adds	r0, #1
 8009fda:	d0ab      	beq.n	8009f34 <_printf_i+0x164>
 8009fdc:	6823      	ldr	r3, [r4, #0]
 8009fde:	079b      	lsls	r3, r3, #30
 8009fe0:	d413      	bmi.n	800a00a <_printf_i+0x23a>
 8009fe2:	68e0      	ldr	r0, [r4, #12]
 8009fe4:	9b03      	ldr	r3, [sp, #12]
 8009fe6:	4298      	cmp	r0, r3
 8009fe8:	bfb8      	it	lt
 8009fea:	4618      	movlt	r0, r3
 8009fec:	e7a4      	b.n	8009f38 <_printf_i+0x168>
 8009fee:	2301      	movs	r3, #1
 8009ff0:	4632      	mov	r2, r6
 8009ff2:	4649      	mov	r1, r9
 8009ff4:	4640      	mov	r0, r8
 8009ff6:	47d0      	blx	sl
 8009ff8:	3001      	adds	r0, #1
 8009ffa:	d09b      	beq.n	8009f34 <_printf_i+0x164>
 8009ffc:	3501      	adds	r5, #1
 8009ffe:	68e3      	ldr	r3, [r4, #12]
 800a000:	9903      	ldr	r1, [sp, #12]
 800a002:	1a5b      	subs	r3, r3, r1
 800a004:	42ab      	cmp	r3, r5
 800a006:	dcf2      	bgt.n	8009fee <_printf_i+0x21e>
 800a008:	e7eb      	b.n	8009fe2 <_printf_i+0x212>
 800a00a:	2500      	movs	r5, #0
 800a00c:	f104 0619 	add.w	r6, r4, #25
 800a010:	e7f5      	b.n	8009ffe <_printf_i+0x22e>
 800a012:	bf00      	nop
 800a014:	0800c3ee 	.word	0x0800c3ee
 800a018:	0800c3ff 	.word	0x0800c3ff

0800a01c <strstr>:
 800a01c:	780a      	ldrb	r2, [r1, #0]
 800a01e:	b570      	push	{r4, r5, r6, lr}
 800a020:	b96a      	cbnz	r2, 800a03e <strstr+0x22>
 800a022:	bd70      	pop	{r4, r5, r6, pc}
 800a024:	429a      	cmp	r2, r3
 800a026:	d109      	bne.n	800a03c <strstr+0x20>
 800a028:	460c      	mov	r4, r1
 800a02a:	4605      	mov	r5, r0
 800a02c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800a030:	2b00      	cmp	r3, #0
 800a032:	d0f6      	beq.n	800a022 <strstr+0x6>
 800a034:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800a038:	429e      	cmp	r6, r3
 800a03a:	d0f7      	beq.n	800a02c <strstr+0x10>
 800a03c:	3001      	adds	r0, #1
 800a03e:	7803      	ldrb	r3, [r0, #0]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d1ef      	bne.n	800a024 <strstr+0x8>
 800a044:	4618      	mov	r0, r3
 800a046:	e7ec      	b.n	800a022 <strstr+0x6>

0800a048 <_strtol_l.constprop.0>:
 800a048:	2b01      	cmp	r3, #1
 800a04a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a04e:	d001      	beq.n	800a054 <_strtol_l.constprop.0+0xc>
 800a050:	2b24      	cmp	r3, #36	; 0x24
 800a052:	d906      	bls.n	800a062 <_strtol_l.constprop.0+0x1a>
 800a054:	f7ff fb38 	bl	80096c8 <__errno>
 800a058:	2316      	movs	r3, #22
 800a05a:	6003      	str	r3, [r0, #0]
 800a05c:	2000      	movs	r0, #0
 800a05e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a062:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a148 <_strtol_l.constprop.0+0x100>
 800a066:	460d      	mov	r5, r1
 800a068:	462e      	mov	r6, r5
 800a06a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a06e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a072:	f017 0708 	ands.w	r7, r7, #8
 800a076:	d1f7      	bne.n	800a068 <_strtol_l.constprop.0+0x20>
 800a078:	2c2d      	cmp	r4, #45	; 0x2d
 800a07a:	d132      	bne.n	800a0e2 <_strtol_l.constprop.0+0x9a>
 800a07c:	782c      	ldrb	r4, [r5, #0]
 800a07e:	2701      	movs	r7, #1
 800a080:	1cb5      	adds	r5, r6, #2
 800a082:	2b00      	cmp	r3, #0
 800a084:	d05b      	beq.n	800a13e <_strtol_l.constprop.0+0xf6>
 800a086:	2b10      	cmp	r3, #16
 800a088:	d109      	bne.n	800a09e <_strtol_l.constprop.0+0x56>
 800a08a:	2c30      	cmp	r4, #48	; 0x30
 800a08c:	d107      	bne.n	800a09e <_strtol_l.constprop.0+0x56>
 800a08e:	782c      	ldrb	r4, [r5, #0]
 800a090:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a094:	2c58      	cmp	r4, #88	; 0x58
 800a096:	d14d      	bne.n	800a134 <_strtol_l.constprop.0+0xec>
 800a098:	786c      	ldrb	r4, [r5, #1]
 800a09a:	2310      	movs	r3, #16
 800a09c:	3502      	adds	r5, #2
 800a09e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a0a2:	f108 38ff 	add.w	r8, r8, #4294967295
 800a0a6:	f04f 0c00 	mov.w	ip, #0
 800a0aa:	fbb8 f9f3 	udiv	r9, r8, r3
 800a0ae:	4666      	mov	r6, ip
 800a0b0:	fb03 8a19 	mls	sl, r3, r9, r8
 800a0b4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a0b8:	f1be 0f09 	cmp.w	lr, #9
 800a0bc:	d816      	bhi.n	800a0ec <_strtol_l.constprop.0+0xa4>
 800a0be:	4674      	mov	r4, lr
 800a0c0:	42a3      	cmp	r3, r4
 800a0c2:	dd24      	ble.n	800a10e <_strtol_l.constprop.0+0xc6>
 800a0c4:	f1bc 0f00 	cmp.w	ip, #0
 800a0c8:	db1e      	blt.n	800a108 <_strtol_l.constprop.0+0xc0>
 800a0ca:	45b1      	cmp	r9, r6
 800a0cc:	d31c      	bcc.n	800a108 <_strtol_l.constprop.0+0xc0>
 800a0ce:	d101      	bne.n	800a0d4 <_strtol_l.constprop.0+0x8c>
 800a0d0:	45a2      	cmp	sl, r4
 800a0d2:	db19      	blt.n	800a108 <_strtol_l.constprop.0+0xc0>
 800a0d4:	fb06 4603 	mla	r6, r6, r3, r4
 800a0d8:	f04f 0c01 	mov.w	ip, #1
 800a0dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a0e0:	e7e8      	b.n	800a0b4 <_strtol_l.constprop.0+0x6c>
 800a0e2:	2c2b      	cmp	r4, #43	; 0x2b
 800a0e4:	bf04      	itt	eq
 800a0e6:	782c      	ldrbeq	r4, [r5, #0]
 800a0e8:	1cb5      	addeq	r5, r6, #2
 800a0ea:	e7ca      	b.n	800a082 <_strtol_l.constprop.0+0x3a>
 800a0ec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a0f0:	f1be 0f19 	cmp.w	lr, #25
 800a0f4:	d801      	bhi.n	800a0fa <_strtol_l.constprop.0+0xb2>
 800a0f6:	3c37      	subs	r4, #55	; 0x37
 800a0f8:	e7e2      	b.n	800a0c0 <_strtol_l.constprop.0+0x78>
 800a0fa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a0fe:	f1be 0f19 	cmp.w	lr, #25
 800a102:	d804      	bhi.n	800a10e <_strtol_l.constprop.0+0xc6>
 800a104:	3c57      	subs	r4, #87	; 0x57
 800a106:	e7db      	b.n	800a0c0 <_strtol_l.constprop.0+0x78>
 800a108:	f04f 3cff 	mov.w	ip, #4294967295
 800a10c:	e7e6      	b.n	800a0dc <_strtol_l.constprop.0+0x94>
 800a10e:	f1bc 0f00 	cmp.w	ip, #0
 800a112:	da05      	bge.n	800a120 <_strtol_l.constprop.0+0xd8>
 800a114:	2322      	movs	r3, #34	; 0x22
 800a116:	6003      	str	r3, [r0, #0]
 800a118:	4646      	mov	r6, r8
 800a11a:	b942      	cbnz	r2, 800a12e <_strtol_l.constprop.0+0xe6>
 800a11c:	4630      	mov	r0, r6
 800a11e:	e79e      	b.n	800a05e <_strtol_l.constprop.0+0x16>
 800a120:	b107      	cbz	r7, 800a124 <_strtol_l.constprop.0+0xdc>
 800a122:	4276      	negs	r6, r6
 800a124:	2a00      	cmp	r2, #0
 800a126:	d0f9      	beq.n	800a11c <_strtol_l.constprop.0+0xd4>
 800a128:	f1bc 0f00 	cmp.w	ip, #0
 800a12c:	d000      	beq.n	800a130 <_strtol_l.constprop.0+0xe8>
 800a12e:	1e69      	subs	r1, r5, #1
 800a130:	6011      	str	r1, [r2, #0]
 800a132:	e7f3      	b.n	800a11c <_strtol_l.constprop.0+0xd4>
 800a134:	2430      	movs	r4, #48	; 0x30
 800a136:	2b00      	cmp	r3, #0
 800a138:	d1b1      	bne.n	800a09e <_strtol_l.constprop.0+0x56>
 800a13a:	2308      	movs	r3, #8
 800a13c:	e7af      	b.n	800a09e <_strtol_l.constprop.0+0x56>
 800a13e:	2c30      	cmp	r4, #48	; 0x30
 800a140:	d0a5      	beq.n	800a08e <_strtol_l.constprop.0+0x46>
 800a142:	230a      	movs	r3, #10
 800a144:	e7ab      	b.n	800a09e <_strtol_l.constprop.0+0x56>
 800a146:	bf00      	nop
 800a148:	0800c411 	.word	0x0800c411

0800a14c <strtol>:
 800a14c:	4613      	mov	r3, r2
 800a14e:	460a      	mov	r2, r1
 800a150:	4601      	mov	r1, r0
 800a152:	4802      	ldr	r0, [pc, #8]	; (800a15c <strtol+0x10>)
 800a154:	6800      	ldr	r0, [r0, #0]
 800a156:	f7ff bf77 	b.w	800a048 <_strtol_l.constprop.0>
 800a15a:	bf00      	nop
 800a15c:	20000130 	.word	0x20000130

0800a160 <quorem>:
 800a160:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a164:	6903      	ldr	r3, [r0, #16]
 800a166:	690c      	ldr	r4, [r1, #16]
 800a168:	42a3      	cmp	r3, r4
 800a16a:	4607      	mov	r7, r0
 800a16c:	f2c0 8081 	blt.w	800a272 <quorem+0x112>
 800a170:	3c01      	subs	r4, #1
 800a172:	f101 0814 	add.w	r8, r1, #20
 800a176:	f100 0514 	add.w	r5, r0, #20
 800a17a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a17e:	9301      	str	r3, [sp, #4]
 800a180:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a184:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a188:	3301      	adds	r3, #1
 800a18a:	429a      	cmp	r2, r3
 800a18c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a190:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a194:	fbb2 f6f3 	udiv	r6, r2, r3
 800a198:	d331      	bcc.n	800a1fe <quorem+0x9e>
 800a19a:	f04f 0e00 	mov.w	lr, #0
 800a19e:	4640      	mov	r0, r8
 800a1a0:	46ac      	mov	ip, r5
 800a1a2:	46f2      	mov	sl, lr
 800a1a4:	f850 2b04 	ldr.w	r2, [r0], #4
 800a1a8:	b293      	uxth	r3, r2
 800a1aa:	fb06 e303 	mla	r3, r6, r3, lr
 800a1ae:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a1b2:	b29b      	uxth	r3, r3
 800a1b4:	ebaa 0303 	sub.w	r3, sl, r3
 800a1b8:	f8dc a000 	ldr.w	sl, [ip]
 800a1bc:	0c12      	lsrs	r2, r2, #16
 800a1be:	fa13 f38a 	uxtah	r3, r3, sl
 800a1c2:	fb06 e202 	mla	r2, r6, r2, lr
 800a1c6:	9300      	str	r3, [sp, #0]
 800a1c8:	9b00      	ldr	r3, [sp, #0]
 800a1ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a1ce:	b292      	uxth	r2, r2
 800a1d0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a1d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a1d8:	f8bd 3000 	ldrh.w	r3, [sp]
 800a1dc:	4581      	cmp	r9, r0
 800a1de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1e2:	f84c 3b04 	str.w	r3, [ip], #4
 800a1e6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a1ea:	d2db      	bcs.n	800a1a4 <quorem+0x44>
 800a1ec:	f855 300b 	ldr.w	r3, [r5, fp]
 800a1f0:	b92b      	cbnz	r3, 800a1fe <quorem+0x9e>
 800a1f2:	9b01      	ldr	r3, [sp, #4]
 800a1f4:	3b04      	subs	r3, #4
 800a1f6:	429d      	cmp	r5, r3
 800a1f8:	461a      	mov	r2, r3
 800a1fa:	d32e      	bcc.n	800a25a <quorem+0xfa>
 800a1fc:	613c      	str	r4, [r7, #16]
 800a1fe:	4638      	mov	r0, r7
 800a200:	f001 f8b6 	bl	800b370 <__mcmp>
 800a204:	2800      	cmp	r0, #0
 800a206:	db24      	blt.n	800a252 <quorem+0xf2>
 800a208:	3601      	adds	r6, #1
 800a20a:	4628      	mov	r0, r5
 800a20c:	f04f 0c00 	mov.w	ip, #0
 800a210:	f858 2b04 	ldr.w	r2, [r8], #4
 800a214:	f8d0 e000 	ldr.w	lr, [r0]
 800a218:	b293      	uxth	r3, r2
 800a21a:	ebac 0303 	sub.w	r3, ip, r3
 800a21e:	0c12      	lsrs	r2, r2, #16
 800a220:	fa13 f38e 	uxtah	r3, r3, lr
 800a224:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a228:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a22c:	b29b      	uxth	r3, r3
 800a22e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a232:	45c1      	cmp	r9, r8
 800a234:	f840 3b04 	str.w	r3, [r0], #4
 800a238:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a23c:	d2e8      	bcs.n	800a210 <quorem+0xb0>
 800a23e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a242:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a246:	b922      	cbnz	r2, 800a252 <quorem+0xf2>
 800a248:	3b04      	subs	r3, #4
 800a24a:	429d      	cmp	r5, r3
 800a24c:	461a      	mov	r2, r3
 800a24e:	d30a      	bcc.n	800a266 <quorem+0x106>
 800a250:	613c      	str	r4, [r7, #16]
 800a252:	4630      	mov	r0, r6
 800a254:	b003      	add	sp, #12
 800a256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a25a:	6812      	ldr	r2, [r2, #0]
 800a25c:	3b04      	subs	r3, #4
 800a25e:	2a00      	cmp	r2, #0
 800a260:	d1cc      	bne.n	800a1fc <quorem+0x9c>
 800a262:	3c01      	subs	r4, #1
 800a264:	e7c7      	b.n	800a1f6 <quorem+0x96>
 800a266:	6812      	ldr	r2, [r2, #0]
 800a268:	3b04      	subs	r3, #4
 800a26a:	2a00      	cmp	r2, #0
 800a26c:	d1f0      	bne.n	800a250 <quorem+0xf0>
 800a26e:	3c01      	subs	r4, #1
 800a270:	e7eb      	b.n	800a24a <quorem+0xea>
 800a272:	2000      	movs	r0, #0
 800a274:	e7ee      	b.n	800a254 <quorem+0xf4>
	...

0800a278 <_dtoa_r>:
 800a278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a27c:	ed2d 8b04 	vpush	{d8-d9}
 800a280:	ec57 6b10 	vmov	r6, r7, d0
 800a284:	b093      	sub	sp, #76	; 0x4c
 800a286:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a288:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a28c:	9106      	str	r1, [sp, #24]
 800a28e:	ee10 aa10 	vmov	sl, s0
 800a292:	4604      	mov	r4, r0
 800a294:	9209      	str	r2, [sp, #36]	; 0x24
 800a296:	930c      	str	r3, [sp, #48]	; 0x30
 800a298:	46bb      	mov	fp, r7
 800a29a:	b975      	cbnz	r5, 800a2ba <_dtoa_r+0x42>
 800a29c:	2010      	movs	r0, #16
 800a29e:	f000 fddd 	bl	800ae5c <malloc>
 800a2a2:	4602      	mov	r2, r0
 800a2a4:	6260      	str	r0, [r4, #36]	; 0x24
 800a2a6:	b920      	cbnz	r0, 800a2b2 <_dtoa_r+0x3a>
 800a2a8:	4ba7      	ldr	r3, [pc, #668]	; (800a548 <_dtoa_r+0x2d0>)
 800a2aa:	21ea      	movs	r1, #234	; 0xea
 800a2ac:	48a7      	ldr	r0, [pc, #668]	; (800a54c <_dtoa_r+0x2d4>)
 800a2ae:	f001 fa67 	bl	800b780 <__assert_func>
 800a2b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a2b6:	6005      	str	r5, [r0, #0]
 800a2b8:	60c5      	str	r5, [r0, #12]
 800a2ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2bc:	6819      	ldr	r1, [r3, #0]
 800a2be:	b151      	cbz	r1, 800a2d6 <_dtoa_r+0x5e>
 800a2c0:	685a      	ldr	r2, [r3, #4]
 800a2c2:	604a      	str	r2, [r1, #4]
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	4093      	lsls	r3, r2
 800a2c8:	608b      	str	r3, [r1, #8]
 800a2ca:	4620      	mov	r0, r4
 800a2cc:	f000 fe0e 	bl	800aeec <_Bfree>
 800a2d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	601a      	str	r2, [r3, #0]
 800a2d6:	1e3b      	subs	r3, r7, #0
 800a2d8:	bfaa      	itet	ge
 800a2da:	2300      	movge	r3, #0
 800a2dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a2e0:	f8c8 3000 	strge.w	r3, [r8]
 800a2e4:	4b9a      	ldr	r3, [pc, #616]	; (800a550 <_dtoa_r+0x2d8>)
 800a2e6:	bfbc      	itt	lt
 800a2e8:	2201      	movlt	r2, #1
 800a2ea:	f8c8 2000 	strlt.w	r2, [r8]
 800a2ee:	ea33 030b 	bics.w	r3, r3, fp
 800a2f2:	d11b      	bne.n	800a32c <_dtoa_r+0xb4>
 800a2f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2f6:	f242 730f 	movw	r3, #9999	; 0x270f
 800a2fa:	6013      	str	r3, [r2, #0]
 800a2fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a300:	4333      	orrs	r3, r6
 800a302:	f000 8592 	beq.w	800ae2a <_dtoa_r+0xbb2>
 800a306:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a308:	b963      	cbnz	r3, 800a324 <_dtoa_r+0xac>
 800a30a:	4b92      	ldr	r3, [pc, #584]	; (800a554 <_dtoa_r+0x2dc>)
 800a30c:	e022      	b.n	800a354 <_dtoa_r+0xdc>
 800a30e:	4b92      	ldr	r3, [pc, #584]	; (800a558 <_dtoa_r+0x2e0>)
 800a310:	9301      	str	r3, [sp, #4]
 800a312:	3308      	adds	r3, #8
 800a314:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a316:	6013      	str	r3, [r2, #0]
 800a318:	9801      	ldr	r0, [sp, #4]
 800a31a:	b013      	add	sp, #76	; 0x4c
 800a31c:	ecbd 8b04 	vpop	{d8-d9}
 800a320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a324:	4b8b      	ldr	r3, [pc, #556]	; (800a554 <_dtoa_r+0x2dc>)
 800a326:	9301      	str	r3, [sp, #4]
 800a328:	3303      	adds	r3, #3
 800a32a:	e7f3      	b.n	800a314 <_dtoa_r+0x9c>
 800a32c:	2200      	movs	r2, #0
 800a32e:	2300      	movs	r3, #0
 800a330:	4650      	mov	r0, sl
 800a332:	4659      	mov	r1, fp
 800a334:	f7f6 fbd0 	bl	8000ad8 <__aeabi_dcmpeq>
 800a338:	ec4b ab19 	vmov	d9, sl, fp
 800a33c:	4680      	mov	r8, r0
 800a33e:	b158      	cbz	r0, 800a358 <_dtoa_r+0xe0>
 800a340:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a342:	2301      	movs	r3, #1
 800a344:	6013      	str	r3, [r2, #0]
 800a346:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a348:	2b00      	cmp	r3, #0
 800a34a:	f000 856b 	beq.w	800ae24 <_dtoa_r+0xbac>
 800a34e:	4883      	ldr	r0, [pc, #524]	; (800a55c <_dtoa_r+0x2e4>)
 800a350:	6018      	str	r0, [r3, #0]
 800a352:	1e43      	subs	r3, r0, #1
 800a354:	9301      	str	r3, [sp, #4]
 800a356:	e7df      	b.n	800a318 <_dtoa_r+0xa0>
 800a358:	ec4b ab10 	vmov	d0, sl, fp
 800a35c:	aa10      	add	r2, sp, #64	; 0x40
 800a35e:	a911      	add	r1, sp, #68	; 0x44
 800a360:	4620      	mov	r0, r4
 800a362:	f001 f8ab 	bl	800b4bc <__d2b>
 800a366:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a36a:	ee08 0a10 	vmov	s16, r0
 800a36e:	2d00      	cmp	r5, #0
 800a370:	f000 8084 	beq.w	800a47c <_dtoa_r+0x204>
 800a374:	ee19 3a90 	vmov	r3, s19
 800a378:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a37c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a380:	4656      	mov	r6, sl
 800a382:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a386:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a38a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a38e:	4b74      	ldr	r3, [pc, #464]	; (800a560 <_dtoa_r+0x2e8>)
 800a390:	2200      	movs	r2, #0
 800a392:	4630      	mov	r0, r6
 800a394:	4639      	mov	r1, r7
 800a396:	f7f5 ff7f 	bl	8000298 <__aeabi_dsub>
 800a39a:	a365      	add	r3, pc, #404	; (adr r3, 800a530 <_dtoa_r+0x2b8>)
 800a39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a0:	f7f6 f932 	bl	8000608 <__aeabi_dmul>
 800a3a4:	a364      	add	r3, pc, #400	; (adr r3, 800a538 <_dtoa_r+0x2c0>)
 800a3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3aa:	f7f5 ff77 	bl	800029c <__adddf3>
 800a3ae:	4606      	mov	r6, r0
 800a3b0:	4628      	mov	r0, r5
 800a3b2:	460f      	mov	r7, r1
 800a3b4:	f7f6 f8be 	bl	8000534 <__aeabi_i2d>
 800a3b8:	a361      	add	r3, pc, #388	; (adr r3, 800a540 <_dtoa_r+0x2c8>)
 800a3ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3be:	f7f6 f923 	bl	8000608 <__aeabi_dmul>
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	460b      	mov	r3, r1
 800a3c6:	4630      	mov	r0, r6
 800a3c8:	4639      	mov	r1, r7
 800a3ca:	f7f5 ff67 	bl	800029c <__adddf3>
 800a3ce:	4606      	mov	r6, r0
 800a3d0:	460f      	mov	r7, r1
 800a3d2:	f7f6 fbc9 	bl	8000b68 <__aeabi_d2iz>
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	9000      	str	r0, [sp, #0]
 800a3da:	2300      	movs	r3, #0
 800a3dc:	4630      	mov	r0, r6
 800a3de:	4639      	mov	r1, r7
 800a3e0:	f7f6 fb84 	bl	8000aec <__aeabi_dcmplt>
 800a3e4:	b150      	cbz	r0, 800a3fc <_dtoa_r+0x184>
 800a3e6:	9800      	ldr	r0, [sp, #0]
 800a3e8:	f7f6 f8a4 	bl	8000534 <__aeabi_i2d>
 800a3ec:	4632      	mov	r2, r6
 800a3ee:	463b      	mov	r3, r7
 800a3f0:	f7f6 fb72 	bl	8000ad8 <__aeabi_dcmpeq>
 800a3f4:	b910      	cbnz	r0, 800a3fc <_dtoa_r+0x184>
 800a3f6:	9b00      	ldr	r3, [sp, #0]
 800a3f8:	3b01      	subs	r3, #1
 800a3fa:	9300      	str	r3, [sp, #0]
 800a3fc:	9b00      	ldr	r3, [sp, #0]
 800a3fe:	2b16      	cmp	r3, #22
 800a400:	d85a      	bhi.n	800a4b8 <_dtoa_r+0x240>
 800a402:	9a00      	ldr	r2, [sp, #0]
 800a404:	4b57      	ldr	r3, [pc, #348]	; (800a564 <_dtoa_r+0x2ec>)
 800a406:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a40e:	ec51 0b19 	vmov	r0, r1, d9
 800a412:	f7f6 fb6b 	bl	8000aec <__aeabi_dcmplt>
 800a416:	2800      	cmp	r0, #0
 800a418:	d050      	beq.n	800a4bc <_dtoa_r+0x244>
 800a41a:	9b00      	ldr	r3, [sp, #0]
 800a41c:	3b01      	subs	r3, #1
 800a41e:	9300      	str	r3, [sp, #0]
 800a420:	2300      	movs	r3, #0
 800a422:	930b      	str	r3, [sp, #44]	; 0x2c
 800a424:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a426:	1b5d      	subs	r5, r3, r5
 800a428:	1e6b      	subs	r3, r5, #1
 800a42a:	9305      	str	r3, [sp, #20]
 800a42c:	bf45      	ittet	mi
 800a42e:	f1c5 0301 	rsbmi	r3, r5, #1
 800a432:	9304      	strmi	r3, [sp, #16]
 800a434:	2300      	movpl	r3, #0
 800a436:	2300      	movmi	r3, #0
 800a438:	bf4c      	ite	mi
 800a43a:	9305      	strmi	r3, [sp, #20]
 800a43c:	9304      	strpl	r3, [sp, #16]
 800a43e:	9b00      	ldr	r3, [sp, #0]
 800a440:	2b00      	cmp	r3, #0
 800a442:	db3d      	blt.n	800a4c0 <_dtoa_r+0x248>
 800a444:	9b05      	ldr	r3, [sp, #20]
 800a446:	9a00      	ldr	r2, [sp, #0]
 800a448:	920a      	str	r2, [sp, #40]	; 0x28
 800a44a:	4413      	add	r3, r2
 800a44c:	9305      	str	r3, [sp, #20]
 800a44e:	2300      	movs	r3, #0
 800a450:	9307      	str	r3, [sp, #28]
 800a452:	9b06      	ldr	r3, [sp, #24]
 800a454:	2b09      	cmp	r3, #9
 800a456:	f200 8089 	bhi.w	800a56c <_dtoa_r+0x2f4>
 800a45a:	2b05      	cmp	r3, #5
 800a45c:	bfc4      	itt	gt
 800a45e:	3b04      	subgt	r3, #4
 800a460:	9306      	strgt	r3, [sp, #24]
 800a462:	9b06      	ldr	r3, [sp, #24]
 800a464:	f1a3 0302 	sub.w	r3, r3, #2
 800a468:	bfcc      	ite	gt
 800a46a:	2500      	movgt	r5, #0
 800a46c:	2501      	movle	r5, #1
 800a46e:	2b03      	cmp	r3, #3
 800a470:	f200 8087 	bhi.w	800a582 <_dtoa_r+0x30a>
 800a474:	e8df f003 	tbb	[pc, r3]
 800a478:	59383a2d 	.word	0x59383a2d
 800a47c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a480:	441d      	add	r5, r3
 800a482:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a486:	2b20      	cmp	r3, #32
 800a488:	bfc1      	itttt	gt
 800a48a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a48e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a492:	fa0b f303 	lslgt.w	r3, fp, r3
 800a496:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a49a:	bfda      	itte	le
 800a49c:	f1c3 0320 	rsble	r3, r3, #32
 800a4a0:	fa06 f003 	lslle.w	r0, r6, r3
 800a4a4:	4318      	orrgt	r0, r3
 800a4a6:	f7f6 f835 	bl	8000514 <__aeabi_ui2d>
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	4606      	mov	r6, r0
 800a4ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a4b2:	3d01      	subs	r5, #1
 800a4b4:	930e      	str	r3, [sp, #56]	; 0x38
 800a4b6:	e76a      	b.n	800a38e <_dtoa_r+0x116>
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	e7b2      	b.n	800a422 <_dtoa_r+0x1aa>
 800a4bc:	900b      	str	r0, [sp, #44]	; 0x2c
 800a4be:	e7b1      	b.n	800a424 <_dtoa_r+0x1ac>
 800a4c0:	9b04      	ldr	r3, [sp, #16]
 800a4c2:	9a00      	ldr	r2, [sp, #0]
 800a4c4:	1a9b      	subs	r3, r3, r2
 800a4c6:	9304      	str	r3, [sp, #16]
 800a4c8:	4253      	negs	r3, r2
 800a4ca:	9307      	str	r3, [sp, #28]
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	930a      	str	r3, [sp, #40]	; 0x28
 800a4d0:	e7bf      	b.n	800a452 <_dtoa_r+0x1da>
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	9308      	str	r3, [sp, #32]
 800a4d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	dc55      	bgt.n	800a588 <_dtoa_r+0x310>
 800a4dc:	2301      	movs	r3, #1
 800a4de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	9209      	str	r2, [sp, #36]	; 0x24
 800a4e6:	e00c      	b.n	800a502 <_dtoa_r+0x28a>
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	e7f3      	b.n	800a4d4 <_dtoa_r+0x25c>
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4f0:	9308      	str	r3, [sp, #32]
 800a4f2:	9b00      	ldr	r3, [sp, #0]
 800a4f4:	4413      	add	r3, r2
 800a4f6:	9302      	str	r3, [sp, #8]
 800a4f8:	3301      	adds	r3, #1
 800a4fa:	2b01      	cmp	r3, #1
 800a4fc:	9303      	str	r3, [sp, #12]
 800a4fe:	bfb8      	it	lt
 800a500:	2301      	movlt	r3, #1
 800a502:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a504:	2200      	movs	r2, #0
 800a506:	6042      	str	r2, [r0, #4]
 800a508:	2204      	movs	r2, #4
 800a50a:	f102 0614 	add.w	r6, r2, #20
 800a50e:	429e      	cmp	r6, r3
 800a510:	6841      	ldr	r1, [r0, #4]
 800a512:	d93d      	bls.n	800a590 <_dtoa_r+0x318>
 800a514:	4620      	mov	r0, r4
 800a516:	f000 fca9 	bl	800ae6c <_Balloc>
 800a51a:	9001      	str	r0, [sp, #4]
 800a51c:	2800      	cmp	r0, #0
 800a51e:	d13b      	bne.n	800a598 <_dtoa_r+0x320>
 800a520:	4b11      	ldr	r3, [pc, #68]	; (800a568 <_dtoa_r+0x2f0>)
 800a522:	4602      	mov	r2, r0
 800a524:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a528:	e6c0      	b.n	800a2ac <_dtoa_r+0x34>
 800a52a:	2301      	movs	r3, #1
 800a52c:	e7df      	b.n	800a4ee <_dtoa_r+0x276>
 800a52e:	bf00      	nop
 800a530:	636f4361 	.word	0x636f4361
 800a534:	3fd287a7 	.word	0x3fd287a7
 800a538:	8b60c8b3 	.word	0x8b60c8b3
 800a53c:	3fc68a28 	.word	0x3fc68a28
 800a540:	509f79fb 	.word	0x509f79fb
 800a544:	3fd34413 	.word	0x3fd34413
 800a548:	0800c51e 	.word	0x0800c51e
 800a54c:	0800c535 	.word	0x0800c535
 800a550:	7ff00000 	.word	0x7ff00000
 800a554:	0800c51a 	.word	0x0800c51a
 800a558:	0800c511 	.word	0x0800c511
 800a55c:	0800c3ed 	.word	0x0800c3ed
 800a560:	3ff80000 	.word	0x3ff80000
 800a564:	0800c628 	.word	0x0800c628
 800a568:	0800c590 	.word	0x0800c590
 800a56c:	2501      	movs	r5, #1
 800a56e:	2300      	movs	r3, #0
 800a570:	9306      	str	r3, [sp, #24]
 800a572:	9508      	str	r5, [sp, #32]
 800a574:	f04f 33ff 	mov.w	r3, #4294967295
 800a578:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a57c:	2200      	movs	r2, #0
 800a57e:	2312      	movs	r3, #18
 800a580:	e7b0      	b.n	800a4e4 <_dtoa_r+0x26c>
 800a582:	2301      	movs	r3, #1
 800a584:	9308      	str	r3, [sp, #32]
 800a586:	e7f5      	b.n	800a574 <_dtoa_r+0x2fc>
 800a588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a58a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a58e:	e7b8      	b.n	800a502 <_dtoa_r+0x28a>
 800a590:	3101      	adds	r1, #1
 800a592:	6041      	str	r1, [r0, #4]
 800a594:	0052      	lsls	r2, r2, #1
 800a596:	e7b8      	b.n	800a50a <_dtoa_r+0x292>
 800a598:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a59a:	9a01      	ldr	r2, [sp, #4]
 800a59c:	601a      	str	r2, [r3, #0]
 800a59e:	9b03      	ldr	r3, [sp, #12]
 800a5a0:	2b0e      	cmp	r3, #14
 800a5a2:	f200 809d 	bhi.w	800a6e0 <_dtoa_r+0x468>
 800a5a6:	2d00      	cmp	r5, #0
 800a5a8:	f000 809a 	beq.w	800a6e0 <_dtoa_r+0x468>
 800a5ac:	9b00      	ldr	r3, [sp, #0]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	dd32      	ble.n	800a618 <_dtoa_r+0x3a0>
 800a5b2:	4ab7      	ldr	r2, [pc, #732]	; (800a890 <_dtoa_r+0x618>)
 800a5b4:	f003 030f 	and.w	r3, r3, #15
 800a5b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a5bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a5c0:	9b00      	ldr	r3, [sp, #0]
 800a5c2:	05d8      	lsls	r0, r3, #23
 800a5c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a5c8:	d516      	bpl.n	800a5f8 <_dtoa_r+0x380>
 800a5ca:	4bb2      	ldr	r3, [pc, #712]	; (800a894 <_dtoa_r+0x61c>)
 800a5cc:	ec51 0b19 	vmov	r0, r1, d9
 800a5d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a5d4:	f7f6 f942 	bl	800085c <__aeabi_ddiv>
 800a5d8:	f007 070f 	and.w	r7, r7, #15
 800a5dc:	4682      	mov	sl, r0
 800a5de:	468b      	mov	fp, r1
 800a5e0:	2503      	movs	r5, #3
 800a5e2:	4eac      	ldr	r6, [pc, #688]	; (800a894 <_dtoa_r+0x61c>)
 800a5e4:	b957      	cbnz	r7, 800a5fc <_dtoa_r+0x384>
 800a5e6:	4642      	mov	r2, r8
 800a5e8:	464b      	mov	r3, r9
 800a5ea:	4650      	mov	r0, sl
 800a5ec:	4659      	mov	r1, fp
 800a5ee:	f7f6 f935 	bl	800085c <__aeabi_ddiv>
 800a5f2:	4682      	mov	sl, r0
 800a5f4:	468b      	mov	fp, r1
 800a5f6:	e028      	b.n	800a64a <_dtoa_r+0x3d2>
 800a5f8:	2502      	movs	r5, #2
 800a5fa:	e7f2      	b.n	800a5e2 <_dtoa_r+0x36a>
 800a5fc:	07f9      	lsls	r1, r7, #31
 800a5fe:	d508      	bpl.n	800a612 <_dtoa_r+0x39a>
 800a600:	4640      	mov	r0, r8
 800a602:	4649      	mov	r1, r9
 800a604:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a608:	f7f5 fffe 	bl	8000608 <__aeabi_dmul>
 800a60c:	3501      	adds	r5, #1
 800a60e:	4680      	mov	r8, r0
 800a610:	4689      	mov	r9, r1
 800a612:	107f      	asrs	r7, r7, #1
 800a614:	3608      	adds	r6, #8
 800a616:	e7e5      	b.n	800a5e4 <_dtoa_r+0x36c>
 800a618:	f000 809b 	beq.w	800a752 <_dtoa_r+0x4da>
 800a61c:	9b00      	ldr	r3, [sp, #0]
 800a61e:	4f9d      	ldr	r7, [pc, #628]	; (800a894 <_dtoa_r+0x61c>)
 800a620:	425e      	negs	r6, r3
 800a622:	4b9b      	ldr	r3, [pc, #620]	; (800a890 <_dtoa_r+0x618>)
 800a624:	f006 020f 	and.w	r2, r6, #15
 800a628:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a630:	ec51 0b19 	vmov	r0, r1, d9
 800a634:	f7f5 ffe8 	bl	8000608 <__aeabi_dmul>
 800a638:	1136      	asrs	r6, r6, #4
 800a63a:	4682      	mov	sl, r0
 800a63c:	468b      	mov	fp, r1
 800a63e:	2300      	movs	r3, #0
 800a640:	2502      	movs	r5, #2
 800a642:	2e00      	cmp	r6, #0
 800a644:	d17a      	bne.n	800a73c <_dtoa_r+0x4c4>
 800a646:	2b00      	cmp	r3, #0
 800a648:	d1d3      	bne.n	800a5f2 <_dtoa_r+0x37a>
 800a64a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	f000 8082 	beq.w	800a756 <_dtoa_r+0x4de>
 800a652:	4b91      	ldr	r3, [pc, #580]	; (800a898 <_dtoa_r+0x620>)
 800a654:	2200      	movs	r2, #0
 800a656:	4650      	mov	r0, sl
 800a658:	4659      	mov	r1, fp
 800a65a:	f7f6 fa47 	bl	8000aec <__aeabi_dcmplt>
 800a65e:	2800      	cmp	r0, #0
 800a660:	d079      	beq.n	800a756 <_dtoa_r+0x4de>
 800a662:	9b03      	ldr	r3, [sp, #12]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d076      	beq.n	800a756 <_dtoa_r+0x4de>
 800a668:	9b02      	ldr	r3, [sp, #8]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	dd36      	ble.n	800a6dc <_dtoa_r+0x464>
 800a66e:	9b00      	ldr	r3, [sp, #0]
 800a670:	4650      	mov	r0, sl
 800a672:	4659      	mov	r1, fp
 800a674:	1e5f      	subs	r7, r3, #1
 800a676:	2200      	movs	r2, #0
 800a678:	4b88      	ldr	r3, [pc, #544]	; (800a89c <_dtoa_r+0x624>)
 800a67a:	f7f5 ffc5 	bl	8000608 <__aeabi_dmul>
 800a67e:	9e02      	ldr	r6, [sp, #8]
 800a680:	4682      	mov	sl, r0
 800a682:	468b      	mov	fp, r1
 800a684:	3501      	adds	r5, #1
 800a686:	4628      	mov	r0, r5
 800a688:	f7f5 ff54 	bl	8000534 <__aeabi_i2d>
 800a68c:	4652      	mov	r2, sl
 800a68e:	465b      	mov	r3, fp
 800a690:	f7f5 ffba 	bl	8000608 <__aeabi_dmul>
 800a694:	4b82      	ldr	r3, [pc, #520]	; (800a8a0 <_dtoa_r+0x628>)
 800a696:	2200      	movs	r2, #0
 800a698:	f7f5 fe00 	bl	800029c <__adddf3>
 800a69c:	46d0      	mov	r8, sl
 800a69e:	46d9      	mov	r9, fp
 800a6a0:	4682      	mov	sl, r0
 800a6a2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a6a6:	2e00      	cmp	r6, #0
 800a6a8:	d158      	bne.n	800a75c <_dtoa_r+0x4e4>
 800a6aa:	4b7e      	ldr	r3, [pc, #504]	; (800a8a4 <_dtoa_r+0x62c>)
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	4640      	mov	r0, r8
 800a6b0:	4649      	mov	r1, r9
 800a6b2:	f7f5 fdf1 	bl	8000298 <__aeabi_dsub>
 800a6b6:	4652      	mov	r2, sl
 800a6b8:	465b      	mov	r3, fp
 800a6ba:	4680      	mov	r8, r0
 800a6bc:	4689      	mov	r9, r1
 800a6be:	f7f6 fa33 	bl	8000b28 <__aeabi_dcmpgt>
 800a6c2:	2800      	cmp	r0, #0
 800a6c4:	f040 8295 	bne.w	800abf2 <_dtoa_r+0x97a>
 800a6c8:	4652      	mov	r2, sl
 800a6ca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a6ce:	4640      	mov	r0, r8
 800a6d0:	4649      	mov	r1, r9
 800a6d2:	f7f6 fa0b 	bl	8000aec <__aeabi_dcmplt>
 800a6d6:	2800      	cmp	r0, #0
 800a6d8:	f040 8289 	bne.w	800abee <_dtoa_r+0x976>
 800a6dc:	ec5b ab19 	vmov	sl, fp, d9
 800a6e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	f2c0 8148 	blt.w	800a978 <_dtoa_r+0x700>
 800a6e8:	9a00      	ldr	r2, [sp, #0]
 800a6ea:	2a0e      	cmp	r2, #14
 800a6ec:	f300 8144 	bgt.w	800a978 <_dtoa_r+0x700>
 800a6f0:	4b67      	ldr	r3, [pc, #412]	; (800a890 <_dtoa_r+0x618>)
 800a6f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a6fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	f280 80d5 	bge.w	800a8ac <_dtoa_r+0x634>
 800a702:	9b03      	ldr	r3, [sp, #12]
 800a704:	2b00      	cmp	r3, #0
 800a706:	f300 80d1 	bgt.w	800a8ac <_dtoa_r+0x634>
 800a70a:	f040 826f 	bne.w	800abec <_dtoa_r+0x974>
 800a70e:	4b65      	ldr	r3, [pc, #404]	; (800a8a4 <_dtoa_r+0x62c>)
 800a710:	2200      	movs	r2, #0
 800a712:	4640      	mov	r0, r8
 800a714:	4649      	mov	r1, r9
 800a716:	f7f5 ff77 	bl	8000608 <__aeabi_dmul>
 800a71a:	4652      	mov	r2, sl
 800a71c:	465b      	mov	r3, fp
 800a71e:	f7f6 f9f9 	bl	8000b14 <__aeabi_dcmpge>
 800a722:	9e03      	ldr	r6, [sp, #12]
 800a724:	4637      	mov	r7, r6
 800a726:	2800      	cmp	r0, #0
 800a728:	f040 8245 	bne.w	800abb6 <_dtoa_r+0x93e>
 800a72c:	9d01      	ldr	r5, [sp, #4]
 800a72e:	2331      	movs	r3, #49	; 0x31
 800a730:	f805 3b01 	strb.w	r3, [r5], #1
 800a734:	9b00      	ldr	r3, [sp, #0]
 800a736:	3301      	adds	r3, #1
 800a738:	9300      	str	r3, [sp, #0]
 800a73a:	e240      	b.n	800abbe <_dtoa_r+0x946>
 800a73c:	07f2      	lsls	r2, r6, #31
 800a73e:	d505      	bpl.n	800a74c <_dtoa_r+0x4d4>
 800a740:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a744:	f7f5 ff60 	bl	8000608 <__aeabi_dmul>
 800a748:	3501      	adds	r5, #1
 800a74a:	2301      	movs	r3, #1
 800a74c:	1076      	asrs	r6, r6, #1
 800a74e:	3708      	adds	r7, #8
 800a750:	e777      	b.n	800a642 <_dtoa_r+0x3ca>
 800a752:	2502      	movs	r5, #2
 800a754:	e779      	b.n	800a64a <_dtoa_r+0x3d2>
 800a756:	9f00      	ldr	r7, [sp, #0]
 800a758:	9e03      	ldr	r6, [sp, #12]
 800a75a:	e794      	b.n	800a686 <_dtoa_r+0x40e>
 800a75c:	9901      	ldr	r1, [sp, #4]
 800a75e:	4b4c      	ldr	r3, [pc, #304]	; (800a890 <_dtoa_r+0x618>)
 800a760:	4431      	add	r1, r6
 800a762:	910d      	str	r1, [sp, #52]	; 0x34
 800a764:	9908      	ldr	r1, [sp, #32]
 800a766:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a76a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a76e:	2900      	cmp	r1, #0
 800a770:	d043      	beq.n	800a7fa <_dtoa_r+0x582>
 800a772:	494d      	ldr	r1, [pc, #308]	; (800a8a8 <_dtoa_r+0x630>)
 800a774:	2000      	movs	r0, #0
 800a776:	f7f6 f871 	bl	800085c <__aeabi_ddiv>
 800a77a:	4652      	mov	r2, sl
 800a77c:	465b      	mov	r3, fp
 800a77e:	f7f5 fd8b 	bl	8000298 <__aeabi_dsub>
 800a782:	9d01      	ldr	r5, [sp, #4]
 800a784:	4682      	mov	sl, r0
 800a786:	468b      	mov	fp, r1
 800a788:	4649      	mov	r1, r9
 800a78a:	4640      	mov	r0, r8
 800a78c:	f7f6 f9ec 	bl	8000b68 <__aeabi_d2iz>
 800a790:	4606      	mov	r6, r0
 800a792:	f7f5 fecf 	bl	8000534 <__aeabi_i2d>
 800a796:	4602      	mov	r2, r0
 800a798:	460b      	mov	r3, r1
 800a79a:	4640      	mov	r0, r8
 800a79c:	4649      	mov	r1, r9
 800a79e:	f7f5 fd7b 	bl	8000298 <__aeabi_dsub>
 800a7a2:	3630      	adds	r6, #48	; 0x30
 800a7a4:	f805 6b01 	strb.w	r6, [r5], #1
 800a7a8:	4652      	mov	r2, sl
 800a7aa:	465b      	mov	r3, fp
 800a7ac:	4680      	mov	r8, r0
 800a7ae:	4689      	mov	r9, r1
 800a7b0:	f7f6 f99c 	bl	8000aec <__aeabi_dcmplt>
 800a7b4:	2800      	cmp	r0, #0
 800a7b6:	d163      	bne.n	800a880 <_dtoa_r+0x608>
 800a7b8:	4642      	mov	r2, r8
 800a7ba:	464b      	mov	r3, r9
 800a7bc:	4936      	ldr	r1, [pc, #216]	; (800a898 <_dtoa_r+0x620>)
 800a7be:	2000      	movs	r0, #0
 800a7c0:	f7f5 fd6a 	bl	8000298 <__aeabi_dsub>
 800a7c4:	4652      	mov	r2, sl
 800a7c6:	465b      	mov	r3, fp
 800a7c8:	f7f6 f990 	bl	8000aec <__aeabi_dcmplt>
 800a7cc:	2800      	cmp	r0, #0
 800a7ce:	f040 80b5 	bne.w	800a93c <_dtoa_r+0x6c4>
 800a7d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7d4:	429d      	cmp	r5, r3
 800a7d6:	d081      	beq.n	800a6dc <_dtoa_r+0x464>
 800a7d8:	4b30      	ldr	r3, [pc, #192]	; (800a89c <_dtoa_r+0x624>)
 800a7da:	2200      	movs	r2, #0
 800a7dc:	4650      	mov	r0, sl
 800a7de:	4659      	mov	r1, fp
 800a7e0:	f7f5 ff12 	bl	8000608 <__aeabi_dmul>
 800a7e4:	4b2d      	ldr	r3, [pc, #180]	; (800a89c <_dtoa_r+0x624>)
 800a7e6:	4682      	mov	sl, r0
 800a7e8:	468b      	mov	fp, r1
 800a7ea:	4640      	mov	r0, r8
 800a7ec:	4649      	mov	r1, r9
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	f7f5 ff0a 	bl	8000608 <__aeabi_dmul>
 800a7f4:	4680      	mov	r8, r0
 800a7f6:	4689      	mov	r9, r1
 800a7f8:	e7c6      	b.n	800a788 <_dtoa_r+0x510>
 800a7fa:	4650      	mov	r0, sl
 800a7fc:	4659      	mov	r1, fp
 800a7fe:	f7f5 ff03 	bl	8000608 <__aeabi_dmul>
 800a802:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a804:	9d01      	ldr	r5, [sp, #4]
 800a806:	930f      	str	r3, [sp, #60]	; 0x3c
 800a808:	4682      	mov	sl, r0
 800a80a:	468b      	mov	fp, r1
 800a80c:	4649      	mov	r1, r9
 800a80e:	4640      	mov	r0, r8
 800a810:	f7f6 f9aa 	bl	8000b68 <__aeabi_d2iz>
 800a814:	4606      	mov	r6, r0
 800a816:	f7f5 fe8d 	bl	8000534 <__aeabi_i2d>
 800a81a:	3630      	adds	r6, #48	; 0x30
 800a81c:	4602      	mov	r2, r0
 800a81e:	460b      	mov	r3, r1
 800a820:	4640      	mov	r0, r8
 800a822:	4649      	mov	r1, r9
 800a824:	f7f5 fd38 	bl	8000298 <__aeabi_dsub>
 800a828:	f805 6b01 	strb.w	r6, [r5], #1
 800a82c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a82e:	429d      	cmp	r5, r3
 800a830:	4680      	mov	r8, r0
 800a832:	4689      	mov	r9, r1
 800a834:	f04f 0200 	mov.w	r2, #0
 800a838:	d124      	bne.n	800a884 <_dtoa_r+0x60c>
 800a83a:	4b1b      	ldr	r3, [pc, #108]	; (800a8a8 <_dtoa_r+0x630>)
 800a83c:	4650      	mov	r0, sl
 800a83e:	4659      	mov	r1, fp
 800a840:	f7f5 fd2c 	bl	800029c <__adddf3>
 800a844:	4602      	mov	r2, r0
 800a846:	460b      	mov	r3, r1
 800a848:	4640      	mov	r0, r8
 800a84a:	4649      	mov	r1, r9
 800a84c:	f7f6 f96c 	bl	8000b28 <__aeabi_dcmpgt>
 800a850:	2800      	cmp	r0, #0
 800a852:	d173      	bne.n	800a93c <_dtoa_r+0x6c4>
 800a854:	4652      	mov	r2, sl
 800a856:	465b      	mov	r3, fp
 800a858:	4913      	ldr	r1, [pc, #76]	; (800a8a8 <_dtoa_r+0x630>)
 800a85a:	2000      	movs	r0, #0
 800a85c:	f7f5 fd1c 	bl	8000298 <__aeabi_dsub>
 800a860:	4602      	mov	r2, r0
 800a862:	460b      	mov	r3, r1
 800a864:	4640      	mov	r0, r8
 800a866:	4649      	mov	r1, r9
 800a868:	f7f6 f940 	bl	8000aec <__aeabi_dcmplt>
 800a86c:	2800      	cmp	r0, #0
 800a86e:	f43f af35 	beq.w	800a6dc <_dtoa_r+0x464>
 800a872:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a874:	1e6b      	subs	r3, r5, #1
 800a876:	930f      	str	r3, [sp, #60]	; 0x3c
 800a878:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a87c:	2b30      	cmp	r3, #48	; 0x30
 800a87e:	d0f8      	beq.n	800a872 <_dtoa_r+0x5fa>
 800a880:	9700      	str	r7, [sp, #0]
 800a882:	e049      	b.n	800a918 <_dtoa_r+0x6a0>
 800a884:	4b05      	ldr	r3, [pc, #20]	; (800a89c <_dtoa_r+0x624>)
 800a886:	f7f5 febf 	bl	8000608 <__aeabi_dmul>
 800a88a:	4680      	mov	r8, r0
 800a88c:	4689      	mov	r9, r1
 800a88e:	e7bd      	b.n	800a80c <_dtoa_r+0x594>
 800a890:	0800c628 	.word	0x0800c628
 800a894:	0800c600 	.word	0x0800c600
 800a898:	3ff00000 	.word	0x3ff00000
 800a89c:	40240000 	.word	0x40240000
 800a8a0:	401c0000 	.word	0x401c0000
 800a8a4:	40140000 	.word	0x40140000
 800a8a8:	3fe00000 	.word	0x3fe00000
 800a8ac:	9d01      	ldr	r5, [sp, #4]
 800a8ae:	4656      	mov	r6, sl
 800a8b0:	465f      	mov	r7, fp
 800a8b2:	4642      	mov	r2, r8
 800a8b4:	464b      	mov	r3, r9
 800a8b6:	4630      	mov	r0, r6
 800a8b8:	4639      	mov	r1, r7
 800a8ba:	f7f5 ffcf 	bl	800085c <__aeabi_ddiv>
 800a8be:	f7f6 f953 	bl	8000b68 <__aeabi_d2iz>
 800a8c2:	4682      	mov	sl, r0
 800a8c4:	f7f5 fe36 	bl	8000534 <__aeabi_i2d>
 800a8c8:	4642      	mov	r2, r8
 800a8ca:	464b      	mov	r3, r9
 800a8cc:	f7f5 fe9c 	bl	8000608 <__aeabi_dmul>
 800a8d0:	4602      	mov	r2, r0
 800a8d2:	460b      	mov	r3, r1
 800a8d4:	4630      	mov	r0, r6
 800a8d6:	4639      	mov	r1, r7
 800a8d8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a8dc:	f7f5 fcdc 	bl	8000298 <__aeabi_dsub>
 800a8e0:	f805 6b01 	strb.w	r6, [r5], #1
 800a8e4:	9e01      	ldr	r6, [sp, #4]
 800a8e6:	9f03      	ldr	r7, [sp, #12]
 800a8e8:	1bae      	subs	r6, r5, r6
 800a8ea:	42b7      	cmp	r7, r6
 800a8ec:	4602      	mov	r2, r0
 800a8ee:	460b      	mov	r3, r1
 800a8f0:	d135      	bne.n	800a95e <_dtoa_r+0x6e6>
 800a8f2:	f7f5 fcd3 	bl	800029c <__adddf3>
 800a8f6:	4642      	mov	r2, r8
 800a8f8:	464b      	mov	r3, r9
 800a8fa:	4606      	mov	r6, r0
 800a8fc:	460f      	mov	r7, r1
 800a8fe:	f7f6 f913 	bl	8000b28 <__aeabi_dcmpgt>
 800a902:	b9d0      	cbnz	r0, 800a93a <_dtoa_r+0x6c2>
 800a904:	4642      	mov	r2, r8
 800a906:	464b      	mov	r3, r9
 800a908:	4630      	mov	r0, r6
 800a90a:	4639      	mov	r1, r7
 800a90c:	f7f6 f8e4 	bl	8000ad8 <__aeabi_dcmpeq>
 800a910:	b110      	cbz	r0, 800a918 <_dtoa_r+0x6a0>
 800a912:	f01a 0f01 	tst.w	sl, #1
 800a916:	d110      	bne.n	800a93a <_dtoa_r+0x6c2>
 800a918:	4620      	mov	r0, r4
 800a91a:	ee18 1a10 	vmov	r1, s16
 800a91e:	f000 fae5 	bl	800aeec <_Bfree>
 800a922:	2300      	movs	r3, #0
 800a924:	9800      	ldr	r0, [sp, #0]
 800a926:	702b      	strb	r3, [r5, #0]
 800a928:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a92a:	3001      	adds	r0, #1
 800a92c:	6018      	str	r0, [r3, #0]
 800a92e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a930:	2b00      	cmp	r3, #0
 800a932:	f43f acf1 	beq.w	800a318 <_dtoa_r+0xa0>
 800a936:	601d      	str	r5, [r3, #0]
 800a938:	e4ee      	b.n	800a318 <_dtoa_r+0xa0>
 800a93a:	9f00      	ldr	r7, [sp, #0]
 800a93c:	462b      	mov	r3, r5
 800a93e:	461d      	mov	r5, r3
 800a940:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a944:	2a39      	cmp	r2, #57	; 0x39
 800a946:	d106      	bne.n	800a956 <_dtoa_r+0x6de>
 800a948:	9a01      	ldr	r2, [sp, #4]
 800a94a:	429a      	cmp	r2, r3
 800a94c:	d1f7      	bne.n	800a93e <_dtoa_r+0x6c6>
 800a94e:	9901      	ldr	r1, [sp, #4]
 800a950:	2230      	movs	r2, #48	; 0x30
 800a952:	3701      	adds	r7, #1
 800a954:	700a      	strb	r2, [r1, #0]
 800a956:	781a      	ldrb	r2, [r3, #0]
 800a958:	3201      	adds	r2, #1
 800a95a:	701a      	strb	r2, [r3, #0]
 800a95c:	e790      	b.n	800a880 <_dtoa_r+0x608>
 800a95e:	4ba6      	ldr	r3, [pc, #664]	; (800abf8 <_dtoa_r+0x980>)
 800a960:	2200      	movs	r2, #0
 800a962:	f7f5 fe51 	bl	8000608 <__aeabi_dmul>
 800a966:	2200      	movs	r2, #0
 800a968:	2300      	movs	r3, #0
 800a96a:	4606      	mov	r6, r0
 800a96c:	460f      	mov	r7, r1
 800a96e:	f7f6 f8b3 	bl	8000ad8 <__aeabi_dcmpeq>
 800a972:	2800      	cmp	r0, #0
 800a974:	d09d      	beq.n	800a8b2 <_dtoa_r+0x63a>
 800a976:	e7cf      	b.n	800a918 <_dtoa_r+0x6a0>
 800a978:	9a08      	ldr	r2, [sp, #32]
 800a97a:	2a00      	cmp	r2, #0
 800a97c:	f000 80d7 	beq.w	800ab2e <_dtoa_r+0x8b6>
 800a980:	9a06      	ldr	r2, [sp, #24]
 800a982:	2a01      	cmp	r2, #1
 800a984:	f300 80ba 	bgt.w	800aafc <_dtoa_r+0x884>
 800a988:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a98a:	2a00      	cmp	r2, #0
 800a98c:	f000 80b2 	beq.w	800aaf4 <_dtoa_r+0x87c>
 800a990:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a994:	9e07      	ldr	r6, [sp, #28]
 800a996:	9d04      	ldr	r5, [sp, #16]
 800a998:	9a04      	ldr	r2, [sp, #16]
 800a99a:	441a      	add	r2, r3
 800a99c:	9204      	str	r2, [sp, #16]
 800a99e:	9a05      	ldr	r2, [sp, #20]
 800a9a0:	2101      	movs	r1, #1
 800a9a2:	441a      	add	r2, r3
 800a9a4:	4620      	mov	r0, r4
 800a9a6:	9205      	str	r2, [sp, #20]
 800a9a8:	f000 fb58 	bl	800b05c <__i2b>
 800a9ac:	4607      	mov	r7, r0
 800a9ae:	2d00      	cmp	r5, #0
 800a9b0:	dd0c      	ble.n	800a9cc <_dtoa_r+0x754>
 800a9b2:	9b05      	ldr	r3, [sp, #20]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	dd09      	ble.n	800a9cc <_dtoa_r+0x754>
 800a9b8:	42ab      	cmp	r3, r5
 800a9ba:	9a04      	ldr	r2, [sp, #16]
 800a9bc:	bfa8      	it	ge
 800a9be:	462b      	movge	r3, r5
 800a9c0:	1ad2      	subs	r2, r2, r3
 800a9c2:	9204      	str	r2, [sp, #16]
 800a9c4:	9a05      	ldr	r2, [sp, #20]
 800a9c6:	1aed      	subs	r5, r5, r3
 800a9c8:	1ad3      	subs	r3, r2, r3
 800a9ca:	9305      	str	r3, [sp, #20]
 800a9cc:	9b07      	ldr	r3, [sp, #28]
 800a9ce:	b31b      	cbz	r3, 800aa18 <_dtoa_r+0x7a0>
 800a9d0:	9b08      	ldr	r3, [sp, #32]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	f000 80af 	beq.w	800ab36 <_dtoa_r+0x8be>
 800a9d8:	2e00      	cmp	r6, #0
 800a9da:	dd13      	ble.n	800aa04 <_dtoa_r+0x78c>
 800a9dc:	4639      	mov	r1, r7
 800a9de:	4632      	mov	r2, r6
 800a9e0:	4620      	mov	r0, r4
 800a9e2:	f000 fbfb 	bl	800b1dc <__pow5mult>
 800a9e6:	ee18 2a10 	vmov	r2, s16
 800a9ea:	4601      	mov	r1, r0
 800a9ec:	4607      	mov	r7, r0
 800a9ee:	4620      	mov	r0, r4
 800a9f0:	f000 fb4a 	bl	800b088 <__multiply>
 800a9f4:	ee18 1a10 	vmov	r1, s16
 800a9f8:	4680      	mov	r8, r0
 800a9fa:	4620      	mov	r0, r4
 800a9fc:	f000 fa76 	bl	800aeec <_Bfree>
 800aa00:	ee08 8a10 	vmov	s16, r8
 800aa04:	9b07      	ldr	r3, [sp, #28]
 800aa06:	1b9a      	subs	r2, r3, r6
 800aa08:	d006      	beq.n	800aa18 <_dtoa_r+0x7a0>
 800aa0a:	ee18 1a10 	vmov	r1, s16
 800aa0e:	4620      	mov	r0, r4
 800aa10:	f000 fbe4 	bl	800b1dc <__pow5mult>
 800aa14:	ee08 0a10 	vmov	s16, r0
 800aa18:	2101      	movs	r1, #1
 800aa1a:	4620      	mov	r0, r4
 800aa1c:	f000 fb1e 	bl	800b05c <__i2b>
 800aa20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	4606      	mov	r6, r0
 800aa26:	f340 8088 	ble.w	800ab3a <_dtoa_r+0x8c2>
 800aa2a:	461a      	mov	r2, r3
 800aa2c:	4601      	mov	r1, r0
 800aa2e:	4620      	mov	r0, r4
 800aa30:	f000 fbd4 	bl	800b1dc <__pow5mult>
 800aa34:	9b06      	ldr	r3, [sp, #24]
 800aa36:	2b01      	cmp	r3, #1
 800aa38:	4606      	mov	r6, r0
 800aa3a:	f340 8081 	ble.w	800ab40 <_dtoa_r+0x8c8>
 800aa3e:	f04f 0800 	mov.w	r8, #0
 800aa42:	6933      	ldr	r3, [r6, #16]
 800aa44:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aa48:	6918      	ldr	r0, [r3, #16]
 800aa4a:	f000 fab7 	bl	800afbc <__hi0bits>
 800aa4e:	f1c0 0020 	rsb	r0, r0, #32
 800aa52:	9b05      	ldr	r3, [sp, #20]
 800aa54:	4418      	add	r0, r3
 800aa56:	f010 001f 	ands.w	r0, r0, #31
 800aa5a:	f000 8092 	beq.w	800ab82 <_dtoa_r+0x90a>
 800aa5e:	f1c0 0320 	rsb	r3, r0, #32
 800aa62:	2b04      	cmp	r3, #4
 800aa64:	f340 808a 	ble.w	800ab7c <_dtoa_r+0x904>
 800aa68:	f1c0 001c 	rsb	r0, r0, #28
 800aa6c:	9b04      	ldr	r3, [sp, #16]
 800aa6e:	4403      	add	r3, r0
 800aa70:	9304      	str	r3, [sp, #16]
 800aa72:	9b05      	ldr	r3, [sp, #20]
 800aa74:	4403      	add	r3, r0
 800aa76:	4405      	add	r5, r0
 800aa78:	9305      	str	r3, [sp, #20]
 800aa7a:	9b04      	ldr	r3, [sp, #16]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	dd07      	ble.n	800aa90 <_dtoa_r+0x818>
 800aa80:	ee18 1a10 	vmov	r1, s16
 800aa84:	461a      	mov	r2, r3
 800aa86:	4620      	mov	r0, r4
 800aa88:	f000 fc02 	bl	800b290 <__lshift>
 800aa8c:	ee08 0a10 	vmov	s16, r0
 800aa90:	9b05      	ldr	r3, [sp, #20]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	dd05      	ble.n	800aaa2 <_dtoa_r+0x82a>
 800aa96:	4631      	mov	r1, r6
 800aa98:	461a      	mov	r2, r3
 800aa9a:	4620      	mov	r0, r4
 800aa9c:	f000 fbf8 	bl	800b290 <__lshift>
 800aaa0:	4606      	mov	r6, r0
 800aaa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d06e      	beq.n	800ab86 <_dtoa_r+0x90e>
 800aaa8:	ee18 0a10 	vmov	r0, s16
 800aaac:	4631      	mov	r1, r6
 800aaae:	f000 fc5f 	bl	800b370 <__mcmp>
 800aab2:	2800      	cmp	r0, #0
 800aab4:	da67      	bge.n	800ab86 <_dtoa_r+0x90e>
 800aab6:	9b00      	ldr	r3, [sp, #0]
 800aab8:	3b01      	subs	r3, #1
 800aaba:	ee18 1a10 	vmov	r1, s16
 800aabe:	9300      	str	r3, [sp, #0]
 800aac0:	220a      	movs	r2, #10
 800aac2:	2300      	movs	r3, #0
 800aac4:	4620      	mov	r0, r4
 800aac6:	f000 fa33 	bl	800af30 <__multadd>
 800aaca:	9b08      	ldr	r3, [sp, #32]
 800aacc:	ee08 0a10 	vmov	s16, r0
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	f000 81b1 	beq.w	800ae38 <_dtoa_r+0xbc0>
 800aad6:	2300      	movs	r3, #0
 800aad8:	4639      	mov	r1, r7
 800aada:	220a      	movs	r2, #10
 800aadc:	4620      	mov	r0, r4
 800aade:	f000 fa27 	bl	800af30 <__multadd>
 800aae2:	9b02      	ldr	r3, [sp, #8]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	4607      	mov	r7, r0
 800aae8:	f300 808e 	bgt.w	800ac08 <_dtoa_r+0x990>
 800aaec:	9b06      	ldr	r3, [sp, #24]
 800aaee:	2b02      	cmp	r3, #2
 800aaf0:	dc51      	bgt.n	800ab96 <_dtoa_r+0x91e>
 800aaf2:	e089      	b.n	800ac08 <_dtoa_r+0x990>
 800aaf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aaf6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aafa:	e74b      	b.n	800a994 <_dtoa_r+0x71c>
 800aafc:	9b03      	ldr	r3, [sp, #12]
 800aafe:	1e5e      	subs	r6, r3, #1
 800ab00:	9b07      	ldr	r3, [sp, #28]
 800ab02:	42b3      	cmp	r3, r6
 800ab04:	bfbf      	itttt	lt
 800ab06:	9b07      	ldrlt	r3, [sp, #28]
 800ab08:	9607      	strlt	r6, [sp, #28]
 800ab0a:	1af2      	sublt	r2, r6, r3
 800ab0c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ab0e:	bfb6      	itet	lt
 800ab10:	189b      	addlt	r3, r3, r2
 800ab12:	1b9e      	subge	r6, r3, r6
 800ab14:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ab16:	9b03      	ldr	r3, [sp, #12]
 800ab18:	bfb8      	it	lt
 800ab1a:	2600      	movlt	r6, #0
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	bfb7      	itett	lt
 800ab20:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ab24:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ab28:	1a9d      	sublt	r5, r3, r2
 800ab2a:	2300      	movlt	r3, #0
 800ab2c:	e734      	b.n	800a998 <_dtoa_r+0x720>
 800ab2e:	9e07      	ldr	r6, [sp, #28]
 800ab30:	9d04      	ldr	r5, [sp, #16]
 800ab32:	9f08      	ldr	r7, [sp, #32]
 800ab34:	e73b      	b.n	800a9ae <_dtoa_r+0x736>
 800ab36:	9a07      	ldr	r2, [sp, #28]
 800ab38:	e767      	b.n	800aa0a <_dtoa_r+0x792>
 800ab3a:	9b06      	ldr	r3, [sp, #24]
 800ab3c:	2b01      	cmp	r3, #1
 800ab3e:	dc18      	bgt.n	800ab72 <_dtoa_r+0x8fa>
 800ab40:	f1ba 0f00 	cmp.w	sl, #0
 800ab44:	d115      	bne.n	800ab72 <_dtoa_r+0x8fa>
 800ab46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ab4a:	b993      	cbnz	r3, 800ab72 <_dtoa_r+0x8fa>
 800ab4c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ab50:	0d1b      	lsrs	r3, r3, #20
 800ab52:	051b      	lsls	r3, r3, #20
 800ab54:	b183      	cbz	r3, 800ab78 <_dtoa_r+0x900>
 800ab56:	9b04      	ldr	r3, [sp, #16]
 800ab58:	3301      	adds	r3, #1
 800ab5a:	9304      	str	r3, [sp, #16]
 800ab5c:	9b05      	ldr	r3, [sp, #20]
 800ab5e:	3301      	adds	r3, #1
 800ab60:	9305      	str	r3, [sp, #20]
 800ab62:	f04f 0801 	mov.w	r8, #1
 800ab66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	f47f af6a 	bne.w	800aa42 <_dtoa_r+0x7ca>
 800ab6e:	2001      	movs	r0, #1
 800ab70:	e76f      	b.n	800aa52 <_dtoa_r+0x7da>
 800ab72:	f04f 0800 	mov.w	r8, #0
 800ab76:	e7f6      	b.n	800ab66 <_dtoa_r+0x8ee>
 800ab78:	4698      	mov	r8, r3
 800ab7a:	e7f4      	b.n	800ab66 <_dtoa_r+0x8ee>
 800ab7c:	f43f af7d 	beq.w	800aa7a <_dtoa_r+0x802>
 800ab80:	4618      	mov	r0, r3
 800ab82:	301c      	adds	r0, #28
 800ab84:	e772      	b.n	800aa6c <_dtoa_r+0x7f4>
 800ab86:	9b03      	ldr	r3, [sp, #12]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	dc37      	bgt.n	800abfc <_dtoa_r+0x984>
 800ab8c:	9b06      	ldr	r3, [sp, #24]
 800ab8e:	2b02      	cmp	r3, #2
 800ab90:	dd34      	ble.n	800abfc <_dtoa_r+0x984>
 800ab92:	9b03      	ldr	r3, [sp, #12]
 800ab94:	9302      	str	r3, [sp, #8]
 800ab96:	9b02      	ldr	r3, [sp, #8]
 800ab98:	b96b      	cbnz	r3, 800abb6 <_dtoa_r+0x93e>
 800ab9a:	4631      	mov	r1, r6
 800ab9c:	2205      	movs	r2, #5
 800ab9e:	4620      	mov	r0, r4
 800aba0:	f000 f9c6 	bl	800af30 <__multadd>
 800aba4:	4601      	mov	r1, r0
 800aba6:	4606      	mov	r6, r0
 800aba8:	ee18 0a10 	vmov	r0, s16
 800abac:	f000 fbe0 	bl	800b370 <__mcmp>
 800abb0:	2800      	cmp	r0, #0
 800abb2:	f73f adbb 	bgt.w	800a72c <_dtoa_r+0x4b4>
 800abb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abb8:	9d01      	ldr	r5, [sp, #4]
 800abba:	43db      	mvns	r3, r3
 800abbc:	9300      	str	r3, [sp, #0]
 800abbe:	f04f 0800 	mov.w	r8, #0
 800abc2:	4631      	mov	r1, r6
 800abc4:	4620      	mov	r0, r4
 800abc6:	f000 f991 	bl	800aeec <_Bfree>
 800abca:	2f00      	cmp	r7, #0
 800abcc:	f43f aea4 	beq.w	800a918 <_dtoa_r+0x6a0>
 800abd0:	f1b8 0f00 	cmp.w	r8, #0
 800abd4:	d005      	beq.n	800abe2 <_dtoa_r+0x96a>
 800abd6:	45b8      	cmp	r8, r7
 800abd8:	d003      	beq.n	800abe2 <_dtoa_r+0x96a>
 800abda:	4641      	mov	r1, r8
 800abdc:	4620      	mov	r0, r4
 800abde:	f000 f985 	bl	800aeec <_Bfree>
 800abe2:	4639      	mov	r1, r7
 800abe4:	4620      	mov	r0, r4
 800abe6:	f000 f981 	bl	800aeec <_Bfree>
 800abea:	e695      	b.n	800a918 <_dtoa_r+0x6a0>
 800abec:	2600      	movs	r6, #0
 800abee:	4637      	mov	r7, r6
 800abf0:	e7e1      	b.n	800abb6 <_dtoa_r+0x93e>
 800abf2:	9700      	str	r7, [sp, #0]
 800abf4:	4637      	mov	r7, r6
 800abf6:	e599      	b.n	800a72c <_dtoa_r+0x4b4>
 800abf8:	40240000 	.word	0x40240000
 800abfc:	9b08      	ldr	r3, [sp, #32]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	f000 80ca 	beq.w	800ad98 <_dtoa_r+0xb20>
 800ac04:	9b03      	ldr	r3, [sp, #12]
 800ac06:	9302      	str	r3, [sp, #8]
 800ac08:	2d00      	cmp	r5, #0
 800ac0a:	dd05      	ble.n	800ac18 <_dtoa_r+0x9a0>
 800ac0c:	4639      	mov	r1, r7
 800ac0e:	462a      	mov	r2, r5
 800ac10:	4620      	mov	r0, r4
 800ac12:	f000 fb3d 	bl	800b290 <__lshift>
 800ac16:	4607      	mov	r7, r0
 800ac18:	f1b8 0f00 	cmp.w	r8, #0
 800ac1c:	d05b      	beq.n	800acd6 <_dtoa_r+0xa5e>
 800ac1e:	6879      	ldr	r1, [r7, #4]
 800ac20:	4620      	mov	r0, r4
 800ac22:	f000 f923 	bl	800ae6c <_Balloc>
 800ac26:	4605      	mov	r5, r0
 800ac28:	b928      	cbnz	r0, 800ac36 <_dtoa_r+0x9be>
 800ac2a:	4b87      	ldr	r3, [pc, #540]	; (800ae48 <_dtoa_r+0xbd0>)
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ac32:	f7ff bb3b 	b.w	800a2ac <_dtoa_r+0x34>
 800ac36:	693a      	ldr	r2, [r7, #16]
 800ac38:	3202      	adds	r2, #2
 800ac3a:	0092      	lsls	r2, r2, #2
 800ac3c:	f107 010c 	add.w	r1, r7, #12
 800ac40:	300c      	adds	r0, #12
 800ac42:	f7fe fd6b 	bl	800971c <memcpy>
 800ac46:	2201      	movs	r2, #1
 800ac48:	4629      	mov	r1, r5
 800ac4a:	4620      	mov	r0, r4
 800ac4c:	f000 fb20 	bl	800b290 <__lshift>
 800ac50:	9b01      	ldr	r3, [sp, #4]
 800ac52:	f103 0901 	add.w	r9, r3, #1
 800ac56:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ac5a:	4413      	add	r3, r2
 800ac5c:	9305      	str	r3, [sp, #20]
 800ac5e:	f00a 0301 	and.w	r3, sl, #1
 800ac62:	46b8      	mov	r8, r7
 800ac64:	9304      	str	r3, [sp, #16]
 800ac66:	4607      	mov	r7, r0
 800ac68:	4631      	mov	r1, r6
 800ac6a:	ee18 0a10 	vmov	r0, s16
 800ac6e:	f7ff fa77 	bl	800a160 <quorem>
 800ac72:	4641      	mov	r1, r8
 800ac74:	9002      	str	r0, [sp, #8]
 800ac76:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ac7a:	ee18 0a10 	vmov	r0, s16
 800ac7e:	f000 fb77 	bl	800b370 <__mcmp>
 800ac82:	463a      	mov	r2, r7
 800ac84:	9003      	str	r0, [sp, #12]
 800ac86:	4631      	mov	r1, r6
 800ac88:	4620      	mov	r0, r4
 800ac8a:	f000 fb8d 	bl	800b3a8 <__mdiff>
 800ac8e:	68c2      	ldr	r2, [r0, #12]
 800ac90:	f109 3bff 	add.w	fp, r9, #4294967295
 800ac94:	4605      	mov	r5, r0
 800ac96:	bb02      	cbnz	r2, 800acda <_dtoa_r+0xa62>
 800ac98:	4601      	mov	r1, r0
 800ac9a:	ee18 0a10 	vmov	r0, s16
 800ac9e:	f000 fb67 	bl	800b370 <__mcmp>
 800aca2:	4602      	mov	r2, r0
 800aca4:	4629      	mov	r1, r5
 800aca6:	4620      	mov	r0, r4
 800aca8:	9207      	str	r2, [sp, #28]
 800acaa:	f000 f91f 	bl	800aeec <_Bfree>
 800acae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800acb2:	ea43 0102 	orr.w	r1, r3, r2
 800acb6:	9b04      	ldr	r3, [sp, #16]
 800acb8:	430b      	orrs	r3, r1
 800acba:	464d      	mov	r5, r9
 800acbc:	d10f      	bne.n	800acde <_dtoa_r+0xa66>
 800acbe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800acc2:	d02a      	beq.n	800ad1a <_dtoa_r+0xaa2>
 800acc4:	9b03      	ldr	r3, [sp, #12]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	dd02      	ble.n	800acd0 <_dtoa_r+0xa58>
 800acca:	9b02      	ldr	r3, [sp, #8]
 800accc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800acd0:	f88b a000 	strb.w	sl, [fp]
 800acd4:	e775      	b.n	800abc2 <_dtoa_r+0x94a>
 800acd6:	4638      	mov	r0, r7
 800acd8:	e7ba      	b.n	800ac50 <_dtoa_r+0x9d8>
 800acda:	2201      	movs	r2, #1
 800acdc:	e7e2      	b.n	800aca4 <_dtoa_r+0xa2c>
 800acde:	9b03      	ldr	r3, [sp, #12]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	db04      	blt.n	800acee <_dtoa_r+0xa76>
 800ace4:	9906      	ldr	r1, [sp, #24]
 800ace6:	430b      	orrs	r3, r1
 800ace8:	9904      	ldr	r1, [sp, #16]
 800acea:	430b      	orrs	r3, r1
 800acec:	d122      	bne.n	800ad34 <_dtoa_r+0xabc>
 800acee:	2a00      	cmp	r2, #0
 800acf0:	ddee      	ble.n	800acd0 <_dtoa_r+0xa58>
 800acf2:	ee18 1a10 	vmov	r1, s16
 800acf6:	2201      	movs	r2, #1
 800acf8:	4620      	mov	r0, r4
 800acfa:	f000 fac9 	bl	800b290 <__lshift>
 800acfe:	4631      	mov	r1, r6
 800ad00:	ee08 0a10 	vmov	s16, r0
 800ad04:	f000 fb34 	bl	800b370 <__mcmp>
 800ad08:	2800      	cmp	r0, #0
 800ad0a:	dc03      	bgt.n	800ad14 <_dtoa_r+0xa9c>
 800ad0c:	d1e0      	bne.n	800acd0 <_dtoa_r+0xa58>
 800ad0e:	f01a 0f01 	tst.w	sl, #1
 800ad12:	d0dd      	beq.n	800acd0 <_dtoa_r+0xa58>
 800ad14:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ad18:	d1d7      	bne.n	800acca <_dtoa_r+0xa52>
 800ad1a:	2339      	movs	r3, #57	; 0x39
 800ad1c:	f88b 3000 	strb.w	r3, [fp]
 800ad20:	462b      	mov	r3, r5
 800ad22:	461d      	mov	r5, r3
 800ad24:	3b01      	subs	r3, #1
 800ad26:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ad2a:	2a39      	cmp	r2, #57	; 0x39
 800ad2c:	d071      	beq.n	800ae12 <_dtoa_r+0xb9a>
 800ad2e:	3201      	adds	r2, #1
 800ad30:	701a      	strb	r2, [r3, #0]
 800ad32:	e746      	b.n	800abc2 <_dtoa_r+0x94a>
 800ad34:	2a00      	cmp	r2, #0
 800ad36:	dd07      	ble.n	800ad48 <_dtoa_r+0xad0>
 800ad38:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ad3c:	d0ed      	beq.n	800ad1a <_dtoa_r+0xaa2>
 800ad3e:	f10a 0301 	add.w	r3, sl, #1
 800ad42:	f88b 3000 	strb.w	r3, [fp]
 800ad46:	e73c      	b.n	800abc2 <_dtoa_r+0x94a>
 800ad48:	9b05      	ldr	r3, [sp, #20]
 800ad4a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ad4e:	4599      	cmp	r9, r3
 800ad50:	d047      	beq.n	800ade2 <_dtoa_r+0xb6a>
 800ad52:	ee18 1a10 	vmov	r1, s16
 800ad56:	2300      	movs	r3, #0
 800ad58:	220a      	movs	r2, #10
 800ad5a:	4620      	mov	r0, r4
 800ad5c:	f000 f8e8 	bl	800af30 <__multadd>
 800ad60:	45b8      	cmp	r8, r7
 800ad62:	ee08 0a10 	vmov	s16, r0
 800ad66:	f04f 0300 	mov.w	r3, #0
 800ad6a:	f04f 020a 	mov.w	r2, #10
 800ad6e:	4641      	mov	r1, r8
 800ad70:	4620      	mov	r0, r4
 800ad72:	d106      	bne.n	800ad82 <_dtoa_r+0xb0a>
 800ad74:	f000 f8dc 	bl	800af30 <__multadd>
 800ad78:	4680      	mov	r8, r0
 800ad7a:	4607      	mov	r7, r0
 800ad7c:	f109 0901 	add.w	r9, r9, #1
 800ad80:	e772      	b.n	800ac68 <_dtoa_r+0x9f0>
 800ad82:	f000 f8d5 	bl	800af30 <__multadd>
 800ad86:	4639      	mov	r1, r7
 800ad88:	4680      	mov	r8, r0
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	220a      	movs	r2, #10
 800ad8e:	4620      	mov	r0, r4
 800ad90:	f000 f8ce 	bl	800af30 <__multadd>
 800ad94:	4607      	mov	r7, r0
 800ad96:	e7f1      	b.n	800ad7c <_dtoa_r+0xb04>
 800ad98:	9b03      	ldr	r3, [sp, #12]
 800ad9a:	9302      	str	r3, [sp, #8]
 800ad9c:	9d01      	ldr	r5, [sp, #4]
 800ad9e:	ee18 0a10 	vmov	r0, s16
 800ada2:	4631      	mov	r1, r6
 800ada4:	f7ff f9dc 	bl	800a160 <quorem>
 800ada8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800adac:	9b01      	ldr	r3, [sp, #4]
 800adae:	f805 ab01 	strb.w	sl, [r5], #1
 800adb2:	1aea      	subs	r2, r5, r3
 800adb4:	9b02      	ldr	r3, [sp, #8]
 800adb6:	4293      	cmp	r3, r2
 800adb8:	dd09      	ble.n	800adce <_dtoa_r+0xb56>
 800adba:	ee18 1a10 	vmov	r1, s16
 800adbe:	2300      	movs	r3, #0
 800adc0:	220a      	movs	r2, #10
 800adc2:	4620      	mov	r0, r4
 800adc4:	f000 f8b4 	bl	800af30 <__multadd>
 800adc8:	ee08 0a10 	vmov	s16, r0
 800adcc:	e7e7      	b.n	800ad9e <_dtoa_r+0xb26>
 800adce:	9b02      	ldr	r3, [sp, #8]
 800add0:	2b00      	cmp	r3, #0
 800add2:	bfc8      	it	gt
 800add4:	461d      	movgt	r5, r3
 800add6:	9b01      	ldr	r3, [sp, #4]
 800add8:	bfd8      	it	le
 800adda:	2501      	movle	r5, #1
 800addc:	441d      	add	r5, r3
 800adde:	f04f 0800 	mov.w	r8, #0
 800ade2:	ee18 1a10 	vmov	r1, s16
 800ade6:	2201      	movs	r2, #1
 800ade8:	4620      	mov	r0, r4
 800adea:	f000 fa51 	bl	800b290 <__lshift>
 800adee:	4631      	mov	r1, r6
 800adf0:	ee08 0a10 	vmov	s16, r0
 800adf4:	f000 fabc 	bl	800b370 <__mcmp>
 800adf8:	2800      	cmp	r0, #0
 800adfa:	dc91      	bgt.n	800ad20 <_dtoa_r+0xaa8>
 800adfc:	d102      	bne.n	800ae04 <_dtoa_r+0xb8c>
 800adfe:	f01a 0f01 	tst.w	sl, #1
 800ae02:	d18d      	bne.n	800ad20 <_dtoa_r+0xaa8>
 800ae04:	462b      	mov	r3, r5
 800ae06:	461d      	mov	r5, r3
 800ae08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae0c:	2a30      	cmp	r2, #48	; 0x30
 800ae0e:	d0fa      	beq.n	800ae06 <_dtoa_r+0xb8e>
 800ae10:	e6d7      	b.n	800abc2 <_dtoa_r+0x94a>
 800ae12:	9a01      	ldr	r2, [sp, #4]
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d184      	bne.n	800ad22 <_dtoa_r+0xaaa>
 800ae18:	9b00      	ldr	r3, [sp, #0]
 800ae1a:	3301      	adds	r3, #1
 800ae1c:	9300      	str	r3, [sp, #0]
 800ae1e:	2331      	movs	r3, #49	; 0x31
 800ae20:	7013      	strb	r3, [r2, #0]
 800ae22:	e6ce      	b.n	800abc2 <_dtoa_r+0x94a>
 800ae24:	4b09      	ldr	r3, [pc, #36]	; (800ae4c <_dtoa_r+0xbd4>)
 800ae26:	f7ff ba95 	b.w	800a354 <_dtoa_r+0xdc>
 800ae2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	f47f aa6e 	bne.w	800a30e <_dtoa_r+0x96>
 800ae32:	4b07      	ldr	r3, [pc, #28]	; (800ae50 <_dtoa_r+0xbd8>)
 800ae34:	f7ff ba8e 	b.w	800a354 <_dtoa_r+0xdc>
 800ae38:	9b02      	ldr	r3, [sp, #8]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	dcae      	bgt.n	800ad9c <_dtoa_r+0xb24>
 800ae3e:	9b06      	ldr	r3, [sp, #24]
 800ae40:	2b02      	cmp	r3, #2
 800ae42:	f73f aea8 	bgt.w	800ab96 <_dtoa_r+0x91e>
 800ae46:	e7a9      	b.n	800ad9c <_dtoa_r+0xb24>
 800ae48:	0800c590 	.word	0x0800c590
 800ae4c:	0800c3ec 	.word	0x0800c3ec
 800ae50:	0800c511 	.word	0x0800c511

0800ae54 <_localeconv_r>:
 800ae54:	4800      	ldr	r0, [pc, #0]	; (800ae58 <_localeconv_r+0x4>)
 800ae56:	4770      	bx	lr
 800ae58:	20000284 	.word	0x20000284

0800ae5c <malloc>:
 800ae5c:	4b02      	ldr	r3, [pc, #8]	; (800ae68 <malloc+0xc>)
 800ae5e:	4601      	mov	r1, r0
 800ae60:	6818      	ldr	r0, [r3, #0]
 800ae62:	f000 bc09 	b.w	800b678 <_malloc_r>
 800ae66:	bf00      	nop
 800ae68:	20000130 	.word	0x20000130

0800ae6c <_Balloc>:
 800ae6c:	b570      	push	{r4, r5, r6, lr}
 800ae6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ae70:	4604      	mov	r4, r0
 800ae72:	460d      	mov	r5, r1
 800ae74:	b976      	cbnz	r6, 800ae94 <_Balloc+0x28>
 800ae76:	2010      	movs	r0, #16
 800ae78:	f7ff fff0 	bl	800ae5c <malloc>
 800ae7c:	4602      	mov	r2, r0
 800ae7e:	6260      	str	r0, [r4, #36]	; 0x24
 800ae80:	b920      	cbnz	r0, 800ae8c <_Balloc+0x20>
 800ae82:	4b18      	ldr	r3, [pc, #96]	; (800aee4 <_Balloc+0x78>)
 800ae84:	4818      	ldr	r0, [pc, #96]	; (800aee8 <_Balloc+0x7c>)
 800ae86:	2166      	movs	r1, #102	; 0x66
 800ae88:	f000 fc7a 	bl	800b780 <__assert_func>
 800ae8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae90:	6006      	str	r6, [r0, #0]
 800ae92:	60c6      	str	r6, [r0, #12]
 800ae94:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ae96:	68f3      	ldr	r3, [r6, #12]
 800ae98:	b183      	cbz	r3, 800aebc <_Balloc+0x50>
 800ae9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae9c:	68db      	ldr	r3, [r3, #12]
 800ae9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aea2:	b9b8      	cbnz	r0, 800aed4 <_Balloc+0x68>
 800aea4:	2101      	movs	r1, #1
 800aea6:	fa01 f605 	lsl.w	r6, r1, r5
 800aeaa:	1d72      	adds	r2, r6, #5
 800aeac:	0092      	lsls	r2, r2, #2
 800aeae:	4620      	mov	r0, r4
 800aeb0:	f000 fb60 	bl	800b574 <_calloc_r>
 800aeb4:	b160      	cbz	r0, 800aed0 <_Balloc+0x64>
 800aeb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aeba:	e00e      	b.n	800aeda <_Balloc+0x6e>
 800aebc:	2221      	movs	r2, #33	; 0x21
 800aebe:	2104      	movs	r1, #4
 800aec0:	4620      	mov	r0, r4
 800aec2:	f000 fb57 	bl	800b574 <_calloc_r>
 800aec6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aec8:	60f0      	str	r0, [r6, #12]
 800aeca:	68db      	ldr	r3, [r3, #12]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d1e4      	bne.n	800ae9a <_Balloc+0x2e>
 800aed0:	2000      	movs	r0, #0
 800aed2:	bd70      	pop	{r4, r5, r6, pc}
 800aed4:	6802      	ldr	r2, [r0, #0]
 800aed6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aeda:	2300      	movs	r3, #0
 800aedc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aee0:	e7f7      	b.n	800aed2 <_Balloc+0x66>
 800aee2:	bf00      	nop
 800aee4:	0800c51e 	.word	0x0800c51e
 800aee8:	0800c5a1 	.word	0x0800c5a1

0800aeec <_Bfree>:
 800aeec:	b570      	push	{r4, r5, r6, lr}
 800aeee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aef0:	4605      	mov	r5, r0
 800aef2:	460c      	mov	r4, r1
 800aef4:	b976      	cbnz	r6, 800af14 <_Bfree+0x28>
 800aef6:	2010      	movs	r0, #16
 800aef8:	f7ff ffb0 	bl	800ae5c <malloc>
 800aefc:	4602      	mov	r2, r0
 800aefe:	6268      	str	r0, [r5, #36]	; 0x24
 800af00:	b920      	cbnz	r0, 800af0c <_Bfree+0x20>
 800af02:	4b09      	ldr	r3, [pc, #36]	; (800af28 <_Bfree+0x3c>)
 800af04:	4809      	ldr	r0, [pc, #36]	; (800af2c <_Bfree+0x40>)
 800af06:	218a      	movs	r1, #138	; 0x8a
 800af08:	f000 fc3a 	bl	800b780 <__assert_func>
 800af0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af10:	6006      	str	r6, [r0, #0]
 800af12:	60c6      	str	r6, [r0, #12]
 800af14:	b13c      	cbz	r4, 800af26 <_Bfree+0x3a>
 800af16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800af18:	6862      	ldr	r2, [r4, #4]
 800af1a:	68db      	ldr	r3, [r3, #12]
 800af1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800af20:	6021      	str	r1, [r4, #0]
 800af22:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800af26:	bd70      	pop	{r4, r5, r6, pc}
 800af28:	0800c51e 	.word	0x0800c51e
 800af2c:	0800c5a1 	.word	0x0800c5a1

0800af30 <__multadd>:
 800af30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af34:	690d      	ldr	r5, [r1, #16]
 800af36:	4607      	mov	r7, r0
 800af38:	460c      	mov	r4, r1
 800af3a:	461e      	mov	r6, r3
 800af3c:	f101 0c14 	add.w	ip, r1, #20
 800af40:	2000      	movs	r0, #0
 800af42:	f8dc 3000 	ldr.w	r3, [ip]
 800af46:	b299      	uxth	r1, r3
 800af48:	fb02 6101 	mla	r1, r2, r1, r6
 800af4c:	0c1e      	lsrs	r6, r3, #16
 800af4e:	0c0b      	lsrs	r3, r1, #16
 800af50:	fb02 3306 	mla	r3, r2, r6, r3
 800af54:	b289      	uxth	r1, r1
 800af56:	3001      	adds	r0, #1
 800af58:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800af5c:	4285      	cmp	r5, r0
 800af5e:	f84c 1b04 	str.w	r1, [ip], #4
 800af62:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800af66:	dcec      	bgt.n	800af42 <__multadd+0x12>
 800af68:	b30e      	cbz	r6, 800afae <__multadd+0x7e>
 800af6a:	68a3      	ldr	r3, [r4, #8]
 800af6c:	42ab      	cmp	r3, r5
 800af6e:	dc19      	bgt.n	800afa4 <__multadd+0x74>
 800af70:	6861      	ldr	r1, [r4, #4]
 800af72:	4638      	mov	r0, r7
 800af74:	3101      	adds	r1, #1
 800af76:	f7ff ff79 	bl	800ae6c <_Balloc>
 800af7a:	4680      	mov	r8, r0
 800af7c:	b928      	cbnz	r0, 800af8a <__multadd+0x5a>
 800af7e:	4602      	mov	r2, r0
 800af80:	4b0c      	ldr	r3, [pc, #48]	; (800afb4 <__multadd+0x84>)
 800af82:	480d      	ldr	r0, [pc, #52]	; (800afb8 <__multadd+0x88>)
 800af84:	21b5      	movs	r1, #181	; 0xb5
 800af86:	f000 fbfb 	bl	800b780 <__assert_func>
 800af8a:	6922      	ldr	r2, [r4, #16]
 800af8c:	3202      	adds	r2, #2
 800af8e:	f104 010c 	add.w	r1, r4, #12
 800af92:	0092      	lsls	r2, r2, #2
 800af94:	300c      	adds	r0, #12
 800af96:	f7fe fbc1 	bl	800971c <memcpy>
 800af9a:	4621      	mov	r1, r4
 800af9c:	4638      	mov	r0, r7
 800af9e:	f7ff ffa5 	bl	800aeec <_Bfree>
 800afa2:	4644      	mov	r4, r8
 800afa4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800afa8:	3501      	adds	r5, #1
 800afaa:	615e      	str	r6, [r3, #20]
 800afac:	6125      	str	r5, [r4, #16]
 800afae:	4620      	mov	r0, r4
 800afb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afb4:	0800c590 	.word	0x0800c590
 800afb8:	0800c5a1 	.word	0x0800c5a1

0800afbc <__hi0bits>:
 800afbc:	0c03      	lsrs	r3, r0, #16
 800afbe:	041b      	lsls	r3, r3, #16
 800afc0:	b9d3      	cbnz	r3, 800aff8 <__hi0bits+0x3c>
 800afc2:	0400      	lsls	r0, r0, #16
 800afc4:	2310      	movs	r3, #16
 800afc6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800afca:	bf04      	itt	eq
 800afcc:	0200      	lsleq	r0, r0, #8
 800afce:	3308      	addeq	r3, #8
 800afd0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800afd4:	bf04      	itt	eq
 800afd6:	0100      	lsleq	r0, r0, #4
 800afd8:	3304      	addeq	r3, #4
 800afda:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800afde:	bf04      	itt	eq
 800afe0:	0080      	lsleq	r0, r0, #2
 800afe2:	3302      	addeq	r3, #2
 800afe4:	2800      	cmp	r0, #0
 800afe6:	db05      	blt.n	800aff4 <__hi0bits+0x38>
 800afe8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800afec:	f103 0301 	add.w	r3, r3, #1
 800aff0:	bf08      	it	eq
 800aff2:	2320      	moveq	r3, #32
 800aff4:	4618      	mov	r0, r3
 800aff6:	4770      	bx	lr
 800aff8:	2300      	movs	r3, #0
 800affa:	e7e4      	b.n	800afc6 <__hi0bits+0xa>

0800affc <__lo0bits>:
 800affc:	6803      	ldr	r3, [r0, #0]
 800affe:	f013 0207 	ands.w	r2, r3, #7
 800b002:	4601      	mov	r1, r0
 800b004:	d00b      	beq.n	800b01e <__lo0bits+0x22>
 800b006:	07da      	lsls	r2, r3, #31
 800b008:	d423      	bmi.n	800b052 <__lo0bits+0x56>
 800b00a:	0798      	lsls	r0, r3, #30
 800b00c:	bf49      	itett	mi
 800b00e:	085b      	lsrmi	r3, r3, #1
 800b010:	089b      	lsrpl	r3, r3, #2
 800b012:	2001      	movmi	r0, #1
 800b014:	600b      	strmi	r3, [r1, #0]
 800b016:	bf5c      	itt	pl
 800b018:	600b      	strpl	r3, [r1, #0]
 800b01a:	2002      	movpl	r0, #2
 800b01c:	4770      	bx	lr
 800b01e:	b298      	uxth	r0, r3
 800b020:	b9a8      	cbnz	r0, 800b04e <__lo0bits+0x52>
 800b022:	0c1b      	lsrs	r3, r3, #16
 800b024:	2010      	movs	r0, #16
 800b026:	b2da      	uxtb	r2, r3
 800b028:	b90a      	cbnz	r2, 800b02e <__lo0bits+0x32>
 800b02a:	3008      	adds	r0, #8
 800b02c:	0a1b      	lsrs	r3, r3, #8
 800b02e:	071a      	lsls	r2, r3, #28
 800b030:	bf04      	itt	eq
 800b032:	091b      	lsreq	r3, r3, #4
 800b034:	3004      	addeq	r0, #4
 800b036:	079a      	lsls	r2, r3, #30
 800b038:	bf04      	itt	eq
 800b03a:	089b      	lsreq	r3, r3, #2
 800b03c:	3002      	addeq	r0, #2
 800b03e:	07da      	lsls	r2, r3, #31
 800b040:	d403      	bmi.n	800b04a <__lo0bits+0x4e>
 800b042:	085b      	lsrs	r3, r3, #1
 800b044:	f100 0001 	add.w	r0, r0, #1
 800b048:	d005      	beq.n	800b056 <__lo0bits+0x5a>
 800b04a:	600b      	str	r3, [r1, #0]
 800b04c:	4770      	bx	lr
 800b04e:	4610      	mov	r0, r2
 800b050:	e7e9      	b.n	800b026 <__lo0bits+0x2a>
 800b052:	2000      	movs	r0, #0
 800b054:	4770      	bx	lr
 800b056:	2020      	movs	r0, #32
 800b058:	4770      	bx	lr
	...

0800b05c <__i2b>:
 800b05c:	b510      	push	{r4, lr}
 800b05e:	460c      	mov	r4, r1
 800b060:	2101      	movs	r1, #1
 800b062:	f7ff ff03 	bl	800ae6c <_Balloc>
 800b066:	4602      	mov	r2, r0
 800b068:	b928      	cbnz	r0, 800b076 <__i2b+0x1a>
 800b06a:	4b05      	ldr	r3, [pc, #20]	; (800b080 <__i2b+0x24>)
 800b06c:	4805      	ldr	r0, [pc, #20]	; (800b084 <__i2b+0x28>)
 800b06e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b072:	f000 fb85 	bl	800b780 <__assert_func>
 800b076:	2301      	movs	r3, #1
 800b078:	6144      	str	r4, [r0, #20]
 800b07a:	6103      	str	r3, [r0, #16]
 800b07c:	bd10      	pop	{r4, pc}
 800b07e:	bf00      	nop
 800b080:	0800c590 	.word	0x0800c590
 800b084:	0800c5a1 	.word	0x0800c5a1

0800b088 <__multiply>:
 800b088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b08c:	4691      	mov	r9, r2
 800b08e:	690a      	ldr	r2, [r1, #16]
 800b090:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b094:	429a      	cmp	r2, r3
 800b096:	bfb8      	it	lt
 800b098:	460b      	movlt	r3, r1
 800b09a:	460c      	mov	r4, r1
 800b09c:	bfbc      	itt	lt
 800b09e:	464c      	movlt	r4, r9
 800b0a0:	4699      	movlt	r9, r3
 800b0a2:	6927      	ldr	r7, [r4, #16]
 800b0a4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b0a8:	68a3      	ldr	r3, [r4, #8]
 800b0aa:	6861      	ldr	r1, [r4, #4]
 800b0ac:	eb07 060a 	add.w	r6, r7, sl
 800b0b0:	42b3      	cmp	r3, r6
 800b0b2:	b085      	sub	sp, #20
 800b0b4:	bfb8      	it	lt
 800b0b6:	3101      	addlt	r1, #1
 800b0b8:	f7ff fed8 	bl	800ae6c <_Balloc>
 800b0bc:	b930      	cbnz	r0, 800b0cc <__multiply+0x44>
 800b0be:	4602      	mov	r2, r0
 800b0c0:	4b44      	ldr	r3, [pc, #272]	; (800b1d4 <__multiply+0x14c>)
 800b0c2:	4845      	ldr	r0, [pc, #276]	; (800b1d8 <__multiply+0x150>)
 800b0c4:	f240 115d 	movw	r1, #349	; 0x15d
 800b0c8:	f000 fb5a 	bl	800b780 <__assert_func>
 800b0cc:	f100 0514 	add.w	r5, r0, #20
 800b0d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b0d4:	462b      	mov	r3, r5
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	4543      	cmp	r3, r8
 800b0da:	d321      	bcc.n	800b120 <__multiply+0x98>
 800b0dc:	f104 0314 	add.w	r3, r4, #20
 800b0e0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b0e4:	f109 0314 	add.w	r3, r9, #20
 800b0e8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b0ec:	9202      	str	r2, [sp, #8]
 800b0ee:	1b3a      	subs	r2, r7, r4
 800b0f0:	3a15      	subs	r2, #21
 800b0f2:	f022 0203 	bic.w	r2, r2, #3
 800b0f6:	3204      	adds	r2, #4
 800b0f8:	f104 0115 	add.w	r1, r4, #21
 800b0fc:	428f      	cmp	r7, r1
 800b0fe:	bf38      	it	cc
 800b100:	2204      	movcc	r2, #4
 800b102:	9201      	str	r2, [sp, #4]
 800b104:	9a02      	ldr	r2, [sp, #8]
 800b106:	9303      	str	r3, [sp, #12]
 800b108:	429a      	cmp	r2, r3
 800b10a:	d80c      	bhi.n	800b126 <__multiply+0x9e>
 800b10c:	2e00      	cmp	r6, #0
 800b10e:	dd03      	ble.n	800b118 <__multiply+0x90>
 800b110:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b114:	2b00      	cmp	r3, #0
 800b116:	d05a      	beq.n	800b1ce <__multiply+0x146>
 800b118:	6106      	str	r6, [r0, #16]
 800b11a:	b005      	add	sp, #20
 800b11c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b120:	f843 2b04 	str.w	r2, [r3], #4
 800b124:	e7d8      	b.n	800b0d8 <__multiply+0x50>
 800b126:	f8b3 a000 	ldrh.w	sl, [r3]
 800b12a:	f1ba 0f00 	cmp.w	sl, #0
 800b12e:	d024      	beq.n	800b17a <__multiply+0xf2>
 800b130:	f104 0e14 	add.w	lr, r4, #20
 800b134:	46a9      	mov	r9, r5
 800b136:	f04f 0c00 	mov.w	ip, #0
 800b13a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b13e:	f8d9 1000 	ldr.w	r1, [r9]
 800b142:	fa1f fb82 	uxth.w	fp, r2
 800b146:	b289      	uxth	r1, r1
 800b148:	fb0a 110b 	mla	r1, sl, fp, r1
 800b14c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b150:	f8d9 2000 	ldr.w	r2, [r9]
 800b154:	4461      	add	r1, ip
 800b156:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b15a:	fb0a c20b 	mla	r2, sl, fp, ip
 800b15e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b162:	b289      	uxth	r1, r1
 800b164:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b168:	4577      	cmp	r7, lr
 800b16a:	f849 1b04 	str.w	r1, [r9], #4
 800b16e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b172:	d8e2      	bhi.n	800b13a <__multiply+0xb2>
 800b174:	9a01      	ldr	r2, [sp, #4]
 800b176:	f845 c002 	str.w	ip, [r5, r2]
 800b17a:	9a03      	ldr	r2, [sp, #12]
 800b17c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b180:	3304      	adds	r3, #4
 800b182:	f1b9 0f00 	cmp.w	r9, #0
 800b186:	d020      	beq.n	800b1ca <__multiply+0x142>
 800b188:	6829      	ldr	r1, [r5, #0]
 800b18a:	f104 0c14 	add.w	ip, r4, #20
 800b18e:	46ae      	mov	lr, r5
 800b190:	f04f 0a00 	mov.w	sl, #0
 800b194:	f8bc b000 	ldrh.w	fp, [ip]
 800b198:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b19c:	fb09 220b 	mla	r2, r9, fp, r2
 800b1a0:	4492      	add	sl, r2
 800b1a2:	b289      	uxth	r1, r1
 800b1a4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b1a8:	f84e 1b04 	str.w	r1, [lr], #4
 800b1ac:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b1b0:	f8be 1000 	ldrh.w	r1, [lr]
 800b1b4:	0c12      	lsrs	r2, r2, #16
 800b1b6:	fb09 1102 	mla	r1, r9, r2, r1
 800b1ba:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b1be:	4567      	cmp	r7, ip
 800b1c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b1c4:	d8e6      	bhi.n	800b194 <__multiply+0x10c>
 800b1c6:	9a01      	ldr	r2, [sp, #4]
 800b1c8:	50a9      	str	r1, [r5, r2]
 800b1ca:	3504      	adds	r5, #4
 800b1cc:	e79a      	b.n	800b104 <__multiply+0x7c>
 800b1ce:	3e01      	subs	r6, #1
 800b1d0:	e79c      	b.n	800b10c <__multiply+0x84>
 800b1d2:	bf00      	nop
 800b1d4:	0800c590 	.word	0x0800c590
 800b1d8:	0800c5a1 	.word	0x0800c5a1

0800b1dc <__pow5mult>:
 800b1dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1e0:	4615      	mov	r5, r2
 800b1e2:	f012 0203 	ands.w	r2, r2, #3
 800b1e6:	4606      	mov	r6, r0
 800b1e8:	460f      	mov	r7, r1
 800b1ea:	d007      	beq.n	800b1fc <__pow5mult+0x20>
 800b1ec:	4c25      	ldr	r4, [pc, #148]	; (800b284 <__pow5mult+0xa8>)
 800b1ee:	3a01      	subs	r2, #1
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b1f6:	f7ff fe9b 	bl	800af30 <__multadd>
 800b1fa:	4607      	mov	r7, r0
 800b1fc:	10ad      	asrs	r5, r5, #2
 800b1fe:	d03d      	beq.n	800b27c <__pow5mult+0xa0>
 800b200:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b202:	b97c      	cbnz	r4, 800b224 <__pow5mult+0x48>
 800b204:	2010      	movs	r0, #16
 800b206:	f7ff fe29 	bl	800ae5c <malloc>
 800b20a:	4602      	mov	r2, r0
 800b20c:	6270      	str	r0, [r6, #36]	; 0x24
 800b20e:	b928      	cbnz	r0, 800b21c <__pow5mult+0x40>
 800b210:	4b1d      	ldr	r3, [pc, #116]	; (800b288 <__pow5mult+0xac>)
 800b212:	481e      	ldr	r0, [pc, #120]	; (800b28c <__pow5mult+0xb0>)
 800b214:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b218:	f000 fab2 	bl	800b780 <__assert_func>
 800b21c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b220:	6004      	str	r4, [r0, #0]
 800b222:	60c4      	str	r4, [r0, #12]
 800b224:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b228:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b22c:	b94c      	cbnz	r4, 800b242 <__pow5mult+0x66>
 800b22e:	f240 2171 	movw	r1, #625	; 0x271
 800b232:	4630      	mov	r0, r6
 800b234:	f7ff ff12 	bl	800b05c <__i2b>
 800b238:	2300      	movs	r3, #0
 800b23a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b23e:	4604      	mov	r4, r0
 800b240:	6003      	str	r3, [r0, #0]
 800b242:	f04f 0900 	mov.w	r9, #0
 800b246:	07eb      	lsls	r3, r5, #31
 800b248:	d50a      	bpl.n	800b260 <__pow5mult+0x84>
 800b24a:	4639      	mov	r1, r7
 800b24c:	4622      	mov	r2, r4
 800b24e:	4630      	mov	r0, r6
 800b250:	f7ff ff1a 	bl	800b088 <__multiply>
 800b254:	4639      	mov	r1, r7
 800b256:	4680      	mov	r8, r0
 800b258:	4630      	mov	r0, r6
 800b25a:	f7ff fe47 	bl	800aeec <_Bfree>
 800b25e:	4647      	mov	r7, r8
 800b260:	106d      	asrs	r5, r5, #1
 800b262:	d00b      	beq.n	800b27c <__pow5mult+0xa0>
 800b264:	6820      	ldr	r0, [r4, #0]
 800b266:	b938      	cbnz	r0, 800b278 <__pow5mult+0x9c>
 800b268:	4622      	mov	r2, r4
 800b26a:	4621      	mov	r1, r4
 800b26c:	4630      	mov	r0, r6
 800b26e:	f7ff ff0b 	bl	800b088 <__multiply>
 800b272:	6020      	str	r0, [r4, #0]
 800b274:	f8c0 9000 	str.w	r9, [r0]
 800b278:	4604      	mov	r4, r0
 800b27a:	e7e4      	b.n	800b246 <__pow5mult+0x6a>
 800b27c:	4638      	mov	r0, r7
 800b27e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b282:	bf00      	nop
 800b284:	0800c6f0 	.word	0x0800c6f0
 800b288:	0800c51e 	.word	0x0800c51e
 800b28c:	0800c5a1 	.word	0x0800c5a1

0800b290 <__lshift>:
 800b290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b294:	460c      	mov	r4, r1
 800b296:	6849      	ldr	r1, [r1, #4]
 800b298:	6923      	ldr	r3, [r4, #16]
 800b29a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b29e:	68a3      	ldr	r3, [r4, #8]
 800b2a0:	4607      	mov	r7, r0
 800b2a2:	4691      	mov	r9, r2
 800b2a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b2a8:	f108 0601 	add.w	r6, r8, #1
 800b2ac:	42b3      	cmp	r3, r6
 800b2ae:	db0b      	blt.n	800b2c8 <__lshift+0x38>
 800b2b0:	4638      	mov	r0, r7
 800b2b2:	f7ff fddb 	bl	800ae6c <_Balloc>
 800b2b6:	4605      	mov	r5, r0
 800b2b8:	b948      	cbnz	r0, 800b2ce <__lshift+0x3e>
 800b2ba:	4602      	mov	r2, r0
 800b2bc:	4b2a      	ldr	r3, [pc, #168]	; (800b368 <__lshift+0xd8>)
 800b2be:	482b      	ldr	r0, [pc, #172]	; (800b36c <__lshift+0xdc>)
 800b2c0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b2c4:	f000 fa5c 	bl	800b780 <__assert_func>
 800b2c8:	3101      	adds	r1, #1
 800b2ca:	005b      	lsls	r3, r3, #1
 800b2cc:	e7ee      	b.n	800b2ac <__lshift+0x1c>
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	f100 0114 	add.w	r1, r0, #20
 800b2d4:	f100 0210 	add.w	r2, r0, #16
 800b2d8:	4618      	mov	r0, r3
 800b2da:	4553      	cmp	r3, sl
 800b2dc:	db37      	blt.n	800b34e <__lshift+0xbe>
 800b2de:	6920      	ldr	r0, [r4, #16]
 800b2e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b2e4:	f104 0314 	add.w	r3, r4, #20
 800b2e8:	f019 091f 	ands.w	r9, r9, #31
 800b2ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b2f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b2f4:	d02f      	beq.n	800b356 <__lshift+0xc6>
 800b2f6:	f1c9 0e20 	rsb	lr, r9, #32
 800b2fa:	468a      	mov	sl, r1
 800b2fc:	f04f 0c00 	mov.w	ip, #0
 800b300:	681a      	ldr	r2, [r3, #0]
 800b302:	fa02 f209 	lsl.w	r2, r2, r9
 800b306:	ea42 020c 	orr.w	r2, r2, ip
 800b30a:	f84a 2b04 	str.w	r2, [sl], #4
 800b30e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b312:	4298      	cmp	r0, r3
 800b314:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b318:	d8f2      	bhi.n	800b300 <__lshift+0x70>
 800b31a:	1b03      	subs	r3, r0, r4
 800b31c:	3b15      	subs	r3, #21
 800b31e:	f023 0303 	bic.w	r3, r3, #3
 800b322:	3304      	adds	r3, #4
 800b324:	f104 0215 	add.w	r2, r4, #21
 800b328:	4290      	cmp	r0, r2
 800b32a:	bf38      	it	cc
 800b32c:	2304      	movcc	r3, #4
 800b32e:	f841 c003 	str.w	ip, [r1, r3]
 800b332:	f1bc 0f00 	cmp.w	ip, #0
 800b336:	d001      	beq.n	800b33c <__lshift+0xac>
 800b338:	f108 0602 	add.w	r6, r8, #2
 800b33c:	3e01      	subs	r6, #1
 800b33e:	4638      	mov	r0, r7
 800b340:	612e      	str	r6, [r5, #16]
 800b342:	4621      	mov	r1, r4
 800b344:	f7ff fdd2 	bl	800aeec <_Bfree>
 800b348:	4628      	mov	r0, r5
 800b34a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b34e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b352:	3301      	adds	r3, #1
 800b354:	e7c1      	b.n	800b2da <__lshift+0x4a>
 800b356:	3904      	subs	r1, #4
 800b358:	f853 2b04 	ldr.w	r2, [r3], #4
 800b35c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b360:	4298      	cmp	r0, r3
 800b362:	d8f9      	bhi.n	800b358 <__lshift+0xc8>
 800b364:	e7ea      	b.n	800b33c <__lshift+0xac>
 800b366:	bf00      	nop
 800b368:	0800c590 	.word	0x0800c590
 800b36c:	0800c5a1 	.word	0x0800c5a1

0800b370 <__mcmp>:
 800b370:	b530      	push	{r4, r5, lr}
 800b372:	6902      	ldr	r2, [r0, #16]
 800b374:	690c      	ldr	r4, [r1, #16]
 800b376:	1b12      	subs	r2, r2, r4
 800b378:	d10e      	bne.n	800b398 <__mcmp+0x28>
 800b37a:	f100 0314 	add.w	r3, r0, #20
 800b37e:	3114      	adds	r1, #20
 800b380:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b384:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b388:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b38c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b390:	42a5      	cmp	r5, r4
 800b392:	d003      	beq.n	800b39c <__mcmp+0x2c>
 800b394:	d305      	bcc.n	800b3a2 <__mcmp+0x32>
 800b396:	2201      	movs	r2, #1
 800b398:	4610      	mov	r0, r2
 800b39a:	bd30      	pop	{r4, r5, pc}
 800b39c:	4283      	cmp	r3, r0
 800b39e:	d3f3      	bcc.n	800b388 <__mcmp+0x18>
 800b3a0:	e7fa      	b.n	800b398 <__mcmp+0x28>
 800b3a2:	f04f 32ff 	mov.w	r2, #4294967295
 800b3a6:	e7f7      	b.n	800b398 <__mcmp+0x28>

0800b3a8 <__mdiff>:
 800b3a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3ac:	460c      	mov	r4, r1
 800b3ae:	4606      	mov	r6, r0
 800b3b0:	4611      	mov	r1, r2
 800b3b2:	4620      	mov	r0, r4
 800b3b4:	4690      	mov	r8, r2
 800b3b6:	f7ff ffdb 	bl	800b370 <__mcmp>
 800b3ba:	1e05      	subs	r5, r0, #0
 800b3bc:	d110      	bne.n	800b3e0 <__mdiff+0x38>
 800b3be:	4629      	mov	r1, r5
 800b3c0:	4630      	mov	r0, r6
 800b3c2:	f7ff fd53 	bl	800ae6c <_Balloc>
 800b3c6:	b930      	cbnz	r0, 800b3d6 <__mdiff+0x2e>
 800b3c8:	4b3a      	ldr	r3, [pc, #232]	; (800b4b4 <__mdiff+0x10c>)
 800b3ca:	4602      	mov	r2, r0
 800b3cc:	f240 2132 	movw	r1, #562	; 0x232
 800b3d0:	4839      	ldr	r0, [pc, #228]	; (800b4b8 <__mdiff+0x110>)
 800b3d2:	f000 f9d5 	bl	800b780 <__assert_func>
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b3dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3e0:	bfa4      	itt	ge
 800b3e2:	4643      	movge	r3, r8
 800b3e4:	46a0      	movge	r8, r4
 800b3e6:	4630      	mov	r0, r6
 800b3e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b3ec:	bfa6      	itte	ge
 800b3ee:	461c      	movge	r4, r3
 800b3f0:	2500      	movge	r5, #0
 800b3f2:	2501      	movlt	r5, #1
 800b3f4:	f7ff fd3a 	bl	800ae6c <_Balloc>
 800b3f8:	b920      	cbnz	r0, 800b404 <__mdiff+0x5c>
 800b3fa:	4b2e      	ldr	r3, [pc, #184]	; (800b4b4 <__mdiff+0x10c>)
 800b3fc:	4602      	mov	r2, r0
 800b3fe:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b402:	e7e5      	b.n	800b3d0 <__mdiff+0x28>
 800b404:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b408:	6926      	ldr	r6, [r4, #16]
 800b40a:	60c5      	str	r5, [r0, #12]
 800b40c:	f104 0914 	add.w	r9, r4, #20
 800b410:	f108 0514 	add.w	r5, r8, #20
 800b414:	f100 0e14 	add.w	lr, r0, #20
 800b418:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b41c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b420:	f108 0210 	add.w	r2, r8, #16
 800b424:	46f2      	mov	sl, lr
 800b426:	2100      	movs	r1, #0
 800b428:	f859 3b04 	ldr.w	r3, [r9], #4
 800b42c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b430:	fa1f f883 	uxth.w	r8, r3
 800b434:	fa11 f18b 	uxtah	r1, r1, fp
 800b438:	0c1b      	lsrs	r3, r3, #16
 800b43a:	eba1 0808 	sub.w	r8, r1, r8
 800b43e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b442:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b446:	fa1f f888 	uxth.w	r8, r8
 800b44a:	1419      	asrs	r1, r3, #16
 800b44c:	454e      	cmp	r6, r9
 800b44e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b452:	f84a 3b04 	str.w	r3, [sl], #4
 800b456:	d8e7      	bhi.n	800b428 <__mdiff+0x80>
 800b458:	1b33      	subs	r3, r6, r4
 800b45a:	3b15      	subs	r3, #21
 800b45c:	f023 0303 	bic.w	r3, r3, #3
 800b460:	3304      	adds	r3, #4
 800b462:	3415      	adds	r4, #21
 800b464:	42a6      	cmp	r6, r4
 800b466:	bf38      	it	cc
 800b468:	2304      	movcc	r3, #4
 800b46a:	441d      	add	r5, r3
 800b46c:	4473      	add	r3, lr
 800b46e:	469e      	mov	lr, r3
 800b470:	462e      	mov	r6, r5
 800b472:	4566      	cmp	r6, ip
 800b474:	d30e      	bcc.n	800b494 <__mdiff+0xec>
 800b476:	f10c 0203 	add.w	r2, ip, #3
 800b47a:	1b52      	subs	r2, r2, r5
 800b47c:	f022 0203 	bic.w	r2, r2, #3
 800b480:	3d03      	subs	r5, #3
 800b482:	45ac      	cmp	ip, r5
 800b484:	bf38      	it	cc
 800b486:	2200      	movcc	r2, #0
 800b488:	441a      	add	r2, r3
 800b48a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b48e:	b17b      	cbz	r3, 800b4b0 <__mdiff+0x108>
 800b490:	6107      	str	r7, [r0, #16]
 800b492:	e7a3      	b.n	800b3dc <__mdiff+0x34>
 800b494:	f856 8b04 	ldr.w	r8, [r6], #4
 800b498:	fa11 f288 	uxtah	r2, r1, r8
 800b49c:	1414      	asrs	r4, r2, #16
 800b49e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b4a2:	b292      	uxth	r2, r2
 800b4a4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b4a8:	f84e 2b04 	str.w	r2, [lr], #4
 800b4ac:	1421      	asrs	r1, r4, #16
 800b4ae:	e7e0      	b.n	800b472 <__mdiff+0xca>
 800b4b0:	3f01      	subs	r7, #1
 800b4b2:	e7ea      	b.n	800b48a <__mdiff+0xe2>
 800b4b4:	0800c590 	.word	0x0800c590
 800b4b8:	0800c5a1 	.word	0x0800c5a1

0800b4bc <__d2b>:
 800b4bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b4c0:	4689      	mov	r9, r1
 800b4c2:	2101      	movs	r1, #1
 800b4c4:	ec57 6b10 	vmov	r6, r7, d0
 800b4c8:	4690      	mov	r8, r2
 800b4ca:	f7ff fccf 	bl	800ae6c <_Balloc>
 800b4ce:	4604      	mov	r4, r0
 800b4d0:	b930      	cbnz	r0, 800b4e0 <__d2b+0x24>
 800b4d2:	4602      	mov	r2, r0
 800b4d4:	4b25      	ldr	r3, [pc, #148]	; (800b56c <__d2b+0xb0>)
 800b4d6:	4826      	ldr	r0, [pc, #152]	; (800b570 <__d2b+0xb4>)
 800b4d8:	f240 310a 	movw	r1, #778	; 0x30a
 800b4dc:	f000 f950 	bl	800b780 <__assert_func>
 800b4e0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b4e4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b4e8:	bb35      	cbnz	r5, 800b538 <__d2b+0x7c>
 800b4ea:	2e00      	cmp	r6, #0
 800b4ec:	9301      	str	r3, [sp, #4]
 800b4ee:	d028      	beq.n	800b542 <__d2b+0x86>
 800b4f0:	4668      	mov	r0, sp
 800b4f2:	9600      	str	r6, [sp, #0]
 800b4f4:	f7ff fd82 	bl	800affc <__lo0bits>
 800b4f8:	9900      	ldr	r1, [sp, #0]
 800b4fa:	b300      	cbz	r0, 800b53e <__d2b+0x82>
 800b4fc:	9a01      	ldr	r2, [sp, #4]
 800b4fe:	f1c0 0320 	rsb	r3, r0, #32
 800b502:	fa02 f303 	lsl.w	r3, r2, r3
 800b506:	430b      	orrs	r3, r1
 800b508:	40c2      	lsrs	r2, r0
 800b50a:	6163      	str	r3, [r4, #20]
 800b50c:	9201      	str	r2, [sp, #4]
 800b50e:	9b01      	ldr	r3, [sp, #4]
 800b510:	61a3      	str	r3, [r4, #24]
 800b512:	2b00      	cmp	r3, #0
 800b514:	bf14      	ite	ne
 800b516:	2202      	movne	r2, #2
 800b518:	2201      	moveq	r2, #1
 800b51a:	6122      	str	r2, [r4, #16]
 800b51c:	b1d5      	cbz	r5, 800b554 <__d2b+0x98>
 800b51e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b522:	4405      	add	r5, r0
 800b524:	f8c9 5000 	str.w	r5, [r9]
 800b528:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b52c:	f8c8 0000 	str.w	r0, [r8]
 800b530:	4620      	mov	r0, r4
 800b532:	b003      	add	sp, #12
 800b534:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b538:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b53c:	e7d5      	b.n	800b4ea <__d2b+0x2e>
 800b53e:	6161      	str	r1, [r4, #20]
 800b540:	e7e5      	b.n	800b50e <__d2b+0x52>
 800b542:	a801      	add	r0, sp, #4
 800b544:	f7ff fd5a 	bl	800affc <__lo0bits>
 800b548:	9b01      	ldr	r3, [sp, #4]
 800b54a:	6163      	str	r3, [r4, #20]
 800b54c:	2201      	movs	r2, #1
 800b54e:	6122      	str	r2, [r4, #16]
 800b550:	3020      	adds	r0, #32
 800b552:	e7e3      	b.n	800b51c <__d2b+0x60>
 800b554:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b558:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b55c:	f8c9 0000 	str.w	r0, [r9]
 800b560:	6918      	ldr	r0, [r3, #16]
 800b562:	f7ff fd2b 	bl	800afbc <__hi0bits>
 800b566:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b56a:	e7df      	b.n	800b52c <__d2b+0x70>
 800b56c:	0800c590 	.word	0x0800c590
 800b570:	0800c5a1 	.word	0x0800c5a1

0800b574 <_calloc_r>:
 800b574:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b576:	fba1 2402 	umull	r2, r4, r1, r2
 800b57a:	b94c      	cbnz	r4, 800b590 <_calloc_r+0x1c>
 800b57c:	4611      	mov	r1, r2
 800b57e:	9201      	str	r2, [sp, #4]
 800b580:	f000 f87a 	bl	800b678 <_malloc_r>
 800b584:	9a01      	ldr	r2, [sp, #4]
 800b586:	4605      	mov	r5, r0
 800b588:	b930      	cbnz	r0, 800b598 <_calloc_r+0x24>
 800b58a:	4628      	mov	r0, r5
 800b58c:	b003      	add	sp, #12
 800b58e:	bd30      	pop	{r4, r5, pc}
 800b590:	220c      	movs	r2, #12
 800b592:	6002      	str	r2, [r0, #0]
 800b594:	2500      	movs	r5, #0
 800b596:	e7f8      	b.n	800b58a <_calloc_r+0x16>
 800b598:	4621      	mov	r1, r4
 800b59a:	f7fe f8cd 	bl	8009738 <memset>
 800b59e:	e7f4      	b.n	800b58a <_calloc_r+0x16>

0800b5a0 <_free_r>:
 800b5a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5a2:	2900      	cmp	r1, #0
 800b5a4:	d044      	beq.n	800b630 <_free_r+0x90>
 800b5a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5aa:	9001      	str	r0, [sp, #4]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	f1a1 0404 	sub.w	r4, r1, #4
 800b5b2:	bfb8      	it	lt
 800b5b4:	18e4      	addlt	r4, r4, r3
 800b5b6:	f000 f925 	bl	800b804 <__malloc_lock>
 800b5ba:	4a1e      	ldr	r2, [pc, #120]	; (800b634 <_free_r+0x94>)
 800b5bc:	9801      	ldr	r0, [sp, #4]
 800b5be:	6813      	ldr	r3, [r2, #0]
 800b5c0:	b933      	cbnz	r3, 800b5d0 <_free_r+0x30>
 800b5c2:	6063      	str	r3, [r4, #4]
 800b5c4:	6014      	str	r4, [r2, #0]
 800b5c6:	b003      	add	sp, #12
 800b5c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b5cc:	f000 b920 	b.w	800b810 <__malloc_unlock>
 800b5d0:	42a3      	cmp	r3, r4
 800b5d2:	d908      	bls.n	800b5e6 <_free_r+0x46>
 800b5d4:	6825      	ldr	r5, [r4, #0]
 800b5d6:	1961      	adds	r1, r4, r5
 800b5d8:	428b      	cmp	r3, r1
 800b5da:	bf01      	itttt	eq
 800b5dc:	6819      	ldreq	r1, [r3, #0]
 800b5de:	685b      	ldreq	r3, [r3, #4]
 800b5e0:	1949      	addeq	r1, r1, r5
 800b5e2:	6021      	streq	r1, [r4, #0]
 800b5e4:	e7ed      	b.n	800b5c2 <_free_r+0x22>
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	685b      	ldr	r3, [r3, #4]
 800b5ea:	b10b      	cbz	r3, 800b5f0 <_free_r+0x50>
 800b5ec:	42a3      	cmp	r3, r4
 800b5ee:	d9fa      	bls.n	800b5e6 <_free_r+0x46>
 800b5f0:	6811      	ldr	r1, [r2, #0]
 800b5f2:	1855      	adds	r5, r2, r1
 800b5f4:	42a5      	cmp	r5, r4
 800b5f6:	d10b      	bne.n	800b610 <_free_r+0x70>
 800b5f8:	6824      	ldr	r4, [r4, #0]
 800b5fa:	4421      	add	r1, r4
 800b5fc:	1854      	adds	r4, r2, r1
 800b5fe:	42a3      	cmp	r3, r4
 800b600:	6011      	str	r1, [r2, #0]
 800b602:	d1e0      	bne.n	800b5c6 <_free_r+0x26>
 800b604:	681c      	ldr	r4, [r3, #0]
 800b606:	685b      	ldr	r3, [r3, #4]
 800b608:	6053      	str	r3, [r2, #4]
 800b60a:	4421      	add	r1, r4
 800b60c:	6011      	str	r1, [r2, #0]
 800b60e:	e7da      	b.n	800b5c6 <_free_r+0x26>
 800b610:	d902      	bls.n	800b618 <_free_r+0x78>
 800b612:	230c      	movs	r3, #12
 800b614:	6003      	str	r3, [r0, #0]
 800b616:	e7d6      	b.n	800b5c6 <_free_r+0x26>
 800b618:	6825      	ldr	r5, [r4, #0]
 800b61a:	1961      	adds	r1, r4, r5
 800b61c:	428b      	cmp	r3, r1
 800b61e:	bf04      	itt	eq
 800b620:	6819      	ldreq	r1, [r3, #0]
 800b622:	685b      	ldreq	r3, [r3, #4]
 800b624:	6063      	str	r3, [r4, #4]
 800b626:	bf04      	itt	eq
 800b628:	1949      	addeq	r1, r1, r5
 800b62a:	6021      	streq	r1, [r4, #0]
 800b62c:	6054      	str	r4, [r2, #4]
 800b62e:	e7ca      	b.n	800b5c6 <_free_r+0x26>
 800b630:	b003      	add	sp, #12
 800b632:	bd30      	pop	{r4, r5, pc}
 800b634:	200020b4 	.word	0x200020b4

0800b638 <sbrk_aligned>:
 800b638:	b570      	push	{r4, r5, r6, lr}
 800b63a:	4e0e      	ldr	r6, [pc, #56]	; (800b674 <sbrk_aligned+0x3c>)
 800b63c:	460c      	mov	r4, r1
 800b63e:	6831      	ldr	r1, [r6, #0]
 800b640:	4605      	mov	r5, r0
 800b642:	b911      	cbnz	r1, 800b64a <sbrk_aligned+0x12>
 800b644:	f000 f88c 	bl	800b760 <_sbrk_r>
 800b648:	6030      	str	r0, [r6, #0]
 800b64a:	4621      	mov	r1, r4
 800b64c:	4628      	mov	r0, r5
 800b64e:	f000 f887 	bl	800b760 <_sbrk_r>
 800b652:	1c43      	adds	r3, r0, #1
 800b654:	d00a      	beq.n	800b66c <sbrk_aligned+0x34>
 800b656:	1cc4      	adds	r4, r0, #3
 800b658:	f024 0403 	bic.w	r4, r4, #3
 800b65c:	42a0      	cmp	r0, r4
 800b65e:	d007      	beq.n	800b670 <sbrk_aligned+0x38>
 800b660:	1a21      	subs	r1, r4, r0
 800b662:	4628      	mov	r0, r5
 800b664:	f000 f87c 	bl	800b760 <_sbrk_r>
 800b668:	3001      	adds	r0, #1
 800b66a:	d101      	bne.n	800b670 <sbrk_aligned+0x38>
 800b66c:	f04f 34ff 	mov.w	r4, #4294967295
 800b670:	4620      	mov	r0, r4
 800b672:	bd70      	pop	{r4, r5, r6, pc}
 800b674:	200020b8 	.word	0x200020b8

0800b678 <_malloc_r>:
 800b678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b67c:	1ccd      	adds	r5, r1, #3
 800b67e:	f025 0503 	bic.w	r5, r5, #3
 800b682:	3508      	adds	r5, #8
 800b684:	2d0c      	cmp	r5, #12
 800b686:	bf38      	it	cc
 800b688:	250c      	movcc	r5, #12
 800b68a:	2d00      	cmp	r5, #0
 800b68c:	4607      	mov	r7, r0
 800b68e:	db01      	blt.n	800b694 <_malloc_r+0x1c>
 800b690:	42a9      	cmp	r1, r5
 800b692:	d905      	bls.n	800b6a0 <_malloc_r+0x28>
 800b694:	230c      	movs	r3, #12
 800b696:	603b      	str	r3, [r7, #0]
 800b698:	2600      	movs	r6, #0
 800b69a:	4630      	mov	r0, r6
 800b69c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6a0:	4e2e      	ldr	r6, [pc, #184]	; (800b75c <_malloc_r+0xe4>)
 800b6a2:	f000 f8af 	bl	800b804 <__malloc_lock>
 800b6a6:	6833      	ldr	r3, [r6, #0]
 800b6a8:	461c      	mov	r4, r3
 800b6aa:	bb34      	cbnz	r4, 800b6fa <_malloc_r+0x82>
 800b6ac:	4629      	mov	r1, r5
 800b6ae:	4638      	mov	r0, r7
 800b6b0:	f7ff ffc2 	bl	800b638 <sbrk_aligned>
 800b6b4:	1c43      	adds	r3, r0, #1
 800b6b6:	4604      	mov	r4, r0
 800b6b8:	d14d      	bne.n	800b756 <_malloc_r+0xde>
 800b6ba:	6834      	ldr	r4, [r6, #0]
 800b6bc:	4626      	mov	r6, r4
 800b6be:	2e00      	cmp	r6, #0
 800b6c0:	d140      	bne.n	800b744 <_malloc_r+0xcc>
 800b6c2:	6823      	ldr	r3, [r4, #0]
 800b6c4:	4631      	mov	r1, r6
 800b6c6:	4638      	mov	r0, r7
 800b6c8:	eb04 0803 	add.w	r8, r4, r3
 800b6cc:	f000 f848 	bl	800b760 <_sbrk_r>
 800b6d0:	4580      	cmp	r8, r0
 800b6d2:	d13a      	bne.n	800b74a <_malloc_r+0xd2>
 800b6d4:	6821      	ldr	r1, [r4, #0]
 800b6d6:	3503      	adds	r5, #3
 800b6d8:	1a6d      	subs	r5, r5, r1
 800b6da:	f025 0503 	bic.w	r5, r5, #3
 800b6de:	3508      	adds	r5, #8
 800b6e0:	2d0c      	cmp	r5, #12
 800b6e2:	bf38      	it	cc
 800b6e4:	250c      	movcc	r5, #12
 800b6e6:	4629      	mov	r1, r5
 800b6e8:	4638      	mov	r0, r7
 800b6ea:	f7ff ffa5 	bl	800b638 <sbrk_aligned>
 800b6ee:	3001      	adds	r0, #1
 800b6f0:	d02b      	beq.n	800b74a <_malloc_r+0xd2>
 800b6f2:	6823      	ldr	r3, [r4, #0]
 800b6f4:	442b      	add	r3, r5
 800b6f6:	6023      	str	r3, [r4, #0]
 800b6f8:	e00e      	b.n	800b718 <_malloc_r+0xa0>
 800b6fa:	6822      	ldr	r2, [r4, #0]
 800b6fc:	1b52      	subs	r2, r2, r5
 800b6fe:	d41e      	bmi.n	800b73e <_malloc_r+0xc6>
 800b700:	2a0b      	cmp	r2, #11
 800b702:	d916      	bls.n	800b732 <_malloc_r+0xba>
 800b704:	1961      	adds	r1, r4, r5
 800b706:	42a3      	cmp	r3, r4
 800b708:	6025      	str	r5, [r4, #0]
 800b70a:	bf18      	it	ne
 800b70c:	6059      	strne	r1, [r3, #4]
 800b70e:	6863      	ldr	r3, [r4, #4]
 800b710:	bf08      	it	eq
 800b712:	6031      	streq	r1, [r6, #0]
 800b714:	5162      	str	r2, [r4, r5]
 800b716:	604b      	str	r3, [r1, #4]
 800b718:	4638      	mov	r0, r7
 800b71a:	f104 060b 	add.w	r6, r4, #11
 800b71e:	f000 f877 	bl	800b810 <__malloc_unlock>
 800b722:	f026 0607 	bic.w	r6, r6, #7
 800b726:	1d23      	adds	r3, r4, #4
 800b728:	1af2      	subs	r2, r6, r3
 800b72a:	d0b6      	beq.n	800b69a <_malloc_r+0x22>
 800b72c:	1b9b      	subs	r3, r3, r6
 800b72e:	50a3      	str	r3, [r4, r2]
 800b730:	e7b3      	b.n	800b69a <_malloc_r+0x22>
 800b732:	6862      	ldr	r2, [r4, #4]
 800b734:	42a3      	cmp	r3, r4
 800b736:	bf0c      	ite	eq
 800b738:	6032      	streq	r2, [r6, #0]
 800b73a:	605a      	strne	r2, [r3, #4]
 800b73c:	e7ec      	b.n	800b718 <_malloc_r+0xa0>
 800b73e:	4623      	mov	r3, r4
 800b740:	6864      	ldr	r4, [r4, #4]
 800b742:	e7b2      	b.n	800b6aa <_malloc_r+0x32>
 800b744:	4634      	mov	r4, r6
 800b746:	6876      	ldr	r6, [r6, #4]
 800b748:	e7b9      	b.n	800b6be <_malloc_r+0x46>
 800b74a:	230c      	movs	r3, #12
 800b74c:	603b      	str	r3, [r7, #0]
 800b74e:	4638      	mov	r0, r7
 800b750:	f000 f85e 	bl	800b810 <__malloc_unlock>
 800b754:	e7a1      	b.n	800b69a <_malloc_r+0x22>
 800b756:	6025      	str	r5, [r4, #0]
 800b758:	e7de      	b.n	800b718 <_malloc_r+0xa0>
 800b75a:	bf00      	nop
 800b75c:	200020b4 	.word	0x200020b4

0800b760 <_sbrk_r>:
 800b760:	b538      	push	{r3, r4, r5, lr}
 800b762:	4d06      	ldr	r5, [pc, #24]	; (800b77c <_sbrk_r+0x1c>)
 800b764:	2300      	movs	r3, #0
 800b766:	4604      	mov	r4, r0
 800b768:	4608      	mov	r0, r1
 800b76a:	602b      	str	r3, [r5, #0]
 800b76c:	f7f6 fad6 	bl	8001d1c <_sbrk>
 800b770:	1c43      	adds	r3, r0, #1
 800b772:	d102      	bne.n	800b77a <_sbrk_r+0x1a>
 800b774:	682b      	ldr	r3, [r5, #0]
 800b776:	b103      	cbz	r3, 800b77a <_sbrk_r+0x1a>
 800b778:	6023      	str	r3, [r4, #0]
 800b77a:	bd38      	pop	{r3, r4, r5, pc}
 800b77c:	200020bc 	.word	0x200020bc

0800b780 <__assert_func>:
 800b780:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b782:	4614      	mov	r4, r2
 800b784:	461a      	mov	r2, r3
 800b786:	4b09      	ldr	r3, [pc, #36]	; (800b7ac <__assert_func+0x2c>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	4605      	mov	r5, r0
 800b78c:	68d8      	ldr	r0, [r3, #12]
 800b78e:	b14c      	cbz	r4, 800b7a4 <__assert_func+0x24>
 800b790:	4b07      	ldr	r3, [pc, #28]	; (800b7b0 <__assert_func+0x30>)
 800b792:	9100      	str	r1, [sp, #0]
 800b794:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b798:	4906      	ldr	r1, [pc, #24]	; (800b7b4 <__assert_func+0x34>)
 800b79a:	462b      	mov	r3, r5
 800b79c:	f000 f80e 	bl	800b7bc <fiprintf>
 800b7a0:	f000 fa64 	bl	800bc6c <abort>
 800b7a4:	4b04      	ldr	r3, [pc, #16]	; (800b7b8 <__assert_func+0x38>)
 800b7a6:	461c      	mov	r4, r3
 800b7a8:	e7f3      	b.n	800b792 <__assert_func+0x12>
 800b7aa:	bf00      	nop
 800b7ac:	20000130 	.word	0x20000130
 800b7b0:	0800c6fc 	.word	0x0800c6fc
 800b7b4:	0800c709 	.word	0x0800c709
 800b7b8:	0800c737 	.word	0x0800c737

0800b7bc <fiprintf>:
 800b7bc:	b40e      	push	{r1, r2, r3}
 800b7be:	b503      	push	{r0, r1, lr}
 800b7c0:	4601      	mov	r1, r0
 800b7c2:	ab03      	add	r3, sp, #12
 800b7c4:	4805      	ldr	r0, [pc, #20]	; (800b7dc <fiprintf+0x20>)
 800b7c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7ca:	6800      	ldr	r0, [r0, #0]
 800b7cc:	9301      	str	r3, [sp, #4]
 800b7ce:	f000 f84f 	bl	800b870 <_vfiprintf_r>
 800b7d2:	b002      	add	sp, #8
 800b7d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7d8:	b003      	add	sp, #12
 800b7da:	4770      	bx	lr
 800b7dc:	20000130 	.word	0x20000130

0800b7e0 <__ascii_mbtowc>:
 800b7e0:	b082      	sub	sp, #8
 800b7e2:	b901      	cbnz	r1, 800b7e6 <__ascii_mbtowc+0x6>
 800b7e4:	a901      	add	r1, sp, #4
 800b7e6:	b142      	cbz	r2, 800b7fa <__ascii_mbtowc+0x1a>
 800b7e8:	b14b      	cbz	r3, 800b7fe <__ascii_mbtowc+0x1e>
 800b7ea:	7813      	ldrb	r3, [r2, #0]
 800b7ec:	600b      	str	r3, [r1, #0]
 800b7ee:	7812      	ldrb	r2, [r2, #0]
 800b7f0:	1e10      	subs	r0, r2, #0
 800b7f2:	bf18      	it	ne
 800b7f4:	2001      	movne	r0, #1
 800b7f6:	b002      	add	sp, #8
 800b7f8:	4770      	bx	lr
 800b7fa:	4610      	mov	r0, r2
 800b7fc:	e7fb      	b.n	800b7f6 <__ascii_mbtowc+0x16>
 800b7fe:	f06f 0001 	mvn.w	r0, #1
 800b802:	e7f8      	b.n	800b7f6 <__ascii_mbtowc+0x16>

0800b804 <__malloc_lock>:
 800b804:	4801      	ldr	r0, [pc, #4]	; (800b80c <__malloc_lock+0x8>)
 800b806:	f000 bbf1 	b.w	800bfec <__retarget_lock_acquire_recursive>
 800b80a:	bf00      	nop
 800b80c:	200020c0 	.word	0x200020c0

0800b810 <__malloc_unlock>:
 800b810:	4801      	ldr	r0, [pc, #4]	; (800b818 <__malloc_unlock+0x8>)
 800b812:	f000 bbec 	b.w	800bfee <__retarget_lock_release_recursive>
 800b816:	bf00      	nop
 800b818:	200020c0 	.word	0x200020c0

0800b81c <__sfputc_r>:
 800b81c:	6893      	ldr	r3, [r2, #8]
 800b81e:	3b01      	subs	r3, #1
 800b820:	2b00      	cmp	r3, #0
 800b822:	b410      	push	{r4}
 800b824:	6093      	str	r3, [r2, #8]
 800b826:	da08      	bge.n	800b83a <__sfputc_r+0x1e>
 800b828:	6994      	ldr	r4, [r2, #24]
 800b82a:	42a3      	cmp	r3, r4
 800b82c:	db01      	blt.n	800b832 <__sfputc_r+0x16>
 800b82e:	290a      	cmp	r1, #10
 800b830:	d103      	bne.n	800b83a <__sfputc_r+0x1e>
 800b832:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b836:	f000 b94b 	b.w	800bad0 <__swbuf_r>
 800b83a:	6813      	ldr	r3, [r2, #0]
 800b83c:	1c58      	adds	r0, r3, #1
 800b83e:	6010      	str	r0, [r2, #0]
 800b840:	7019      	strb	r1, [r3, #0]
 800b842:	4608      	mov	r0, r1
 800b844:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b848:	4770      	bx	lr

0800b84a <__sfputs_r>:
 800b84a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b84c:	4606      	mov	r6, r0
 800b84e:	460f      	mov	r7, r1
 800b850:	4614      	mov	r4, r2
 800b852:	18d5      	adds	r5, r2, r3
 800b854:	42ac      	cmp	r4, r5
 800b856:	d101      	bne.n	800b85c <__sfputs_r+0x12>
 800b858:	2000      	movs	r0, #0
 800b85a:	e007      	b.n	800b86c <__sfputs_r+0x22>
 800b85c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b860:	463a      	mov	r2, r7
 800b862:	4630      	mov	r0, r6
 800b864:	f7ff ffda 	bl	800b81c <__sfputc_r>
 800b868:	1c43      	adds	r3, r0, #1
 800b86a:	d1f3      	bne.n	800b854 <__sfputs_r+0xa>
 800b86c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b870 <_vfiprintf_r>:
 800b870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b874:	460d      	mov	r5, r1
 800b876:	b09d      	sub	sp, #116	; 0x74
 800b878:	4614      	mov	r4, r2
 800b87a:	4698      	mov	r8, r3
 800b87c:	4606      	mov	r6, r0
 800b87e:	b118      	cbz	r0, 800b888 <_vfiprintf_r+0x18>
 800b880:	6983      	ldr	r3, [r0, #24]
 800b882:	b90b      	cbnz	r3, 800b888 <_vfiprintf_r+0x18>
 800b884:	f000 fb14 	bl	800beb0 <__sinit>
 800b888:	4b89      	ldr	r3, [pc, #548]	; (800bab0 <_vfiprintf_r+0x240>)
 800b88a:	429d      	cmp	r5, r3
 800b88c:	d11b      	bne.n	800b8c6 <_vfiprintf_r+0x56>
 800b88e:	6875      	ldr	r5, [r6, #4]
 800b890:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b892:	07d9      	lsls	r1, r3, #31
 800b894:	d405      	bmi.n	800b8a2 <_vfiprintf_r+0x32>
 800b896:	89ab      	ldrh	r3, [r5, #12]
 800b898:	059a      	lsls	r2, r3, #22
 800b89a:	d402      	bmi.n	800b8a2 <_vfiprintf_r+0x32>
 800b89c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b89e:	f000 fba5 	bl	800bfec <__retarget_lock_acquire_recursive>
 800b8a2:	89ab      	ldrh	r3, [r5, #12]
 800b8a4:	071b      	lsls	r3, r3, #28
 800b8a6:	d501      	bpl.n	800b8ac <_vfiprintf_r+0x3c>
 800b8a8:	692b      	ldr	r3, [r5, #16]
 800b8aa:	b9eb      	cbnz	r3, 800b8e8 <_vfiprintf_r+0x78>
 800b8ac:	4629      	mov	r1, r5
 800b8ae:	4630      	mov	r0, r6
 800b8b0:	f000 f96e 	bl	800bb90 <__swsetup_r>
 800b8b4:	b1c0      	cbz	r0, 800b8e8 <_vfiprintf_r+0x78>
 800b8b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8b8:	07dc      	lsls	r4, r3, #31
 800b8ba:	d50e      	bpl.n	800b8da <_vfiprintf_r+0x6a>
 800b8bc:	f04f 30ff 	mov.w	r0, #4294967295
 800b8c0:	b01d      	add	sp, #116	; 0x74
 800b8c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8c6:	4b7b      	ldr	r3, [pc, #492]	; (800bab4 <_vfiprintf_r+0x244>)
 800b8c8:	429d      	cmp	r5, r3
 800b8ca:	d101      	bne.n	800b8d0 <_vfiprintf_r+0x60>
 800b8cc:	68b5      	ldr	r5, [r6, #8]
 800b8ce:	e7df      	b.n	800b890 <_vfiprintf_r+0x20>
 800b8d0:	4b79      	ldr	r3, [pc, #484]	; (800bab8 <_vfiprintf_r+0x248>)
 800b8d2:	429d      	cmp	r5, r3
 800b8d4:	bf08      	it	eq
 800b8d6:	68f5      	ldreq	r5, [r6, #12]
 800b8d8:	e7da      	b.n	800b890 <_vfiprintf_r+0x20>
 800b8da:	89ab      	ldrh	r3, [r5, #12]
 800b8dc:	0598      	lsls	r0, r3, #22
 800b8de:	d4ed      	bmi.n	800b8bc <_vfiprintf_r+0x4c>
 800b8e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8e2:	f000 fb84 	bl	800bfee <__retarget_lock_release_recursive>
 800b8e6:	e7e9      	b.n	800b8bc <_vfiprintf_r+0x4c>
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	9309      	str	r3, [sp, #36]	; 0x24
 800b8ec:	2320      	movs	r3, #32
 800b8ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b8f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8f6:	2330      	movs	r3, #48	; 0x30
 800b8f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800babc <_vfiprintf_r+0x24c>
 800b8fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b900:	f04f 0901 	mov.w	r9, #1
 800b904:	4623      	mov	r3, r4
 800b906:	469a      	mov	sl, r3
 800b908:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b90c:	b10a      	cbz	r2, 800b912 <_vfiprintf_r+0xa2>
 800b90e:	2a25      	cmp	r2, #37	; 0x25
 800b910:	d1f9      	bne.n	800b906 <_vfiprintf_r+0x96>
 800b912:	ebba 0b04 	subs.w	fp, sl, r4
 800b916:	d00b      	beq.n	800b930 <_vfiprintf_r+0xc0>
 800b918:	465b      	mov	r3, fp
 800b91a:	4622      	mov	r2, r4
 800b91c:	4629      	mov	r1, r5
 800b91e:	4630      	mov	r0, r6
 800b920:	f7ff ff93 	bl	800b84a <__sfputs_r>
 800b924:	3001      	adds	r0, #1
 800b926:	f000 80aa 	beq.w	800ba7e <_vfiprintf_r+0x20e>
 800b92a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b92c:	445a      	add	r2, fp
 800b92e:	9209      	str	r2, [sp, #36]	; 0x24
 800b930:	f89a 3000 	ldrb.w	r3, [sl]
 800b934:	2b00      	cmp	r3, #0
 800b936:	f000 80a2 	beq.w	800ba7e <_vfiprintf_r+0x20e>
 800b93a:	2300      	movs	r3, #0
 800b93c:	f04f 32ff 	mov.w	r2, #4294967295
 800b940:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b944:	f10a 0a01 	add.w	sl, sl, #1
 800b948:	9304      	str	r3, [sp, #16]
 800b94a:	9307      	str	r3, [sp, #28]
 800b94c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b950:	931a      	str	r3, [sp, #104]	; 0x68
 800b952:	4654      	mov	r4, sl
 800b954:	2205      	movs	r2, #5
 800b956:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b95a:	4858      	ldr	r0, [pc, #352]	; (800babc <_vfiprintf_r+0x24c>)
 800b95c:	f7f4 fc48 	bl	80001f0 <memchr>
 800b960:	9a04      	ldr	r2, [sp, #16]
 800b962:	b9d8      	cbnz	r0, 800b99c <_vfiprintf_r+0x12c>
 800b964:	06d1      	lsls	r1, r2, #27
 800b966:	bf44      	itt	mi
 800b968:	2320      	movmi	r3, #32
 800b96a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b96e:	0713      	lsls	r3, r2, #28
 800b970:	bf44      	itt	mi
 800b972:	232b      	movmi	r3, #43	; 0x2b
 800b974:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b978:	f89a 3000 	ldrb.w	r3, [sl]
 800b97c:	2b2a      	cmp	r3, #42	; 0x2a
 800b97e:	d015      	beq.n	800b9ac <_vfiprintf_r+0x13c>
 800b980:	9a07      	ldr	r2, [sp, #28]
 800b982:	4654      	mov	r4, sl
 800b984:	2000      	movs	r0, #0
 800b986:	f04f 0c0a 	mov.w	ip, #10
 800b98a:	4621      	mov	r1, r4
 800b98c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b990:	3b30      	subs	r3, #48	; 0x30
 800b992:	2b09      	cmp	r3, #9
 800b994:	d94e      	bls.n	800ba34 <_vfiprintf_r+0x1c4>
 800b996:	b1b0      	cbz	r0, 800b9c6 <_vfiprintf_r+0x156>
 800b998:	9207      	str	r2, [sp, #28]
 800b99a:	e014      	b.n	800b9c6 <_vfiprintf_r+0x156>
 800b99c:	eba0 0308 	sub.w	r3, r0, r8
 800b9a0:	fa09 f303 	lsl.w	r3, r9, r3
 800b9a4:	4313      	orrs	r3, r2
 800b9a6:	9304      	str	r3, [sp, #16]
 800b9a8:	46a2      	mov	sl, r4
 800b9aa:	e7d2      	b.n	800b952 <_vfiprintf_r+0xe2>
 800b9ac:	9b03      	ldr	r3, [sp, #12]
 800b9ae:	1d19      	adds	r1, r3, #4
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	9103      	str	r1, [sp, #12]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	bfbb      	ittet	lt
 800b9b8:	425b      	neglt	r3, r3
 800b9ba:	f042 0202 	orrlt.w	r2, r2, #2
 800b9be:	9307      	strge	r3, [sp, #28]
 800b9c0:	9307      	strlt	r3, [sp, #28]
 800b9c2:	bfb8      	it	lt
 800b9c4:	9204      	strlt	r2, [sp, #16]
 800b9c6:	7823      	ldrb	r3, [r4, #0]
 800b9c8:	2b2e      	cmp	r3, #46	; 0x2e
 800b9ca:	d10c      	bne.n	800b9e6 <_vfiprintf_r+0x176>
 800b9cc:	7863      	ldrb	r3, [r4, #1]
 800b9ce:	2b2a      	cmp	r3, #42	; 0x2a
 800b9d0:	d135      	bne.n	800ba3e <_vfiprintf_r+0x1ce>
 800b9d2:	9b03      	ldr	r3, [sp, #12]
 800b9d4:	1d1a      	adds	r2, r3, #4
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	9203      	str	r2, [sp, #12]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	bfb8      	it	lt
 800b9de:	f04f 33ff 	movlt.w	r3, #4294967295
 800b9e2:	3402      	adds	r4, #2
 800b9e4:	9305      	str	r3, [sp, #20]
 800b9e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bacc <_vfiprintf_r+0x25c>
 800b9ea:	7821      	ldrb	r1, [r4, #0]
 800b9ec:	2203      	movs	r2, #3
 800b9ee:	4650      	mov	r0, sl
 800b9f0:	f7f4 fbfe 	bl	80001f0 <memchr>
 800b9f4:	b140      	cbz	r0, 800ba08 <_vfiprintf_r+0x198>
 800b9f6:	2340      	movs	r3, #64	; 0x40
 800b9f8:	eba0 000a 	sub.w	r0, r0, sl
 800b9fc:	fa03 f000 	lsl.w	r0, r3, r0
 800ba00:	9b04      	ldr	r3, [sp, #16]
 800ba02:	4303      	orrs	r3, r0
 800ba04:	3401      	adds	r4, #1
 800ba06:	9304      	str	r3, [sp, #16]
 800ba08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba0c:	482c      	ldr	r0, [pc, #176]	; (800bac0 <_vfiprintf_r+0x250>)
 800ba0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba12:	2206      	movs	r2, #6
 800ba14:	f7f4 fbec 	bl	80001f0 <memchr>
 800ba18:	2800      	cmp	r0, #0
 800ba1a:	d03f      	beq.n	800ba9c <_vfiprintf_r+0x22c>
 800ba1c:	4b29      	ldr	r3, [pc, #164]	; (800bac4 <_vfiprintf_r+0x254>)
 800ba1e:	bb1b      	cbnz	r3, 800ba68 <_vfiprintf_r+0x1f8>
 800ba20:	9b03      	ldr	r3, [sp, #12]
 800ba22:	3307      	adds	r3, #7
 800ba24:	f023 0307 	bic.w	r3, r3, #7
 800ba28:	3308      	adds	r3, #8
 800ba2a:	9303      	str	r3, [sp, #12]
 800ba2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba2e:	443b      	add	r3, r7
 800ba30:	9309      	str	r3, [sp, #36]	; 0x24
 800ba32:	e767      	b.n	800b904 <_vfiprintf_r+0x94>
 800ba34:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba38:	460c      	mov	r4, r1
 800ba3a:	2001      	movs	r0, #1
 800ba3c:	e7a5      	b.n	800b98a <_vfiprintf_r+0x11a>
 800ba3e:	2300      	movs	r3, #0
 800ba40:	3401      	adds	r4, #1
 800ba42:	9305      	str	r3, [sp, #20]
 800ba44:	4619      	mov	r1, r3
 800ba46:	f04f 0c0a 	mov.w	ip, #10
 800ba4a:	4620      	mov	r0, r4
 800ba4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba50:	3a30      	subs	r2, #48	; 0x30
 800ba52:	2a09      	cmp	r2, #9
 800ba54:	d903      	bls.n	800ba5e <_vfiprintf_r+0x1ee>
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d0c5      	beq.n	800b9e6 <_vfiprintf_r+0x176>
 800ba5a:	9105      	str	r1, [sp, #20]
 800ba5c:	e7c3      	b.n	800b9e6 <_vfiprintf_r+0x176>
 800ba5e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba62:	4604      	mov	r4, r0
 800ba64:	2301      	movs	r3, #1
 800ba66:	e7f0      	b.n	800ba4a <_vfiprintf_r+0x1da>
 800ba68:	ab03      	add	r3, sp, #12
 800ba6a:	9300      	str	r3, [sp, #0]
 800ba6c:	462a      	mov	r2, r5
 800ba6e:	4b16      	ldr	r3, [pc, #88]	; (800bac8 <_vfiprintf_r+0x258>)
 800ba70:	a904      	add	r1, sp, #16
 800ba72:	4630      	mov	r0, r6
 800ba74:	f7fd ff08 	bl	8009888 <_printf_float>
 800ba78:	4607      	mov	r7, r0
 800ba7a:	1c78      	adds	r0, r7, #1
 800ba7c:	d1d6      	bne.n	800ba2c <_vfiprintf_r+0x1bc>
 800ba7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba80:	07d9      	lsls	r1, r3, #31
 800ba82:	d405      	bmi.n	800ba90 <_vfiprintf_r+0x220>
 800ba84:	89ab      	ldrh	r3, [r5, #12]
 800ba86:	059a      	lsls	r2, r3, #22
 800ba88:	d402      	bmi.n	800ba90 <_vfiprintf_r+0x220>
 800ba8a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba8c:	f000 faaf 	bl	800bfee <__retarget_lock_release_recursive>
 800ba90:	89ab      	ldrh	r3, [r5, #12]
 800ba92:	065b      	lsls	r3, r3, #25
 800ba94:	f53f af12 	bmi.w	800b8bc <_vfiprintf_r+0x4c>
 800ba98:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba9a:	e711      	b.n	800b8c0 <_vfiprintf_r+0x50>
 800ba9c:	ab03      	add	r3, sp, #12
 800ba9e:	9300      	str	r3, [sp, #0]
 800baa0:	462a      	mov	r2, r5
 800baa2:	4b09      	ldr	r3, [pc, #36]	; (800bac8 <_vfiprintf_r+0x258>)
 800baa4:	a904      	add	r1, sp, #16
 800baa6:	4630      	mov	r0, r6
 800baa8:	f7fe f992 	bl	8009dd0 <_printf_i>
 800baac:	e7e4      	b.n	800ba78 <_vfiprintf_r+0x208>
 800baae:	bf00      	nop
 800bab0:	0800c774 	.word	0x0800c774
 800bab4:	0800c794 	.word	0x0800c794
 800bab8:	0800c754 	.word	0x0800c754
 800babc:	0800c742 	.word	0x0800c742
 800bac0:	0800c74c 	.word	0x0800c74c
 800bac4:	08009889 	.word	0x08009889
 800bac8:	0800b84b 	.word	0x0800b84b
 800bacc:	0800c748 	.word	0x0800c748

0800bad0 <__swbuf_r>:
 800bad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bad2:	460e      	mov	r6, r1
 800bad4:	4614      	mov	r4, r2
 800bad6:	4605      	mov	r5, r0
 800bad8:	b118      	cbz	r0, 800bae2 <__swbuf_r+0x12>
 800bada:	6983      	ldr	r3, [r0, #24]
 800badc:	b90b      	cbnz	r3, 800bae2 <__swbuf_r+0x12>
 800bade:	f000 f9e7 	bl	800beb0 <__sinit>
 800bae2:	4b21      	ldr	r3, [pc, #132]	; (800bb68 <__swbuf_r+0x98>)
 800bae4:	429c      	cmp	r4, r3
 800bae6:	d12b      	bne.n	800bb40 <__swbuf_r+0x70>
 800bae8:	686c      	ldr	r4, [r5, #4]
 800baea:	69a3      	ldr	r3, [r4, #24]
 800baec:	60a3      	str	r3, [r4, #8]
 800baee:	89a3      	ldrh	r3, [r4, #12]
 800baf0:	071a      	lsls	r2, r3, #28
 800baf2:	d52f      	bpl.n	800bb54 <__swbuf_r+0x84>
 800baf4:	6923      	ldr	r3, [r4, #16]
 800baf6:	b36b      	cbz	r3, 800bb54 <__swbuf_r+0x84>
 800baf8:	6923      	ldr	r3, [r4, #16]
 800bafa:	6820      	ldr	r0, [r4, #0]
 800bafc:	1ac0      	subs	r0, r0, r3
 800bafe:	6963      	ldr	r3, [r4, #20]
 800bb00:	b2f6      	uxtb	r6, r6
 800bb02:	4283      	cmp	r3, r0
 800bb04:	4637      	mov	r7, r6
 800bb06:	dc04      	bgt.n	800bb12 <__swbuf_r+0x42>
 800bb08:	4621      	mov	r1, r4
 800bb0a:	4628      	mov	r0, r5
 800bb0c:	f000 f93c 	bl	800bd88 <_fflush_r>
 800bb10:	bb30      	cbnz	r0, 800bb60 <__swbuf_r+0x90>
 800bb12:	68a3      	ldr	r3, [r4, #8]
 800bb14:	3b01      	subs	r3, #1
 800bb16:	60a3      	str	r3, [r4, #8]
 800bb18:	6823      	ldr	r3, [r4, #0]
 800bb1a:	1c5a      	adds	r2, r3, #1
 800bb1c:	6022      	str	r2, [r4, #0]
 800bb1e:	701e      	strb	r6, [r3, #0]
 800bb20:	6963      	ldr	r3, [r4, #20]
 800bb22:	3001      	adds	r0, #1
 800bb24:	4283      	cmp	r3, r0
 800bb26:	d004      	beq.n	800bb32 <__swbuf_r+0x62>
 800bb28:	89a3      	ldrh	r3, [r4, #12]
 800bb2a:	07db      	lsls	r3, r3, #31
 800bb2c:	d506      	bpl.n	800bb3c <__swbuf_r+0x6c>
 800bb2e:	2e0a      	cmp	r6, #10
 800bb30:	d104      	bne.n	800bb3c <__swbuf_r+0x6c>
 800bb32:	4621      	mov	r1, r4
 800bb34:	4628      	mov	r0, r5
 800bb36:	f000 f927 	bl	800bd88 <_fflush_r>
 800bb3a:	b988      	cbnz	r0, 800bb60 <__swbuf_r+0x90>
 800bb3c:	4638      	mov	r0, r7
 800bb3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb40:	4b0a      	ldr	r3, [pc, #40]	; (800bb6c <__swbuf_r+0x9c>)
 800bb42:	429c      	cmp	r4, r3
 800bb44:	d101      	bne.n	800bb4a <__swbuf_r+0x7a>
 800bb46:	68ac      	ldr	r4, [r5, #8]
 800bb48:	e7cf      	b.n	800baea <__swbuf_r+0x1a>
 800bb4a:	4b09      	ldr	r3, [pc, #36]	; (800bb70 <__swbuf_r+0xa0>)
 800bb4c:	429c      	cmp	r4, r3
 800bb4e:	bf08      	it	eq
 800bb50:	68ec      	ldreq	r4, [r5, #12]
 800bb52:	e7ca      	b.n	800baea <__swbuf_r+0x1a>
 800bb54:	4621      	mov	r1, r4
 800bb56:	4628      	mov	r0, r5
 800bb58:	f000 f81a 	bl	800bb90 <__swsetup_r>
 800bb5c:	2800      	cmp	r0, #0
 800bb5e:	d0cb      	beq.n	800baf8 <__swbuf_r+0x28>
 800bb60:	f04f 37ff 	mov.w	r7, #4294967295
 800bb64:	e7ea      	b.n	800bb3c <__swbuf_r+0x6c>
 800bb66:	bf00      	nop
 800bb68:	0800c774 	.word	0x0800c774
 800bb6c:	0800c794 	.word	0x0800c794
 800bb70:	0800c754 	.word	0x0800c754

0800bb74 <__ascii_wctomb>:
 800bb74:	b149      	cbz	r1, 800bb8a <__ascii_wctomb+0x16>
 800bb76:	2aff      	cmp	r2, #255	; 0xff
 800bb78:	bf85      	ittet	hi
 800bb7a:	238a      	movhi	r3, #138	; 0x8a
 800bb7c:	6003      	strhi	r3, [r0, #0]
 800bb7e:	700a      	strbls	r2, [r1, #0]
 800bb80:	f04f 30ff 	movhi.w	r0, #4294967295
 800bb84:	bf98      	it	ls
 800bb86:	2001      	movls	r0, #1
 800bb88:	4770      	bx	lr
 800bb8a:	4608      	mov	r0, r1
 800bb8c:	4770      	bx	lr
	...

0800bb90 <__swsetup_r>:
 800bb90:	4b32      	ldr	r3, [pc, #200]	; (800bc5c <__swsetup_r+0xcc>)
 800bb92:	b570      	push	{r4, r5, r6, lr}
 800bb94:	681d      	ldr	r5, [r3, #0]
 800bb96:	4606      	mov	r6, r0
 800bb98:	460c      	mov	r4, r1
 800bb9a:	b125      	cbz	r5, 800bba6 <__swsetup_r+0x16>
 800bb9c:	69ab      	ldr	r3, [r5, #24]
 800bb9e:	b913      	cbnz	r3, 800bba6 <__swsetup_r+0x16>
 800bba0:	4628      	mov	r0, r5
 800bba2:	f000 f985 	bl	800beb0 <__sinit>
 800bba6:	4b2e      	ldr	r3, [pc, #184]	; (800bc60 <__swsetup_r+0xd0>)
 800bba8:	429c      	cmp	r4, r3
 800bbaa:	d10f      	bne.n	800bbcc <__swsetup_r+0x3c>
 800bbac:	686c      	ldr	r4, [r5, #4]
 800bbae:	89a3      	ldrh	r3, [r4, #12]
 800bbb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bbb4:	0719      	lsls	r1, r3, #28
 800bbb6:	d42c      	bmi.n	800bc12 <__swsetup_r+0x82>
 800bbb8:	06dd      	lsls	r5, r3, #27
 800bbba:	d411      	bmi.n	800bbe0 <__swsetup_r+0x50>
 800bbbc:	2309      	movs	r3, #9
 800bbbe:	6033      	str	r3, [r6, #0]
 800bbc0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bbc4:	81a3      	strh	r3, [r4, #12]
 800bbc6:	f04f 30ff 	mov.w	r0, #4294967295
 800bbca:	e03e      	b.n	800bc4a <__swsetup_r+0xba>
 800bbcc:	4b25      	ldr	r3, [pc, #148]	; (800bc64 <__swsetup_r+0xd4>)
 800bbce:	429c      	cmp	r4, r3
 800bbd0:	d101      	bne.n	800bbd6 <__swsetup_r+0x46>
 800bbd2:	68ac      	ldr	r4, [r5, #8]
 800bbd4:	e7eb      	b.n	800bbae <__swsetup_r+0x1e>
 800bbd6:	4b24      	ldr	r3, [pc, #144]	; (800bc68 <__swsetup_r+0xd8>)
 800bbd8:	429c      	cmp	r4, r3
 800bbda:	bf08      	it	eq
 800bbdc:	68ec      	ldreq	r4, [r5, #12]
 800bbde:	e7e6      	b.n	800bbae <__swsetup_r+0x1e>
 800bbe0:	0758      	lsls	r0, r3, #29
 800bbe2:	d512      	bpl.n	800bc0a <__swsetup_r+0x7a>
 800bbe4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbe6:	b141      	cbz	r1, 800bbfa <__swsetup_r+0x6a>
 800bbe8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bbec:	4299      	cmp	r1, r3
 800bbee:	d002      	beq.n	800bbf6 <__swsetup_r+0x66>
 800bbf0:	4630      	mov	r0, r6
 800bbf2:	f7ff fcd5 	bl	800b5a0 <_free_r>
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	6363      	str	r3, [r4, #52]	; 0x34
 800bbfa:	89a3      	ldrh	r3, [r4, #12]
 800bbfc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc00:	81a3      	strh	r3, [r4, #12]
 800bc02:	2300      	movs	r3, #0
 800bc04:	6063      	str	r3, [r4, #4]
 800bc06:	6923      	ldr	r3, [r4, #16]
 800bc08:	6023      	str	r3, [r4, #0]
 800bc0a:	89a3      	ldrh	r3, [r4, #12]
 800bc0c:	f043 0308 	orr.w	r3, r3, #8
 800bc10:	81a3      	strh	r3, [r4, #12]
 800bc12:	6923      	ldr	r3, [r4, #16]
 800bc14:	b94b      	cbnz	r3, 800bc2a <__swsetup_r+0x9a>
 800bc16:	89a3      	ldrh	r3, [r4, #12]
 800bc18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc20:	d003      	beq.n	800bc2a <__swsetup_r+0x9a>
 800bc22:	4621      	mov	r1, r4
 800bc24:	4630      	mov	r0, r6
 800bc26:	f000 fa09 	bl	800c03c <__smakebuf_r>
 800bc2a:	89a0      	ldrh	r0, [r4, #12]
 800bc2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc30:	f010 0301 	ands.w	r3, r0, #1
 800bc34:	d00a      	beq.n	800bc4c <__swsetup_r+0xbc>
 800bc36:	2300      	movs	r3, #0
 800bc38:	60a3      	str	r3, [r4, #8]
 800bc3a:	6963      	ldr	r3, [r4, #20]
 800bc3c:	425b      	negs	r3, r3
 800bc3e:	61a3      	str	r3, [r4, #24]
 800bc40:	6923      	ldr	r3, [r4, #16]
 800bc42:	b943      	cbnz	r3, 800bc56 <__swsetup_r+0xc6>
 800bc44:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bc48:	d1ba      	bne.n	800bbc0 <__swsetup_r+0x30>
 800bc4a:	bd70      	pop	{r4, r5, r6, pc}
 800bc4c:	0781      	lsls	r1, r0, #30
 800bc4e:	bf58      	it	pl
 800bc50:	6963      	ldrpl	r3, [r4, #20]
 800bc52:	60a3      	str	r3, [r4, #8]
 800bc54:	e7f4      	b.n	800bc40 <__swsetup_r+0xb0>
 800bc56:	2000      	movs	r0, #0
 800bc58:	e7f7      	b.n	800bc4a <__swsetup_r+0xba>
 800bc5a:	bf00      	nop
 800bc5c:	20000130 	.word	0x20000130
 800bc60:	0800c774 	.word	0x0800c774
 800bc64:	0800c794 	.word	0x0800c794
 800bc68:	0800c754 	.word	0x0800c754

0800bc6c <abort>:
 800bc6c:	b508      	push	{r3, lr}
 800bc6e:	2006      	movs	r0, #6
 800bc70:	f000 fa4c 	bl	800c10c <raise>
 800bc74:	2001      	movs	r0, #1
 800bc76:	f7f5 ffd9 	bl	8001c2c <_exit>
	...

0800bc7c <__sflush_r>:
 800bc7c:	898a      	ldrh	r2, [r1, #12]
 800bc7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc82:	4605      	mov	r5, r0
 800bc84:	0710      	lsls	r0, r2, #28
 800bc86:	460c      	mov	r4, r1
 800bc88:	d458      	bmi.n	800bd3c <__sflush_r+0xc0>
 800bc8a:	684b      	ldr	r3, [r1, #4]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	dc05      	bgt.n	800bc9c <__sflush_r+0x20>
 800bc90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	dc02      	bgt.n	800bc9c <__sflush_r+0x20>
 800bc96:	2000      	movs	r0, #0
 800bc98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc9e:	2e00      	cmp	r6, #0
 800bca0:	d0f9      	beq.n	800bc96 <__sflush_r+0x1a>
 800bca2:	2300      	movs	r3, #0
 800bca4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bca8:	682f      	ldr	r7, [r5, #0]
 800bcaa:	602b      	str	r3, [r5, #0]
 800bcac:	d032      	beq.n	800bd14 <__sflush_r+0x98>
 800bcae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bcb0:	89a3      	ldrh	r3, [r4, #12]
 800bcb2:	075a      	lsls	r2, r3, #29
 800bcb4:	d505      	bpl.n	800bcc2 <__sflush_r+0x46>
 800bcb6:	6863      	ldr	r3, [r4, #4]
 800bcb8:	1ac0      	subs	r0, r0, r3
 800bcba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bcbc:	b10b      	cbz	r3, 800bcc2 <__sflush_r+0x46>
 800bcbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bcc0:	1ac0      	subs	r0, r0, r3
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	4602      	mov	r2, r0
 800bcc6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bcc8:	6a21      	ldr	r1, [r4, #32]
 800bcca:	4628      	mov	r0, r5
 800bccc:	47b0      	blx	r6
 800bcce:	1c43      	adds	r3, r0, #1
 800bcd0:	89a3      	ldrh	r3, [r4, #12]
 800bcd2:	d106      	bne.n	800bce2 <__sflush_r+0x66>
 800bcd4:	6829      	ldr	r1, [r5, #0]
 800bcd6:	291d      	cmp	r1, #29
 800bcd8:	d82c      	bhi.n	800bd34 <__sflush_r+0xb8>
 800bcda:	4a2a      	ldr	r2, [pc, #168]	; (800bd84 <__sflush_r+0x108>)
 800bcdc:	40ca      	lsrs	r2, r1
 800bcde:	07d6      	lsls	r6, r2, #31
 800bce0:	d528      	bpl.n	800bd34 <__sflush_r+0xb8>
 800bce2:	2200      	movs	r2, #0
 800bce4:	6062      	str	r2, [r4, #4]
 800bce6:	04d9      	lsls	r1, r3, #19
 800bce8:	6922      	ldr	r2, [r4, #16]
 800bcea:	6022      	str	r2, [r4, #0]
 800bcec:	d504      	bpl.n	800bcf8 <__sflush_r+0x7c>
 800bcee:	1c42      	adds	r2, r0, #1
 800bcf0:	d101      	bne.n	800bcf6 <__sflush_r+0x7a>
 800bcf2:	682b      	ldr	r3, [r5, #0]
 800bcf4:	b903      	cbnz	r3, 800bcf8 <__sflush_r+0x7c>
 800bcf6:	6560      	str	r0, [r4, #84]	; 0x54
 800bcf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bcfa:	602f      	str	r7, [r5, #0]
 800bcfc:	2900      	cmp	r1, #0
 800bcfe:	d0ca      	beq.n	800bc96 <__sflush_r+0x1a>
 800bd00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd04:	4299      	cmp	r1, r3
 800bd06:	d002      	beq.n	800bd0e <__sflush_r+0x92>
 800bd08:	4628      	mov	r0, r5
 800bd0a:	f7ff fc49 	bl	800b5a0 <_free_r>
 800bd0e:	2000      	movs	r0, #0
 800bd10:	6360      	str	r0, [r4, #52]	; 0x34
 800bd12:	e7c1      	b.n	800bc98 <__sflush_r+0x1c>
 800bd14:	6a21      	ldr	r1, [r4, #32]
 800bd16:	2301      	movs	r3, #1
 800bd18:	4628      	mov	r0, r5
 800bd1a:	47b0      	blx	r6
 800bd1c:	1c41      	adds	r1, r0, #1
 800bd1e:	d1c7      	bne.n	800bcb0 <__sflush_r+0x34>
 800bd20:	682b      	ldr	r3, [r5, #0]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d0c4      	beq.n	800bcb0 <__sflush_r+0x34>
 800bd26:	2b1d      	cmp	r3, #29
 800bd28:	d001      	beq.n	800bd2e <__sflush_r+0xb2>
 800bd2a:	2b16      	cmp	r3, #22
 800bd2c:	d101      	bne.n	800bd32 <__sflush_r+0xb6>
 800bd2e:	602f      	str	r7, [r5, #0]
 800bd30:	e7b1      	b.n	800bc96 <__sflush_r+0x1a>
 800bd32:	89a3      	ldrh	r3, [r4, #12]
 800bd34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd38:	81a3      	strh	r3, [r4, #12]
 800bd3a:	e7ad      	b.n	800bc98 <__sflush_r+0x1c>
 800bd3c:	690f      	ldr	r7, [r1, #16]
 800bd3e:	2f00      	cmp	r7, #0
 800bd40:	d0a9      	beq.n	800bc96 <__sflush_r+0x1a>
 800bd42:	0793      	lsls	r3, r2, #30
 800bd44:	680e      	ldr	r6, [r1, #0]
 800bd46:	bf08      	it	eq
 800bd48:	694b      	ldreq	r3, [r1, #20]
 800bd4a:	600f      	str	r7, [r1, #0]
 800bd4c:	bf18      	it	ne
 800bd4e:	2300      	movne	r3, #0
 800bd50:	eba6 0807 	sub.w	r8, r6, r7
 800bd54:	608b      	str	r3, [r1, #8]
 800bd56:	f1b8 0f00 	cmp.w	r8, #0
 800bd5a:	dd9c      	ble.n	800bc96 <__sflush_r+0x1a>
 800bd5c:	6a21      	ldr	r1, [r4, #32]
 800bd5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bd60:	4643      	mov	r3, r8
 800bd62:	463a      	mov	r2, r7
 800bd64:	4628      	mov	r0, r5
 800bd66:	47b0      	blx	r6
 800bd68:	2800      	cmp	r0, #0
 800bd6a:	dc06      	bgt.n	800bd7a <__sflush_r+0xfe>
 800bd6c:	89a3      	ldrh	r3, [r4, #12]
 800bd6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd72:	81a3      	strh	r3, [r4, #12]
 800bd74:	f04f 30ff 	mov.w	r0, #4294967295
 800bd78:	e78e      	b.n	800bc98 <__sflush_r+0x1c>
 800bd7a:	4407      	add	r7, r0
 800bd7c:	eba8 0800 	sub.w	r8, r8, r0
 800bd80:	e7e9      	b.n	800bd56 <__sflush_r+0xda>
 800bd82:	bf00      	nop
 800bd84:	20400001 	.word	0x20400001

0800bd88 <_fflush_r>:
 800bd88:	b538      	push	{r3, r4, r5, lr}
 800bd8a:	690b      	ldr	r3, [r1, #16]
 800bd8c:	4605      	mov	r5, r0
 800bd8e:	460c      	mov	r4, r1
 800bd90:	b913      	cbnz	r3, 800bd98 <_fflush_r+0x10>
 800bd92:	2500      	movs	r5, #0
 800bd94:	4628      	mov	r0, r5
 800bd96:	bd38      	pop	{r3, r4, r5, pc}
 800bd98:	b118      	cbz	r0, 800bda2 <_fflush_r+0x1a>
 800bd9a:	6983      	ldr	r3, [r0, #24]
 800bd9c:	b90b      	cbnz	r3, 800bda2 <_fflush_r+0x1a>
 800bd9e:	f000 f887 	bl	800beb0 <__sinit>
 800bda2:	4b14      	ldr	r3, [pc, #80]	; (800bdf4 <_fflush_r+0x6c>)
 800bda4:	429c      	cmp	r4, r3
 800bda6:	d11b      	bne.n	800bde0 <_fflush_r+0x58>
 800bda8:	686c      	ldr	r4, [r5, #4]
 800bdaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d0ef      	beq.n	800bd92 <_fflush_r+0xa>
 800bdb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bdb4:	07d0      	lsls	r0, r2, #31
 800bdb6:	d404      	bmi.n	800bdc2 <_fflush_r+0x3a>
 800bdb8:	0599      	lsls	r1, r3, #22
 800bdba:	d402      	bmi.n	800bdc2 <_fflush_r+0x3a>
 800bdbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdbe:	f000 f915 	bl	800bfec <__retarget_lock_acquire_recursive>
 800bdc2:	4628      	mov	r0, r5
 800bdc4:	4621      	mov	r1, r4
 800bdc6:	f7ff ff59 	bl	800bc7c <__sflush_r>
 800bdca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bdcc:	07da      	lsls	r2, r3, #31
 800bdce:	4605      	mov	r5, r0
 800bdd0:	d4e0      	bmi.n	800bd94 <_fflush_r+0xc>
 800bdd2:	89a3      	ldrh	r3, [r4, #12]
 800bdd4:	059b      	lsls	r3, r3, #22
 800bdd6:	d4dd      	bmi.n	800bd94 <_fflush_r+0xc>
 800bdd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdda:	f000 f908 	bl	800bfee <__retarget_lock_release_recursive>
 800bdde:	e7d9      	b.n	800bd94 <_fflush_r+0xc>
 800bde0:	4b05      	ldr	r3, [pc, #20]	; (800bdf8 <_fflush_r+0x70>)
 800bde2:	429c      	cmp	r4, r3
 800bde4:	d101      	bne.n	800bdea <_fflush_r+0x62>
 800bde6:	68ac      	ldr	r4, [r5, #8]
 800bde8:	e7df      	b.n	800bdaa <_fflush_r+0x22>
 800bdea:	4b04      	ldr	r3, [pc, #16]	; (800bdfc <_fflush_r+0x74>)
 800bdec:	429c      	cmp	r4, r3
 800bdee:	bf08      	it	eq
 800bdf0:	68ec      	ldreq	r4, [r5, #12]
 800bdf2:	e7da      	b.n	800bdaa <_fflush_r+0x22>
 800bdf4:	0800c774 	.word	0x0800c774
 800bdf8:	0800c794 	.word	0x0800c794
 800bdfc:	0800c754 	.word	0x0800c754

0800be00 <std>:
 800be00:	2300      	movs	r3, #0
 800be02:	b510      	push	{r4, lr}
 800be04:	4604      	mov	r4, r0
 800be06:	e9c0 3300 	strd	r3, r3, [r0]
 800be0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be0e:	6083      	str	r3, [r0, #8]
 800be10:	8181      	strh	r1, [r0, #12]
 800be12:	6643      	str	r3, [r0, #100]	; 0x64
 800be14:	81c2      	strh	r2, [r0, #14]
 800be16:	6183      	str	r3, [r0, #24]
 800be18:	4619      	mov	r1, r3
 800be1a:	2208      	movs	r2, #8
 800be1c:	305c      	adds	r0, #92	; 0x5c
 800be1e:	f7fd fc8b 	bl	8009738 <memset>
 800be22:	4b05      	ldr	r3, [pc, #20]	; (800be38 <std+0x38>)
 800be24:	6263      	str	r3, [r4, #36]	; 0x24
 800be26:	4b05      	ldr	r3, [pc, #20]	; (800be3c <std+0x3c>)
 800be28:	62a3      	str	r3, [r4, #40]	; 0x28
 800be2a:	4b05      	ldr	r3, [pc, #20]	; (800be40 <std+0x40>)
 800be2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800be2e:	4b05      	ldr	r3, [pc, #20]	; (800be44 <std+0x44>)
 800be30:	6224      	str	r4, [r4, #32]
 800be32:	6323      	str	r3, [r4, #48]	; 0x30
 800be34:	bd10      	pop	{r4, pc}
 800be36:	bf00      	nop
 800be38:	0800c145 	.word	0x0800c145
 800be3c:	0800c167 	.word	0x0800c167
 800be40:	0800c19f 	.word	0x0800c19f
 800be44:	0800c1c3 	.word	0x0800c1c3

0800be48 <_cleanup_r>:
 800be48:	4901      	ldr	r1, [pc, #4]	; (800be50 <_cleanup_r+0x8>)
 800be4a:	f000 b8af 	b.w	800bfac <_fwalk_reent>
 800be4e:	bf00      	nop
 800be50:	0800bd89 	.word	0x0800bd89

0800be54 <__sfmoreglue>:
 800be54:	b570      	push	{r4, r5, r6, lr}
 800be56:	2268      	movs	r2, #104	; 0x68
 800be58:	1e4d      	subs	r5, r1, #1
 800be5a:	4355      	muls	r5, r2
 800be5c:	460e      	mov	r6, r1
 800be5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800be62:	f7ff fc09 	bl	800b678 <_malloc_r>
 800be66:	4604      	mov	r4, r0
 800be68:	b140      	cbz	r0, 800be7c <__sfmoreglue+0x28>
 800be6a:	2100      	movs	r1, #0
 800be6c:	e9c0 1600 	strd	r1, r6, [r0]
 800be70:	300c      	adds	r0, #12
 800be72:	60a0      	str	r0, [r4, #8]
 800be74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800be78:	f7fd fc5e 	bl	8009738 <memset>
 800be7c:	4620      	mov	r0, r4
 800be7e:	bd70      	pop	{r4, r5, r6, pc}

0800be80 <__sfp_lock_acquire>:
 800be80:	4801      	ldr	r0, [pc, #4]	; (800be88 <__sfp_lock_acquire+0x8>)
 800be82:	f000 b8b3 	b.w	800bfec <__retarget_lock_acquire_recursive>
 800be86:	bf00      	nop
 800be88:	200020c1 	.word	0x200020c1

0800be8c <__sfp_lock_release>:
 800be8c:	4801      	ldr	r0, [pc, #4]	; (800be94 <__sfp_lock_release+0x8>)
 800be8e:	f000 b8ae 	b.w	800bfee <__retarget_lock_release_recursive>
 800be92:	bf00      	nop
 800be94:	200020c1 	.word	0x200020c1

0800be98 <__sinit_lock_acquire>:
 800be98:	4801      	ldr	r0, [pc, #4]	; (800bea0 <__sinit_lock_acquire+0x8>)
 800be9a:	f000 b8a7 	b.w	800bfec <__retarget_lock_acquire_recursive>
 800be9e:	bf00      	nop
 800bea0:	200020c2 	.word	0x200020c2

0800bea4 <__sinit_lock_release>:
 800bea4:	4801      	ldr	r0, [pc, #4]	; (800beac <__sinit_lock_release+0x8>)
 800bea6:	f000 b8a2 	b.w	800bfee <__retarget_lock_release_recursive>
 800beaa:	bf00      	nop
 800beac:	200020c2 	.word	0x200020c2

0800beb0 <__sinit>:
 800beb0:	b510      	push	{r4, lr}
 800beb2:	4604      	mov	r4, r0
 800beb4:	f7ff fff0 	bl	800be98 <__sinit_lock_acquire>
 800beb8:	69a3      	ldr	r3, [r4, #24]
 800beba:	b11b      	cbz	r3, 800bec4 <__sinit+0x14>
 800bebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bec0:	f7ff bff0 	b.w	800bea4 <__sinit_lock_release>
 800bec4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bec8:	6523      	str	r3, [r4, #80]	; 0x50
 800beca:	4b13      	ldr	r3, [pc, #76]	; (800bf18 <__sinit+0x68>)
 800becc:	4a13      	ldr	r2, [pc, #76]	; (800bf1c <__sinit+0x6c>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	62a2      	str	r2, [r4, #40]	; 0x28
 800bed2:	42a3      	cmp	r3, r4
 800bed4:	bf04      	itt	eq
 800bed6:	2301      	moveq	r3, #1
 800bed8:	61a3      	streq	r3, [r4, #24]
 800beda:	4620      	mov	r0, r4
 800bedc:	f000 f820 	bl	800bf20 <__sfp>
 800bee0:	6060      	str	r0, [r4, #4]
 800bee2:	4620      	mov	r0, r4
 800bee4:	f000 f81c 	bl	800bf20 <__sfp>
 800bee8:	60a0      	str	r0, [r4, #8]
 800beea:	4620      	mov	r0, r4
 800beec:	f000 f818 	bl	800bf20 <__sfp>
 800bef0:	2200      	movs	r2, #0
 800bef2:	60e0      	str	r0, [r4, #12]
 800bef4:	2104      	movs	r1, #4
 800bef6:	6860      	ldr	r0, [r4, #4]
 800bef8:	f7ff ff82 	bl	800be00 <std>
 800befc:	68a0      	ldr	r0, [r4, #8]
 800befe:	2201      	movs	r2, #1
 800bf00:	2109      	movs	r1, #9
 800bf02:	f7ff ff7d 	bl	800be00 <std>
 800bf06:	68e0      	ldr	r0, [r4, #12]
 800bf08:	2202      	movs	r2, #2
 800bf0a:	2112      	movs	r1, #18
 800bf0c:	f7ff ff78 	bl	800be00 <std>
 800bf10:	2301      	movs	r3, #1
 800bf12:	61a3      	str	r3, [r4, #24]
 800bf14:	e7d2      	b.n	800bebc <__sinit+0xc>
 800bf16:	bf00      	nop
 800bf18:	0800c3d8 	.word	0x0800c3d8
 800bf1c:	0800be49 	.word	0x0800be49

0800bf20 <__sfp>:
 800bf20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf22:	4607      	mov	r7, r0
 800bf24:	f7ff ffac 	bl	800be80 <__sfp_lock_acquire>
 800bf28:	4b1e      	ldr	r3, [pc, #120]	; (800bfa4 <__sfp+0x84>)
 800bf2a:	681e      	ldr	r6, [r3, #0]
 800bf2c:	69b3      	ldr	r3, [r6, #24]
 800bf2e:	b913      	cbnz	r3, 800bf36 <__sfp+0x16>
 800bf30:	4630      	mov	r0, r6
 800bf32:	f7ff ffbd 	bl	800beb0 <__sinit>
 800bf36:	3648      	adds	r6, #72	; 0x48
 800bf38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bf3c:	3b01      	subs	r3, #1
 800bf3e:	d503      	bpl.n	800bf48 <__sfp+0x28>
 800bf40:	6833      	ldr	r3, [r6, #0]
 800bf42:	b30b      	cbz	r3, 800bf88 <__sfp+0x68>
 800bf44:	6836      	ldr	r6, [r6, #0]
 800bf46:	e7f7      	b.n	800bf38 <__sfp+0x18>
 800bf48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bf4c:	b9d5      	cbnz	r5, 800bf84 <__sfp+0x64>
 800bf4e:	4b16      	ldr	r3, [pc, #88]	; (800bfa8 <__sfp+0x88>)
 800bf50:	60e3      	str	r3, [r4, #12]
 800bf52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bf56:	6665      	str	r5, [r4, #100]	; 0x64
 800bf58:	f000 f847 	bl	800bfea <__retarget_lock_init_recursive>
 800bf5c:	f7ff ff96 	bl	800be8c <__sfp_lock_release>
 800bf60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bf64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bf68:	6025      	str	r5, [r4, #0]
 800bf6a:	61a5      	str	r5, [r4, #24]
 800bf6c:	2208      	movs	r2, #8
 800bf6e:	4629      	mov	r1, r5
 800bf70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bf74:	f7fd fbe0 	bl	8009738 <memset>
 800bf78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bf7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bf80:	4620      	mov	r0, r4
 800bf82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf84:	3468      	adds	r4, #104	; 0x68
 800bf86:	e7d9      	b.n	800bf3c <__sfp+0x1c>
 800bf88:	2104      	movs	r1, #4
 800bf8a:	4638      	mov	r0, r7
 800bf8c:	f7ff ff62 	bl	800be54 <__sfmoreglue>
 800bf90:	4604      	mov	r4, r0
 800bf92:	6030      	str	r0, [r6, #0]
 800bf94:	2800      	cmp	r0, #0
 800bf96:	d1d5      	bne.n	800bf44 <__sfp+0x24>
 800bf98:	f7ff ff78 	bl	800be8c <__sfp_lock_release>
 800bf9c:	230c      	movs	r3, #12
 800bf9e:	603b      	str	r3, [r7, #0]
 800bfa0:	e7ee      	b.n	800bf80 <__sfp+0x60>
 800bfa2:	bf00      	nop
 800bfa4:	0800c3d8 	.word	0x0800c3d8
 800bfa8:	ffff0001 	.word	0xffff0001

0800bfac <_fwalk_reent>:
 800bfac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfb0:	4606      	mov	r6, r0
 800bfb2:	4688      	mov	r8, r1
 800bfb4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bfb8:	2700      	movs	r7, #0
 800bfba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bfbe:	f1b9 0901 	subs.w	r9, r9, #1
 800bfc2:	d505      	bpl.n	800bfd0 <_fwalk_reent+0x24>
 800bfc4:	6824      	ldr	r4, [r4, #0]
 800bfc6:	2c00      	cmp	r4, #0
 800bfc8:	d1f7      	bne.n	800bfba <_fwalk_reent+0xe>
 800bfca:	4638      	mov	r0, r7
 800bfcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfd0:	89ab      	ldrh	r3, [r5, #12]
 800bfd2:	2b01      	cmp	r3, #1
 800bfd4:	d907      	bls.n	800bfe6 <_fwalk_reent+0x3a>
 800bfd6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bfda:	3301      	adds	r3, #1
 800bfdc:	d003      	beq.n	800bfe6 <_fwalk_reent+0x3a>
 800bfde:	4629      	mov	r1, r5
 800bfe0:	4630      	mov	r0, r6
 800bfe2:	47c0      	blx	r8
 800bfe4:	4307      	orrs	r7, r0
 800bfe6:	3568      	adds	r5, #104	; 0x68
 800bfe8:	e7e9      	b.n	800bfbe <_fwalk_reent+0x12>

0800bfea <__retarget_lock_init_recursive>:
 800bfea:	4770      	bx	lr

0800bfec <__retarget_lock_acquire_recursive>:
 800bfec:	4770      	bx	lr

0800bfee <__retarget_lock_release_recursive>:
 800bfee:	4770      	bx	lr

0800bff0 <__swhatbuf_r>:
 800bff0:	b570      	push	{r4, r5, r6, lr}
 800bff2:	460e      	mov	r6, r1
 800bff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bff8:	2900      	cmp	r1, #0
 800bffa:	b096      	sub	sp, #88	; 0x58
 800bffc:	4614      	mov	r4, r2
 800bffe:	461d      	mov	r5, r3
 800c000:	da08      	bge.n	800c014 <__swhatbuf_r+0x24>
 800c002:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c006:	2200      	movs	r2, #0
 800c008:	602a      	str	r2, [r5, #0]
 800c00a:	061a      	lsls	r2, r3, #24
 800c00c:	d410      	bmi.n	800c030 <__swhatbuf_r+0x40>
 800c00e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c012:	e00e      	b.n	800c032 <__swhatbuf_r+0x42>
 800c014:	466a      	mov	r2, sp
 800c016:	f000 f8fb 	bl	800c210 <_fstat_r>
 800c01a:	2800      	cmp	r0, #0
 800c01c:	dbf1      	blt.n	800c002 <__swhatbuf_r+0x12>
 800c01e:	9a01      	ldr	r2, [sp, #4]
 800c020:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c024:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c028:	425a      	negs	r2, r3
 800c02a:	415a      	adcs	r2, r3
 800c02c:	602a      	str	r2, [r5, #0]
 800c02e:	e7ee      	b.n	800c00e <__swhatbuf_r+0x1e>
 800c030:	2340      	movs	r3, #64	; 0x40
 800c032:	2000      	movs	r0, #0
 800c034:	6023      	str	r3, [r4, #0]
 800c036:	b016      	add	sp, #88	; 0x58
 800c038:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c03c <__smakebuf_r>:
 800c03c:	898b      	ldrh	r3, [r1, #12]
 800c03e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c040:	079d      	lsls	r5, r3, #30
 800c042:	4606      	mov	r6, r0
 800c044:	460c      	mov	r4, r1
 800c046:	d507      	bpl.n	800c058 <__smakebuf_r+0x1c>
 800c048:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c04c:	6023      	str	r3, [r4, #0]
 800c04e:	6123      	str	r3, [r4, #16]
 800c050:	2301      	movs	r3, #1
 800c052:	6163      	str	r3, [r4, #20]
 800c054:	b002      	add	sp, #8
 800c056:	bd70      	pop	{r4, r5, r6, pc}
 800c058:	ab01      	add	r3, sp, #4
 800c05a:	466a      	mov	r2, sp
 800c05c:	f7ff ffc8 	bl	800bff0 <__swhatbuf_r>
 800c060:	9900      	ldr	r1, [sp, #0]
 800c062:	4605      	mov	r5, r0
 800c064:	4630      	mov	r0, r6
 800c066:	f7ff fb07 	bl	800b678 <_malloc_r>
 800c06a:	b948      	cbnz	r0, 800c080 <__smakebuf_r+0x44>
 800c06c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c070:	059a      	lsls	r2, r3, #22
 800c072:	d4ef      	bmi.n	800c054 <__smakebuf_r+0x18>
 800c074:	f023 0303 	bic.w	r3, r3, #3
 800c078:	f043 0302 	orr.w	r3, r3, #2
 800c07c:	81a3      	strh	r3, [r4, #12]
 800c07e:	e7e3      	b.n	800c048 <__smakebuf_r+0xc>
 800c080:	4b0d      	ldr	r3, [pc, #52]	; (800c0b8 <__smakebuf_r+0x7c>)
 800c082:	62b3      	str	r3, [r6, #40]	; 0x28
 800c084:	89a3      	ldrh	r3, [r4, #12]
 800c086:	6020      	str	r0, [r4, #0]
 800c088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c08c:	81a3      	strh	r3, [r4, #12]
 800c08e:	9b00      	ldr	r3, [sp, #0]
 800c090:	6163      	str	r3, [r4, #20]
 800c092:	9b01      	ldr	r3, [sp, #4]
 800c094:	6120      	str	r0, [r4, #16]
 800c096:	b15b      	cbz	r3, 800c0b0 <__smakebuf_r+0x74>
 800c098:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c09c:	4630      	mov	r0, r6
 800c09e:	f000 f8c9 	bl	800c234 <_isatty_r>
 800c0a2:	b128      	cbz	r0, 800c0b0 <__smakebuf_r+0x74>
 800c0a4:	89a3      	ldrh	r3, [r4, #12]
 800c0a6:	f023 0303 	bic.w	r3, r3, #3
 800c0aa:	f043 0301 	orr.w	r3, r3, #1
 800c0ae:	81a3      	strh	r3, [r4, #12]
 800c0b0:	89a0      	ldrh	r0, [r4, #12]
 800c0b2:	4305      	orrs	r5, r0
 800c0b4:	81a5      	strh	r5, [r4, #12]
 800c0b6:	e7cd      	b.n	800c054 <__smakebuf_r+0x18>
 800c0b8:	0800be49 	.word	0x0800be49

0800c0bc <_raise_r>:
 800c0bc:	291f      	cmp	r1, #31
 800c0be:	b538      	push	{r3, r4, r5, lr}
 800c0c0:	4604      	mov	r4, r0
 800c0c2:	460d      	mov	r5, r1
 800c0c4:	d904      	bls.n	800c0d0 <_raise_r+0x14>
 800c0c6:	2316      	movs	r3, #22
 800c0c8:	6003      	str	r3, [r0, #0]
 800c0ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c0ce:	bd38      	pop	{r3, r4, r5, pc}
 800c0d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c0d2:	b112      	cbz	r2, 800c0da <_raise_r+0x1e>
 800c0d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c0d8:	b94b      	cbnz	r3, 800c0ee <_raise_r+0x32>
 800c0da:	4620      	mov	r0, r4
 800c0dc:	f000 f830 	bl	800c140 <_getpid_r>
 800c0e0:	462a      	mov	r2, r5
 800c0e2:	4601      	mov	r1, r0
 800c0e4:	4620      	mov	r0, r4
 800c0e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0ea:	f000 b817 	b.w	800c11c <_kill_r>
 800c0ee:	2b01      	cmp	r3, #1
 800c0f0:	d00a      	beq.n	800c108 <_raise_r+0x4c>
 800c0f2:	1c59      	adds	r1, r3, #1
 800c0f4:	d103      	bne.n	800c0fe <_raise_r+0x42>
 800c0f6:	2316      	movs	r3, #22
 800c0f8:	6003      	str	r3, [r0, #0]
 800c0fa:	2001      	movs	r0, #1
 800c0fc:	e7e7      	b.n	800c0ce <_raise_r+0x12>
 800c0fe:	2400      	movs	r4, #0
 800c100:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c104:	4628      	mov	r0, r5
 800c106:	4798      	blx	r3
 800c108:	2000      	movs	r0, #0
 800c10a:	e7e0      	b.n	800c0ce <_raise_r+0x12>

0800c10c <raise>:
 800c10c:	4b02      	ldr	r3, [pc, #8]	; (800c118 <raise+0xc>)
 800c10e:	4601      	mov	r1, r0
 800c110:	6818      	ldr	r0, [r3, #0]
 800c112:	f7ff bfd3 	b.w	800c0bc <_raise_r>
 800c116:	bf00      	nop
 800c118:	20000130 	.word	0x20000130

0800c11c <_kill_r>:
 800c11c:	b538      	push	{r3, r4, r5, lr}
 800c11e:	4d07      	ldr	r5, [pc, #28]	; (800c13c <_kill_r+0x20>)
 800c120:	2300      	movs	r3, #0
 800c122:	4604      	mov	r4, r0
 800c124:	4608      	mov	r0, r1
 800c126:	4611      	mov	r1, r2
 800c128:	602b      	str	r3, [r5, #0]
 800c12a:	f7f5 fd6f 	bl	8001c0c <_kill>
 800c12e:	1c43      	adds	r3, r0, #1
 800c130:	d102      	bne.n	800c138 <_kill_r+0x1c>
 800c132:	682b      	ldr	r3, [r5, #0]
 800c134:	b103      	cbz	r3, 800c138 <_kill_r+0x1c>
 800c136:	6023      	str	r3, [r4, #0]
 800c138:	bd38      	pop	{r3, r4, r5, pc}
 800c13a:	bf00      	nop
 800c13c:	200020bc 	.word	0x200020bc

0800c140 <_getpid_r>:
 800c140:	f7f5 bd5c 	b.w	8001bfc <_getpid>

0800c144 <__sread>:
 800c144:	b510      	push	{r4, lr}
 800c146:	460c      	mov	r4, r1
 800c148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c14c:	f000 f894 	bl	800c278 <_read_r>
 800c150:	2800      	cmp	r0, #0
 800c152:	bfab      	itete	ge
 800c154:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c156:	89a3      	ldrhlt	r3, [r4, #12]
 800c158:	181b      	addge	r3, r3, r0
 800c15a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c15e:	bfac      	ite	ge
 800c160:	6563      	strge	r3, [r4, #84]	; 0x54
 800c162:	81a3      	strhlt	r3, [r4, #12]
 800c164:	bd10      	pop	{r4, pc}

0800c166 <__swrite>:
 800c166:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c16a:	461f      	mov	r7, r3
 800c16c:	898b      	ldrh	r3, [r1, #12]
 800c16e:	05db      	lsls	r3, r3, #23
 800c170:	4605      	mov	r5, r0
 800c172:	460c      	mov	r4, r1
 800c174:	4616      	mov	r6, r2
 800c176:	d505      	bpl.n	800c184 <__swrite+0x1e>
 800c178:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c17c:	2302      	movs	r3, #2
 800c17e:	2200      	movs	r2, #0
 800c180:	f000 f868 	bl	800c254 <_lseek_r>
 800c184:	89a3      	ldrh	r3, [r4, #12]
 800c186:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c18a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c18e:	81a3      	strh	r3, [r4, #12]
 800c190:	4632      	mov	r2, r6
 800c192:	463b      	mov	r3, r7
 800c194:	4628      	mov	r0, r5
 800c196:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c19a:	f000 b817 	b.w	800c1cc <_write_r>

0800c19e <__sseek>:
 800c19e:	b510      	push	{r4, lr}
 800c1a0:	460c      	mov	r4, r1
 800c1a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1a6:	f000 f855 	bl	800c254 <_lseek_r>
 800c1aa:	1c43      	adds	r3, r0, #1
 800c1ac:	89a3      	ldrh	r3, [r4, #12]
 800c1ae:	bf15      	itete	ne
 800c1b0:	6560      	strne	r0, [r4, #84]	; 0x54
 800c1b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c1b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c1ba:	81a3      	strheq	r3, [r4, #12]
 800c1bc:	bf18      	it	ne
 800c1be:	81a3      	strhne	r3, [r4, #12]
 800c1c0:	bd10      	pop	{r4, pc}

0800c1c2 <__sclose>:
 800c1c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1c6:	f000 b813 	b.w	800c1f0 <_close_r>
	...

0800c1cc <_write_r>:
 800c1cc:	b538      	push	{r3, r4, r5, lr}
 800c1ce:	4d07      	ldr	r5, [pc, #28]	; (800c1ec <_write_r+0x20>)
 800c1d0:	4604      	mov	r4, r0
 800c1d2:	4608      	mov	r0, r1
 800c1d4:	4611      	mov	r1, r2
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	602a      	str	r2, [r5, #0]
 800c1da:	461a      	mov	r2, r3
 800c1dc:	f7f5 fd4d 	bl	8001c7a <_write>
 800c1e0:	1c43      	adds	r3, r0, #1
 800c1e2:	d102      	bne.n	800c1ea <_write_r+0x1e>
 800c1e4:	682b      	ldr	r3, [r5, #0]
 800c1e6:	b103      	cbz	r3, 800c1ea <_write_r+0x1e>
 800c1e8:	6023      	str	r3, [r4, #0]
 800c1ea:	bd38      	pop	{r3, r4, r5, pc}
 800c1ec:	200020bc 	.word	0x200020bc

0800c1f0 <_close_r>:
 800c1f0:	b538      	push	{r3, r4, r5, lr}
 800c1f2:	4d06      	ldr	r5, [pc, #24]	; (800c20c <_close_r+0x1c>)
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	4604      	mov	r4, r0
 800c1f8:	4608      	mov	r0, r1
 800c1fa:	602b      	str	r3, [r5, #0]
 800c1fc:	f7f5 fd59 	bl	8001cb2 <_close>
 800c200:	1c43      	adds	r3, r0, #1
 800c202:	d102      	bne.n	800c20a <_close_r+0x1a>
 800c204:	682b      	ldr	r3, [r5, #0]
 800c206:	b103      	cbz	r3, 800c20a <_close_r+0x1a>
 800c208:	6023      	str	r3, [r4, #0]
 800c20a:	bd38      	pop	{r3, r4, r5, pc}
 800c20c:	200020bc 	.word	0x200020bc

0800c210 <_fstat_r>:
 800c210:	b538      	push	{r3, r4, r5, lr}
 800c212:	4d07      	ldr	r5, [pc, #28]	; (800c230 <_fstat_r+0x20>)
 800c214:	2300      	movs	r3, #0
 800c216:	4604      	mov	r4, r0
 800c218:	4608      	mov	r0, r1
 800c21a:	4611      	mov	r1, r2
 800c21c:	602b      	str	r3, [r5, #0]
 800c21e:	f7f5 fd54 	bl	8001cca <_fstat>
 800c222:	1c43      	adds	r3, r0, #1
 800c224:	d102      	bne.n	800c22c <_fstat_r+0x1c>
 800c226:	682b      	ldr	r3, [r5, #0]
 800c228:	b103      	cbz	r3, 800c22c <_fstat_r+0x1c>
 800c22a:	6023      	str	r3, [r4, #0]
 800c22c:	bd38      	pop	{r3, r4, r5, pc}
 800c22e:	bf00      	nop
 800c230:	200020bc 	.word	0x200020bc

0800c234 <_isatty_r>:
 800c234:	b538      	push	{r3, r4, r5, lr}
 800c236:	4d06      	ldr	r5, [pc, #24]	; (800c250 <_isatty_r+0x1c>)
 800c238:	2300      	movs	r3, #0
 800c23a:	4604      	mov	r4, r0
 800c23c:	4608      	mov	r0, r1
 800c23e:	602b      	str	r3, [r5, #0]
 800c240:	f7f5 fd53 	bl	8001cea <_isatty>
 800c244:	1c43      	adds	r3, r0, #1
 800c246:	d102      	bne.n	800c24e <_isatty_r+0x1a>
 800c248:	682b      	ldr	r3, [r5, #0]
 800c24a:	b103      	cbz	r3, 800c24e <_isatty_r+0x1a>
 800c24c:	6023      	str	r3, [r4, #0]
 800c24e:	bd38      	pop	{r3, r4, r5, pc}
 800c250:	200020bc 	.word	0x200020bc

0800c254 <_lseek_r>:
 800c254:	b538      	push	{r3, r4, r5, lr}
 800c256:	4d07      	ldr	r5, [pc, #28]	; (800c274 <_lseek_r+0x20>)
 800c258:	4604      	mov	r4, r0
 800c25a:	4608      	mov	r0, r1
 800c25c:	4611      	mov	r1, r2
 800c25e:	2200      	movs	r2, #0
 800c260:	602a      	str	r2, [r5, #0]
 800c262:	461a      	mov	r2, r3
 800c264:	f7f5 fd4c 	bl	8001d00 <_lseek>
 800c268:	1c43      	adds	r3, r0, #1
 800c26a:	d102      	bne.n	800c272 <_lseek_r+0x1e>
 800c26c:	682b      	ldr	r3, [r5, #0]
 800c26e:	b103      	cbz	r3, 800c272 <_lseek_r+0x1e>
 800c270:	6023      	str	r3, [r4, #0]
 800c272:	bd38      	pop	{r3, r4, r5, pc}
 800c274:	200020bc 	.word	0x200020bc

0800c278 <_read_r>:
 800c278:	b538      	push	{r3, r4, r5, lr}
 800c27a:	4d07      	ldr	r5, [pc, #28]	; (800c298 <_read_r+0x20>)
 800c27c:	4604      	mov	r4, r0
 800c27e:	4608      	mov	r0, r1
 800c280:	4611      	mov	r1, r2
 800c282:	2200      	movs	r2, #0
 800c284:	602a      	str	r2, [r5, #0]
 800c286:	461a      	mov	r2, r3
 800c288:	f7f5 fcda 	bl	8001c40 <_read>
 800c28c:	1c43      	adds	r3, r0, #1
 800c28e:	d102      	bne.n	800c296 <_read_r+0x1e>
 800c290:	682b      	ldr	r3, [r5, #0]
 800c292:	b103      	cbz	r3, 800c296 <_read_r+0x1e>
 800c294:	6023      	str	r3, [r4, #0]
 800c296:	bd38      	pop	{r3, r4, r5, pc}
 800c298:	200020bc 	.word	0x200020bc

0800c29c <_init>:
 800c29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c29e:	bf00      	nop
 800c2a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2a2:	bc08      	pop	{r3}
 800c2a4:	469e      	mov	lr, r3
 800c2a6:	4770      	bx	lr

0800c2a8 <_fini>:
 800c2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2aa:	bf00      	nop
 800c2ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2ae:	bc08      	pop	{r3}
 800c2b0:	469e      	mov	lr, r3
 800c2b2:	4770      	bx	lr
