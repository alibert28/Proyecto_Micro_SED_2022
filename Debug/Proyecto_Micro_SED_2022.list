
Proyecto_Micro_SED_2022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087a4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  0800893c  0800893c  0001893c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b34  08008b34  00020194  2**0
                  CONTENTS
  4 .ARM          00000008  08008b34  08008b34  00018b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b3c  08008b3c  00020194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b3c  08008b3c  00018b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b40  08008b40  00018b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000194  20000000  08008b44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dac  20000194  08008cd8  00020194  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f40  08008cd8  00021f40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020194  2**0
                  CONTENTS, READONLY
 12 .debug_info   000153b8  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000327c  00000000  00000000  0003557c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001258  00000000  00000000  000387f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f0  00000000  00000000  00039a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a522  00000000  00000000  0003ab40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015c2d  00000000  00000000  00055062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b6e0  00000000  00000000  0006ac8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010636f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dac  00000000  00000000  001063c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000194 	.word	0x20000194
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008924 	.word	0x08008924

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000198 	.word	0x20000198
 80001d4:	08008924 	.word	0x08008924

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <TemporizadorMinutos>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/************************************* TIEMPO ********************************************/

void TemporizadorMinutos(int tiempo){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	contando = 1;
 80004e4:	4b07      	ldr	r3, [pc, #28]	; (8000504 <TemporizadorMinutos+0x28>)
 80004e6:	2201      	movs	r2, #1
 80004e8:	601a      	str	r2, [r3, #0]
	minutos = 0;
 80004ea:	4b07      	ldr	r3, [pc, #28]	; (8000508 <TemporizadorMinutos+0x2c>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
	tiempo_min = tiempo;
 80004f0:	4a06      	ldr	r2, [pc, #24]	; (800050c <TemporizadorMinutos+0x30>)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	6013      	str	r3, [r2, #0]
	//fin_de_carrera_min = 0;
	HAL_TIM_Base_Start_IT(&htim3);
 80004f6:	4806      	ldr	r0, [pc, #24]	; (8000510 <TemporizadorMinutos+0x34>)
 80004f8:	f003 fbce 	bl	8003c98 <HAL_TIM_Base_Start_IT>
}
 80004fc:	bf00      	nop
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	200002e0 	.word	0x200002e0
 8000508:	200002d0 	.word	0x200002d0
 800050c:	200002d8 	.word	0x200002d8
 8000510:	20000240 	.word	0x20000240

08000514 <displayModo>:
static State_Type Current_State;
volatile int btn_pressed;

/*********************************** GENERAL ********************************************/

void displayModo(int k){
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b08e      	sub	sp, #56	; 0x38
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	int i;
	char msg[19];
	switch(k){
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2b03      	cmp	r3, #3
 8000520:	d83e      	bhi.n	80005a0 <displayModo+0x8c>
 8000522:	a201      	add	r2, pc, #4	; (adr r2, 8000528 <displayModo+0x14>)
 8000524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000528:	08000539 	.word	0x08000539
 800052c:	08000553 	.word	0x08000553
 8000530:	0800056d 	.word	0x0800056d
 8000534:	08000587 	.word	0x08000587
	case 0:
		strcpy(msg,"MODO: ESPERA    \r\n");
 8000538:	4b28      	ldr	r3, [pc, #160]	; (80005dc <displayModo+0xc8>)
 800053a:	f107 0420 	add.w	r4, r7, #32
 800053e:	461d      	mov	r5, r3
 8000540:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000542:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000544:	682b      	ldr	r3, [r5, #0]
 8000546:	461a      	mov	r2, r3
 8000548:	8022      	strh	r2, [r4, #0]
 800054a:	3402      	adds	r4, #2
 800054c:	0c1b      	lsrs	r3, r3, #16
 800054e:	7023      	strb	r3, [r4, #0]
		break;
 8000550:	e026      	b.n	80005a0 <displayModo+0x8c>
	case 1:
		strcpy(msg,"MODO: MANUAL    \r\n");
 8000552:	4b23      	ldr	r3, [pc, #140]	; (80005e0 <displayModo+0xcc>)
 8000554:	f107 0420 	add.w	r4, r7, #32
 8000558:	461d      	mov	r5, r3
 800055a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800055c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800055e:	682b      	ldr	r3, [r5, #0]
 8000560:	461a      	mov	r2, r3
 8000562:	8022      	strh	r2, [r4, #0]
 8000564:	3402      	adds	r4, #2
 8000566:	0c1b      	lsrs	r3, r3, #16
 8000568:	7023      	strb	r3, [r4, #0]
		break;
 800056a:	e019      	b.n	80005a0 <displayModo+0x8c>
	case 2:
		strcpy(msg,"MODO: HORARIO   \r\n");
 800056c:	4b1d      	ldr	r3, [pc, #116]	; (80005e4 <displayModo+0xd0>)
 800056e:	f107 0420 	add.w	r4, r7, #32
 8000572:	461d      	mov	r5, r3
 8000574:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000578:	682b      	ldr	r3, [r5, #0]
 800057a:	461a      	mov	r2, r3
 800057c:	8022      	strh	r2, [r4, #0]
 800057e:	3402      	adds	r4, #2
 8000580:	0c1b      	lsrs	r3, r3, #16
 8000582:	7023      	strb	r3, [r4, #0]
		break;
 8000584:	e00c      	b.n	80005a0 <displayModo+0x8c>
	case 3:
		strcpy(msg,"MODO: AUTOMATICO\r\n");
 8000586:	4b18      	ldr	r3, [pc, #96]	; (80005e8 <displayModo+0xd4>)
 8000588:	f107 0420 	add.w	r4, r7, #32
 800058c:	461d      	mov	r5, r3
 800058e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000590:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000592:	682b      	ldr	r3, [r5, #0]
 8000594:	461a      	mov	r2, r3
 8000596:	8022      	strh	r2, [r4, #0]
 8000598:	3402      	adds	r4, #2
 800059a:	0c1b      	lsrs	r3, r3, #16
 800059c:	7023      	strb	r3, [r4, #0]
		break;
 800059e:	bf00      	nop
	}
	uint8_t data[sizeof(msg)];
	for(i = 0;i<=sizeof(msg);i++){
 80005a0:	2300      	movs	r3, #0
 80005a2:	637b      	str	r3, [r7, #52]	; 0x34
 80005a4:	e00d      	b.n	80005c2 <displayModo+0xae>
	  data[i] = msg[i];
 80005a6:	f107 0220 	add.w	r2, r7, #32
 80005aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005ac:	4413      	add	r3, r2
 80005ae:	7819      	ldrb	r1, [r3, #0]
 80005b0:	f107 020c 	add.w	r2, r7, #12
 80005b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005b6:	4413      	add	r3, r2
 80005b8:	460a      	mov	r2, r1
 80005ba:	701a      	strb	r2, [r3, #0]
	for(i = 0;i<=sizeof(msg);i++){
 80005bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005be:	3301      	adds	r3, #1
 80005c0:	637b      	str	r3, [r7, #52]	; 0x34
 80005c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005c4:	2b13      	cmp	r3, #19
 80005c6:	d9ee      	bls.n	80005a6 <displayModo+0x92>
	};
	CDC_Transmit_FS(data, sizeof(data));
 80005c8:	f107 030c 	add.w	r3, r7, #12
 80005cc:	2113      	movs	r1, #19
 80005ce:	4618      	mov	r0, r3
 80005d0:	f007 fc70 	bl	8007eb4 <CDC_Transmit_FS>
}
 80005d4:	bf00      	nop
 80005d6:	3738      	adds	r7, #56	; 0x38
 80005d8:	46bd      	mov	sp, r7
 80005da:	bdb0      	pop	{r4, r5, r7, pc}
 80005dc:	08008988 	.word	0x08008988
 80005e0:	0800899c 	.word	0x0800899c
 80005e4:	080089b0 	.word	0x080089b0
 80005e8:	080089c4 	.word	0x080089c4

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f000 fe2c 	bl	800124c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f81a 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f8:	f000 f9be 	bl	8000978 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005fc:	f000 f87e 	bl	80006fc <MX_ADC1_Init>
  MX_TIM3_Init();
 8000600:	f000 f91e 	bl	8000840 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000604:	f000 f96a 	bl	80008dc <MX_TIM5_Init>
  MX_USB_DEVICE_Init();
 8000608:	f007 fb80 	bl	8007d0c <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 800060c:	f000 f8ca 	bl	80007a4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  state_machine_init();
 8000610:	f000 fa2a 	bl	8000a68 <state_machine_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  state_table[Current_State]();
 8000614:	4b03      	ldr	r3, [pc, #12]	; (8000624 <main+0x38>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	461a      	mov	r2, r3
 800061a:	4b03      	ldr	r3, [pc, #12]	; (8000628 <main+0x3c>)
 800061c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000620:	4798      	blx	r3
 8000622:	e7f7      	b.n	8000614 <main+0x28>
 8000624:	20000328 	.word	0x20000328
 8000628:	2000001c 	.word	0x2000001c

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b094      	sub	sp, #80	; 0x50
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	2230      	movs	r2, #48	; 0x30
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f008 f8c8 	bl	80087d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	4b27      	ldr	r3, [pc, #156]	; (80006f4 <SystemClock_Config+0xc8>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	4a26      	ldr	r2, [pc, #152]	; (80006f4 <SystemClock_Config+0xc8>)
 800065a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800065e:	6413      	str	r3, [r2, #64]	; 0x40
 8000660:	4b24      	ldr	r3, [pc, #144]	; (80006f4 <SystemClock_Config+0xc8>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000668:	60bb      	str	r3, [r7, #8]
 800066a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
 8000670:	4b21      	ldr	r3, [pc, #132]	; (80006f8 <SystemClock_Config+0xcc>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a20      	ldr	r2, [pc, #128]	; (80006f8 <SystemClock_Config+0xcc>)
 8000676:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800067a:	6013      	str	r3, [r2, #0]
 800067c:	4b1e      	ldr	r3, [pc, #120]	; (80006f8 <SystemClock_Config+0xcc>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000688:	2301      	movs	r3, #1
 800068a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800068c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000690:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000692:	2302      	movs	r3, #2
 8000694:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000696:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800069a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800069c:	2304      	movs	r3, #4
 800069e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80006a0:	23c0      	movs	r3, #192	; 0xc0
 80006a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006a4:	2304      	movs	r3, #4
 80006a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80006a8:	2308      	movs	r3, #8
 80006aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ac:	f107 0320 	add.w	r3, r7, #32
 80006b0:	4618      	mov	r0, r3
 80006b2:	f002 fe31 	bl	8003318 <HAL_RCC_OscConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006bc:	f000 fc6e 	bl	8000f9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c0:	230f      	movs	r3, #15
 80006c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c4:	2302      	movs	r3, #2
 80006c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006d6:	f107 030c 	add.w	r3, r7, #12
 80006da:	2103      	movs	r1, #3
 80006dc:	4618      	mov	r0, r3
 80006de:	f003 f893 	bl	8003808 <HAL_RCC_ClockConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006e8:	f000 fc58 	bl	8000f9c <Error_Handler>
  }
}
 80006ec:	bf00      	nop
 80006ee:	3750      	adds	r7, #80	; 0x50
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40007000 	.word	0x40007000

080006fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000702:	463b      	mov	r3, r7
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800070e:	4b22      	ldr	r3, [pc, #136]	; (8000798 <MX_ADC1_Init+0x9c>)
 8000710:	4a22      	ldr	r2, [pc, #136]	; (800079c <MX_ADC1_Init+0xa0>)
 8000712:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000714:	4b20      	ldr	r3, [pc, #128]	; (8000798 <MX_ADC1_Init+0x9c>)
 8000716:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800071a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <MX_ADC1_Init+0x9c>)
 800071e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000722:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000724:	4b1c      	ldr	r3, [pc, #112]	; (8000798 <MX_ADC1_Init+0x9c>)
 8000726:	2200      	movs	r2, #0
 8000728:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800072a:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <MX_ADC1_Init+0x9c>)
 800072c:	2200      	movs	r2, #0
 800072e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000730:	4b19      	ldr	r3, [pc, #100]	; (8000798 <MX_ADC1_Init+0x9c>)
 8000732:	2200      	movs	r2, #0
 8000734:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000738:	4b17      	ldr	r3, [pc, #92]	; (8000798 <MX_ADC1_Init+0x9c>)
 800073a:	2200      	movs	r2, #0
 800073c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800073e:	4b16      	ldr	r3, [pc, #88]	; (8000798 <MX_ADC1_Init+0x9c>)
 8000740:	4a17      	ldr	r2, [pc, #92]	; (80007a0 <MX_ADC1_Init+0xa4>)
 8000742:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000744:	4b14      	ldr	r3, [pc, #80]	; (8000798 <MX_ADC1_Init+0x9c>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800074a:	4b13      	ldr	r3, [pc, #76]	; (8000798 <MX_ADC1_Init+0x9c>)
 800074c:	2201      	movs	r2, #1
 800074e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000750:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_ADC1_Init+0x9c>)
 8000752:	2200      	movs	r2, #0
 8000754:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_ADC1_Init+0x9c>)
 800075a:	2201      	movs	r2, #1
 800075c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800075e:	480e      	ldr	r0, [pc, #56]	; (8000798 <MX_ADC1_Init+0x9c>)
 8000760:	f000 fe0a 	bl	8001378 <HAL_ADC_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800076a:	f000 fc17 	bl	8000f9c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800076e:	2304      	movs	r3, #4
 8000770:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000772:	2301      	movs	r3, #1
 8000774:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077a:	463b      	mov	r3, r7
 800077c:	4619      	mov	r1, r3
 800077e:	4806      	ldr	r0, [pc, #24]	; (8000798 <MX_ADC1_Init+0x9c>)
 8000780:	f000 fe3e 	bl	8001400 <HAL_ADC_ConfigChannel>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800078a:	f000 fc07 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	3710      	adds	r7, #16
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	200001b0 	.word	0x200001b0
 800079c:	40012000 	.word	0x40012000
 80007a0:	0f000001 	.word	0x0f000001

080007a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b086      	sub	sp, #24
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007aa:	f107 0308 	add.w	r3, r7, #8
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b8:	463b      	mov	r3, r7
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007c0:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <MX_TIM2_Init+0x94>)
 80007c2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47999;
 80007c8:	4b1b      	ldr	r3, [pc, #108]	; (8000838 <MX_TIM2_Init+0x94>)
 80007ca:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 80007ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d0:	4b19      	ldr	r3, [pc, #100]	; (8000838 <MX_TIM2_Init+0x94>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3599999;
 80007d6:	4b18      	ldr	r3, [pc, #96]	; (8000838 <MX_TIM2_Init+0x94>)
 80007d8:	4a18      	ldr	r2, [pc, #96]	; (800083c <MX_TIM2_Init+0x98>)
 80007da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007dc:	4b16      	ldr	r3, [pc, #88]	; (8000838 <MX_TIM2_Init+0x94>)
 80007de:	2200      	movs	r2, #0
 80007e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007e2:	4b15      	ldr	r3, [pc, #84]	; (8000838 <MX_TIM2_Init+0x94>)
 80007e4:	2280      	movs	r2, #128	; 0x80
 80007e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007e8:	4813      	ldr	r0, [pc, #76]	; (8000838 <MX_TIM2_Init+0x94>)
 80007ea:	f003 fa05 	bl	8003bf8 <HAL_TIM_Base_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80007f4:	f000 fbd2 	bl	8000f9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007fe:	f107 0308 	add.w	r3, r7, #8
 8000802:	4619      	mov	r1, r3
 8000804:	480c      	ldr	r0, [pc, #48]	; (8000838 <MX_TIM2_Init+0x94>)
 8000806:	f003 fbe0 	bl	8003fca <HAL_TIM_ConfigClockSource>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000810:	f000 fbc4 	bl	8000f9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000814:	2300      	movs	r3, #0
 8000816:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000818:	2300      	movs	r3, #0
 800081a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800081c:	463b      	mov	r3, r7
 800081e:	4619      	mov	r1, r3
 8000820:	4805      	ldr	r0, [pc, #20]	; (8000838 <MX_TIM2_Init+0x94>)
 8000822:	f003 fddb 	bl	80043dc <HAL_TIMEx_MasterConfigSynchronization>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800082c:	f000 fbb6 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000830:	bf00      	nop
 8000832:	3718      	adds	r7, #24
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	200001f8 	.word	0x200001f8
 800083c:	0036ee7f 	.word	0x0036ee7f

08000840 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000846:	f107 0308 	add.w	r3, r7, #8
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000854:	463b      	mov	r3, r7
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800085c:	4b1d      	ldr	r3, [pc, #116]	; (80008d4 <MX_TIM3_Init+0x94>)
 800085e:	4a1e      	ldr	r2, [pc, #120]	; (80008d8 <MX_TIM3_Init+0x98>)
 8000860:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47999;
 8000862:	4b1c      	ldr	r3, [pc, #112]	; (80008d4 <MX_TIM3_Init+0x94>)
 8000864:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000868:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800086a:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <MX_TIM3_Init+0x94>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 8000870:	4b18      	ldr	r3, [pc, #96]	; (80008d4 <MX_TIM3_Init+0x94>)
 8000872:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8000876:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000878:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <MX_TIM3_Init+0x94>)
 800087a:	2200      	movs	r2, #0
 800087c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800087e:	4b15      	ldr	r3, [pc, #84]	; (80008d4 <MX_TIM3_Init+0x94>)
 8000880:	2280      	movs	r2, #128	; 0x80
 8000882:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000884:	4813      	ldr	r0, [pc, #76]	; (80008d4 <MX_TIM3_Init+0x94>)
 8000886:	f003 f9b7 	bl	8003bf8 <HAL_TIM_Base_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000890:	f000 fb84 	bl	8000f9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000894:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000898:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800089a:	f107 0308 	add.w	r3, r7, #8
 800089e:	4619      	mov	r1, r3
 80008a0:	480c      	ldr	r0, [pc, #48]	; (80008d4 <MX_TIM3_Init+0x94>)
 80008a2:	f003 fb92 	bl	8003fca <HAL_TIM_ConfigClockSource>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80008ac:	f000 fb76 	bl	8000f9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b0:	2300      	movs	r3, #0
 80008b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008b8:	463b      	mov	r3, r7
 80008ba:	4619      	mov	r1, r3
 80008bc:	4805      	ldr	r0, [pc, #20]	; (80008d4 <MX_TIM3_Init+0x94>)
 80008be:	f003 fd8d 	bl	80043dc <HAL_TIMEx_MasterConfigSynchronization>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80008c8:	f000 fb68 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008cc:	bf00      	nop
 80008ce:	3718      	adds	r7, #24
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000240 	.word	0x20000240
 80008d8:	40000400 	.word	0x40000400

080008dc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008e2:	f107 0308 	add.w	r3, r7, #8
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008f0:	463b      	mov	r3, r7
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80008f8:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <MX_TIM5_Init+0x94>)
 80008fa:	4a1e      	ldr	r2, [pc, #120]	; (8000974 <MX_TIM5_Init+0x98>)
 80008fc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 48-1;
 80008fe:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <MX_TIM5_Init+0x94>)
 8000900:	222f      	movs	r2, #47	; 0x2f
 8000902:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000904:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <MX_TIM5_Init+0x94>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xffff-1;
 800090a:	4b19      	ldr	r3, [pc, #100]	; (8000970 <MX_TIM5_Init+0x94>)
 800090c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000910:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000912:	4b17      	ldr	r3, [pc, #92]	; (8000970 <MX_TIM5_Init+0x94>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000918:	4b15      	ldr	r3, [pc, #84]	; (8000970 <MX_TIM5_Init+0x94>)
 800091a:	2200      	movs	r2, #0
 800091c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800091e:	4814      	ldr	r0, [pc, #80]	; (8000970 <MX_TIM5_Init+0x94>)
 8000920:	f003 f96a 	bl	8003bf8 <HAL_TIM_Base_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800092a:	f000 fb37 	bl	8000f9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800092e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000932:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000934:	f107 0308 	add.w	r3, r7, #8
 8000938:	4619      	mov	r1, r3
 800093a:	480d      	ldr	r0, [pc, #52]	; (8000970 <MX_TIM5_Init+0x94>)
 800093c:	f003 fb45 	bl	8003fca <HAL_TIM_ConfigClockSource>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8000946:	f000 fb29 	bl	8000f9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800094a:	2300      	movs	r3, #0
 800094c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000952:	463b      	mov	r3, r7
 8000954:	4619      	mov	r1, r3
 8000956:	4806      	ldr	r0, [pc, #24]	; (8000970 <MX_TIM5_Init+0x94>)
 8000958:	f003 fd40 	bl	80043dc <HAL_TIMEx_MasterConfigSynchronization>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8000962:	f000 fb1b 	bl	8000f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	3718      	adds	r7, #24
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000288 	.word	0x20000288
 8000974:	40000c00 	.word	0x40000c00

08000978 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	; 0x28
 800097c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
 800098c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	613b      	str	r3, [r7, #16]
 8000992:	4b32      	ldr	r3, [pc, #200]	; (8000a5c <MX_GPIO_Init+0xe4>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a31      	ldr	r2, [pc, #196]	; (8000a5c <MX_GPIO_Init+0xe4>)
 8000998:	f043 0304 	orr.w	r3, r3, #4
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b2f      	ldr	r3, [pc, #188]	; (8000a5c <MX_GPIO_Init+0xe4>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0304 	and.w	r3, r3, #4
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	4b2b      	ldr	r3, [pc, #172]	; (8000a5c <MX_GPIO_Init+0xe4>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a2a      	ldr	r2, [pc, #168]	; (8000a5c <MX_GPIO_Init+0xe4>)
 80009b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b28      	ldr	r3, [pc, #160]	; (8000a5c <MX_GPIO_Init+0xe4>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	4b24      	ldr	r3, [pc, #144]	; (8000a5c <MX_GPIO_Init+0xe4>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a23      	ldr	r2, [pc, #140]	; (8000a5c <MX_GPIO_Init+0xe4>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b21      	ldr	r3, [pc, #132]	; (8000a5c <MX_GPIO_Init+0xe4>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	4b1d      	ldr	r3, [pc, #116]	; (8000a5c <MX_GPIO_Init+0xe4>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a1c      	ldr	r2, [pc, #112]	; (8000a5c <MX_GPIO_Init+0xe4>)
 80009ec:	f043 0308 	orr.w	r3, r3, #8
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b1a      	ldr	r3, [pc, #104]	; (8000a5c <MX_GPIO_Init+0xe4>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0308 	and.w	r3, r3, #8
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8000a04:	4816      	ldr	r0, [pc, #88]	; (8000a60 <MX_GPIO_Init+0xe8>)
 8000a06:	f001 f9d7 	bl	8001db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a0e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4811      	ldr	r0, [pc, #68]	; (8000a64 <MX_GPIO_Init+0xec>)
 8000a20:	f001 f82e 	bl	8001a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000a24:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000a28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a32:	2300      	movs	r3, #0
 8000a34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4808      	ldr	r0, [pc, #32]	; (8000a60 <MX_GPIO_Init+0xe8>)
 8000a3e:	f001 f81f 	bl	8001a80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	2100      	movs	r1, #0
 8000a46:	2006      	movs	r0, #6
 8000a48:	f000 ffe3 	bl	8001a12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a4c:	2006      	movs	r0, #6
 8000a4e:	f000 fffc 	bl	8001a4a <HAL_NVIC_EnableIRQ>

}
 8000a52:	bf00      	nop
 8000a54:	3728      	adds	r7, #40	; 0x28
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40020c00 	.word	0x40020c00
 8000a64:	40020000 	.word	0x40020000

08000a68 <state_machine_init>:
void LimpiarProcesos(){
	minutos = 0;
	memset(&buffer[0], 0, sizeof(buffer));
}

void state_machine_init(void){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
	displayModo(ESPERA);
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f7ff fd51 	bl	8000514 <displayModo>
	Current_State = ESPERA;
 8000a72:	4b04      	ldr	r3, [pc, #16]	; (8000a84 <state_machine_init+0x1c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	701a      	strb	r2, [r3, #0]
	btn_pressed = 0;
 8000a78:	4b03      	ldr	r3, [pc, #12]	; (8000a88 <state_machine_init+0x20>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000328 	.word	0x20000328
 8000a88:	2000032c 	.word	0x2000032c

08000a8c <ESPERA_function>:
void ESPERA_function(void){
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b084      	sub	sp, #16
 8000a90:	af00      	add	r7, sp, #0
	char *s  = strstr((char*)buffer,str_CAMBIAR_A_MODO);
 8000a92:	4b2d      	ldr	r3, [pc, #180]	; (8000b48 <ESPERA_function+0xbc>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4619      	mov	r1, r3
 8000a98:	482c      	ldr	r0, [pc, #176]	; (8000b4c <ESPERA_function+0xc0>)
 8000a9a:	f007 fea1 	bl	80087e0 <strstr>
 8000a9e:	60f8      	str	r0, [r7, #12]
	char *sH = strstr((char*)buffer,str_HORARIO);
 8000aa0:	4b2b      	ldr	r3, [pc, #172]	; (8000b50 <ESPERA_function+0xc4>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4829      	ldr	r0, [pc, #164]	; (8000b4c <ESPERA_function+0xc0>)
 8000aa8:	f007 fe9a 	bl	80087e0 <strstr>
 8000aac:	60b8      	str	r0, [r7, #8]
	char *sM = strstr((char*)buffer,str_MANUAL);
 8000aae:	4b29      	ldr	r3, [pc, #164]	; (8000b54 <ESPERA_function+0xc8>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4825      	ldr	r0, [pc, #148]	; (8000b4c <ESPERA_function+0xc0>)
 8000ab6:	f007 fe93 	bl	80087e0 <strstr>
 8000aba:	6078      	str	r0, [r7, #4]
	char *sA = strstr((char*)buffer,str_AUTOMATICO);
 8000abc:	4b26      	ldr	r3, [pc, #152]	; (8000b58 <ESPERA_function+0xcc>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4822      	ldr	r0, [pc, #136]	; (8000b4c <ESPERA_function+0xc0>)
 8000ac4:	f007 fe8c 	bl	80087e0 <strstr>
 8000ac8:	6038      	str	r0, [r7, #0]
	//Funcionamiento del modo ESPERA
	//
	if(btn_pressed == 1){
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <ESPERA_function+0xd0>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d10c      	bne.n	8000aec <ESPERA_function+0x60>
		btn_pressed = 0;
 8000ad2:	4b22      	ldr	r3, [pc, #136]	; (8000b5c <ESPERA_function+0xd0>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
		displayModo(MANUAL);
 8000ad8:	2001      	movs	r0, #1
 8000ada:	f7ff fd1b 	bl	8000514 <displayModo>
		buffer[0] = '\0';
 8000ade:	4b1b      	ldr	r3, [pc, #108]	; (8000b4c <ESPERA_function+0xc0>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	701a      	strb	r2, [r3, #0]
		Current_State = MANUAL;
 8000ae4:	4b1e      	ldr	r3, [pc, #120]	; (8000b60 <ESPERA_function+0xd4>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	701a      	strb	r2, [r3, #0]
			displayModo(AUTOMATICO);
			buffer[0] = '\0';
			Current_State = AUTOMATICO;
		}
	}
}
 8000aea:	e028      	b.n	8000b3e <ESPERA_function+0xb2>
	else if(s != NULL){
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d025      	beq.n	8000b3e <ESPERA_function+0xb2>
		if(sH != NULL){
 8000af2:	68bb      	ldr	r3, [r7, #8]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d009      	beq.n	8000b0c <ESPERA_function+0x80>
			displayModo(HORARIO);
 8000af8:	2002      	movs	r0, #2
 8000afa:	f7ff fd0b 	bl	8000514 <displayModo>
			buffer[0] = '\0';
 8000afe:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <ESPERA_function+0xc0>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	701a      	strb	r2, [r3, #0]
			Current_State = HORARIO;
 8000b04:	4b16      	ldr	r3, [pc, #88]	; (8000b60 <ESPERA_function+0xd4>)
 8000b06:	2202      	movs	r2, #2
 8000b08:	701a      	strb	r2, [r3, #0]
}
 8000b0a:	e018      	b.n	8000b3e <ESPERA_function+0xb2>
		else if(sM != NULL){
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d009      	beq.n	8000b26 <ESPERA_function+0x9a>
			displayModo(MANUAL);
 8000b12:	2001      	movs	r0, #1
 8000b14:	f7ff fcfe 	bl	8000514 <displayModo>
			buffer[0] = '\0';
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <ESPERA_function+0xc0>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	701a      	strb	r2, [r3, #0]
			Current_State = MANUAL;
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <ESPERA_function+0xd4>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	701a      	strb	r2, [r3, #0]
}
 8000b24:	e00b      	b.n	8000b3e <ESPERA_function+0xb2>
		else if(sA != NULL){
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d008      	beq.n	8000b3e <ESPERA_function+0xb2>
			displayModo(AUTOMATICO);
 8000b2c:	2003      	movs	r0, #3
 8000b2e:	f7ff fcf1 	bl	8000514 <displayModo>
			buffer[0] = '\0';
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <ESPERA_function+0xc0>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	701a      	strb	r2, [r3, #0]
			Current_State = AUTOMATICO;
 8000b38:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <ESPERA_function+0xd4>)
 8000b3a:	2203      	movs	r2, #3
 8000b3c:	701a      	strb	r2, [r3, #0]
}
 8000b3e:	bf00      	nop
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000000 	.word	0x20000000
 8000b4c:	200002e4 	.word	0x200002e4
 8000b50:	2000000c 	.word	0x2000000c
 8000b54:	20000008 	.word	0x20000008
 8000b58:	20000010 	.word	0x20000010
 8000b5c:	2000032c 	.word	0x2000032c
 8000b60:	20000328 	.word	0x20000328

08000b64 <MANUAL_function>:
void MANUAL_function(void){
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b088      	sub	sp, #32
 8000b68:	af00      	add	r7, sp, #0
	char *s     = strstr((char*)buffer,str_CAMBIAR_A_MODO);
 8000b6a:	4b3f      	ldr	r3, [pc, #252]	; (8000c68 <MANUAL_function+0x104>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4619      	mov	r1, r3
 8000b70:	483e      	ldr	r0, [pc, #248]	; (8000c6c <MANUAL_function+0x108>)
 8000b72:	f007 fe35 	bl	80087e0 <strstr>
 8000b76:	61f8      	str	r0, [r7, #28]
	char *sE    = strstr((char*)buffer,str_ESPERA);
 8000b78:	4b3d      	ldr	r3, [pc, #244]	; (8000c70 <MANUAL_function+0x10c>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	483b      	ldr	r0, [pc, #236]	; (8000c6c <MANUAL_function+0x108>)
 8000b80:	f007 fe2e 	bl	80087e0 <strstr>
 8000b84:	61b8      	str	r0, [r7, #24]
	char *sH    = strstr((char*)buffer,str_HORARIO);
 8000b86:	4b3b      	ldr	r3, [pc, #236]	; (8000c74 <MANUAL_function+0x110>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4837      	ldr	r0, [pc, #220]	; (8000c6c <MANUAL_function+0x108>)
 8000b8e:	f007 fe27 	bl	80087e0 <strstr>
 8000b92:	6178      	str	r0, [r7, #20]
	char *sA    = strstr((char*)buffer,str_AUTOMATICO);
 8000b94:	4b38      	ldr	r3, [pc, #224]	; (8000c78 <MANUAL_function+0x114>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4834      	ldr	r0, [pc, #208]	; (8000c6c <MANUAL_function+0x108>)
 8000b9c:	f007 fe20 	bl	80087e0 <strstr>
 8000ba0:	6138      	str	r0, [r7, #16]
	char *s_ON  = strstr((char*)buffer,str_ENCENDER_POR);
 8000ba2:	4b36      	ldr	r3, [pc, #216]	; (8000c7c <MANUAL_function+0x118>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4830      	ldr	r0, [pc, #192]	; (8000c6c <MANUAL_function+0x108>)
 8000baa:	f007 fe19 	bl	80087e0 <strstr>
 8000bae:	60f8      	str	r0, [r7, #12]
	//Funcionamiento del modo MANUAL
	if(s_ON != NULL){
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d012      	beq.n	8000bdc <MANUAL_function+0x78>
		char arr_tiempo[2] = {buffer[13],buffer[14]};
 8000bb6:	4b2d      	ldr	r3, [pc, #180]	; (8000c6c <MANUAL_function+0x108>)
 8000bb8:	7b5b      	ldrb	r3, [r3, #13]
 8000bba:	713b      	strb	r3, [r7, #4]
 8000bbc:	4b2b      	ldr	r3, [pc, #172]	; (8000c6c <MANUAL_function+0x108>)
 8000bbe:	7b9b      	ldrb	r3, [r3, #14]
 8000bc0:	717b      	strb	r3, [r7, #5]
		int tiempo = atoi(arr_tiempo);
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f007 fdc7 	bl	8008758 <atoi>
 8000bca:	60b8      	str	r0, [r7, #8]
		TemporizadorMinutos(tiempo);
 8000bcc:	68b8      	ldr	r0, [r7, #8]
 8000bce:	f7ff fc85 	bl	80004dc <TemporizadorMinutos>
		memset(&buffer[0], 0, sizeof(buffer));
 8000bd2:	2240      	movs	r2, #64	; 0x40
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4825      	ldr	r0, [pc, #148]	; (8000c6c <MANUAL_function+0x108>)
 8000bd8:	f007 fdfa 	bl	80087d0 <memset>
	}
	if(contando == 1){
 8000bdc:	4b28      	ldr	r3, [pc, #160]	; (8000c80 <MANUAL_function+0x11c>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d102      	bne.n	8000bea <MANUAL_function+0x86>
		Current_State = ENCENDIDO;
 8000be4:	4b27      	ldr	r3, [pc, #156]	; (8000c84 <MANUAL_function+0x120>)
 8000be6:	2204      	movs	r2, #4
 8000be8:	701a      	strb	r2, [r3, #0]
	}
	//
	if(btn_pressed == 1){
 8000bea:	4b27      	ldr	r3, [pc, #156]	; (8000c88 <MANUAL_function+0x124>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d10c      	bne.n	8000c0c <MANUAL_function+0xa8>
		btn_pressed = 0;
 8000bf2:	4b25      	ldr	r3, [pc, #148]	; (8000c88 <MANUAL_function+0x124>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
		displayModo(HORARIO);
 8000bf8:	2002      	movs	r0, #2
 8000bfa:	f7ff fc8b 	bl	8000514 <displayModo>
		buffer[0] = '\0';
 8000bfe:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <MANUAL_function+0x108>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	701a      	strb	r2, [r3, #0]
		Current_State = HORARIO;
 8000c04:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <MANUAL_function+0x120>)
 8000c06:	2202      	movs	r2, #2
 8000c08:	701a      	strb	r2, [r3, #0]
			displayModo(AUTOMATICO);
			buffer[0] = '\0';
			Current_State = AUTOMATICO;
		}
	}
}
 8000c0a:	e028      	b.n	8000c5e <MANUAL_function+0xfa>
	else if(s != NULL){
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d025      	beq.n	8000c5e <MANUAL_function+0xfa>
		if(sH != NULL){
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d009      	beq.n	8000c2c <MANUAL_function+0xc8>
			displayModo(HORARIO);
 8000c18:	2002      	movs	r0, #2
 8000c1a:	f7ff fc7b 	bl	8000514 <displayModo>
			buffer[0] = '\0';
 8000c1e:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <MANUAL_function+0x108>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	701a      	strb	r2, [r3, #0]
			Current_State = HORARIO;
 8000c24:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <MANUAL_function+0x120>)
 8000c26:	2202      	movs	r2, #2
 8000c28:	701a      	strb	r2, [r3, #0]
}
 8000c2a:	e018      	b.n	8000c5e <MANUAL_function+0xfa>
		else if(sE != NULL){
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d009      	beq.n	8000c46 <MANUAL_function+0xe2>
			displayModo(ESPERA);
 8000c32:	2000      	movs	r0, #0
 8000c34:	f7ff fc6e 	bl	8000514 <displayModo>
			buffer[0] = '\0';
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <MANUAL_function+0x108>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
			Current_State = ESPERA;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <MANUAL_function+0x120>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	701a      	strb	r2, [r3, #0]
}
 8000c44:	e00b      	b.n	8000c5e <MANUAL_function+0xfa>
		else if(sA != NULL){
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d008      	beq.n	8000c5e <MANUAL_function+0xfa>
			displayModo(AUTOMATICO);
 8000c4c:	2003      	movs	r0, #3
 8000c4e:	f7ff fc61 	bl	8000514 <displayModo>
			buffer[0] = '\0';
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <MANUAL_function+0x108>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]
			Current_State = AUTOMATICO;
 8000c58:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <MANUAL_function+0x120>)
 8000c5a:	2203      	movs	r2, #3
 8000c5c:	701a      	strb	r2, [r3, #0]
}
 8000c5e:	bf00      	nop
 8000c60:	3720      	adds	r7, #32
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000000 	.word	0x20000000
 8000c6c:	200002e4 	.word	0x200002e4
 8000c70:	20000004 	.word	0x20000004
 8000c74:	2000000c 	.word	0x2000000c
 8000c78:	20000010 	.word	0x20000010
 8000c7c:	20000014 	.word	0x20000014
 8000c80:	200002e0 	.word	0x200002e0
 8000c84:	20000328 	.word	0x20000328
 8000c88:	2000032c 	.word	0x2000032c

08000c8c <HORARIO_function>:
void HORARIO_function(void){
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
	char *s  = strstr((char*)buffer,str_CAMBIAR_A_MODO);
 8000c92:	4b2d      	ldr	r3, [pc, #180]	; (8000d48 <HORARIO_function+0xbc>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4619      	mov	r1, r3
 8000c98:	482c      	ldr	r0, [pc, #176]	; (8000d4c <HORARIO_function+0xc0>)
 8000c9a:	f007 fda1 	bl	80087e0 <strstr>
 8000c9e:	60f8      	str	r0, [r7, #12]
	char *sE = strstr((char*)buffer,str_ESPERA);
 8000ca0:	4b2b      	ldr	r3, [pc, #172]	; (8000d50 <HORARIO_function+0xc4>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4829      	ldr	r0, [pc, #164]	; (8000d4c <HORARIO_function+0xc0>)
 8000ca8:	f007 fd9a 	bl	80087e0 <strstr>
 8000cac:	60b8      	str	r0, [r7, #8]
	char *sM = strstr((char*)buffer,str_MANUAL);
 8000cae:	4b29      	ldr	r3, [pc, #164]	; (8000d54 <HORARIO_function+0xc8>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4825      	ldr	r0, [pc, #148]	; (8000d4c <HORARIO_function+0xc0>)
 8000cb6:	f007 fd93 	bl	80087e0 <strstr>
 8000cba:	6078      	str	r0, [r7, #4]
	char *sA = strstr((char*)buffer,str_AUTOMATICO);
 8000cbc:	4b26      	ldr	r3, [pc, #152]	; (8000d58 <HORARIO_function+0xcc>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4822      	ldr	r0, [pc, #136]	; (8000d4c <HORARIO_function+0xc0>)
 8000cc4:	f007 fd8c 	bl	80087e0 <strstr>
 8000cc8:	6038      	str	r0, [r7, #0]
	//Funcionamiento del modo horario

	//
	if(btn_pressed == 1){
 8000cca:	4b24      	ldr	r3, [pc, #144]	; (8000d5c <HORARIO_function+0xd0>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2b01      	cmp	r3, #1
 8000cd0:	d10c      	bne.n	8000cec <HORARIO_function+0x60>
		btn_pressed = 0;
 8000cd2:	4b22      	ldr	r3, [pc, #136]	; (8000d5c <HORARIO_function+0xd0>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
		displayModo(AUTOMATICO);
 8000cd8:	2003      	movs	r0, #3
 8000cda:	f7ff fc1b 	bl	8000514 <displayModo>
		buffer[0] = '\0';
 8000cde:	4b1b      	ldr	r3, [pc, #108]	; (8000d4c <HORARIO_function+0xc0>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	701a      	strb	r2, [r3, #0]
		Current_State = AUTOMATICO;
 8000ce4:	4b1e      	ldr	r3, [pc, #120]	; (8000d60 <HORARIO_function+0xd4>)
 8000ce6:	2203      	movs	r2, #3
 8000ce8:	701a      	strb	r2, [r3, #0]
			displayModo(AUTOMATICO);
			buffer[0] = '\0';
			Current_State = AUTOMATICO;
		}
	}
}
 8000cea:	e028      	b.n	8000d3e <HORARIO_function+0xb2>
	else if(s != NULL){
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d025      	beq.n	8000d3e <HORARIO_function+0xb2>
		if(sM != NULL){
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d009      	beq.n	8000d0c <HORARIO_function+0x80>
			displayModo(MANUAL);
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	f7ff fc0b 	bl	8000514 <displayModo>
			buffer[0] = '\0';
 8000cfe:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <HORARIO_function+0xc0>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]
			Current_State = MANUAL;
 8000d04:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <HORARIO_function+0xd4>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	701a      	strb	r2, [r3, #0]
}
 8000d0a:	e018      	b.n	8000d3e <HORARIO_function+0xb2>
		else if(sE != NULL){
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d009      	beq.n	8000d26 <HORARIO_function+0x9a>
			displayModo(ESPERA);
 8000d12:	2000      	movs	r0, #0
 8000d14:	f7ff fbfe 	bl	8000514 <displayModo>
			buffer[0] = '\0';
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <HORARIO_function+0xc0>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
			Current_State = ESPERA;
 8000d1e:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <HORARIO_function+0xd4>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	701a      	strb	r2, [r3, #0]
}
 8000d24:	e00b      	b.n	8000d3e <HORARIO_function+0xb2>
		else if(sA != NULL){
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d008      	beq.n	8000d3e <HORARIO_function+0xb2>
			displayModo(AUTOMATICO);
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	f7ff fbf1 	bl	8000514 <displayModo>
			buffer[0] = '\0';
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HORARIO_function+0xc0>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	701a      	strb	r2, [r3, #0]
			Current_State = AUTOMATICO;
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <HORARIO_function+0xd4>)
 8000d3a:	2203      	movs	r2, #3
 8000d3c:	701a      	strb	r2, [r3, #0]
}
 8000d3e:	bf00      	nop
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000000 	.word	0x20000000
 8000d4c:	200002e4 	.word	0x200002e4
 8000d50:	20000004 	.word	0x20000004
 8000d54:	20000008 	.word	0x20000008
 8000d58:	20000010 	.word	0x20000010
 8000d5c:	2000032c 	.word	0x2000032c
 8000d60:	20000328 	.word	0x20000328

08000d64 <AUTOMATICO_function>:

void AUTOMATICO_function(void){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
	char *s  = strstr((char*)buffer,str_CAMBIAR_A_MODO);
 8000d6a:	4b2d      	ldr	r3, [pc, #180]	; (8000e20 <AUTOMATICO_function+0xbc>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4619      	mov	r1, r3
 8000d70:	482c      	ldr	r0, [pc, #176]	; (8000e24 <AUTOMATICO_function+0xc0>)
 8000d72:	f007 fd35 	bl	80087e0 <strstr>
 8000d76:	60f8      	str	r0, [r7, #12]
	char *sE = strstr((char*)buffer,str_ESPERA);
 8000d78:	4b2b      	ldr	r3, [pc, #172]	; (8000e28 <AUTOMATICO_function+0xc4>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4829      	ldr	r0, [pc, #164]	; (8000e24 <AUTOMATICO_function+0xc0>)
 8000d80:	f007 fd2e 	bl	80087e0 <strstr>
 8000d84:	60b8      	str	r0, [r7, #8]
	char *sM = strstr((char*)buffer,str_MANUAL);
 8000d86:	4b29      	ldr	r3, [pc, #164]	; (8000e2c <AUTOMATICO_function+0xc8>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4825      	ldr	r0, [pc, #148]	; (8000e24 <AUTOMATICO_function+0xc0>)
 8000d8e:	f007 fd27 	bl	80087e0 <strstr>
 8000d92:	6078      	str	r0, [r7, #4]
	char *sH = strstr((char*)buffer,str_HORARIO);
 8000d94:	4b26      	ldr	r3, [pc, #152]	; (8000e30 <AUTOMATICO_function+0xcc>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4822      	ldr	r0, [pc, #136]	; (8000e24 <AUTOMATICO_function+0xc0>)
 8000d9c:	f007 fd20 	bl	80087e0 <strstr>
 8000da0:	6038      	str	r0, [r7, #0]
	//Funcionamiento del modo automático
	//
	if(btn_pressed == 1){
 8000da2:	4b24      	ldr	r3, [pc, #144]	; (8000e34 <AUTOMATICO_function+0xd0>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d10c      	bne.n	8000dc4 <AUTOMATICO_function+0x60>
		btn_pressed = 0;
 8000daa:	4b22      	ldr	r3, [pc, #136]	; (8000e34 <AUTOMATICO_function+0xd0>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
		displayModo(ESPERA);
 8000db0:	2000      	movs	r0, #0
 8000db2:	f7ff fbaf 	bl	8000514 <displayModo>
		buffer[0] = '\0';
 8000db6:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <AUTOMATICO_function+0xc0>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	701a      	strb	r2, [r3, #0]
		Current_State = ESPERA;
 8000dbc:	4b1e      	ldr	r3, [pc, #120]	; (8000e38 <AUTOMATICO_function+0xd4>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	701a      	strb	r2, [r3, #0]
			displayModo(HORARIO);
			buffer[0] = '\0';
			Current_State = HORARIO;
		}
	}
}
 8000dc2:	e028      	b.n	8000e16 <AUTOMATICO_function+0xb2>
	else if(s != NULL){
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d025      	beq.n	8000e16 <AUTOMATICO_function+0xb2>
		if(sM != NULL){
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d009      	beq.n	8000de4 <AUTOMATICO_function+0x80>
			displayModo(MANUAL);
 8000dd0:	2001      	movs	r0, #1
 8000dd2:	f7ff fb9f 	bl	8000514 <displayModo>
			buffer[0] = '\0';
 8000dd6:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <AUTOMATICO_function+0xc0>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]
			Current_State = MANUAL;
 8000ddc:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <AUTOMATICO_function+0xd4>)
 8000dde:	2201      	movs	r2, #1
 8000de0:	701a      	strb	r2, [r3, #0]
}
 8000de2:	e018      	b.n	8000e16 <AUTOMATICO_function+0xb2>
		else if(sE != NULL){
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d009      	beq.n	8000dfe <AUTOMATICO_function+0x9a>
			displayModo(ESPERA);
 8000dea:	2000      	movs	r0, #0
 8000dec:	f7ff fb92 	bl	8000514 <displayModo>
			buffer[0] = '\0';
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <AUTOMATICO_function+0xc0>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	701a      	strb	r2, [r3, #0]
			Current_State = ESPERA;
 8000df6:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <AUTOMATICO_function+0xd4>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	701a      	strb	r2, [r3, #0]
}
 8000dfc:	e00b      	b.n	8000e16 <AUTOMATICO_function+0xb2>
		else if(sH != NULL){
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d008      	beq.n	8000e16 <AUTOMATICO_function+0xb2>
			displayModo(HORARIO);
 8000e04:	2002      	movs	r0, #2
 8000e06:	f7ff fb85 	bl	8000514 <displayModo>
			buffer[0] = '\0';
 8000e0a:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <AUTOMATICO_function+0xc0>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]
			Current_State = HORARIO;
 8000e10:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <AUTOMATICO_function+0xd4>)
 8000e12:	2202      	movs	r2, #2
 8000e14:	701a      	strb	r2, [r3, #0]
}
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000000 	.word	0x20000000
 8000e24:	200002e4 	.word	0x200002e4
 8000e28:	20000004 	.word	0x20000004
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	2000000c 	.word	0x2000000c
 8000e34:	2000032c 	.word	0x2000032c
 8000e38:	20000328 	.word	0x20000328

08000e3c <ENCENDIDO_function>:

void ENCENDIDO_function(void){
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
	char *s_OFF = strstr((char*)buffer,str_APAGAR);
 8000e42:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <ENCENDIDO_function+0x3c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4619      	mov	r1, r3
 8000e48:	480c      	ldr	r0, [pc, #48]	; (8000e7c <ENCENDIDO_function+0x40>)
 8000e4a:	f007 fcc9 	bl	80087e0 <strstr>
 8000e4e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8000e50:	2201      	movs	r2, #1
 8000e52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e56:	480a      	ldr	r0, [pc, #40]	; (8000e80 <ENCENDIDO_function+0x44>)
 8000e58:	f000 ffae 	bl	8001db8 <HAL_GPIO_WritePin>
	if(s_OFF != NULL || contando == 0){
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d103      	bne.n	8000e6a <ENCENDIDO_function+0x2e>
 8000e62:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <ENCENDIDO_function+0x48>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d102      	bne.n	8000e70 <ENCENDIDO_function+0x34>
		Current_State = APAGADO;
 8000e6a:	4b07      	ldr	r3, [pc, #28]	; (8000e88 <ENCENDIDO_function+0x4c>)
 8000e6c:	2205      	movs	r2, #5
 8000e6e:	701a      	strb	r2, [r3, #0]
	}
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000018 	.word	0x20000018
 8000e7c:	200002e4 	.word	0x200002e4
 8000e80:	40020c00 	.word	0x40020c00
 8000e84:	200002e0 	.word	0x200002e0
 8000e88:	20000328 	.word	0x20000328

08000e8c <APAGADO_function>:
void APAGADO_function(void){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 0);
 8000e90:	2200      	movs	r2, #0
 8000e92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e96:	4804      	ldr	r0, [pc, #16]	; (8000ea8 <APAGADO_function+0x1c>)
 8000e98:	f000 ff8e 	bl	8001db8 <HAL_GPIO_WritePin>
	Current_State = ESPERA;
 8000e9c:	4b03      	ldr	r3, [pc, #12]	; (8000eac <APAGADO_function+0x20>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	701a      	strb	r2, [r3, #0]
}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40020c00 	.word	0x40020c00
 8000eac:	20000328 	.word	0x20000328

08000eb0 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){ //Horas
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ec0:	d113      	bne.n	8000eea <HAL_TIM_PeriodElapsedCallback+0x3a>
		if(horas >= tiempo_hor){
 8000ec2:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	db08      	blt.n	8000ee0 <HAL_TIM_PeriodElapsedCallback+0x30>
			contando = 0;
 8000ece:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim2);
 8000ed4:	4816      	ldr	r0, [pc, #88]	; (8000f30 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000ed6:	f002 ff41 	bl	8003d5c <HAL_TIM_Base_Stop_IT>
			horas = 0;
 8000eda:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
		}
		horas++;
 8000ee0:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	4a0f      	ldr	r2, [pc, #60]	; (8000f24 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000ee8:	6013      	str	r3, [r2, #0]
	}
	if(htim->Instance == TIM3){ //Minutos
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a11      	ldr	r2, [pc, #68]	; (8000f34 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d113      	bne.n	8000f1c <HAL_TIM_PeriodElapsedCallback+0x6c>
		if(minutos >= tiempo_min){
 8000ef4:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	db08      	blt.n	8000f12 <HAL_TIM_PeriodElapsedCallback+0x62>
			contando = 0;
 8000f00:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim3);
 8000f06:	480e      	ldr	r0, [pc, #56]	; (8000f40 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000f08:	f002 ff28 	bl	8003d5c <HAL_TIM_Base_Stop_IT>
			minutos = 0;
 8000f0c:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
		}
		minutos++;
 8000f12:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	3301      	adds	r3, #1
 8000f18:	4a07      	ldr	r2, [pc, #28]	; (8000f38 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000f1a:	6013      	str	r3, [r2, #0]
	}
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	200002d4 	.word	0x200002d4
 8000f28:	200002dc 	.word	0x200002dc
 8000f2c:	200002e0 	.word	0x200002e0
 8000f30:	200001f8 	.word	0x200001f8
 8000f34:	40000400 	.word	0x40000400
 8000f38:	200002d0 	.word	0x200002d0
 8000f3c:	200002d8 	.word	0x200002d8
 8000f40:	20000240 	.word	0x20000240

08000f44 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	80fb      	strh	r3, [r7, #6]
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)){};
 8000f4e:	bf00      	nop
 8000f50:	2101      	movs	r1, #1
 8000f52:	480f      	ldr	r0, [pc, #60]	; (8000f90 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000f54:	f000 ff18 	bl	8001d88 <HAL_GPIO_ReadPin>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d1f8      	bne.n	8000f50 <HAL_GPIO_EXTI_Callback+0xc>
    if (GPIO_Pin == GPIO_PIN_0) // check if the interrupt was triggered by PA0
 8000f5e:	88fb      	ldrh	r3, [r7, #6]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d111      	bne.n	8000f88 <HAL_GPIO_EXTI_Callback+0x44>
    {
        uint32_t current_time = HAL_GetTick(); // get current time
 8000f64:	f000 f9d8 	bl	8001318 <HAL_GetTick>
 8000f68:	60f8      	str	r0, [r7, #12]
        if (current_time < last_interrupt_time + DEBOUNCE_DELAY) // check if the interrupt was triggered within the debounce delay
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	; (8000f94 <HAL_GPIO_EXTI_Callback+0x50>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	3332      	adds	r3, #50	; 0x32
 8000f70:	461a      	mov	r2, r3
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d306      	bcc.n	8000f86 <HAL_GPIO_EXTI_Callback+0x42>
        {
            return; // ignore interrupt
        }
        last_interrupt_time = current_time; // update last interrupt time
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	4a06      	ldr	r2, [pc, #24]	; (8000f94 <HAL_GPIO_EXTI_Callback+0x50>)
 8000f7c:	6013      	str	r3, [r2, #0]
        btn_pressed = 1;
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_GPIO_EXTI_Callback+0x54>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	e000      	b.n	8000f88 <HAL_GPIO_EXTI_Callback+0x44>
            return; // ignore interrupt
 8000f86:	bf00      	nop
    }
}
 8000f88:	3710      	adds	r7, #16
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40020000 	.word	0x40020000
 8000f94:	20000324 	.word	0x20000324
 8000f98:	2000032c 	.word	0x2000032c

08000f9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa0:	b672      	cpsid	i
}
 8000fa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <Error_Handler+0x8>
	...

08000fa8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	607b      	str	r3, [r7, #4]
 8000fb2:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <HAL_MspInit+0x4c>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb6:	4a0f      	ldr	r2, [pc, #60]	; (8000ff4 <HAL_MspInit+0x4c>)
 8000fb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fbe:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <HAL_MspInit+0x4c>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	603b      	str	r3, [r7, #0]
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <HAL_MspInit+0x4c>)
 8000fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd2:	4a08      	ldr	r2, [pc, #32]	; (8000ff4 <HAL_MspInit+0x4c>)
 8000fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_MspInit+0x4c>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe2:	603b      	str	r3, [r7, #0]
 8000fe4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000fe6:	2007      	movs	r0, #7
 8000fe8:	f000 fd08 	bl	80019fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40023800 	.word	0x40023800

08000ff8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a17      	ldr	r2, [pc, #92]	; (8001074 <HAL_ADC_MspInit+0x7c>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d127      	bne.n	800106a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	4b16      	ldr	r3, [pc, #88]	; (8001078 <HAL_ADC_MspInit+0x80>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001022:	4a15      	ldr	r2, [pc, #84]	; (8001078 <HAL_ADC_MspInit+0x80>)
 8001024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001028:	6453      	str	r3, [r2, #68]	; 0x44
 800102a:	4b13      	ldr	r3, [pc, #76]	; (8001078 <HAL_ADC_MspInit+0x80>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <HAL_ADC_MspInit+0x80>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a0e      	ldr	r2, [pc, #56]	; (8001078 <HAL_ADC_MspInit+0x80>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <HAL_ADC_MspInit+0x80>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001052:	2310      	movs	r3, #16
 8001054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001056:	2303      	movs	r3, #3
 8001058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	4619      	mov	r1, r3
 8001064:	4805      	ldr	r0, [pc, #20]	; (800107c <HAL_ADC_MspInit+0x84>)
 8001066:	f000 fd0b 	bl	8001a80 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800106a:	bf00      	nop
 800106c:	3728      	adds	r7, #40	; 0x28
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40012000 	.word	0x40012000
 8001078:	40023800 	.word	0x40023800
 800107c:	40020000 	.word	0x40020000

08001080 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001090:	d116      	bne.n	80010c0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
 8001096:	4b24      	ldr	r3, [pc, #144]	; (8001128 <HAL_TIM_Base_MspInit+0xa8>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	4a23      	ldr	r2, [pc, #140]	; (8001128 <HAL_TIM_Base_MspInit+0xa8>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6413      	str	r3, [r2, #64]	; 0x40
 80010a2:	4b21      	ldr	r3, [pc, #132]	; (8001128 <HAL_TIM_Base_MspInit+0xa8>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2100      	movs	r1, #0
 80010b2:	201c      	movs	r0, #28
 80010b4:	f000 fcad 	bl	8001a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010b8:	201c      	movs	r0, #28
 80010ba:	f000 fcc6 	bl	8001a4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80010be:	e02e      	b.n	800111e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a19      	ldr	r2, [pc, #100]	; (800112c <HAL_TIM_Base_MspInit+0xac>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d116      	bne.n	80010f8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	4b16      	ldr	r3, [pc, #88]	; (8001128 <HAL_TIM_Base_MspInit+0xa8>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	4a15      	ldr	r2, [pc, #84]	; (8001128 <HAL_TIM_Base_MspInit+0xa8>)
 80010d4:	f043 0302 	orr.w	r3, r3, #2
 80010d8:	6413      	str	r3, [r2, #64]	; 0x40
 80010da:	4b13      	ldr	r3, [pc, #76]	; (8001128 <HAL_TIM_Base_MspInit+0xa8>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2100      	movs	r1, #0
 80010ea:	201d      	movs	r0, #29
 80010ec:	f000 fc91 	bl	8001a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80010f0:	201d      	movs	r0, #29
 80010f2:	f000 fcaa 	bl	8001a4a <HAL_NVIC_EnableIRQ>
}
 80010f6:	e012      	b.n	800111e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM5)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a0c      	ldr	r2, [pc, #48]	; (8001130 <HAL_TIM_Base_MspInit+0xb0>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d10d      	bne.n	800111e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	4b08      	ldr	r3, [pc, #32]	; (8001128 <HAL_TIM_Base_MspInit+0xa8>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	4a07      	ldr	r2, [pc, #28]	; (8001128 <HAL_TIM_Base_MspInit+0xa8>)
 800110c:	f043 0308 	orr.w	r3, r3, #8
 8001110:	6413      	str	r3, [r2, #64]	; 0x40
 8001112:	4b05      	ldr	r3, [pc, #20]	; (8001128 <HAL_TIM_Base_MspInit+0xa8>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	f003 0308 	and.w	r3, r3, #8
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
}
 800111e:	bf00      	nop
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40023800 	.word	0x40023800
 800112c:	40000400 	.word	0x40000400
 8001130:	40000c00 	.word	0x40000c00

08001134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001138:	e7fe      	b.n	8001138 <NMI_Handler+0x4>

0800113a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800113e:	e7fe      	b.n	800113e <HardFault_Handler+0x4>

08001140 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001144:	e7fe      	b.n	8001144 <MemManage_Handler+0x4>

08001146 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800114a:	e7fe      	b.n	800114a <BusFault_Handler+0x4>

0800114c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001150:	e7fe      	b.n	8001150 <UsageFault_Handler+0x4>

08001152 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001180:	f000 f8b6 	bl	80012f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	bd80      	pop	{r7, pc}

08001188 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800118c:	2001      	movs	r0, #1
 800118e:	f000 fe2d 	bl	8001dec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800119c:	4802      	ldr	r0, [pc, #8]	; (80011a8 <TIM2_IRQHandler+0x10>)
 800119e:	f002 fe0c 	bl	8003dba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200001f8 	.word	0x200001f8

080011ac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80011b0:	4802      	ldr	r0, [pc, #8]	; (80011bc <TIM3_IRQHandler+0x10>)
 80011b2:	f002 fe02 	bl	8003dba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000240 	.word	0x20000240

080011c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80011c4:	4802      	ldr	r0, [pc, #8]	; (80011d0 <OTG_FS_IRQHandler+0x10>)
 80011c6:	f000 ff79 	bl	80020bc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20001814 	.word	0x20001814

080011d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <SystemInit+0x20>)
 80011da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011de:	4a05      	ldr	r2, [pc, #20]	; (80011f4 <SystemInit+0x20>)
 80011e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <Reset_Handler>:
 80011f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001230 <LoopFillZerobss+0x12>
 80011fc:	480d      	ldr	r0, [pc, #52]	; (8001234 <LoopFillZerobss+0x16>)
 80011fe:	490e      	ldr	r1, [pc, #56]	; (8001238 <LoopFillZerobss+0x1a>)
 8001200:	4a0e      	ldr	r2, [pc, #56]	; (800123c <LoopFillZerobss+0x1e>)
 8001202:	2300      	movs	r3, #0
 8001204:	e002      	b.n	800120c <LoopCopyDataInit>

08001206 <CopyDataInit>:
 8001206:	58d4      	ldr	r4, [r2, r3]
 8001208:	50c4      	str	r4, [r0, r3]
 800120a:	3304      	adds	r3, #4

0800120c <LoopCopyDataInit>:
 800120c:	18c4      	adds	r4, r0, r3
 800120e:	428c      	cmp	r4, r1
 8001210:	d3f9      	bcc.n	8001206 <CopyDataInit>
 8001212:	4a0b      	ldr	r2, [pc, #44]	; (8001240 <LoopFillZerobss+0x22>)
 8001214:	4c0b      	ldr	r4, [pc, #44]	; (8001244 <LoopFillZerobss+0x26>)
 8001216:	2300      	movs	r3, #0
 8001218:	e001      	b.n	800121e <LoopFillZerobss>

0800121a <FillZerobss>:
 800121a:	6013      	str	r3, [r2, #0]
 800121c:	3204      	adds	r2, #4

0800121e <LoopFillZerobss>:
 800121e:	42a2      	cmp	r2, r4
 8001220:	d3fb      	bcc.n	800121a <FillZerobss>
 8001222:	f7ff ffd7 	bl	80011d4 <SystemInit>
 8001226:	f007 faa1 	bl	800876c <__libc_init_array>
 800122a:	f7ff f9df 	bl	80005ec <main>
 800122e:	4770      	bx	lr
 8001230:	20020000 	.word	0x20020000
 8001234:	20000000 	.word	0x20000000
 8001238:	20000194 	.word	0x20000194
 800123c:	08008b44 	.word	0x08008b44
 8001240:	20000194 	.word	0x20000194
 8001244:	20001f40 	.word	0x20001f40

08001248 <ADC_IRQHandler>:
 8001248:	e7fe      	b.n	8001248 <ADC_IRQHandler>
	...

0800124c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001250:	4b0e      	ldr	r3, [pc, #56]	; (800128c <HAL_Init+0x40>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a0d      	ldr	r2, [pc, #52]	; (800128c <HAL_Init+0x40>)
 8001256:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800125a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800125c:	4b0b      	ldr	r3, [pc, #44]	; (800128c <HAL_Init+0x40>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a0a      	ldr	r2, [pc, #40]	; (800128c <HAL_Init+0x40>)
 8001262:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001266:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001268:	4b08      	ldr	r3, [pc, #32]	; (800128c <HAL_Init+0x40>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a07      	ldr	r2, [pc, #28]	; (800128c <HAL_Init+0x40>)
 800126e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001272:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001274:	2003      	movs	r0, #3
 8001276:	f000 fbc1 	bl	80019fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800127a:	2000      	movs	r0, #0
 800127c:	f000 f808 	bl	8001290 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001280:	f7ff fe92 	bl	8000fa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40023c00 	.word	0x40023c00

08001290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001298:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <HAL_InitTick+0x54>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <HAL_InitTick+0x58>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	4619      	mov	r1, r3
 80012a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 fbd9 	bl	8001a66 <HAL_SYSTICK_Config>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e00e      	b.n	80012dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2b0f      	cmp	r3, #15
 80012c2:	d80a      	bhi.n	80012da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c4:	2200      	movs	r2, #0
 80012c6:	6879      	ldr	r1, [r7, #4]
 80012c8:	f04f 30ff 	mov.w	r0, #4294967295
 80012cc:	f000 fba1 	bl	8001a12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d0:	4a06      	ldr	r2, [pc, #24]	; (80012ec <HAL_InitTick+0x5c>)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012d6:	2300      	movs	r3, #0
 80012d8:	e000      	b.n	80012dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000034 	.word	0x20000034
 80012e8:	2000003c 	.word	0x2000003c
 80012ec:	20000038 	.word	0x20000038

080012f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <HAL_IncTick+0x20>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	461a      	mov	r2, r3
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <HAL_IncTick+0x24>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4413      	add	r3, r2
 8001300:	4a04      	ldr	r2, [pc, #16]	; (8001314 <HAL_IncTick+0x24>)
 8001302:	6013      	str	r3, [r2, #0]
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	2000003c 	.word	0x2000003c
 8001314:	20000330 	.word	0x20000330

08001318 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  return uwTick;
 800131c:	4b03      	ldr	r3, [pc, #12]	; (800132c <HAL_GetTick+0x14>)
 800131e:	681b      	ldr	r3, [r3, #0]
}
 8001320:	4618      	mov	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20000330 	.word	0x20000330

08001330 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001338:	f7ff ffee 	bl	8001318 <HAL_GetTick>
 800133c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001348:	d005      	beq.n	8001356 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800134a:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <HAL_Delay+0x44>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4413      	add	r3, r2
 8001354:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001356:	bf00      	nop
 8001358:	f7ff ffde 	bl	8001318 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	68fa      	ldr	r2, [r7, #12]
 8001364:	429a      	cmp	r2, r3
 8001366:	d8f7      	bhi.n	8001358 <HAL_Delay+0x28>
  {
  }
}
 8001368:	bf00      	nop
 800136a:	bf00      	nop
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	2000003c 	.word	0x2000003c

08001378 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001380:	2300      	movs	r3, #0
 8001382:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e033      	b.n	80013f6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	2b00      	cmp	r3, #0
 8001394:	d109      	bne.n	80013aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff fe2e 	bl	8000ff8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	f003 0310 	and.w	r3, r3, #16
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d118      	bne.n	80013e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013be:	f023 0302 	bic.w	r3, r3, #2
 80013c2:	f043 0202 	orr.w	r2, r3, #2
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 f94a 	bl	8001664 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f023 0303 	bic.w	r3, r3, #3
 80013de:	f043 0201 	orr.w	r2, r3, #1
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	641a      	str	r2, [r3, #64]	; 0x40
 80013e6:	e001      	b.n	80013ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80013f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800140a:	2300      	movs	r3, #0
 800140c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001414:	2b01      	cmp	r3, #1
 8001416:	d101      	bne.n	800141c <HAL_ADC_ConfigChannel+0x1c>
 8001418:	2302      	movs	r3, #2
 800141a:	e113      	b.n	8001644 <HAL_ADC_ConfigChannel+0x244>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2201      	movs	r2, #1
 8001420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b09      	cmp	r3, #9
 800142a:	d925      	bls.n	8001478 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	68d9      	ldr	r1, [r3, #12]
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	b29b      	uxth	r3, r3
 8001438:	461a      	mov	r2, r3
 800143a:	4613      	mov	r3, r2
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	4413      	add	r3, r2
 8001440:	3b1e      	subs	r3, #30
 8001442:	2207      	movs	r2, #7
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	43da      	mvns	r2, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	400a      	ands	r2, r1
 8001450:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	68d9      	ldr	r1, [r3, #12]
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	689a      	ldr	r2, [r3, #8]
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	b29b      	uxth	r3, r3
 8001462:	4618      	mov	r0, r3
 8001464:	4603      	mov	r3, r0
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	4403      	add	r3, r0
 800146a:	3b1e      	subs	r3, #30
 800146c:	409a      	lsls	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	430a      	orrs	r2, r1
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	e022      	b.n	80014be <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	6919      	ldr	r1, [r3, #16]
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	b29b      	uxth	r3, r3
 8001484:	461a      	mov	r2, r3
 8001486:	4613      	mov	r3, r2
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	4413      	add	r3, r2
 800148c:	2207      	movs	r2, #7
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43da      	mvns	r2, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	400a      	ands	r2, r1
 800149a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6919      	ldr	r1, [r3, #16]
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	689a      	ldr	r2, [r3, #8]
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	4618      	mov	r0, r3
 80014ae:	4603      	mov	r3, r0
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	4403      	add	r3, r0
 80014b4:	409a      	lsls	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	430a      	orrs	r2, r1
 80014bc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	2b06      	cmp	r3, #6
 80014c4:	d824      	bhi.n	8001510 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685a      	ldr	r2, [r3, #4]
 80014d0:	4613      	mov	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	3b05      	subs	r3, #5
 80014d8:	221f      	movs	r2, #31
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43da      	mvns	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	400a      	ands	r2, r1
 80014e6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	4618      	mov	r0, r3
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685a      	ldr	r2, [r3, #4]
 80014fa:	4613      	mov	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4413      	add	r3, r2
 8001500:	3b05      	subs	r3, #5
 8001502:	fa00 f203 	lsl.w	r2, r0, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	430a      	orrs	r2, r1
 800150c:	635a      	str	r2, [r3, #52]	; 0x34
 800150e:	e04c      	b.n	80015aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	2b0c      	cmp	r3, #12
 8001516:	d824      	bhi.n	8001562 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685a      	ldr	r2, [r3, #4]
 8001522:	4613      	mov	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	3b23      	subs	r3, #35	; 0x23
 800152a:	221f      	movs	r2, #31
 800152c:	fa02 f303 	lsl.w	r3, r2, r3
 8001530:	43da      	mvns	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	400a      	ands	r2, r1
 8001538:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	b29b      	uxth	r3, r3
 8001546:	4618      	mov	r0, r3
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	4613      	mov	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4413      	add	r3, r2
 8001552:	3b23      	subs	r3, #35	; 0x23
 8001554:	fa00 f203 	lsl.w	r2, r0, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	430a      	orrs	r2, r1
 800155e:	631a      	str	r2, [r3, #48]	; 0x30
 8001560:	e023      	b.n	80015aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	4613      	mov	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	4413      	add	r3, r2
 8001572:	3b41      	subs	r3, #65	; 0x41
 8001574:	221f      	movs	r2, #31
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43da      	mvns	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	400a      	ands	r2, r1
 8001582:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	b29b      	uxth	r3, r3
 8001590:	4618      	mov	r0, r3
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	4613      	mov	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4413      	add	r3, r2
 800159c:	3b41      	subs	r3, #65	; 0x41
 800159e:	fa00 f203 	lsl.w	r2, r0, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015aa:	4b29      	ldr	r3, [pc, #164]	; (8001650 <HAL_ADC_ConfigChannel+0x250>)
 80015ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a28      	ldr	r2, [pc, #160]	; (8001654 <HAL_ADC_ConfigChannel+0x254>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d10f      	bne.n	80015d8 <HAL_ADC_ConfigChannel+0x1d8>
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b12      	cmp	r3, #18
 80015be:	d10b      	bne.n	80015d8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a1d      	ldr	r2, [pc, #116]	; (8001654 <HAL_ADC_ConfigChannel+0x254>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d12b      	bne.n	800163a <HAL_ADC_ConfigChannel+0x23a>
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a1c      	ldr	r2, [pc, #112]	; (8001658 <HAL_ADC_ConfigChannel+0x258>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d003      	beq.n	80015f4 <HAL_ADC_ConfigChannel+0x1f4>
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2b11      	cmp	r3, #17
 80015f2:	d122      	bne.n	800163a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a11      	ldr	r2, [pc, #68]	; (8001658 <HAL_ADC_ConfigChannel+0x258>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d111      	bne.n	800163a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001616:	4b11      	ldr	r3, [pc, #68]	; (800165c <HAL_ADC_ConfigChannel+0x25c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a11      	ldr	r2, [pc, #68]	; (8001660 <HAL_ADC_ConfigChannel+0x260>)
 800161c:	fba2 2303 	umull	r2, r3, r2, r3
 8001620:	0c9a      	lsrs	r2, r3, #18
 8001622:	4613      	mov	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4413      	add	r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800162c:	e002      	b.n	8001634 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	3b01      	subs	r3, #1
 8001632:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f9      	bne.n	800162e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	40012300 	.word	0x40012300
 8001654:	40012000 	.word	0x40012000
 8001658:	10000012 	.word	0x10000012
 800165c:	20000034 	.word	0x20000034
 8001660:	431bde83 	.word	0x431bde83

08001664 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800166c:	4b79      	ldr	r3, [pc, #484]	; (8001854 <ADC_Init+0x1f0>)
 800166e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	431a      	orrs	r2, r3
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	685a      	ldr	r2, [r3, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001698:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6859      	ldr	r1, [r3, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	691b      	ldr	r3, [r3, #16]
 80016a4:	021a      	lsls	r2, r3, #8
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	685a      	ldr	r2, [r3, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80016bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6859      	ldr	r1, [r3, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	430a      	orrs	r2, r1
 80016ce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689a      	ldr	r2, [r3, #8]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6899      	ldr	r1, [r3, #8]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	68da      	ldr	r2, [r3, #12]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f6:	4a58      	ldr	r2, [pc, #352]	; (8001858 <ADC_Init+0x1f4>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d022      	beq.n	8001742 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800170a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6899      	ldr	r1, [r3, #8]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	430a      	orrs	r2, r1
 800171c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800172c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6899      	ldr	r1, [r3, #8]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	430a      	orrs	r2, r1
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	e00f      	b.n	8001762 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001750:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001760:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 0202 	bic.w	r2, r2, #2
 8001770:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6899      	ldr	r1, [r3, #8]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	7e1b      	ldrb	r3, [r3, #24]
 800177c:	005a      	lsls	r2, r3, #1
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	430a      	orrs	r2, r1
 8001784:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 3020 	ldrb.w	r3, [r3, #32]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d01b      	beq.n	80017c8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	685a      	ldr	r2, [r3, #4]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800179e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80017ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6859      	ldr	r1, [r3, #4]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ba:	3b01      	subs	r3, #1
 80017bc:	035a      	lsls	r2, r3, #13
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	e007      	b.n	80017d8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80017e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	051a      	lsls	r2, r3, #20
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	430a      	orrs	r2, r1
 80017fc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800180c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6899      	ldr	r1, [r3, #8]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800181a:	025a      	lsls	r2, r3, #9
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	430a      	orrs	r2, r1
 8001822:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001832:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6899      	ldr	r1, [r3, #8]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	029a      	lsls	r2, r3, #10
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	430a      	orrs	r2, r1
 8001846:	609a      	str	r2, [r3, #8]
}
 8001848:	bf00      	nop
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	40012300 	.word	0x40012300
 8001858:	0f000001 	.word	0x0f000001

0800185c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800186c:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <__NVIC_SetPriorityGrouping+0x44>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001872:	68ba      	ldr	r2, [r7, #8]
 8001874:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001878:	4013      	ands	r3, r2
 800187a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001884:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800188c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800188e:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	60d3      	str	r3, [r2, #12]
}
 8001894:	bf00      	nop
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a8:	4b04      	ldr	r3, [pc, #16]	; (80018bc <__NVIC_GetPriorityGrouping+0x18>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	0a1b      	lsrs	r3, r3, #8
 80018ae:	f003 0307 	and.w	r3, r3, #7
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	db0b      	blt.n	80018ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	f003 021f 	and.w	r2, r3, #31
 80018d8:	4907      	ldr	r1, [pc, #28]	; (80018f8 <__NVIC_EnableIRQ+0x38>)
 80018da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018de:	095b      	lsrs	r3, r3, #5
 80018e0:	2001      	movs	r0, #1
 80018e2:	fa00 f202 	lsl.w	r2, r0, r2
 80018e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	e000e100 	.word	0xe000e100

080018fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	6039      	str	r1, [r7, #0]
 8001906:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190c:	2b00      	cmp	r3, #0
 800190e:	db0a      	blt.n	8001926 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	b2da      	uxtb	r2, r3
 8001914:	490c      	ldr	r1, [pc, #48]	; (8001948 <__NVIC_SetPriority+0x4c>)
 8001916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191a:	0112      	lsls	r2, r2, #4
 800191c:	b2d2      	uxtb	r2, r2
 800191e:	440b      	add	r3, r1
 8001920:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001924:	e00a      	b.n	800193c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	b2da      	uxtb	r2, r3
 800192a:	4908      	ldr	r1, [pc, #32]	; (800194c <__NVIC_SetPriority+0x50>)
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	3b04      	subs	r3, #4
 8001934:	0112      	lsls	r2, r2, #4
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	440b      	add	r3, r1
 800193a:	761a      	strb	r2, [r3, #24]
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	e000e100 	.word	0xe000e100
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001950:	b480      	push	{r7}
 8001952:	b089      	sub	sp, #36	; 0x24
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f1c3 0307 	rsb	r3, r3, #7
 800196a:	2b04      	cmp	r3, #4
 800196c:	bf28      	it	cs
 800196e:	2304      	movcs	r3, #4
 8001970:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3304      	adds	r3, #4
 8001976:	2b06      	cmp	r3, #6
 8001978:	d902      	bls.n	8001980 <NVIC_EncodePriority+0x30>
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	3b03      	subs	r3, #3
 800197e:	e000      	b.n	8001982 <NVIC_EncodePriority+0x32>
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001984:	f04f 32ff 	mov.w	r2, #4294967295
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43da      	mvns	r2, r3
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	401a      	ands	r2, r3
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001998:	f04f 31ff 	mov.w	r1, #4294967295
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	fa01 f303 	lsl.w	r3, r1, r3
 80019a2:	43d9      	mvns	r1, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a8:	4313      	orrs	r3, r2
         );
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3724      	adds	r7, #36	; 0x24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
	...

080019b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019c8:	d301      	bcc.n	80019ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ca:	2301      	movs	r3, #1
 80019cc:	e00f      	b.n	80019ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ce:	4a0a      	ldr	r2, [pc, #40]	; (80019f8 <SysTick_Config+0x40>)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3b01      	subs	r3, #1
 80019d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019d6:	210f      	movs	r1, #15
 80019d8:	f04f 30ff 	mov.w	r0, #4294967295
 80019dc:	f7ff ff8e 	bl	80018fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e0:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <SysTick_Config+0x40>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019e6:	4b04      	ldr	r3, [pc, #16]	; (80019f8 <SysTick_Config+0x40>)
 80019e8:	2207      	movs	r2, #7
 80019ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	e000e010 	.word	0xe000e010

080019fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff ff29 	bl	800185c <__NVIC_SetPriorityGrouping>
}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b086      	sub	sp, #24
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	4603      	mov	r3, r0
 8001a1a:	60b9      	str	r1, [r7, #8]
 8001a1c:	607a      	str	r2, [r7, #4]
 8001a1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a24:	f7ff ff3e 	bl	80018a4 <__NVIC_GetPriorityGrouping>
 8001a28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	68b9      	ldr	r1, [r7, #8]
 8001a2e:	6978      	ldr	r0, [r7, #20]
 8001a30:	f7ff ff8e 	bl	8001950 <NVIC_EncodePriority>
 8001a34:	4602      	mov	r2, r0
 8001a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a3a:	4611      	mov	r1, r2
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ff5d 	bl	80018fc <__NVIC_SetPriority>
}
 8001a42:	bf00      	nop
 8001a44:	3718      	adds	r7, #24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	4603      	mov	r3, r0
 8001a52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ff31 	bl	80018c0 <__NVIC_EnableIRQ>
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff ffa2 	bl	80019b8 <SysTick_Config>
 8001a74:	4603      	mov	r3, r0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
	...

08001a80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b089      	sub	sp, #36	; 0x24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a92:	2300      	movs	r3, #0
 8001a94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a96:	2300      	movs	r3, #0
 8001a98:	61fb      	str	r3, [r7, #28]
 8001a9a:	e159      	b.n	8001d50 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	4013      	ands	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	f040 8148 	bne.w	8001d4a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f003 0303 	and.w	r3, r3, #3
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d005      	beq.n	8001ad2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d130      	bne.n	8001b34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	2203      	movs	r2, #3
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	68da      	ldr	r2, [r3, #12]
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b08:	2201      	movs	r2, #1
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	091b      	lsrs	r3, r3, #4
 8001b1e:	f003 0201 	and.w	r2, r3, #1
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 0303 	and.w	r3, r3, #3
 8001b3c:	2b03      	cmp	r3, #3
 8001b3e:	d017      	beq.n	8001b70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	005b      	lsls	r3, r3, #1
 8001b4a:	2203      	movs	r2, #3
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4013      	ands	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 0303 	and.w	r3, r3, #3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d123      	bne.n	8001bc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	08da      	lsrs	r2, r3, #3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3208      	adds	r2, #8
 8001b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	009b      	lsls	r3, r3, #2
 8001b92:	220f      	movs	r2, #15
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	691a      	ldr	r2, [r3, #16]
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	08da      	lsrs	r2, r3, #3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	3208      	adds	r2, #8
 8001bbe:	69b9      	ldr	r1, [r7, #24]
 8001bc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	2203      	movs	r2, #3
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 0203 	and.w	r2, r3, #3
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f000 80a2 	beq.w	8001d4a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	4b57      	ldr	r3, [pc, #348]	; (8001d68 <HAL_GPIO_Init+0x2e8>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0e:	4a56      	ldr	r2, [pc, #344]	; (8001d68 <HAL_GPIO_Init+0x2e8>)
 8001c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c14:	6453      	str	r3, [r2, #68]	; 0x44
 8001c16:	4b54      	ldr	r3, [pc, #336]	; (8001d68 <HAL_GPIO_Init+0x2e8>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c22:	4a52      	ldr	r2, [pc, #328]	; (8001d6c <HAL_GPIO_Init+0x2ec>)
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	089b      	lsrs	r3, r3, #2
 8001c28:	3302      	adds	r3, #2
 8001c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f003 0303 	and.w	r3, r3, #3
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	220f      	movs	r2, #15
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4013      	ands	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a49      	ldr	r2, [pc, #292]	; (8001d70 <HAL_GPIO_Init+0x2f0>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d019      	beq.n	8001c82 <HAL_GPIO_Init+0x202>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a48      	ldr	r2, [pc, #288]	; (8001d74 <HAL_GPIO_Init+0x2f4>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d013      	beq.n	8001c7e <HAL_GPIO_Init+0x1fe>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a47      	ldr	r2, [pc, #284]	; (8001d78 <HAL_GPIO_Init+0x2f8>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d00d      	beq.n	8001c7a <HAL_GPIO_Init+0x1fa>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a46      	ldr	r2, [pc, #280]	; (8001d7c <HAL_GPIO_Init+0x2fc>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d007      	beq.n	8001c76 <HAL_GPIO_Init+0x1f6>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a45      	ldr	r2, [pc, #276]	; (8001d80 <HAL_GPIO_Init+0x300>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d101      	bne.n	8001c72 <HAL_GPIO_Init+0x1f2>
 8001c6e:	2304      	movs	r3, #4
 8001c70:	e008      	b.n	8001c84 <HAL_GPIO_Init+0x204>
 8001c72:	2307      	movs	r3, #7
 8001c74:	e006      	b.n	8001c84 <HAL_GPIO_Init+0x204>
 8001c76:	2303      	movs	r3, #3
 8001c78:	e004      	b.n	8001c84 <HAL_GPIO_Init+0x204>
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	e002      	b.n	8001c84 <HAL_GPIO_Init+0x204>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e000      	b.n	8001c84 <HAL_GPIO_Init+0x204>
 8001c82:	2300      	movs	r3, #0
 8001c84:	69fa      	ldr	r2, [r7, #28]
 8001c86:	f002 0203 	and.w	r2, r2, #3
 8001c8a:	0092      	lsls	r2, r2, #2
 8001c8c:	4093      	lsls	r3, r2
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c94:	4935      	ldr	r1, [pc, #212]	; (8001d6c <HAL_GPIO_Init+0x2ec>)
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	089b      	lsrs	r3, r3, #2
 8001c9a:	3302      	adds	r3, #2
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ca2:	4b38      	ldr	r3, [pc, #224]	; (8001d84 <HAL_GPIO_Init+0x304>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	43db      	mvns	r3, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d003      	beq.n	8001cc6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cc6:	4a2f      	ldr	r2, [pc, #188]	; (8001d84 <HAL_GPIO_Init+0x304>)
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ccc:	4b2d      	ldr	r3, [pc, #180]	; (8001d84 <HAL_GPIO_Init+0x304>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d003      	beq.n	8001cf0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cf0:	4a24      	ldr	r2, [pc, #144]	; (8001d84 <HAL_GPIO_Init+0x304>)
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cf6:	4b23      	ldr	r3, [pc, #140]	; (8001d84 <HAL_GPIO_Init+0x304>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d1a:	4a1a      	ldr	r2, [pc, #104]	; (8001d84 <HAL_GPIO_Init+0x304>)
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d20:	4b18      	ldr	r3, [pc, #96]	; (8001d84 <HAL_GPIO_Init+0x304>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d44:	4a0f      	ldr	r2, [pc, #60]	; (8001d84 <HAL_GPIO_Init+0x304>)
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	61fb      	str	r3, [r7, #28]
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	2b0f      	cmp	r3, #15
 8001d54:	f67f aea2 	bls.w	8001a9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d58:	bf00      	nop
 8001d5a:	bf00      	nop
 8001d5c:	3724      	adds	r7, #36	; 0x24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40013800 	.word	0x40013800
 8001d70:	40020000 	.word	0x40020000
 8001d74:	40020400 	.word	0x40020400
 8001d78:	40020800 	.word	0x40020800
 8001d7c:	40020c00 	.word	0x40020c00
 8001d80:	40021000 	.word	0x40021000
 8001d84:	40013c00 	.word	0x40013c00

08001d88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691a      	ldr	r2, [r3, #16]
 8001d98:	887b      	ldrh	r3, [r7, #2]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d002      	beq.n	8001da6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001da0:	2301      	movs	r3, #1
 8001da2:	73fb      	strb	r3, [r7, #15]
 8001da4:	e001      	b.n	8001daa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001da6:	2300      	movs	r3, #0
 8001da8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3714      	adds	r7, #20
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	807b      	strh	r3, [r7, #2]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dc8:	787b      	ldrb	r3, [r7, #1]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dce:	887a      	ldrh	r2, [r7, #2]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dd4:	e003      	b.n	8001dde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dd6:	887b      	ldrh	r3, [r7, #2]
 8001dd8:	041a      	lsls	r2, r3, #16
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	619a      	str	r2, [r3, #24]
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
	...

08001dec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001df6:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001df8:	695a      	ldr	r2, [r3, #20]
 8001dfa:	88fb      	ldrh	r3, [r7, #6]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d006      	beq.n	8001e10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e02:	4a05      	ldr	r2, [pc, #20]	; (8001e18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e04:	88fb      	ldrh	r3, [r7, #6]
 8001e06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e08:	88fb      	ldrh	r3, [r7, #6]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff f89a 	bl	8000f44 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e10:	bf00      	nop
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40013c00 	.word	0x40013c00

08001e1c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e1e:	b08f      	sub	sp, #60	; 0x3c
 8001e20:	af0a      	add	r7, sp, #40	; 0x28
 8001e22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e10f      	b.n	800204e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d106      	bne.n	8001e4e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f006 f97b 	bl	8008144 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2203      	movs	r2, #3
 8001e52:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d102      	bne.n	8001e68 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f002 fc4c 	bl	800470a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	603b      	str	r3, [r7, #0]
 8001e78:	687e      	ldr	r6, [r7, #4]
 8001e7a:	466d      	mov	r5, sp
 8001e7c:	f106 0410 	add.w	r4, r6, #16
 8001e80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e88:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e8c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e90:	1d33      	adds	r3, r6, #4
 8001e92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e94:	6838      	ldr	r0, [r7, #0]
 8001e96:	f002 fb23 	bl	80044e0 <USB_CoreInit>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d005      	beq.n	8001eac <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e0d0      	b.n	800204e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f002 fc3a 	bl	800472c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eb8:	2300      	movs	r3, #0
 8001eba:	73fb      	strb	r3, [r7, #15]
 8001ebc:	e04a      	b.n	8001f54 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ebe:	7bfa      	ldrb	r2, [r7, #15]
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	4413      	add	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	440b      	add	r3, r1
 8001ecc:	333d      	adds	r3, #61	; 0x3d
 8001ece:	2201      	movs	r2, #1
 8001ed0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ed2:	7bfa      	ldrb	r2, [r7, #15]
 8001ed4:	6879      	ldr	r1, [r7, #4]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	4413      	add	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	440b      	add	r3, r1
 8001ee0:	333c      	adds	r3, #60	; 0x3c
 8001ee2:	7bfa      	ldrb	r2, [r7, #15]
 8001ee4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ee6:	7bfa      	ldrb	r2, [r7, #15]
 8001ee8:	7bfb      	ldrb	r3, [r7, #15]
 8001eea:	b298      	uxth	r0, r3
 8001eec:	6879      	ldr	r1, [r7, #4]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	4413      	add	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	440b      	add	r3, r1
 8001ef8:	3344      	adds	r3, #68	; 0x44
 8001efa:	4602      	mov	r2, r0
 8001efc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001efe:	7bfa      	ldrb	r2, [r7, #15]
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	4613      	mov	r3, r2
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	4413      	add	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	440b      	add	r3, r1
 8001f0c:	3340      	adds	r3, #64	; 0x40
 8001f0e:	2200      	movs	r2, #0
 8001f10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f12:	7bfa      	ldrb	r2, [r7, #15]
 8001f14:	6879      	ldr	r1, [r7, #4]
 8001f16:	4613      	mov	r3, r2
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	4413      	add	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	440b      	add	r3, r1
 8001f20:	3348      	adds	r3, #72	; 0x48
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f26:	7bfa      	ldrb	r2, [r7, #15]
 8001f28:	6879      	ldr	r1, [r7, #4]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	4413      	add	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	440b      	add	r3, r1
 8001f34:	334c      	adds	r3, #76	; 0x4c
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f3a:	7bfa      	ldrb	r2, [r7, #15]
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	4413      	add	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	440b      	add	r3, r1
 8001f48:	3354      	adds	r3, #84	; 0x54
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
 8001f50:	3301      	adds	r3, #1
 8001f52:	73fb      	strb	r3, [r7, #15]
 8001f54:	7bfa      	ldrb	r2, [r7, #15]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d3af      	bcc.n	8001ebe <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f5e:	2300      	movs	r3, #0
 8001f60:	73fb      	strb	r3, [r7, #15]
 8001f62:	e044      	b.n	8001fee <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f64:	7bfa      	ldrb	r2, [r7, #15]
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	4413      	add	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	440b      	add	r3, r1
 8001f72:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001f76:	2200      	movs	r2, #0
 8001f78:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f7a:	7bfa      	ldrb	r2, [r7, #15]
 8001f7c:	6879      	ldr	r1, [r7, #4]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	4413      	add	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	440b      	add	r3, r1
 8001f88:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001f8c:	7bfa      	ldrb	r2, [r7, #15]
 8001f8e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f90:	7bfa      	ldrb	r2, [r7, #15]
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	4613      	mov	r3, r2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	4413      	add	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001fa6:	7bfa      	ldrb	r2, [r7, #15]
 8001fa8:	6879      	ldr	r1, [r7, #4]
 8001faa:	4613      	mov	r3, r2
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	4413      	add	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	440b      	add	r3, r1
 8001fb4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001fbc:	7bfa      	ldrb	r2, [r7, #15]
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	4413      	add	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	440b      	add	r3, r1
 8001fca:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001fd2:	7bfa      	ldrb	r2, [r7, #15]
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	4413      	add	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	440b      	add	r3, r1
 8001fe0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fe8:	7bfb      	ldrb	r3, [r7, #15]
 8001fea:	3301      	adds	r3, #1
 8001fec:	73fb      	strb	r3, [r7, #15]
 8001fee:	7bfa      	ldrb	r2, [r7, #15]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d3b5      	bcc.n	8001f64 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	603b      	str	r3, [r7, #0]
 8001ffe:	687e      	ldr	r6, [r7, #4]
 8002000:	466d      	mov	r5, sp
 8002002:	f106 0410 	add.w	r4, r6, #16
 8002006:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002008:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800200a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800200c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800200e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002012:	e885 0003 	stmia.w	r5, {r0, r1}
 8002016:	1d33      	adds	r3, r6, #4
 8002018:	cb0e      	ldmia	r3, {r1, r2, r3}
 800201a:	6838      	ldr	r0, [r7, #0]
 800201c:	f002 fbd2 	bl	80047c4 <USB_DevInit>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d005      	beq.n	8002032 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2202      	movs	r2, #2
 800202a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e00d      	b.n	800204e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f003 fd21 	bl	8005a8e <USB_DevDisconnect>

  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3714      	adds	r7, #20
 8002052:	46bd      	mov	sp, r7
 8002054:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002056 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b084      	sub	sp, #16
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800206a:	2b01      	cmp	r3, #1
 800206c:	d101      	bne.n	8002072 <HAL_PCD_Start+0x1c>
 800206e:	2302      	movs	r3, #2
 8002070:	e020      	b.n	80020b4 <HAL_PCD_Start+0x5e>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207e:	2b01      	cmp	r3, #1
 8002080:	d109      	bne.n	8002096 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002086:	2b01      	cmp	r3, #1
 8002088:	d005      	beq.n	8002096 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800208e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f002 fb24 	bl	80046e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f003 fcd1 	bl	8005a4c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80020bc:	b590      	push	{r4, r7, lr}
 80020be:	b08d      	sub	sp, #52	; 0x34
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020ca:	6a3b      	ldr	r3, [r7, #32]
 80020cc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f003 fd8f 	bl	8005bf6 <USB_GetMode>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f040 848a 	bne.w	80029f4 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f003 fcf3 	bl	8005ad0 <USB_ReadInterrupts>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f000 8480 	beq.w	80029f2 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	0a1b      	lsrs	r3, r3, #8
 80020fc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f003 fce0 	bl	8005ad0 <USB_ReadInterrupts>
 8002110:	4603      	mov	r3, r0
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b02      	cmp	r3, #2
 8002118:	d107      	bne.n	800212a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	695a      	ldr	r2, [r3, #20]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f002 0202 	and.w	r2, r2, #2
 8002128:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f003 fcce 	bl	8005ad0 <USB_ReadInterrupts>
 8002134:	4603      	mov	r3, r0
 8002136:	f003 0310 	and.w	r3, r3, #16
 800213a:	2b10      	cmp	r3, #16
 800213c:	d161      	bne.n	8002202 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	699a      	ldr	r2, [r3, #24]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 0210 	bic.w	r2, r2, #16
 800214c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800214e:	6a3b      	ldr	r3, [r7, #32]
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	f003 020f 	and.w	r2, r3, #15
 800215a:	4613      	mov	r3, r2
 800215c:	00db      	lsls	r3, r3, #3
 800215e:	4413      	add	r3, r2
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	4413      	add	r3, r2
 800216a:	3304      	adds	r3, #4
 800216c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	0c5b      	lsrs	r3, r3, #17
 8002172:	f003 030f 	and.w	r3, r3, #15
 8002176:	2b02      	cmp	r3, #2
 8002178:	d124      	bne.n	80021c4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002180:	4013      	ands	r3, r2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d035      	beq.n	80021f2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	091b      	lsrs	r3, r3, #4
 800218e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002190:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002194:	b29b      	uxth	r3, r3
 8002196:	461a      	mov	r2, r3
 8002198:	6a38      	ldr	r0, [r7, #32]
 800219a:	f003 fb05 	bl	80057a8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	691a      	ldr	r2, [r3, #16]
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	091b      	lsrs	r3, r3, #4
 80021a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021aa:	441a      	add	r2, r3
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	6a1a      	ldr	r2, [r3, #32]
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	091b      	lsrs	r3, r3, #4
 80021b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021bc:	441a      	add	r2, r3
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	621a      	str	r2, [r3, #32]
 80021c2:	e016      	b.n	80021f2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	0c5b      	lsrs	r3, r3, #17
 80021c8:	f003 030f 	and.w	r3, r3, #15
 80021cc:	2b06      	cmp	r3, #6
 80021ce:	d110      	bne.n	80021f2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80021d6:	2208      	movs	r2, #8
 80021d8:	4619      	mov	r1, r3
 80021da:	6a38      	ldr	r0, [r7, #32]
 80021dc:	f003 fae4 	bl	80057a8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	6a1a      	ldr	r2, [r3, #32]
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	091b      	lsrs	r3, r3, #4
 80021e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021ec:	441a      	add	r2, r3
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	699a      	ldr	r2, [r3, #24]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f042 0210 	orr.w	r2, r2, #16
 8002200:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f003 fc62 	bl	8005ad0 <USB_ReadInterrupts>
 800220c:	4603      	mov	r3, r0
 800220e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002212:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002216:	f040 80a7 	bne.w	8002368 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800221a:	2300      	movs	r3, #0
 800221c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f003 fc67 	bl	8005af6 <USB_ReadDevAllOutEpInterrupt>
 8002228:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800222a:	e099      	b.n	8002360 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800222c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 808e 	beq.w	8002354 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	4611      	mov	r1, r2
 8002242:	4618      	mov	r0, r3
 8002244:	f003 fc8b 	bl	8005b5e <USB_ReadDevOutEPInterrupt>
 8002248:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00c      	beq.n	800226e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	015a      	lsls	r2, r3, #5
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	4413      	add	r3, r2
 800225c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002260:	461a      	mov	r2, r3
 8002262:	2301      	movs	r3, #1
 8002264:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002266:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002268:	6878      	ldr	r0, [r7, #4]
 800226a:	f000 fec3 	bl	8002ff4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	f003 0308 	and.w	r3, r3, #8
 8002274:	2b00      	cmp	r3, #0
 8002276:	d00c      	beq.n	8002292 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	015a      	lsls	r2, r3, #5
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	4413      	add	r3, r2
 8002280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002284:	461a      	mov	r2, r3
 8002286:	2308      	movs	r3, #8
 8002288:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800228a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f000 ff99 	bl	80031c4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	f003 0310 	and.w	r3, r3, #16
 8002298:	2b00      	cmp	r3, #0
 800229a:	d008      	beq.n	80022ae <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229e:	015a      	lsls	r2, r3, #5
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	4413      	add	r3, r2
 80022a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022a8:	461a      	mov	r2, r3
 80022aa:	2310      	movs	r3, #16
 80022ac:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d030      	beq.n	800231a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80022b8:	6a3b      	ldr	r3, [r7, #32]
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c0:	2b80      	cmp	r3, #128	; 0x80
 80022c2:	d109      	bne.n	80022d8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	69fa      	ldr	r2, [r7, #28]
 80022ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022d6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80022d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022da:	4613      	mov	r3, r2
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	4413      	add	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	4413      	add	r3, r2
 80022ea:	3304      	adds	r3, #4
 80022ec:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	78db      	ldrb	r3, [r3, #3]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d108      	bne.n	8002308 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	2200      	movs	r2, #0
 80022fa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	4619      	mov	r1, r3
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f006 f81a 	bl	800833c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	015a      	lsls	r2, r3, #5
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	4413      	add	r3, r2
 8002310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002314:	461a      	mov	r2, r3
 8002316:	2302      	movs	r3, #2
 8002318:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	f003 0320 	and.w	r3, r3, #32
 8002320:	2b00      	cmp	r3, #0
 8002322:	d008      	beq.n	8002336 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002326:	015a      	lsls	r2, r3, #5
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	4413      	add	r3, r2
 800232c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002330:	461a      	mov	r2, r3
 8002332:	2320      	movs	r3, #32
 8002334:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d009      	beq.n	8002354 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	015a      	lsls	r2, r3, #5
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	4413      	add	r3, r2
 8002348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800234c:	461a      	mov	r2, r3
 800234e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002352:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	3301      	adds	r3, #1
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800235a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800235c:	085b      	lsrs	r3, r3, #1
 800235e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002362:	2b00      	cmp	r3, #0
 8002364:	f47f af62 	bne.w	800222c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4618      	mov	r0, r3
 800236e:	f003 fbaf 	bl	8005ad0 <USB_ReadInterrupts>
 8002372:	4603      	mov	r3, r0
 8002374:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002378:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800237c:	f040 80db 	bne.w	8002536 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f003 fbd0 	bl	8005b2a <USB_ReadDevAllInEpInterrupt>
 800238a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800238c:	2300      	movs	r3, #0
 800238e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002390:	e0cd      	b.n	800252e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b00      	cmp	r3, #0
 800239a:	f000 80c2 	beq.w	8002522 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	4611      	mov	r1, r2
 80023a8:	4618      	mov	r0, r3
 80023aa:	f003 fbf6 	bl	8005b9a <USB_ReadDevInEPInterrupt>
 80023ae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d057      	beq.n	800246a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	f003 030f 	and.w	r3, r3, #15
 80023c0:	2201      	movs	r2, #1
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	43db      	mvns	r3, r3
 80023d4:	69f9      	ldr	r1, [r7, #28]
 80023d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80023da:	4013      	ands	r3, r2
 80023dc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80023de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e0:	015a      	lsls	r2, r3, #5
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	4413      	add	r3, r2
 80023e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023ea:	461a      	mov	r2, r3
 80023ec:	2301      	movs	r3, #1
 80023ee:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d132      	bne.n	800245e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023fc:	4613      	mov	r3, r2
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	4413      	add	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	440b      	add	r3, r1
 8002406:	334c      	adds	r3, #76	; 0x4c
 8002408:	6819      	ldr	r1, [r3, #0]
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800240e:	4613      	mov	r3, r2
 8002410:	00db      	lsls	r3, r3, #3
 8002412:	4413      	add	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4403      	add	r3, r0
 8002418:	3348      	adds	r3, #72	; 0x48
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4419      	add	r1, r3
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002422:	4613      	mov	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	4413      	add	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4403      	add	r3, r0
 800242c:	334c      	adds	r3, #76	; 0x4c
 800242e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002432:	2b00      	cmp	r3, #0
 8002434:	d113      	bne.n	800245e <HAL_PCD_IRQHandler+0x3a2>
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800243a:	4613      	mov	r3, r2
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	4413      	add	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	440b      	add	r3, r1
 8002444:	3354      	adds	r3, #84	; 0x54
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d108      	bne.n	800245e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6818      	ldr	r0, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002456:	461a      	mov	r2, r3
 8002458:	2101      	movs	r1, #1
 800245a:	f003 fbfd 	bl	8005c58 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	b2db      	uxtb	r3, r3
 8002462:	4619      	mov	r1, r3
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f005 feee 	bl	8008246 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	f003 0308 	and.w	r3, r3, #8
 8002470:	2b00      	cmp	r3, #0
 8002472:	d008      	beq.n	8002486 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	015a      	lsls	r2, r3, #5
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	4413      	add	r3, r2
 800247c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002480:	461a      	mov	r2, r3
 8002482:	2308      	movs	r3, #8
 8002484:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	f003 0310 	and.w	r3, r3, #16
 800248c:	2b00      	cmp	r3, #0
 800248e:	d008      	beq.n	80024a2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	015a      	lsls	r2, r3, #5
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	4413      	add	r3, r2
 8002498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800249c:	461a      	mov	r2, r3
 800249e:	2310      	movs	r3, #16
 80024a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d008      	beq.n	80024be <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	015a      	lsls	r2, r3, #5
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	4413      	add	r3, r2
 80024b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024b8:	461a      	mov	r2, r3
 80024ba:	2340      	movs	r3, #64	; 0x40
 80024bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d023      	beq.n	8002510 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80024c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024ca:	6a38      	ldr	r0, [r7, #32]
 80024cc:	f002 fade 	bl	8004a8c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80024d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024d2:	4613      	mov	r3, r2
 80024d4:	00db      	lsls	r3, r3, #3
 80024d6:	4413      	add	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	3338      	adds	r3, #56	; 0x38
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	4413      	add	r3, r2
 80024e0:	3304      	adds	r3, #4
 80024e2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	78db      	ldrb	r3, [r3, #3]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d108      	bne.n	80024fe <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	2200      	movs	r2, #0
 80024f0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	4619      	mov	r1, r3
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f005 ff31 	bl	8008360 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	015a      	lsls	r2, r3, #5
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	4413      	add	r3, r2
 8002506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800250a:	461a      	mov	r2, r3
 800250c:	2302      	movs	r3, #2
 800250e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800251a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 fcdb 	bl	8002ed8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	3301      	adds	r3, #1
 8002526:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800252a:	085b      	lsrs	r3, r3, #1
 800252c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800252e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002530:	2b00      	cmp	r3, #0
 8002532:	f47f af2e 	bne.w	8002392 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f003 fac8 	bl	8005ad0 <USB_ReadInterrupts>
 8002540:	4603      	mov	r3, r0
 8002542:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002546:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800254a:	d122      	bne.n	8002592 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	69fa      	ldr	r2, [r7, #28]
 8002556:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800255a:	f023 0301 	bic.w	r3, r3, #1
 800255e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002566:	2b01      	cmp	r3, #1
 8002568:	d108      	bne.n	800257c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002572:	2100      	movs	r1, #0
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 fec3 	bl	8003300 <HAL_PCDEx_LPM_Callback>
 800257a:	e002      	b.n	8002582 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f005 fecf 	bl	8008320 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	695a      	ldr	r2, [r3, #20]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002590:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4618      	mov	r0, r3
 8002598:	f003 fa9a 	bl	8005ad0 <USB_ReadInterrupts>
 800259c:	4603      	mov	r3, r0
 800259e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025a6:	d112      	bne.n	80025ce <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d102      	bne.n	80025be <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f005 fe8b 	bl	80082d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	695a      	ldr	r2, [r3, #20]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80025cc:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f003 fa7c 	bl	8005ad0 <USB_ReadInterrupts>
 80025d8:	4603      	mov	r3, r0
 80025da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025e2:	f040 80b7 	bne.w	8002754 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	69fa      	ldr	r2, [r7, #28]
 80025f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025f4:	f023 0301 	bic.w	r3, r3, #1
 80025f8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2110      	movs	r1, #16
 8002600:	4618      	mov	r0, r3
 8002602:	f002 fa43 	bl	8004a8c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002606:	2300      	movs	r3, #0
 8002608:	62fb      	str	r3, [r7, #44]	; 0x2c
 800260a:	e046      	b.n	800269a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800260c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800260e:	015a      	lsls	r2, r3, #5
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	4413      	add	r3, r2
 8002614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002618:	461a      	mov	r2, r3
 800261a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800261e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002622:	015a      	lsls	r2, r3, #5
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	4413      	add	r3, r2
 8002628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002630:	0151      	lsls	r1, r2, #5
 8002632:	69fa      	ldr	r2, [r7, #28]
 8002634:	440a      	add	r2, r1
 8002636:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800263a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800263e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002642:	015a      	lsls	r2, r3, #5
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	4413      	add	r3, r2
 8002648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800264c:	461a      	mov	r2, r3
 800264e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002652:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002656:	015a      	lsls	r2, r3, #5
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	4413      	add	r3, r2
 800265c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002664:	0151      	lsls	r1, r2, #5
 8002666:	69fa      	ldr	r2, [r7, #28]
 8002668:	440a      	add	r2, r1
 800266a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800266e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002672:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002676:	015a      	lsls	r2, r3, #5
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	4413      	add	r3, r2
 800267c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002684:	0151      	lsls	r1, r2, #5
 8002686:	69fa      	ldr	r2, [r7, #28]
 8002688:	440a      	add	r2, r1
 800268a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800268e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002692:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002696:	3301      	adds	r3, #1
 8002698:	62fb      	str	r3, [r7, #44]	; 0x2c
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d3b3      	bcc.n	800260c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026aa:	69db      	ldr	r3, [r3, #28]
 80026ac:	69fa      	ldr	r2, [r7, #28]
 80026ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026b2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80026b6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d016      	beq.n	80026ee <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026ca:	69fa      	ldr	r2, [r7, #28]
 80026cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026d0:	f043 030b 	orr.w	r3, r3, #11
 80026d4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e0:	69fa      	ldr	r2, [r7, #28]
 80026e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026e6:	f043 030b 	orr.w	r3, r3, #11
 80026ea:	6453      	str	r3, [r2, #68]	; 0x44
 80026ec:	e015      	b.n	800271a <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	69fa      	ldr	r2, [r7, #28]
 80026f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002700:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002704:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	69fa      	ldr	r2, [r7, #28]
 8002710:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002714:	f043 030b 	orr.w	r3, r3, #11
 8002718:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	69fa      	ldr	r2, [r7, #28]
 8002724:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002728:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800272c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6818      	ldr	r0, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800273e:	461a      	mov	r2, r3
 8002740:	f003 fa8a 	bl	8005c58 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	695a      	ldr	r2, [r3, #20]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002752:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	f003 f9b9 	bl	8005ad0 <USB_ReadInterrupts>
 800275e:	4603      	mov	r3, r0
 8002760:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002764:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002768:	d124      	bne.n	80027b4 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f003 fa4f 	bl	8005c12 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4618      	mov	r0, r3
 800277a:	f002 fa04 	bl	8004b86 <USB_GetDevSpeed>
 800277e:	4603      	mov	r3, r0
 8002780:	461a      	mov	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681c      	ldr	r4, [r3, #0]
 800278a:	f001 fa29 	bl	8003be0 <HAL_RCC_GetHCLKFreq>
 800278e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002794:	b2db      	uxtb	r3, r3
 8002796:	461a      	mov	r2, r3
 8002798:	4620      	mov	r0, r4
 800279a:	f001 ff03 	bl	80045a4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f005 fd79 	bl	8008296 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	695a      	ldr	r2, [r3, #20]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80027b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f003 f989 	bl	8005ad0 <USB_ReadInterrupts>
 80027be:	4603      	mov	r3, r0
 80027c0:	f003 0308 	and.w	r3, r3, #8
 80027c4:	2b08      	cmp	r3, #8
 80027c6:	d10a      	bne.n	80027de <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f005 fd56 	bl	800827a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	695a      	ldr	r2, [r3, #20]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f002 0208 	and.w	r2, r2, #8
 80027dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f003 f974 	bl	8005ad0 <USB_ReadInterrupts>
 80027e8:	4603      	mov	r3, r0
 80027ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ee:	2b80      	cmp	r3, #128	; 0x80
 80027f0:	d122      	bne.n	8002838 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027fa:	6a3b      	ldr	r3, [r7, #32]
 80027fc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027fe:	2301      	movs	r3, #1
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
 8002802:	e014      	b.n	800282e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002804:	6879      	ldr	r1, [r7, #4]
 8002806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002808:	4613      	mov	r3, r2
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	4413      	add	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	440b      	add	r3, r1
 8002812:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d105      	bne.n	8002828 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281e:	b2db      	uxtb	r3, r3
 8002820:	4619      	mov	r1, r3
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 fb27 	bl	8002e76 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282a:	3301      	adds	r3, #1
 800282c:	627b      	str	r3, [r7, #36]	; 0x24
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002834:	429a      	cmp	r2, r3
 8002836:	d3e5      	bcc.n	8002804 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4618      	mov	r0, r3
 800283e:	f003 f947 	bl	8005ad0 <USB_ReadInterrupts>
 8002842:	4603      	mov	r3, r0
 8002844:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002848:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800284c:	d13b      	bne.n	80028c6 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800284e:	2301      	movs	r3, #1
 8002850:	627b      	str	r3, [r7, #36]	; 0x24
 8002852:	e02b      	b.n	80028ac <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	015a      	lsls	r2, r3, #5
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	4413      	add	r3, r2
 800285c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002868:	4613      	mov	r3, r2
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	4413      	add	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	3340      	adds	r3, #64	; 0x40
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d115      	bne.n	80028a6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800287a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800287c:	2b00      	cmp	r3, #0
 800287e:	da12      	bge.n	80028a6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002880:	6879      	ldr	r1, [r7, #4]
 8002882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002884:	4613      	mov	r3, r2
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	4413      	add	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	440b      	add	r3, r1
 800288e:	333f      	adds	r3, #63	; 0x3f
 8002890:	2201      	movs	r2, #1
 8002892:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	b2db      	uxtb	r3, r3
 8002898:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800289c:	b2db      	uxtb	r3, r3
 800289e:	4619      	mov	r1, r3
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 fae8 	bl	8002e76 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	3301      	adds	r3, #1
 80028aa:	627b      	str	r3, [r7, #36]	; 0x24
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d3ce      	bcc.n	8002854 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	695a      	ldr	r2, [r3, #20]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80028c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f003 f900 	bl	8005ad0 <USB_ReadInterrupts>
 80028d0:	4603      	mov	r3, r0
 80028d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028da:	d155      	bne.n	8002988 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028dc:	2301      	movs	r3, #1
 80028de:	627b      	str	r3, [r7, #36]	; 0x24
 80028e0:	e045      	b.n	800296e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	015a      	lsls	r2, r3, #5
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	4413      	add	r3, r2
 80028ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028f6:	4613      	mov	r3, r2
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	4413      	add	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	440b      	add	r3, r1
 8002900:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d12e      	bne.n	8002968 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800290a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800290c:	2b00      	cmp	r3, #0
 800290e:	da2b      	bge.n	8002968 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800291c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002920:	429a      	cmp	r2, r3
 8002922:	d121      	bne.n	8002968 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002924:	6879      	ldr	r1, [r7, #4]
 8002926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002928:	4613      	mov	r3, r2
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	4413      	add	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	440b      	add	r3, r1
 8002932:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002936:	2201      	movs	r2, #1
 8002938:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800293a:	6a3b      	ldr	r3, [r7, #32]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002942:	6a3b      	ldr	r3, [r7, #32]
 8002944:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002946:	6a3b      	ldr	r3, [r7, #32]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10a      	bne.n	8002968 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	69fa      	ldr	r2, [r7, #28]
 800295c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002960:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002964:	6053      	str	r3, [r2, #4]
            break;
 8002966:	e007      	b.n	8002978 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	3301      	adds	r3, #1
 800296c:	627b      	str	r3, [r7, #36]	; 0x24
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002974:	429a      	cmp	r2, r3
 8002976:	d3b4      	bcc.n	80028e2 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	695a      	ldr	r2, [r3, #20]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002986:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f003 f89f 	bl	8005ad0 <USB_ReadInterrupts>
 8002992:	4603      	mov	r3, r0
 8002994:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800299c:	d10a      	bne.n	80029b4 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f005 fcf0 	bl	8008384 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	695a      	ldr	r2, [r3, #20]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80029b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f003 f889 	bl	8005ad0 <USB_ReadInterrupts>
 80029be:	4603      	mov	r3, r0
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	2b04      	cmp	r3, #4
 80029c6:	d115      	bne.n	80029f4 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	f003 0304 	and.w	r3, r3, #4
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d002      	beq.n	80029e0 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f005 fce0 	bl	80083a0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6859      	ldr	r1, [r3, #4]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	430a      	orrs	r2, r1
 80029ee:	605a      	str	r2, [r3, #4]
 80029f0:	e000      	b.n	80029f4 <HAL_PCD_IRQHandler+0x938>
      return;
 80029f2:	bf00      	nop
    }
  }
}
 80029f4:	3734      	adds	r7, #52	; 0x34
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd90      	pop	{r4, r7, pc}

080029fa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
 8002a02:	460b      	mov	r3, r1
 8002a04:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <HAL_PCD_SetAddress+0x1a>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e013      	b.n	8002a3c <HAL_PCD_SetAddress+0x42>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	78fa      	ldrb	r2, [r7, #3]
 8002a20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	78fa      	ldrb	r2, [r7, #3]
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f002 ffe7 	bl	8005a00 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	4608      	mov	r0, r1
 8002a4e:	4611      	mov	r1, r2
 8002a50:	461a      	mov	r2, r3
 8002a52:	4603      	mov	r3, r0
 8002a54:	70fb      	strb	r3, [r7, #3]
 8002a56:	460b      	mov	r3, r1
 8002a58:	803b      	strh	r3, [r7, #0]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	da0f      	bge.n	8002a8a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a6a:	78fb      	ldrb	r3, [r7, #3]
 8002a6c:	f003 020f 	and.w	r2, r3, #15
 8002a70:	4613      	mov	r3, r2
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	4413      	add	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	3338      	adds	r3, #56	; 0x38
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	3304      	adds	r3, #4
 8002a80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2201      	movs	r2, #1
 8002a86:	705a      	strb	r2, [r3, #1]
 8002a88:	e00f      	b.n	8002aaa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a8a:	78fb      	ldrb	r3, [r7, #3]
 8002a8c:	f003 020f 	and.w	r2, r3, #15
 8002a90:	4613      	mov	r3, r2
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	4413      	add	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002aaa:	78fb      	ldrb	r3, [r7, #3]
 8002aac:	f003 030f 	and.w	r3, r3, #15
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ab6:	883a      	ldrh	r2, [r7, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	78ba      	ldrb	r2, [r7, #2]
 8002ac0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	785b      	ldrb	r3, [r3, #1]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d004      	beq.n	8002ad4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ad4:	78bb      	ldrb	r3, [r7, #2]
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d102      	bne.n	8002ae0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d101      	bne.n	8002aee <HAL_PCD_EP_Open+0xaa>
 8002aea:	2302      	movs	r3, #2
 8002aec:	e00e      	b.n	8002b0c <HAL_PCD_EP_Open+0xc8>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	68f9      	ldr	r1, [r7, #12]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f002 f867 	bl	8004bd0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002b0a:	7afb      	ldrb	r3, [r7, #11]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002b20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	da0f      	bge.n	8002b48 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b28:	78fb      	ldrb	r3, [r7, #3]
 8002b2a:	f003 020f 	and.w	r2, r3, #15
 8002b2e:	4613      	mov	r3, r2
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	4413      	add	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	3338      	adds	r3, #56	; 0x38
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2201      	movs	r2, #1
 8002b44:	705a      	strb	r2, [r3, #1]
 8002b46:	e00f      	b.n	8002b68 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b48:	78fb      	ldrb	r3, [r7, #3]
 8002b4a:	f003 020f 	and.w	r2, r3, #15
 8002b4e:	4613      	mov	r3, r2
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	4413      	add	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	3304      	adds	r3, #4
 8002b60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002b68:	78fb      	ldrb	r3, [r7, #3]
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d101      	bne.n	8002b82 <HAL_PCD_EP_Close+0x6e>
 8002b7e:	2302      	movs	r3, #2
 8002b80:	e00e      	b.n	8002ba0 <HAL_PCD_EP_Close+0x8c>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68f9      	ldr	r1, [r7, #12]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f002 f8a5 	bl	8004ce0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b086      	sub	sp, #24
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	607a      	str	r2, [r7, #4]
 8002bb2:	603b      	str	r3, [r7, #0]
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bb8:	7afb      	ldrb	r3, [r7, #11]
 8002bba:	f003 020f 	and.w	r2, r3, #15
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	4413      	add	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	4413      	add	r3, r2
 8002bce:	3304      	adds	r3, #4
 8002bd0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	2200      	movs	r2, #0
 8002be2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	2200      	movs	r2, #0
 8002be8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bea:	7afb      	ldrb	r3, [r7, #11]
 8002bec:	f003 030f 	and.w	r3, r3, #15
 8002bf0:	b2da      	uxtb	r2, r3
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d102      	bne.n	8002c04 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c04:	7afb      	ldrb	r3, [r7, #11]
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d109      	bne.n	8002c22 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6818      	ldr	r0, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	461a      	mov	r2, r3
 8002c1a:	6979      	ldr	r1, [r7, #20]
 8002c1c:	f002 fb84 	bl	8005328 <USB_EP0StartXfer>
 8002c20:	e008      	b.n	8002c34 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6818      	ldr	r0, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	6979      	ldr	r1, [r7, #20]
 8002c30:	f002 f932 	bl	8004e98 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
 8002c46:	460b      	mov	r3, r1
 8002c48:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002c4a:	78fb      	ldrb	r3, [r7, #3]
 8002c4c:	f003 020f 	and.w	r2, r3, #15
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	4613      	mov	r3, r2
 8002c54:	00db      	lsls	r3, r3, #3
 8002c56:	4413      	add	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	440b      	add	r3, r1
 8002c5c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002c60:	681b      	ldr	r3, [r3, #0]
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b086      	sub	sp, #24
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	60f8      	str	r0, [r7, #12]
 8002c76:	607a      	str	r2, [r7, #4]
 8002c78:	603b      	str	r3, [r7, #0]
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c7e:	7afb      	ldrb	r3, [r7, #11]
 8002c80:	f003 020f 	and.w	r2, r3, #15
 8002c84:	4613      	mov	r3, r2
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	4413      	add	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	3338      	adds	r3, #56	; 0x38
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	4413      	add	r3, r2
 8002c92:	3304      	adds	r3, #4
 8002c94:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	2201      	movs	r2, #1
 8002cac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cae:	7afb      	ldrb	r3, [r7, #11]
 8002cb0:	f003 030f 	and.w	r3, r3, #15
 8002cb4:	b2da      	uxtb	r2, r3
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d102      	bne.n	8002cc8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002cc8:	7afb      	ldrb	r3, [r7, #11]
 8002cca:	f003 030f 	and.w	r3, r3, #15
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d109      	bne.n	8002ce6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6818      	ldr	r0, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	461a      	mov	r2, r3
 8002cde:	6979      	ldr	r1, [r7, #20]
 8002ce0:	f002 fb22 	bl	8005328 <USB_EP0StartXfer>
 8002ce4:	e008      	b.n	8002cf8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6818      	ldr	r0, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	6979      	ldr	r1, [r7, #20]
 8002cf4:	f002 f8d0 	bl	8004e98 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3718      	adds	r7, #24
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b084      	sub	sp, #16
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002d0e:	78fb      	ldrb	r3, [r7, #3]
 8002d10:	f003 020f 	and.w	r2, r3, #15
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d901      	bls.n	8002d20 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e050      	b.n	8002dc2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	da0f      	bge.n	8002d48 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d28:	78fb      	ldrb	r3, [r7, #3]
 8002d2a:	f003 020f 	and.w	r2, r3, #15
 8002d2e:	4613      	mov	r3, r2
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	4413      	add	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	3338      	adds	r3, #56	; 0x38
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2201      	movs	r2, #1
 8002d44:	705a      	strb	r2, [r3, #1]
 8002d46:	e00d      	b.n	8002d64 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d48:	78fa      	ldrb	r2, [r7, #3]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	4413      	add	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	4413      	add	r3, r2
 8002d5a:	3304      	adds	r3, #4
 8002d5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2201      	movs	r2, #1
 8002d68:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d6a:	78fb      	ldrb	r3, [r7, #3]
 8002d6c:	f003 030f 	and.w	r3, r3, #15
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d101      	bne.n	8002d84 <HAL_PCD_EP_SetStall+0x82>
 8002d80:	2302      	movs	r3, #2
 8002d82:	e01e      	b.n	8002dc2 <HAL_PCD_EP_SetStall+0xc0>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68f9      	ldr	r1, [r7, #12]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f002 fd60 	bl	8005858 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d98:	78fb      	ldrb	r3, [r7, #3]
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10a      	bne.n	8002db8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6818      	ldr	r0, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	b2d9      	uxtb	r1, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002db2:	461a      	mov	r2, r3
 8002db4:	f002 ff50 	bl	8005c58 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b084      	sub	sp, #16
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002dd6:	78fb      	ldrb	r3, [r7, #3]
 8002dd8:	f003 020f 	and.w	r2, r3, #15
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d901      	bls.n	8002de8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e042      	b.n	8002e6e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002de8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	da0f      	bge.n	8002e10 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002df0:	78fb      	ldrb	r3, [r7, #3]
 8002df2:	f003 020f 	and.w	r2, r3, #15
 8002df6:	4613      	mov	r3, r2
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	4413      	add	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	3338      	adds	r3, #56	; 0x38
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	4413      	add	r3, r2
 8002e04:	3304      	adds	r3, #4
 8002e06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	705a      	strb	r2, [r3, #1]
 8002e0e:	e00f      	b.n	8002e30 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e10:	78fb      	ldrb	r3, [r7, #3]
 8002e12:	f003 020f 	and.w	r2, r3, #15
 8002e16:	4613      	mov	r3, r2
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	4413      	add	r3, r2
 8002e26:	3304      	adds	r3, #4
 8002e28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e36:	78fb      	ldrb	r3, [r7, #3]
 8002e38:	f003 030f 	and.w	r3, r3, #15
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d101      	bne.n	8002e50 <HAL_PCD_EP_ClrStall+0x86>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	e00e      	b.n	8002e6e <HAL_PCD_EP_ClrStall+0xa4>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68f9      	ldr	r1, [r7, #12]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f002 fd68 	bl	8005934 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b084      	sub	sp, #16
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
 8002e7e:	460b      	mov	r3, r1
 8002e80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002e82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	da0c      	bge.n	8002ea4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e8a:	78fb      	ldrb	r3, [r7, #3]
 8002e8c:	f003 020f 	and.w	r2, r3, #15
 8002e90:	4613      	mov	r3, r2
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	4413      	add	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	3338      	adds	r3, #56	; 0x38
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	3304      	adds	r3, #4
 8002ea0:	60fb      	str	r3, [r7, #12]
 8002ea2:	e00c      	b.n	8002ebe <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ea4:	78fb      	ldrb	r3, [r7, #3]
 8002ea6:	f003 020f 	and.w	r2, r3, #15
 8002eaa:	4613      	mov	r3, r2
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	4413      	add	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	4413      	add	r3, r2
 8002eba:	3304      	adds	r3, #4
 8002ebc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68f9      	ldr	r1, [r7, #12]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f002 fb87 	bl	80055d8 <USB_EPStopXfer>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002ece:	7afb      	ldrb	r3, [r7, #11]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3710      	adds	r7, #16
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b08a      	sub	sp, #40	; 0x28
 8002edc:	af02      	add	r7, sp, #8
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002eec:	683a      	ldr	r2, [r7, #0]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	4413      	add	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	3338      	adds	r3, #56	; 0x38
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	4413      	add	r3, r2
 8002efc:	3304      	adds	r3, #4
 8002efe:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6a1a      	ldr	r2, [r3, #32]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d901      	bls.n	8002f10 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e06c      	b.n	8002fea <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	699a      	ldr	r2, [r3, #24]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	69fa      	ldr	r2, [r7, #28]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d902      	bls.n	8002f2c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	3303      	adds	r3, #3
 8002f30:	089b      	lsrs	r3, r3, #2
 8002f32:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f34:	e02b      	b.n	8002f8e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	699a      	ldr	r2, [r3, #24]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	69fa      	ldr	r2, [r7, #28]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d902      	bls.n	8002f52 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	3303      	adds	r3, #3
 8002f56:	089b      	lsrs	r3, r3, #2
 8002f58:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6919      	ldr	r1, [r3, #16]
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	4603      	mov	r3, r0
 8002f70:	6978      	ldr	r0, [r7, #20]
 8002f72:	f002 fbdb 	bl	800572c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	691a      	ldr	r2, [r3, #16]
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	441a      	add	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6a1a      	ldr	r2, [r3, #32]
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	441a      	add	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	015a      	lsls	r2, r3, #5
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	4413      	add	r3, r2
 8002f96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d809      	bhi.n	8002fb8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6a1a      	ldr	r2, [r3, #32]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d203      	bcs.n	8002fb8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1be      	bne.n	8002f36 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	699a      	ldr	r2, [r3, #24]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d811      	bhi.n	8002fe8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	2201      	movs	r2, #1
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	6939      	ldr	r1, [r7, #16]
 8002fe0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3720      	adds	r7, #32
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
	...

08002ff4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b088      	sub	sp, #32
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	333c      	adds	r3, #60	; 0x3c
 800300c:	3304      	adds	r3, #4
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	015a      	lsls	r2, r3, #5
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	4413      	add	r3, r2
 800301a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d17b      	bne.n	8003122 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	f003 0308 	and.w	r3, r3, #8
 8003030:	2b00      	cmp	r3, #0
 8003032:	d015      	beq.n	8003060 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	4a61      	ldr	r2, [pc, #388]	; (80031bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003038:	4293      	cmp	r3, r2
 800303a:	f240 80b9 	bls.w	80031b0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003044:	2b00      	cmp	r3, #0
 8003046:	f000 80b3 	beq.w	80031b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	015a      	lsls	r2, r3, #5
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	4413      	add	r3, r2
 8003052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003056:	461a      	mov	r2, r3
 8003058:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800305c:	6093      	str	r3, [r2, #8]
 800305e:	e0a7      	b.n	80031b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	f003 0320 	and.w	r3, r3, #32
 8003066:	2b00      	cmp	r3, #0
 8003068:	d009      	beq.n	800307e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	015a      	lsls	r2, r3, #5
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	4413      	add	r3, r2
 8003072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003076:	461a      	mov	r2, r3
 8003078:	2320      	movs	r3, #32
 800307a:	6093      	str	r3, [r2, #8]
 800307c:	e098      	b.n	80031b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003084:	2b00      	cmp	r3, #0
 8003086:	f040 8093 	bne.w	80031b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	4a4b      	ldr	r2, [pc, #300]	; (80031bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d90f      	bls.n	80030b2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00a      	beq.n	80030b2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	015a      	lsls	r2, r3, #5
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	4413      	add	r3, r2
 80030a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030a8:	461a      	mov	r2, r3
 80030aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ae:	6093      	str	r3, [r2, #8]
 80030b0:	e07e      	b.n	80031b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	4613      	mov	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	4413      	add	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	4413      	add	r3, r2
 80030c4:	3304      	adds	r3, #4
 80030c6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	69da      	ldr	r2, [r3, #28]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	0159      	lsls	r1, r3, #5
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	440b      	add	r3, r1
 80030d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030de:	1ad2      	subs	r2, r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d114      	bne.n	8003114 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d109      	bne.n	8003106 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6818      	ldr	r0, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80030fc:	461a      	mov	r2, r3
 80030fe:	2101      	movs	r1, #1
 8003100:	f002 fdaa 	bl	8005c58 <USB_EP0_OutStart>
 8003104:	e006      	b.n	8003114 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	691a      	ldr	r2, [r3, #16]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	441a      	add	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	b2db      	uxtb	r3, r3
 8003118:	4619      	mov	r1, r3
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f005 f878 	bl	8008210 <HAL_PCD_DataOutStageCallback>
 8003120:	e046      	b.n	80031b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	4a26      	ldr	r2, [pc, #152]	; (80031c0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d124      	bne.n	8003174 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00a      	beq.n	800314a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	015a      	lsls	r2, r3, #5
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	4413      	add	r3, r2
 800313c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003140:	461a      	mov	r2, r3
 8003142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003146:	6093      	str	r3, [r2, #8]
 8003148:	e032      	b.n	80031b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	f003 0320 	and.w	r3, r3, #32
 8003150:	2b00      	cmp	r3, #0
 8003152:	d008      	beq.n	8003166 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	015a      	lsls	r2, r3, #5
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	4413      	add	r3, r2
 800315c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003160:	461a      	mov	r2, r3
 8003162:	2320      	movs	r3, #32
 8003164:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	b2db      	uxtb	r3, r3
 800316a:	4619      	mov	r1, r3
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f005 f84f 	bl	8008210 <HAL_PCD_DataOutStageCallback>
 8003172:	e01d      	b.n	80031b0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d114      	bne.n	80031a4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	4613      	mov	r3, r2
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	4413      	add	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	440b      	add	r3, r1
 8003188:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d108      	bne.n	80031a4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6818      	ldr	r0, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800319c:	461a      	mov	r2, r3
 800319e:	2100      	movs	r1, #0
 80031a0:	f002 fd5a 	bl	8005c58 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	4619      	mov	r1, r3
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f005 f830 	bl	8008210 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3720      	adds	r7, #32
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	4f54300a 	.word	0x4f54300a
 80031c0:	4f54310a 	.word	0x4f54310a

080031c4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	333c      	adds	r3, #60	; 0x3c
 80031dc:	3304      	adds	r3, #4
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	015a      	lsls	r2, r3, #5
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	4413      	add	r3, r2
 80031ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	4a15      	ldr	r2, [pc, #84]	; (800324c <PCD_EP_OutSetupPacket_int+0x88>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d90e      	bls.n	8003218 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003200:	2b00      	cmp	r3, #0
 8003202:	d009      	beq.n	8003218 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	015a      	lsls	r2, r3, #5
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	4413      	add	r3, r2
 800320c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003210:	461a      	mov	r2, r3
 8003212:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003216:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003218:	6878      	ldr	r0, [r7, #4]
 800321a:	f004 ffe7 	bl	80081ec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	4a0a      	ldr	r2, [pc, #40]	; (800324c <PCD_EP_OutSetupPacket_int+0x88>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d90c      	bls.n	8003240 <PCD_EP_OutSetupPacket_int+0x7c>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d108      	bne.n	8003240 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6818      	ldr	r0, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003238:	461a      	mov	r2, r3
 800323a:	2101      	movs	r1, #1
 800323c:	f002 fd0c 	bl	8005c58 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3718      	adds	r7, #24
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	4f54300a 	.word	0x4f54300a

08003250 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	460b      	mov	r3, r1
 800325a:	70fb      	strb	r3, [r7, #3]
 800325c:	4613      	mov	r3, r2
 800325e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003266:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003268:	78fb      	ldrb	r3, [r7, #3]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d107      	bne.n	800327e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800326e:	883b      	ldrh	r3, [r7, #0]
 8003270:	0419      	lsls	r1, r3, #16
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	430a      	orrs	r2, r1
 800327a:	629a      	str	r2, [r3, #40]	; 0x28
 800327c:	e028      	b.n	80032d0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003284:	0c1b      	lsrs	r3, r3, #16
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	4413      	add	r3, r2
 800328a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800328c:	2300      	movs	r3, #0
 800328e:	73fb      	strb	r3, [r7, #15]
 8003290:	e00d      	b.n	80032ae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	7bfb      	ldrb	r3, [r7, #15]
 8003298:	3340      	adds	r3, #64	; 0x40
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	0c1b      	lsrs	r3, r3, #16
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	4413      	add	r3, r2
 80032a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80032a8:	7bfb      	ldrb	r3, [r7, #15]
 80032aa:	3301      	adds	r3, #1
 80032ac:	73fb      	strb	r3, [r7, #15]
 80032ae:	7bfa      	ldrb	r2, [r7, #15]
 80032b0:	78fb      	ldrb	r3, [r7, #3]
 80032b2:	3b01      	subs	r3, #1
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d3ec      	bcc.n	8003292 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80032b8:	883b      	ldrh	r3, [r7, #0]
 80032ba:	0418      	lsls	r0, r3, #16
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6819      	ldr	r1, [r3, #0]
 80032c0:	78fb      	ldrb	r3, [r7, #3]
 80032c2:	3b01      	subs	r3, #1
 80032c4:	68ba      	ldr	r2, [r7, #8]
 80032c6:	4302      	orrs	r2, r0
 80032c8:	3340      	adds	r3, #64	; 0x40
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	440b      	add	r3, r1
 80032ce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3714      	adds	r7, #20
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
 80032e6:	460b      	mov	r3, r1
 80032e8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	887a      	ldrh	r2, [r7, #2]
 80032f0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	460b      	mov	r3, r1
 800330a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e267      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	d075      	beq.n	8003422 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003336:	4b88      	ldr	r3, [pc, #544]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 030c 	and.w	r3, r3, #12
 800333e:	2b04      	cmp	r3, #4
 8003340:	d00c      	beq.n	800335c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003342:	4b85      	ldr	r3, [pc, #532]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800334a:	2b08      	cmp	r3, #8
 800334c:	d112      	bne.n	8003374 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800334e:	4b82      	ldr	r3, [pc, #520]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003356:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800335a:	d10b      	bne.n	8003374 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800335c:	4b7e      	ldr	r3, [pc, #504]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d05b      	beq.n	8003420 <HAL_RCC_OscConfig+0x108>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d157      	bne.n	8003420 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e242      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800337c:	d106      	bne.n	800338c <HAL_RCC_OscConfig+0x74>
 800337e:	4b76      	ldr	r3, [pc, #472]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a75      	ldr	r2, [pc, #468]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 8003384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003388:	6013      	str	r3, [r2, #0]
 800338a:	e01d      	b.n	80033c8 <HAL_RCC_OscConfig+0xb0>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003394:	d10c      	bne.n	80033b0 <HAL_RCC_OscConfig+0x98>
 8003396:	4b70      	ldr	r3, [pc, #448]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a6f      	ldr	r2, [pc, #444]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 800339c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	4b6d      	ldr	r3, [pc, #436]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a6c      	ldr	r2, [pc, #432]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 80033a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	e00b      	b.n	80033c8 <HAL_RCC_OscConfig+0xb0>
 80033b0:	4b69      	ldr	r3, [pc, #420]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a68      	ldr	r2, [pc, #416]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 80033b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ba:	6013      	str	r3, [r2, #0]
 80033bc:	4b66      	ldr	r3, [pc, #408]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a65      	ldr	r2, [pc, #404]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 80033c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d013      	beq.n	80033f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d0:	f7fd ffa2 	bl	8001318 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033d8:	f7fd ff9e 	bl	8001318 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b64      	cmp	r3, #100	; 0x64
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e207      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ea:	4b5b      	ldr	r3, [pc, #364]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0f0      	beq.n	80033d8 <HAL_RCC_OscConfig+0xc0>
 80033f6:	e014      	b.n	8003422 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f8:	f7fd ff8e 	bl	8001318 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003400:	f7fd ff8a 	bl	8001318 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b64      	cmp	r3, #100	; 0x64
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e1f3      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003412:	4b51      	ldr	r3, [pc, #324]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f0      	bne.n	8003400 <HAL_RCC_OscConfig+0xe8>
 800341e:	e000      	b.n	8003422 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0302 	and.w	r3, r3, #2
 800342a:	2b00      	cmp	r3, #0
 800342c:	d063      	beq.n	80034f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800342e:	4b4a      	ldr	r3, [pc, #296]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 030c 	and.w	r3, r3, #12
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00b      	beq.n	8003452 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800343a:	4b47      	ldr	r3, [pc, #284]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003442:	2b08      	cmp	r3, #8
 8003444:	d11c      	bne.n	8003480 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003446:	4b44      	ldr	r3, [pc, #272]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d116      	bne.n	8003480 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003452:	4b41      	ldr	r3, [pc, #260]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d005      	beq.n	800346a <HAL_RCC_OscConfig+0x152>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d001      	beq.n	800346a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e1c7      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800346a:	4b3b      	ldr	r3, [pc, #236]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	4937      	ldr	r1, [pc, #220]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 800347a:	4313      	orrs	r3, r2
 800347c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800347e:	e03a      	b.n	80034f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d020      	beq.n	80034ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003488:	4b34      	ldr	r3, [pc, #208]	; (800355c <HAL_RCC_OscConfig+0x244>)
 800348a:	2201      	movs	r2, #1
 800348c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348e:	f7fd ff43 	bl	8001318 <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003496:	f7fd ff3f 	bl	8001318 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e1a8      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a8:	4b2b      	ldr	r3, [pc, #172]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0f0      	beq.n	8003496 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b4:	4b28      	ldr	r3, [pc, #160]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	4925      	ldr	r1, [pc, #148]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	600b      	str	r3, [r1, #0]
 80034c8:	e015      	b.n	80034f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ca:	4b24      	ldr	r3, [pc, #144]	; (800355c <HAL_RCC_OscConfig+0x244>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d0:	f7fd ff22 	bl	8001318 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034d8:	f7fd ff1e 	bl	8001318 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e187      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ea:	4b1b      	ldr	r3, [pc, #108]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1f0      	bne.n	80034d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0308 	and.w	r3, r3, #8
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d036      	beq.n	8003570 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d016      	beq.n	8003538 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800350a:	4b15      	ldr	r3, [pc, #84]	; (8003560 <HAL_RCC_OscConfig+0x248>)
 800350c:	2201      	movs	r2, #1
 800350e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003510:	f7fd ff02 	bl	8001318 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003518:	f7fd fefe 	bl	8001318 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e167      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800352a:	4b0b      	ldr	r3, [pc, #44]	; (8003558 <HAL_RCC_OscConfig+0x240>)
 800352c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0f0      	beq.n	8003518 <HAL_RCC_OscConfig+0x200>
 8003536:	e01b      	b.n	8003570 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003538:	4b09      	ldr	r3, [pc, #36]	; (8003560 <HAL_RCC_OscConfig+0x248>)
 800353a:	2200      	movs	r2, #0
 800353c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800353e:	f7fd feeb 	bl	8001318 <HAL_GetTick>
 8003542:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003544:	e00e      	b.n	8003564 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003546:	f7fd fee7 	bl	8001318 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d907      	bls.n	8003564 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e150      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
 8003558:	40023800 	.word	0x40023800
 800355c:	42470000 	.word	0x42470000
 8003560:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003564:	4b88      	ldr	r3, [pc, #544]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 8003566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1ea      	bne.n	8003546 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	f000 8097 	beq.w	80036ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800357e:	2300      	movs	r3, #0
 8003580:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003582:	4b81      	ldr	r3, [pc, #516]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10f      	bne.n	80035ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800358e:	2300      	movs	r3, #0
 8003590:	60bb      	str	r3, [r7, #8]
 8003592:	4b7d      	ldr	r3, [pc, #500]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	4a7c      	ldr	r2, [pc, #496]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 8003598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800359c:	6413      	str	r3, [r2, #64]	; 0x40
 800359e:	4b7a      	ldr	r3, [pc, #488]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a6:	60bb      	str	r3, [r7, #8]
 80035a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035aa:	2301      	movs	r3, #1
 80035ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ae:	4b77      	ldr	r3, [pc, #476]	; (800378c <HAL_RCC_OscConfig+0x474>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d118      	bne.n	80035ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ba:	4b74      	ldr	r3, [pc, #464]	; (800378c <HAL_RCC_OscConfig+0x474>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a73      	ldr	r2, [pc, #460]	; (800378c <HAL_RCC_OscConfig+0x474>)
 80035c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035c6:	f7fd fea7 	bl	8001318 <HAL_GetTick>
 80035ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035cc:	e008      	b.n	80035e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ce:	f7fd fea3 	bl	8001318 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d901      	bls.n	80035e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e10c      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e0:	4b6a      	ldr	r3, [pc, #424]	; (800378c <HAL_RCC_OscConfig+0x474>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d0f0      	beq.n	80035ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d106      	bne.n	8003602 <HAL_RCC_OscConfig+0x2ea>
 80035f4:	4b64      	ldr	r3, [pc, #400]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 80035f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f8:	4a63      	ldr	r2, [pc, #396]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 80035fa:	f043 0301 	orr.w	r3, r3, #1
 80035fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003600:	e01c      	b.n	800363c <HAL_RCC_OscConfig+0x324>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	2b05      	cmp	r3, #5
 8003608:	d10c      	bne.n	8003624 <HAL_RCC_OscConfig+0x30c>
 800360a:	4b5f      	ldr	r3, [pc, #380]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 800360c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360e:	4a5e      	ldr	r2, [pc, #376]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 8003610:	f043 0304 	orr.w	r3, r3, #4
 8003614:	6713      	str	r3, [r2, #112]	; 0x70
 8003616:	4b5c      	ldr	r3, [pc, #368]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 8003618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361a:	4a5b      	ldr	r2, [pc, #364]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 800361c:	f043 0301 	orr.w	r3, r3, #1
 8003620:	6713      	str	r3, [r2, #112]	; 0x70
 8003622:	e00b      	b.n	800363c <HAL_RCC_OscConfig+0x324>
 8003624:	4b58      	ldr	r3, [pc, #352]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 8003626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003628:	4a57      	ldr	r2, [pc, #348]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 800362a:	f023 0301 	bic.w	r3, r3, #1
 800362e:	6713      	str	r3, [r2, #112]	; 0x70
 8003630:	4b55      	ldr	r3, [pc, #340]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 8003632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003634:	4a54      	ldr	r2, [pc, #336]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 8003636:	f023 0304 	bic.w	r3, r3, #4
 800363a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d015      	beq.n	8003670 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003644:	f7fd fe68 	bl	8001318 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800364a:	e00a      	b.n	8003662 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800364c:	f7fd fe64 	bl	8001318 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	f241 3288 	movw	r2, #5000	; 0x1388
 800365a:	4293      	cmp	r3, r2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e0cb      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003662:	4b49      	ldr	r3, [pc, #292]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 8003664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0ee      	beq.n	800364c <HAL_RCC_OscConfig+0x334>
 800366e:	e014      	b.n	800369a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003670:	f7fd fe52 	bl	8001318 <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003676:	e00a      	b.n	800368e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003678:	f7fd fe4e 	bl	8001318 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	f241 3288 	movw	r2, #5000	; 0x1388
 8003686:	4293      	cmp	r3, r2
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e0b5      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800368e:	4b3e      	ldr	r3, [pc, #248]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 8003690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1ee      	bne.n	8003678 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800369a:	7dfb      	ldrb	r3, [r7, #23]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d105      	bne.n	80036ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036a0:	4b39      	ldr	r3, [pc, #228]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 80036a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a4:	4a38      	ldr	r2, [pc, #224]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 80036a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	f000 80a1 	beq.w	80037f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036b6:	4b34      	ldr	r3, [pc, #208]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 030c 	and.w	r3, r3, #12
 80036be:	2b08      	cmp	r3, #8
 80036c0:	d05c      	beq.n	800377c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d141      	bne.n	800374e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ca:	4b31      	ldr	r3, [pc, #196]	; (8003790 <HAL_RCC_OscConfig+0x478>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d0:	f7fd fe22 	bl	8001318 <HAL_GetTick>
 80036d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036d6:	e008      	b.n	80036ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036d8:	f7fd fe1e 	bl	8001318 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e087      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ea:	4b27      	ldr	r3, [pc, #156]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d1f0      	bne.n	80036d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	69da      	ldr	r2, [r3, #28]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003704:	019b      	lsls	r3, r3, #6
 8003706:	431a      	orrs	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370c:	085b      	lsrs	r3, r3, #1
 800370e:	3b01      	subs	r3, #1
 8003710:	041b      	lsls	r3, r3, #16
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003718:	061b      	lsls	r3, r3, #24
 800371a:	491b      	ldr	r1, [pc, #108]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 800371c:	4313      	orrs	r3, r2
 800371e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003720:	4b1b      	ldr	r3, [pc, #108]	; (8003790 <HAL_RCC_OscConfig+0x478>)
 8003722:	2201      	movs	r2, #1
 8003724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003726:	f7fd fdf7 	bl	8001318 <HAL_GetTick>
 800372a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800372c:	e008      	b.n	8003740 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800372e:	f7fd fdf3 	bl	8001318 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	2b02      	cmp	r3, #2
 800373a:	d901      	bls.n	8003740 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e05c      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003740:	4b11      	ldr	r3, [pc, #68]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d0f0      	beq.n	800372e <HAL_RCC_OscConfig+0x416>
 800374c:	e054      	b.n	80037f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800374e:	4b10      	ldr	r3, [pc, #64]	; (8003790 <HAL_RCC_OscConfig+0x478>)
 8003750:	2200      	movs	r2, #0
 8003752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003754:	f7fd fde0 	bl	8001318 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800375c:	f7fd fddc 	bl	8001318 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e045      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800376e:	4b06      	ldr	r3, [pc, #24]	; (8003788 <HAL_RCC_OscConfig+0x470>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1f0      	bne.n	800375c <HAL_RCC_OscConfig+0x444>
 800377a:	e03d      	b.n	80037f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d107      	bne.n	8003794 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e038      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
 8003788:	40023800 	.word	0x40023800
 800378c:	40007000 	.word	0x40007000
 8003790:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003794:	4b1b      	ldr	r3, [pc, #108]	; (8003804 <HAL_RCC_OscConfig+0x4ec>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d028      	beq.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d121      	bne.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d11a      	bne.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037c4:	4013      	ands	r3, r2
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d111      	bne.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037da:	085b      	lsrs	r3, r3, #1
 80037dc:	3b01      	subs	r3, #1
 80037de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d107      	bne.n	80037f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d001      	beq.n	80037f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e000      	b.n	80037fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3718      	adds	r7, #24
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	40023800 	.word	0x40023800

08003808 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d101      	bne.n	800381c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e0cc      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800381c:	4b68      	ldr	r3, [pc, #416]	; (80039c0 <HAL_RCC_ClockConfig+0x1b8>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d90c      	bls.n	8003844 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800382a:	4b65      	ldr	r3, [pc, #404]	; (80039c0 <HAL_RCC_ClockConfig+0x1b8>)
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003832:	4b63      	ldr	r3, [pc, #396]	; (80039c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0307 	and.w	r3, r3, #7
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	429a      	cmp	r2, r3
 800383e:	d001      	beq.n	8003844 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e0b8      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d020      	beq.n	8003892 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b00      	cmp	r3, #0
 800385a:	d005      	beq.n	8003868 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800385c:	4b59      	ldr	r3, [pc, #356]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	4a58      	ldr	r2, [pc, #352]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003862:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003866:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0308 	and.w	r3, r3, #8
 8003870:	2b00      	cmp	r3, #0
 8003872:	d005      	beq.n	8003880 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003874:	4b53      	ldr	r3, [pc, #332]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	4a52      	ldr	r2, [pc, #328]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 800387a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800387e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003880:	4b50      	ldr	r3, [pc, #320]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	494d      	ldr	r1, [pc, #308]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 800388e:	4313      	orrs	r3, r2
 8003890:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d044      	beq.n	8003928 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d107      	bne.n	80038b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038a6:	4b47      	ldr	r3, [pc, #284]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d119      	bne.n	80038e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e07f      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d003      	beq.n	80038c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038c2:	2b03      	cmp	r3, #3
 80038c4:	d107      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038c6:	4b3f      	ldr	r3, [pc, #252]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d109      	bne.n	80038e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e06f      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038d6:	4b3b      	ldr	r3, [pc, #236]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d101      	bne.n	80038e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e067      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038e6:	4b37      	ldr	r3, [pc, #220]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f023 0203 	bic.w	r2, r3, #3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	4934      	ldr	r1, [pc, #208]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038f8:	f7fd fd0e 	bl	8001318 <HAL_GetTick>
 80038fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038fe:	e00a      	b.n	8003916 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003900:	f7fd fd0a 	bl	8001318 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	f241 3288 	movw	r2, #5000	; 0x1388
 800390e:	4293      	cmp	r3, r2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e04f      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003916:	4b2b      	ldr	r3, [pc, #172]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 020c 	and.w	r2, r3, #12
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	429a      	cmp	r2, r3
 8003926:	d1eb      	bne.n	8003900 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003928:	4b25      	ldr	r3, [pc, #148]	; (80039c0 <HAL_RCC_ClockConfig+0x1b8>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	429a      	cmp	r2, r3
 8003934:	d20c      	bcs.n	8003950 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003936:	4b22      	ldr	r3, [pc, #136]	; (80039c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	b2d2      	uxtb	r2, r2
 800393c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800393e:	4b20      	ldr	r3, [pc, #128]	; (80039c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0307 	and.w	r3, r3, #7
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	429a      	cmp	r2, r3
 800394a:	d001      	beq.n	8003950 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e032      	b.n	80039b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	2b00      	cmp	r3, #0
 800395a:	d008      	beq.n	800396e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800395c:	4b19      	ldr	r3, [pc, #100]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	4916      	ldr	r1, [pc, #88]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 800396a:	4313      	orrs	r3, r2
 800396c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	2b00      	cmp	r3, #0
 8003978:	d009      	beq.n	800398e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800397a:	4b12      	ldr	r3, [pc, #72]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	490e      	ldr	r1, [pc, #56]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 800398a:	4313      	orrs	r3, r2
 800398c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800398e:	f000 f821 	bl	80039d4 <HAL_RCC_GetSysClockFreq>
 8003992:	4602      	mov	r2, r0
 8003994:	4b0b      	ldr	r3, [pc, #44]	; (80039c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	091b      	lsrs	r3, r3, #4
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	490a      	ldr	r1, [pc, #40]	; (80039c8 <HAL_RCC_ClockConfig+0x1c0>)
 80039a0:	5ccb      	ldrb	r3, [r1, r3]
 80039a2:	fa22 f303 	lsr.w	r3, r2, r3
 80039a6:	4a09      	ldr	r2, [pc, #36]	; (80039cc <HAL_RCC_ClockConfig+0x1c4>)
 80039a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039aa:	4b09      	ldr	r3, [pc, #36]	; (80039d0 <HAL_RCC_ClockConfig+0x1c8>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7fd fc6e 	bl	8001290 <HAL_InitTick>

  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	40023c00 	.word	0x40023c00
 80039c4:	40023800 	.word	0x40023800
 80039c8:	08008a20 	.word	0x08008a20
 80039cc:	20000034 	.word	0x20000034
 80039d0:	20000038 	.word	0x20000038

080039d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039d8:	b094      	sub	sp, #80	; 0x50
 80039da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039dc:	2300      	movs	r3, #0
 80039de:	647b      	str	r3, [r7, #68]	; 0x44
 80039e0:	2300      	movs	r3, #0
 80039e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039e4:	2300      	movs	r3, #0
 80039e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039ec:	4b79      	ldr	r3, [pc, #484]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	f003 030c 	and.w	r3, r3, #12
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	d00d      	beq.n	8003a14 <HAL_RCC_GetSysClockFreq+0x40>
 80039f8:	2b08      	cmp	r3, #8
 80039fa:	f200 80e1 	bhi.w	8003bc0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d002      	beq.n	8003a08 <HAL_RCC_GetSysClockFreq+0x34>
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	d003      	beq.n	8003a0e <HAL_RCC_GetSysClockFreq+0x3a>
 8003a06:	e0db      	b.n	8003bc0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a08:	4b73      	ldr	r3, [pc, #460]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a0a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003a0c:	e0db      	b.n	8003bc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a0e:	4b73      	ldr	r3, [pc, #460]	; (8003bdc <HAL_RCC_GetSysClockFreq+0x208>)
 8003a10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a12:	e0d8      	b.n	8003bc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a14:	4b6f      	ldr	r3, [pc, #444]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a1c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a1e:	4b6d      	ldr	r3, [pc, #436]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d063      	beq.n	8003af2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a2a:	4b6a      	ldr	r3, [pc, #424]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	099b      	lsrs	r3, r3, #6
 8003a30:	2200      	movs	r2, #0
 8003a32:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a34:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a3c:	633b      	str	r3, [r7, #48]	; 0x30
 8003a3e:	2300      	movs	r3, #0
 8003a40:	637b      	str	r3, [r7, #52]	; 0x34
 8003a42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a46:	4622      	mov	r2, r4
 8003a48:	462b      	mov	r3, r5
 8003a4a:	f04f 0000 	mov.w	r0, #0
 8003a4e:	f04f 0100 	mov.w	r1, #0
 8003a52:	0159      	lsls	r1, r3, #5
 8003a54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a58:	0150      	lsls	r0, r2, #5
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	4621      	mov	r1, r4
 8003a60:	1a51      	subs	r1, r2, r1
 8003a62:	6139      	str	r1, [r7, #16]
 8003a64:	4629      	mov	r1, r5
 8003a66:	eb63 0301 	sbc.w	r3, r3, r1
 8003a6a:	617b      	str	r3, [r7, #20]
 8003a6c:	f04f 0200 	mov.w	r2, #0
 8003a70:	f04f 0300 	mov.w	r3, #0
 8003a74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a78:	4659      	mov	r1, fp
 8003a7a:	018b      	lsls	r3, r1, #6
 8003a7c:	4651      	mov	r1, sl
 8003a7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a82:	4651      	mov	r1, sl
 8003a84:	018a      	lsls	r2, r1, #6
 8003a86:	4651      	mov	r1, sl
 8003a88:	ebb2 0801 	subs.w	r8, r2, r1
 8003a8c:	4659      	mov	r1, fp
 8003a8e:	eb63 0901 	sbc.w	r9, r3, r1
 8003a92:	f04f 0200 	mov.w	r2, #0
 8003a96:	f04f 0300 	mov.w	r3, #0
 8003a9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003aa2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003aa6:	4690      	mov	r8, r2
 8003aa8:	4699      	mov	r9, r3
 8003aaa:	4623      	mov	r3, r4
 8003aac:	eb18 0303 	adds.w	r3, r8, r3
 8003ab0:	60bb      	str	r3, [r7, #8]
 8003ab2:	462b      	mov	r3, r5
 8003ab4:	eb49 0303 	adc.w	r3, r9, r3
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	f04f 0200 	mov.w	r2, #0
 8003abe:	f04f 0300 	mov.w	r3, #0
 8003ac2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ac6:	4629      	mov	r1, r5
 8003ac8:	024b      	lsls	r3, r1, #9
 8003aca:	4621      	mov	r1, r4
 8003acc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ad0:	4621      	mov	r1, r4
 8003ad2:	024a      	lsls	r2, r1, #9
 8003ad4:	4610      	mov	r0, r2
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ada:	2200      	movs	r2, #0
 8003adc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ade:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ae0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ae4:	f7fc fb78 	bl	80001d8 <__aeabi_uldivmod>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	460b      	mov	r3, r1
 8003aec:	4613      	mov	r3, r2
 8003aee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003af0:	e058      	b.n	8003ba4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003af2:	4b38      	ldr	r3, [pc, #224]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	099b      	lsrs	r3, r3, #6
 8003af8:	2200      	movs	r2, #0
 8003afa:	4618      	mov	r0, r3
 8003afc:	4611      	mov	r1, r2
 8003afe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b02:	623b      	str	r3, [r7, #32]
 8003b04:	2300      	movs	r3, #0
 8003b06:	627b      	str	r3, [r7, #36]	; 0x24
 8003b08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b0c:	4642      	mov	r2, r8
 8003b0e:	464b      	mov	r3, r9
 8003b10:	f04f 0000 	mov.w	r0, #0
 8003b14:	f04f 0100 	mov.w	r1, #0
 8003b18:	0159      	lsls	r1, r3, #5
 8003b1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b1e:	0150      	lsls	r0, r2, #5
 8003b20:	4602      	mov	r2, r0
 8003b22:	460b      	mov	r3, r1
 8003b24:	4641      	mov	r1, r8
 8003b26:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b2a:	4649      	mov	r1, r9
 8003b2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b30:	f04f 0200 	mov.w	r2, #0
 8003b34:	f04f 0300 	mov.w	r3, #0
 8003b38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b44:	ebb2 040a 	subs.w	r4, r2, sl
 8003b48:	eb63 050b 	sbc.w	r5, r3, fp
 8003b4c:	f04f 0200 	mov.w	r2, #0
 8003b50:	f04f 0300 	mov.w	r3, #0
 8003b54:	00eb      	lsls	r3, r5, #3
 8003b56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b5a:	00e2      	lsls	r2, r4, #3
 8003b5c:	4614      	mov	r4, r2
 8003b5e:	461d      	mov	r5, r3
 8003b60:	4643      	mov	r3, r8
 8003b62:	18e3      	adds	r3, r4, r3
 8003b64:	603b      	str	r3, [r7, #0]
 8003b66:	464b      	mov	r3, r9
 8003b68:	eb45 0303 	adc.w	r3, r5, r3
 8003b6c:	607b      	str	r3, [r7, #4]
 8003b6e:	f04f 0200 	mov.w	r2, #0
 8003b72:	f04f 0300 	mov.w	r3, #0
 8003b76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b7a:	4629      	mov	r1, r5
 8003b7c:	028b      	lsls	r3, r1, #10
 8003b7e:	4621      	mov	r1, r4
 8003b80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b84:	4621      	mov	r1, r4
 8003b86:	028a      	lsls	r2, r1, #10
 8003b88:	4610      	mov	r0, r2
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b8e:	2200      	movs	r2, #0
 8003b90:	61bb      	str	r3, [r7, #24]
 8003b92:	61fa      	str	r2, [r7, #28]
 8003b94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b98:	f7fc fb1e 	bl	80001d8 <__aeabi_uldivmod>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ba4:	4b0b      	ldr	r3, [pc, #44]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	0c1b      	lsrs	r3, r3, #16
 8003baa:	f003 0303 	and.w	r3, r3, #3
 8003bae:	3301      	adds	r3, #1
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003bb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003bb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bbe:	e002      	b.n	8003bc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bc0:	4b05      	ldr	r3, [pc, #20]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bc2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3750      	adds	r7, #80	; 0x50
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40023800 	.word	0x40023800
 8003bd8:	00f42400 	.word	0x00f42400
 8003bdc:	007a1200 	.word	0x007a1200

08003be0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003be4:	4b03      	ldr	r3, [pc, #12]	; (8003bf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003be6:	681b      	ldr	r3, [r3, #0]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	20000034 	.word	0x20000034

08003bf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e041      	b.n	8003c8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d106      	bne.n	8003c24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7fd fa2e 	bl	8001080 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2202      	movs	r2, #2
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3304      	adds	r3, #4
 8003c34:	4619      	mov	r1, r3
 8003c36:	4610      	mov	r0, r2
 8003c38:	f000 fab6 	bl	80041a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
	...

08003c98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d001      	beq.n	8003cb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e044      	b.n	8003d3a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68da      	ldr	r2, [r3, #12]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0201 	orr.w	r2, r2, #1
 8003cc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a1e      	ldr	r2, [pc, #120]	; (8003d48 <HAL_TIM_Base_Start_IT+0xb0>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d018      	beq.n	8003d04 <HAL_TIM_Base_Start_IT+0x6c>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cda:	d013      	beq.n	8003d04 <HAL_TIM_Base_Start_IT+0x6c>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a1a      	ldr	r2, [pc, #104]	; (8003d4c <HAL_TIM_Base_Start_IT+0xb4>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d00e      	beq.n	8003d04 <HAL_TIM_Base_Start_IT+0x6c>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a19      	ldr	r2, [pc, #100]	; (8003d50 <HAL_TIM_Base_Start_IT+0xb8>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d009      	beq.n	8003d04 <HAL_TIM_Base_Start_IT+0x6c>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a17      	ldr	r2, [pc, #92]	; (8003d54 <HAL_TIM_Base_Start_IT+0xbc>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d004      	beq.n	8003d04 <HAL_TIM_Base_Start_IT+0x6c>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a16      	ldr	r2, [pc, #88]	; (8003d58 <HAL_TIM_Base_Start_IT+0xc0>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d111      	bne.n	8003d28 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 0307 	and.w	r3, r3, #7
 8003d0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2b06      	cmp	r3, #6
 8003d14:	d010      	beq.n	8003d38 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f042 0201 	orr.w	r2, r2, #1
 8003d24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d26:	e007      	b.n	8003d38 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f042 0201 	orr.w	r2, r2, #1
 8003d36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3714      	adds	r7, #20
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	40010000 	.word	0x40010000
 8003d4c:	40000400 	.word	0x40000400
 8003d50:	40000800 	.word	0x40000800
 8003d54:	40000c00 	.word	0x40000c00
 8003d58:	40014000 	.word	0x40014000

08003d5c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68da      	ldr	r2, [r3, #12]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 0201 	bic.w	r2, r2, #1
 8003d72:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6a1a      	ldr	r2, [r3, #32]
 8003d7a:	f241 1311 	movw	r3, #4369	; 0x1111
 8003d7e:	4013      	ands	r3, r2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d10f      	bne.n	8003da4 <HAL_TIM_Base_Stop_IT+0x48>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6a1a      	ldr	r2, [r3, #32]
 8003d8a:	f240 4344 	movw	r3, #1092	; 0x444
 8003d8e:	4013      	ands	r3, r2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d107      	bne.n	8003da4 <HAL_TIM_Base_Stop_IT+0x48>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f022 0201 	bic.w	r2, r2, #1
 8003da2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b082      	sub	sp, #8
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d122      	bne.n	8003e16 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d11b      	bne.n	8003e16 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f06f 0202 	mvn.w	r2, #2
 8003de6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	f003 0303 	and.w	r3, r3, #3
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d003      	beq.n	8003e04 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 f9b5 	bl	800416c <HAL_TIM_IC_CaptureCallback>
 8003e02:	e005      	b.n	8003e10 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 f9a7 	bl	8004158 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f9b8 	bl	8004180 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	f003 0304 	and.w	r3, r3, #4
 8003e20:	2b04      	cmp	r3, #4
 8003e22:	d122      	bne.n	8003e6a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	f003 0304 	and.w	r3, r3, #4
 8003e2e:	2b04      	cmp	r3, #4
 8003e30:	d11b      	bne.n	8003e6a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f06f 0204 	mvn.w	r2, #4
 8003e3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2202      	movs	r2, #2
 8003e40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d003      	beq.n	8003e58 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 f98b 	bl	800416c <HAL_TIM_IC_CaptureCallback>
 8003e56:	e005      	b.n	8003e64 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 f97d 	bl	8004158 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 f98e 	bl	8004180 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	f003 0308 	and.w	r3, r3, #8
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	d122      	bne.n	8003ebe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	f003 0308 	and.w	r3, r3, #8
 8003e82:	2b08      	cmp	r3, #8
 8003e84:	d11b      	bne.n	8003ebe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f06f 0208 	mvn.w	r2, #8
 8003e8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2204      	movs	r2, #4
 8003e94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	69db      	ldr	r3, [r3, #28]
 8003e9c:	f003 0303 	and.w	r3, r3, #3
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d003      	beq.n	8003eac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 f961 	bl	800416c <HAL_TIM_IC_CaptureCallback>
 8003eaa:	e005      	b.n	8003eb8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 f953 	bl	8004158 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 f964 	bl	8004180 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	f003 0310 	and.w	r3, r3, #16
 8003ec8:	2b10      	cmp	r3, #16
 8003eca:	d122      	bne.n	8003f12 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	f003 0310 	and.w	r3, r3, #16
 8003ed6:	2b10      	cmp	r3, #16
 8003ed8:	d11b      	bne.n	8003f12 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f06f 0210 	mvn.w	r2, #16
 8003ee2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2208      	movs	r2, #8
 8003ee8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	69db      	ldr	r3, [r3, #28]
 8003ef0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d003      	beq.n	8003f00 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f000 f937 	bl	800416c <HAL_TIM_IC_CaptureCallback>
 8003efe:	e005      	b.n	8003f0c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 f929 	bl	8004158 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f93a 	bl	8004180 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	f003 0301 	and.w	r3, r3, #1
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d10e      	bne.n	8003f3e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d107      	bne.n	8003f3e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f06f 0201 	mvn.w	r2, #1
 8003f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f7fc ffb9 	bl	8000eb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f48:	2b80      	cmp	r3, #128	; 0x80
 8003f4a:	d10e      	bne.n	8003f6a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f56:	2b80      	cmp	r3, #128	; 0x80
 8003f58:	d107      	bne.n	8003f6a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 fab1 	bl	80044cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f74:	2b40      	cmp	r3, #64	; 0x40
 8003f76:	d10e      	bne.n	8003f96 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f82:	2b40      	cmp	r3, #64	; 0x40
 8003f84:	d107      	bne.n	8003f96 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 f8ff 	bl	8004194 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	691b      	ldr	r3, [r3, #16]
 8003f9c:	f003 0320 	and.w	r3, r3, #32
 8003fa0:	2b20      	cmp	r3, #32
 8003fa2:	d10e      	bne.n	8003fc2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	f003 0320 	and.w	r3, r3, #32
 8003fae:	2b20      	cmp	r3, #32
 8003fb0:	d107      	bne.n	8003fc2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f06f 0220 	mvn.w	r2, #32
 8003fba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 fa7b 	bl	80044b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fc2:	bf00      	nop
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b084      	sub	sp, #16
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
 8003fd2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d101      	bne.n	8003fe6 <HAL_TIM_ConfigClockSource+0x1c>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	e0b4      	b.n	8004150 <HAL_TIM_ConfigClockSource+0x186>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2202      	movs	r2, #2
 8003ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004004:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800400c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800401e:	d03e      	beq.n	800409e <HAL_TIM_ConfigClockSource+0xd4>
 8004020:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004024:	f200 8087 	bhi.w	8004136 <HAL_TIM_ConfigClockSource+0x16c>
 8004028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800402c:	f000 8086 	beq.w	800413c <HAL_TIM_ConfigClockSource+0x172>
 8004030:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004034:	d87f      	bhi.n	8004136 <HAL_TIM_ConfigClockSource+0x16c>
 8004036:	2b70      	cmp	r3, #112	; 0x70
 8004038:	d01a      	beq.n	8004070 <HAL_TIM_ConfigClockSource+0xa6>
 800403a:	2b70      	cmp	r3, #112	; 0x70
 800403c:	d87b      	bhi.n	8004136 <HAL_TIM_ConfigClockSource+0x16c>
 800403e:	2b60      	cmp	r3, #96	; 0x60
 8004040:	d050      	beq.n	80040e4 <HAL_TIM_ConfigClockSource+0x11a>
 8004042:	2b60      	cmp	r3, #96	; 0x60
 8004044:	d877      	bhi.n	8004136 <HAL_TIM_ConfigClockSource+0x16c>
 8004046:	2b50      	cmp	r3, #80	; 0x50
 8004048:	d03c      	beq.n	80040c4 <HAL_TIM_ConfigClockSource+0xfa>
 800404a:	2b50      	cmp	r3, #80	; 0x50
 800404c:	d873      	bhi.n	8004136 <HAL_TIM_ConfigClockSource+0x16c>
 800404e:	2b40      	cmp	r3, #64	; 0x40
 8004050:	d058      	beq.n	8004104 <HAL_TIM_ConfigClockSource+0x13a>
 8004052:	2b40      	cmp	r3, #64	; 0x40
 8004054:	d86f      	bhi.n	8004136 <HAL_TIM_ConfigClockSource+0x16c>
 8004056:	2b30      	cmp	r3, #48	; 0x30
 8004058:	d064      	beq.n	8004124 <HAL_TIM_ConfigClockSource+0x15a>
 800405a:	2b30      	cmp	r3, #48	; 0x30
 800405c:	d86b      	bhi.n	8004136 <HAL_TIM_ConfigClockSource+0x16c>
 800405e:	2b20      	cmp	r3, #32
 8004060:	d060      	beq.n	8004124 <HAL_TIM_ConfigClockSource+0x15a>
 8004062:	2b20      	cmp	r3, #32
 8004064:	d867      	bhi.n	8004136 <HAL_TIM_ConfigClockSource+0x16c>
 8004066:	2b00      	cmp	r3, #0
 8004068:	d05c      	beq.n	8004124 <HAL_TIM_ConfigClockSource+0x15a>
 800406a:	2b10      	cmp	r3, #16
 800406c:	d05a      	beq.n	8004124 <HAL_TIM_ConfigClockSource+0x15a>
 800406e:	e062      	b.n	8004136 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6818      	ldr	r0, [r3, #0]
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	6899      	ldr	r1, [r3, #8]
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	f000 f98c 	bl	800439c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004092:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	609a      	str	r2, [r3, #8]
      break;
 800409c:	e04f      	b.n	800413e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6818      	ldr	r0, [r3, #0]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	6899      	ldr	r1, [r3, #8]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685a      	ldr	r2, [r3, #4]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	f000 f975 	bl	800439c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040c0:	609a      	str	r2, [r3, #8]
      break;
 80040c2:	e03c      	b.n	800413e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6818      	ldr	r0, [r3, #0]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	6859      	ldr	r1, [r3, #4]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	461a      	mov	r2, r3
 80040d2:	f000 f8e9 	bl	80042a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2150      	movs	r1, #80	; 0x50
 80040dc:	4618      	mov	r0, r3
 80040de:	f000 f942 	bl	8004366 <TIM_ITRx_SetConfig>
      break;
 80040e2:	e02c      	b.n	800413e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6818      	ldr	r0, [r3, #0]
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	6859      	ldr	r1, [r3, #4]
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	461a      	mov	r2, r3
 80040f2:	f000 f908 	bl	8004306 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2160      	movs	r1, #96	; 0x60
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 f932 	bl	8004366 <TIM_ITRx_SetConfig>
      break;
 8004102:	e01c      	b.n	800413e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6818      	ldr	r0, [r3, #0]
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	6859      	ldr	r1, [r3, #4]
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	461a      	mov	r2, r3
 8004112:	f000 f8c9 	bl	80042a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2140      	movs	r1, #64	; 0x40
 800411c:	4618      	mov	r0, r3
 800411e:	f000 f922 	bl	8004366 <TIM_ITRx_SetConfig>
      break;
 8004122:	e00c      	b.n	800413e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4619      	mov	r1, r3
 800412e:	4610      	mov	r0, r2
 8004130:	f000 f919 	bl	8004366 <TIM_ITRx_SetConfig>
      break;
 8004134:	e003      	b.n	800413e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	73fb      	strb	r3, [r7, #15]
      break;
 800413a:	e000      	b.n	800413e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800413c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800414e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004150:	4618      	mov	r0, r3
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a34      	ldr	r2, [pc, #208]	; (800428c <TIM_Base_SetConfig+0xe4>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d00f      	beq.n	80041e0 <TIM_Base_SetConfig+0x38>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c6:	d00b      	beq.n	80041e0 <TIM_Base_SetConfig+0x38>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a31      	ldr	r2, [pc, #196]	; (8004290 <TIM_Base_SetConfig+0xe8>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d007      	beq.n	80041e0 <TIM_Base_SetConfig+0x38>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a30      	ldr	r2, [pc, #192]	; (8004294 <TIM_Base_SetConfig+0xec>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d003      	beq.n	80041e0 <TIM_Base_SetConfig+0x38>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	4a2f      	ldr	r2, [pc, #188]	; (8004298 <TIM_Base_SetConfig+0xf0>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d108      	bne.n	80041f2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a25      	ldr	r2, [pc, #148]	; (800428c <TIM_Base_SetConfig+0xe4>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d01b      	beq.n	8004232 <TIM_Base_SetConfig+0x8a>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004200:	d017      	beq.n	8004232 <TIM_Base_SetConfig+0x8a>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a22      	ldr	r2, [pc, #136]	; (8004290 <TIM_Base_SetConfig+0xe8>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d013      	beq.n	8004232 <TIM_Base_SetConfig+0x8a>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a21      	ldr	r2, [pc, #132]	; (8004294 <TIM_Base_SetConfig+0xec>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d00f      	beq.n	8004232 <TIM_Base_SetConfig+0x8a>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a20      	ldr	r2, [pc, #128]	; (8004298 <TIM_Base_SetConfig+0xf0>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d00b      	beq.n	8004232 <TIM_Base_SetConfig+0x8a>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a1f      	ldr	r2, [pc, #124]	; (800429c <TIM_Base_SetConfig+0xf4>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d007      	beq.n	8004232 <TIM_Base_SetConfig+0x8a>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a1e      	ldr	r2, [pc, #120]	; (80042a0 <TIM_Base_SetConfig+0xf8>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d003      	beq.n	8004232 <TIM_Base_SetConfig+0x8a>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a1d      	ldr	r2, [pc, #116]	; (80042a4 <TIM_Base_SetConfig+0xfc>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d108      	bne.n	8004244 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004238:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	4313      	orrs	r3, r2
 8004242:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	4313      	orrs	r3, r2
 8004250:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a08      	ldr	r2, [pc, #32]	; (800428c <TIM_Base_SetConfig+0xe4>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d103      	bne.n	8004278 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	691a      	ldr	r2, [r3, #16]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	615a      	str	r2, [r3, #20]
}
 800427e:	bf00      	nop
 8004280:	3714      	adds	r7, #20
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	40010000 	.word	0x40010000
 8004290:	40000400 	.word	0x40000400
 8004294:	40000800 	.word	0x40000800
 8004298:	40000c00 	.word	0x40000c00
 800429c:	40014000 	.word	0x40014000
 80042a0:	40014400 	.word	0x40014400
 80042a4:	40014800 	.word	0x40014800

080042a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	f023 0201 	bic.w	r2, r3, #1
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	011b      	lsls	r3, r3, #4
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	4313      	orrs	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f023 030a 	bic.w	r3, r3, #10
 80042e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	621a      	str	r2, [r3, #32]
}
 80042fa:	bf00      	nop
 80042fc:	371c      	adds	r7, #28
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004306:	b480      	push	{r7}
 8004308:	b087      	sub	sp, #28
 800430a:	af00      	add	r7, sp, #0
 800430c:	60f8      	str	r0, [r7, #12]
 800430e:	60b9      	str	r1, [r7, #8]
 8004310:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	f023 0210 	bic.w	r2, r3, #16
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004330:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	031b      	lsls	r3, r3, #12
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	4313      	orrs	r3, r2
 800433a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004342:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	011b      	lsls	r3, r3, #4
 8004348:	693a      	ldr	r2, [r7, #16]
 800434a:	4313      	orrs	r3, r2
 800434c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	621a      	str	r2, [r3, #32]
}
 800435a:	bf00      	nop
 800435c:	371c      	adds	r7, #28
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004366:	b480      	push	{r7}
 8004368:	b085      	sub	sp, #20
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
 800436e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800437c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800437e:	683a      	ldr	r2, [r7, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4313      	orrs	r3, r2
 8004384:	f043 0307 	orr.w	r3, r3, #7
 8004388:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	609a      	str	r2, [r3, #8]
}
 8004390:	bf00      	nop
 8004392:	3714      	adds	r7, #20
 8004394:	46bd      	mov	sp, r7
 8004396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439a:	4770      	bx	lr

0800439c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800439c:	b480      	push	{r7}
 800439e:	b087      	sub	sp, #28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
 80043a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	021a      	lsls	r2, r3, #8
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	431a      	orrs	r2, r3
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	609a      	str	r2, [r3, #8]
}
 80043d0:	bf00      	nop
 80043d2:	371c      	adds	r7, #28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d101      	bne.n	80043f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043f0:	2302      	movs	r3, #2
 80043f2:	e050      	b.n	8004496 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800441a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	4313      	orrs	r3, r2
 8004424:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a1c      	ldr	r2, [pc, #112]	; (80044a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d018      	beq.n	800446a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004440:	d013      	beq.n	800446a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a18      	ldr	r2, [pc, #96]	; (80044a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d00e      	beq.n	800446a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a16      	ldr	r2, [pc, #88]	; (80044ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d009      	beq.n	800446a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a15      	ldr	r2, [pc, #84]	; (80044b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d004      	beq.n	800446a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a13      	ldr	r2, [pc, #76]	; (80044b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d10c      	bne.n	8004484 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004470:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	68ba      	ldr	r2, [r7, #8]
 8004478:	4313      	orrs	r3, r2
 800447a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68ba      	ldr	r2, [r7, #8]
 8004482:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3714      	adds	r7, #20
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	40010000 	.word	0x40010000
 80044a8:	40000400 	.word	0x40000400
 80044ac:	40000800 	.word	0x40000800
 80044b0:	40000c00 	.word	0x40000c00
 80044b4:	40014000 	.word	0x40014000

080044b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044e0:	b084      	sub	sp, #16
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b084      	sub	sp, #16
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	6078      	str	r0, [r7, #4]
 80044ea:	f107 001c 	add.w	r0, r7, #28
 80044ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d122      	bne.n	800453e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800450c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004520:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004522:	2b01      	cmp	r3, #1
 8004524:	d105      	bne.n	8004532 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f001 fbee 	bl	8005d14 <USB_CoreReset>
 8004538:	4603      	mov	r3, r0
 800453a:	73fb      	strb	r3, [r7, #15]
 800453c:	e01a      	b.n	8004574 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f001 fbe2 	bl	8005d14 <USB_CoreReset>
 8004550:	4603      	mov	r3, r0
 8004552:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004554:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004556:	2b00      	cmp	r3, #0
 8004558:	d106      	bne.n	8004568 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	639a      	str	r2, [r3, #56]	; 0x38
 8004566:	e005      	b.n	8004574 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004576:	2b01      	cmp	r3, #1
 8004578:	d10b      	bne.n	8004592 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f043 0206 	orr.w	r2, r3, #6
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f043 0220 	orr.w	r2, r3, #32
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004592:	7bfb      	ldrb	r3, [r7, #15]
}
 8004594:	4618      	mov	r0, r3
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800459e:	b004      	add	sp, #16
 80045a0:	4770      	bx	lr
	...

080045a4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b087      	sub	sp, #28
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	4613      	mov	r3, r2
 80045b0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80045b2:	79fb      	ldrb	r3, [r7, #7]
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d165      	bne.n	8004684 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	4a41      	ldr	r2, [pc, #260]	; (80046c0 <USB_SetTurnaroundTime+0x11c>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d906      	bls.n	80045ce <USB_SetTurnaroundTime+0x2a>
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	4a40      	ldr	r2, [pc, #256]	; (80046c4 <USB_SetTurnaroundTime+0x120>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d202      	bcs.n	80045ce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80045c8:	230f      	movs	r3, #15
 80045ca:	617b      	str	r3, [r7, #20]
 80045cc:	e062      	b.n	8004694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	4a3c      	ldr	r2, [pc, #240]	; (80046c4 <USB_SetTurnaroundTime+0x120>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d306      	bcc.n	80045e4 <USB_SetTurnaroundTime+0x40>
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	4a3b      	ldr	r2, [pc, #236]	; (80046c8 <USB_SetTurnaroundTime+0x124>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d202      	bcs.n	80045e4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80045de:	230e      	movs	r3, #14
 80045e0:	617b      	str	r3, [r7, #20]
 80045e2:	e057      	b.n	8004694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	4a38      	ldr	r2, [pc, #224]	; (80046c8 <USB_SetTurnaroundTime+0x124>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d306      	bcc.n	80045fa <USB_SetTurnaroundTime+0x56>
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	4a37      	ldr	r2, [pc, #220]	; (80046cc <USB_SetTurnaroundTime+0x128>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d202      	bcs.n	80045fa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80045f4:	230d      	movs	r3, #13
 80045f6:	617b      	str	r3, [r7, #20]
 80045f8:	e04c      	b.n	8004694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	4a33      	ldr	r2, [pc, #204]	; (80046cc <USB_SetTurnaroundTime+0x128>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d306      	bcc.n	8004610 <USB_SetTurnaroundTime+0x6c>
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	4a32      	ldr	r2, [pc, #200]	; (80046d0 <USB_SetTurnaroundTime+0x12c>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d802      	bhi.n	8004610 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800460a:	230c      	movs	r3, #12
 800460c:	617b      	str	r3, [r7, #20]
 800460e:	e041      	b.n	8004694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	4a2f      	ldr	r2, [pc, #188]	; (80046d0 <USB_SetTurnaroundTime+0x12c>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d906      	bls.n	8004626 <USB_SetTurnaroundTime+0x82>
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	4a2e      	ldr	r2, [pc, #184]	; (80046d4 <USB_SetTurnaroundTime+0x130>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d802      	bhi.n	8004626 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004620:	230b      	movs	r3, #11
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	e036      	b.n	8004694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	4a2a      	ldr	r2, [pc, #168]	; (80046d4 <USB_SetTurnaroundTime+0x130>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d906      	bls.n	800463c <USB_SetTurnaroundTime+0x98>
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	4a29      	ldr	r2, [pc, #164]	; (80046d8 <USB_SetTurnaroundTime+0x134>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d802      	bhi.n	800463c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004636:	230a      	movs	r3, #10
 8004638:	617b      	str	r3, [r7, #20]
 800463a:	e02b      	b.n	8004694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	4a26      	ldr	r2, [pc, #152]	; (80046d8 <USB_SetTurnaroundTime+0x134>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d906      	bls.n	8004652 <USB_SetTurnaroundTime+0xae>
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	4a25      	ldr	r2, [pc, #148]	; (80046dc <USB_SetTurnaroundTime+0x138>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d202      	bcs.n	8004652 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800464c:	2309      	movs	r3, #9
 800464e:	617b      	str	r3, [r7, #20]
 8004650:	e020      	b.n	8004694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	4a21      	ldr	r2, [pc, #132]	; (80046dc <USB_SetTurnaroundTime+0x138>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d306      	bcc.n	8004668 <USB_SetTurnaroundTime+0xc4>
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	4a20      	ldr	r2, [pc, #128]	; (80046e0 <USB_SetTurnaroundTime+0x13c>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d802      	bhi.n	8004668 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004662:	2308      	movs	r3, #8
 8004664:	617b      	str	r3, [r7, #20]
 8004666:	e015      	b.n	8004694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	4a1d      	ldr	r2, [pc, #116]	; (80046e0 <USB_SetTurnaroundTime+0x13c>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d906      	bls.n	800467e <USB_SetTurnaroundTime+0xda>
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	4a1c      	ldr	r2, [pc, #112]	; (80046e4 <USB_SetTurnaroundTime+0x140>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d202      	bcs.n	800467e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004678:	2307      	movs	r3, #7
 800467a:	617b      	str	r3, [r7, #20]
 800467c:	e00a      	b.n	8004694 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800467e:	2306      	movs	r3, #6
 8004680:	617b      	str	r3, [r7, #20]
 8004682:	e007      	b.n	8004694 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004684:	79fb      	ldrb	r3, [r7, #7]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d102      	bne.n	8004690 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800468a:	2309      	movs	r3, #9
 800468c:	617b      	str	r3, [r7, #20]
 800468e:	e001      	b.n	8004694 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004690:	2309      	movs	r3, #9
 8004692:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	68da      	ldr	r2, [r3, #12]
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	029b      	lsls	r3, r3, #10
 80046a8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80046ac:	431a      	orrs	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	371c      	adds	r7, #28
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr
 80046c0:	00d8acbf 	.word	0x00d8acbf
 80046c4:	00e4e1c0 	.word	0x00e4e1c0
 80046c8:	00f42400 	.word	0x00f42400
 80046cc:	01067380 	.word	0x01067380
 80046d0:	011a499f 	.word	0x011a499f
 80046d4:	01312cff 	.word	0x01312cff
 80046d8:	014ca43f 	.word	0x014ca43f
 80046dc:	016e3600 	.word	0x016e3600
 80046e0:	01a6ab1f 	.word	0x01a6ab1f
 80046e4:	01e84800 	.word	0x01e84800

080046e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f043 0201 	orr.w	r2, r3, #1
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr

0800470a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800470a:	b480      	push	{r7}
 800470c:	b083      	sub	sp, #12
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f023 0201 	bic.w	r2, r3, #1
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	460b      	mov	r3, r1
 8004736:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004738:	2300      	movs	r3, #0
 800473a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004748:	78fb      	ldrb	r3, [r7, #3]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d115      	bne.n	800477a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800475a:	2001      	movs	r0, #1
 800475c:	f7fc fde8 	bl	8001330 <HAL_Delay>
      ms++;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	3301      	adds	r3, #1
 8004764:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f001 fa45 	bl	8005bf6 <USB_GetMode>
 800476c:	4603      	mov	r3, r0
 800476e:	2b01      	cmp	r3, #1
 8004770:	d01e      	beq.n	80047b0 <USB_SetCurrentMode+0x84>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2b31      	cmp	r3, #49	; 0x31
 8004776:	d9f0      	bls.n	800475a <USB_SetCurrentMode+0x2e>
 8004778:	e01a      	b.n	80047b0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800477a:	78fb      	ldrb	r3, [r7, #3]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d115      	bne.n	80047ac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800478c:	2001      	movs	r0, #1
 800478e:	f7fc fdcf 	bl	8001330 <HAL_Delay>
      ms++;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	3301      	adds	r3, #1
 8004796:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f001 fa2c 	bl	8005bf6 <USB_GetMode>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d005      	beq.n	80047b0 <USB_SetCurrentMode+0x84>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2b31      	cmp	r3, #49	; 0x31
 80047a8:	d9f0      	bls.n	800478c <USB_SetCurrentMode+0x60>
 80047aa:	e001      	b.n	80047b0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e005      	b.n	80047bc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2b32      	cmp	r3, #50	; 0x32
 80047b4:	d101      	bne.n	80047ba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e000      	b.n	80047bc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047c4:	b084      	sub	sp, #16
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b086      	sub	sp, #24
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
 80047ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80047d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80047d6:	2300      	movs	r3, #0
 80047d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80047de:	2300      	movs	r3, #0
 80047e0:	613b      	str	r3, [r7, #16]
 80047e2:	e009      	b.n	80047f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	3340      	adds	r3, #64	; 0x40
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	4413      	add	r3, r2
 80047ee:	2200      	movs	r2, #0
 80047f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	3301      	adds	r3, #1
 80047f6:	613b      	str	r3, [r7, #16]
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	2b0e      	cmp	r3, #14
 80047fc:	d9f2      	bls.n	80047e4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80047fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004800:	2b00      	cmp	r3, #0
 8004802:	d11c      	bne.n	800483e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004812:	f043 0302 	orr.w	r3, r3, #2
 8004816:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004828:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004834:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	639a      	str	r2, [r3, #56]	; 0x38
 800483c:	e00b      	b.n	8004856 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004842:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800485c:	461a      	mov	r2, r3
 800485e:	2300      	movs	r3, #0
 8004860:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004868:	4619      	mov	r1, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004870:	461a      	mov	r2, r3
 8004872:	680b      	ldr	r3, [r1, #0]
 8004874:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004878:	2b01      	cmp	r3, #1
 800487a:	d10c      	bne.n	8004896 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800487c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800487e:	2b00      	cmp	r3, #0
 8004880:	d104      	bne.n	800488c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004882:	2100      	movs	r1, #0
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f965 	bl	8004b54 <USB_SetDevSpeed>
 800488a:	e008      	b.n	800489e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800488c:	2101      	movs	r1, #1
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 f960 	bl	8004b54 <USB_SetDevSpeed>
 8004894:	e003      	b.n	800489e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004896:	2103      	movs	r1, #3
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 f95b 	bl	8004b54 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800489e:	2110      	movs	r1, #16
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 f8f3 	bl	8004a8c <USB_FlushTxFifo>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 f91f 	bl	8004af4 <USB_FlushRxFifo>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d001      	beq.n	80048c0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048c6:	461a      	mov	r2, r3
 80048c8:	2300      	movs	r3, #0
 80048ca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048d2:	461a      	mov	r2, r3
 80048d4:	2300      	movs	r3, #0
 80048d6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048de:	461a      	mov	r2, r3
 80048e0:	2300      	movs	r3, #0
 80048e2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048e4:	2300      	movs	r3, #0
 80048e6:	613b      	str	r3, [r7, #16]
 80048e8:	e043      	b.n	8004972 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	015a      	lsls	r2, r3, #5
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	4413      	add	r3, r2
 80048f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004900:	d118      	bne.n	8004934 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d10a      	bne.n	800491e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	015a      	lsls	r2, r3, #5
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4413      	add	r3, r2
 8004910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004914:	461a      	mov	r2, r3
 8004916:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800491a:	6013      	str	r3, [r2, #0]
 800491c:	e013      	b.n	8004946 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	015a      	lsls	r2, r3, #5
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	4413      	add	r3, r2
 8004926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800492a:	461a      	mov	r2, r3
 800492c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004930:	6013      	str	r3, [r2, #0]
 8004932:	e008      	b.n	8004946 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	015a      	lsls	r2, r3, #5
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4413      	add	r3, r2
 800493c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004940:	461a      	mov	r2, r3
 8004942:	2300      	movs	r3, #0
 8004944:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	015a      	lsls	r2, r3, #5
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	4413      	add	r3, r2
 800494e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004952:	461a      	mov	r2, r3
 8004954:	2300      	movs	r3, #0
 8004956:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	015a      	lsls	r2, r3, #5
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4413      	add	r3, r2
 8004960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004964:	461a      	mov	r2, r3
 8004966:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800496a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	3301      	adds	r3, #1
 8004970:	613b      	str	r3, [r7, #16]
 8004972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	429a      	cmp	r2, r3
 8004978:	d3b7      	bcc.n	80048ea <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800497a:	2300      	movs	r3, #0
 800497c:	613b      	str	r3, [r7, #16]
 800497e:	e043      	b.n	8004a08 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	015a      	lsls	r2, r3, #5
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	4413      	add	r3, r2
 8004988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004992:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004996:	d118      	bne.n	80049ca <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10a      	bne.n	80049b4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	015a      	lsls	r2, r3, #5
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	4413      	add	r3, r2
 80049a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049aa:	461a      	mov	r2, r3
 80049ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049b0:	6013      	str	r3, [r2, #0]
 80049b2:	e013      	b.n	80049dc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	015a      	lsls	r2, r3, #5
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	4413      	add	r3, r2
 80049bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c0:	461a      	mov	r2, r3
 80049c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80049c6:	6013      	str	r3, [r2, #0]
 80049c8:	e008      	b.n	80049dc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	015a      	lsls	r2, r3, #5
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	4413      	add	r3, r2
 80049d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d6:	461a      	mov	r2, r3
 80049d8:	2300      	movs	r3, #0
 80049da:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	015a      	lsls	r2, r3, #5
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e8:	461a      	mov	r2, r3
 80049ea:	2300      	movs	r3, #0
 80049ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	015a      	lsls	r2, r3, #5
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	4413      	add	r3, r2
 80049f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049fa:	461a      	mov	r2, r3
 80049fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a00:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	3301      	adds	r3, #1
 8004a06:	613b      	str	r3, [r7, #16]
 8004a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d3b7      	bcc.n	8004980 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a22:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004a30:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d105      	bne.n	8004a44 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	f043 0210 	orr.w	r2, r3, #16
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	699a      	ldr	r2, [r3, #24]
 8004a48:	4b0f      	ldr	r3, [pc, #60]	; (8004a88 <USB_DevInit+0x2c4>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d005      	beq.n	8004a62 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	f043 0208 	orr.w	r2, r3, #8
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d107      	bne.n	8004a78 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a70:	f043 0304 	orr.w	r3, r3, #4
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004a78:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3718      	adds	r7, #24
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a84:	b004      	add	sp, #16
 8004a86:	4770      	bx	lr
 8004a88:	803c3800 	.word	0x803c3800

08004a8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	4a13      	ldr	r2, [pc, #76]	; (8004af0 <USB_FlushTxFifo+0x64>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d901      	bls.n	8004aac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e01b      	b.n	8004ae4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	daf2      	bge.n	8004a9a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	019b      	lsls	r3, r3, #6
 8004abc:	f043 0220 	orr.w	r2, r3, #32
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	4a08      	ldr	r2, [pc, #32]	; (8004af0 <USB_FlushTxFifo+0x64>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d901      	bls.n	8004ad6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e006      	b.n	8004ae4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	f003 0320 	and.w	r3, r3, #32
 8004ade:	2b20      	cmp	r3, #32
 8004ae0:	d0f0      	beq.n	8004ac4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3714      	adds	r7, #20
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr
 8004af0:	00030d40 	.word	0x00030d40

08004af4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004afc:	2300      	movs	r3, #0
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	3301      	adds	r3, #1
 8004b04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	4a11      	ldr	r2, [pc, #68]	; (8004b50 <USB_FlushRxFifo+0x5c>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d901      	bls.n	8004b12 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e018      	b.n	8004b44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	daf2      	bge.n	8004b00 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2210      	movs	r2, #16
 8004b22:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	3301      	adds	r3, #1
 8004b28:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	4a08      	ldr	r2, [pc, #32]	; (8004b50 <USB_FlushRxFifo+0x5c>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d901      	bls.n	8004b36 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e006      	b.n	8004b44 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	f003 0310 	and.w	r3, r3, #16
 8004b3e:	2b10      	cmp	r3, #16
 8004b40:	d0f0      	beq.n	8004b24 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3714      	adds	r7, #20
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr
 8004b50:	00030d40 	.word	0x00030d40

08004b54 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	78fb      	ldrb	r3, [r7, #3]
 8004b6e:	68f9      	ldr	r1, [r7, #12]
 8004b70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b74:	4313      	orrs	r3, r2
 8004b76:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3714      	adds	r7, #20
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004b86:	b480      	push	{r7}
 8004b88:	b087      	sub	sp, #28
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f003 0306 	and.w	r3, r3, #6
 8004b9e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d102      	bne.n	8004bac <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	75fb      	strb	r3, [r7, #23]
 8004baa:	e00a      	b.n	8004bc2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d002      	beq.n	8004bb8 <USB_GetDevSpeed+0x32>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2b06      	cmp	r3, #6
 8004bb6:	d102      	bne.n	8004bbe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004bb8:	2302      	movs	r3, #2
 8004bba:	75fb      	strb	r3, [r7, #23]
 8004bbc:	e001      	b.n	8004bc2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004bbe:	230f      	movs	r3, #15
 8004bc0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	371c      	adds	r7, #28
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	785b      	ldrb	r3, [r3, #1]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d13a      	bne.n	8004c62 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bf2:	69da      	ldr	r2, [r3, #28]
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	f003 030f 	and.w	r3, r3, #15
 8004bfc:	2101      	movs	r1, #1
 8004bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	68f9      	ldr	r1, [r7, #12]
 8004c06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	015a      	lsls	r2, r3, #5
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	4413      	add	r3, r2
 8004c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d155      	bne.n	8004cd0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	015a      	lsls	r2, r3, #5
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	791b      	ldrb	r3, [r3, #4]
 8004c3e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c40:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	059b      	lsls	r3, r3, #22
 8004c46:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	0151      	lsls	r1, r2, #5
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	440a      	add	r2, r1
 8004c52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c5e:	6013      	str	r3, [r2, #0]
 8004c60:	e036      	b.n	8004cd0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c68:	69da      	ldr	r2, [r3, #28]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	f003 030f 	and.w	r3, r3, #15
 8004c72:	2101      	movs	r1, #1
 8004c74:	fa01 f303 	lsl.w	r3, r1, r3
 8004c78:	041b      	lsls	r3, r3, #16
 8004c7a:	68f9      	ldr	r1, [r7, #12]
 8004c7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c80:	4313      	orrs	r3, r2
 8004c82:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	015a      	lsls	r2, r3, #5
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d11a      	bne.n	8004cd0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	015a      	lsls	r2, r3, #5
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	791b      	ldrb	r3, [r3, #4]
 8004cb4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004cb6:	430b      	orrs	r3, r1
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	0151      	lsls	r1, r2, #5
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	440a      	add	r2, r1
 8004cc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cce:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
	...

08004ce0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	785b      	ldrb	r3, [r3, #1]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d161      	bne.n	8004dc0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	015a      	lsls	r2, r3, #5
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	4413      	add	r3, r2
 8004d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d12:	d11f      	bne.n	8004d54 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	015a      	lsls	r2, r3, #5
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	0151      	lsls	r1, r2, #5
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	440a      	add	r2, r1
 8004d2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d2e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d32:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	015a      	lsls	r2, r3, #5
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	0151      	lsls	r1, r2, #5
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	440a      	add	r2, r1
 8004d4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d52:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	f003 030f 	and.w	r3, r3, #15
 8004d64:	2101      	movs	r1, #1
 8004d66:	fa01 f303 	lsl.w	r3, r1, r3
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	43db      	mvns	r3, r3
 8004d6e:	68f9      	ldr	r1, [r7, #12]
 8004d70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d74:	4013      	ands	r3, r2
 8004d76:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d7e:	69da      	ldr	r2, [r3, #28]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	f003 030f 	and.w	r3, r3, #15
 8004d88:	2101      	movs	r1, #1
 8004d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	43db      	mvns	r3, r3
 8004d92:	68f9      	ldr	r1, [r7, #12]
 8004d94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d98:	4013      	ands	r3, r2
 8004d9a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	015a      	lsls	r2, r3, #5
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	4413      	add	r3, r2
 8004da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	0159      	lsls	r1, r3, #5
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	440b      	add	r3, r1
 8004db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db6:	4619      	mov	r1, r3
 8004db8:	4b35      	ldr	r3, [pc, #212]	; (8004e90 <USB_DeactivateEndpoint+0x1b0>)
 8004dba:	4013      	ands	r3, r2
 8004dbc:	600b      	str	r3, [r1, #0]
 8004dbe:	e060      	b.n	8004e82 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	015a      	lsls	r2, r3, #5
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dd6:	d11f      	bne.n	8004e18 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	015a      	lsls	r2, r3, #5
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	4413      	add	r3, r2
 8004de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	0151      	lsls	r1, r2, #5
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	440a      	add	r2, r1
 8004dee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004df2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004df6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	0151      	lsls	r1, r2, #5
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	440a      	add	r2, r1
 8004e0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e16:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	f003 030f 	and.w	r3, r3, #15
 8004e28:	2101      	movs	r1, #1
 8004e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e2e:	041b      	lsls	r3, r3, #16
 8004e30:	43db      	mvns	r3, r3
 8004e32:	68f9      	ldr	r1, [r7, #12]
 8004e34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e38:	4013      	ands	r3, r2
 8004e3a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e42:	69da      	ldr	r2, [r3, #28]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	f003 030f 	and.w	r3, r3, #15
 8004e4c:	2101      	movs	r1, #1
 8004e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e52:	041b      	lsls	r3, r3, #16
 8004e54:	43db      	mvns	r3, r3
 8004e56:	68f9      	ldr	r1, [r7, #12]
 8004e58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	015a      	lsls	r2, r3, #5
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	4413      	add	r3, r2
 8004e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	0159      	lsls	r1, r3, #5
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	440b      	add	r3, r1
 8004e76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	4b05      	ldr	r3, [pc, #20]	; (8004e94 <USB_DeactivateEndpoint+0x1b4>)
 8004e7e:	4013      	ands	r3, r2
 8004e80:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3714      	adds	r7, #20
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	ec337800 	.word	0xec337800
 8004e94:	eff37800 	.word	0xeff37800

08004e98 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b08a      	sub	sp, #40	; 0x28
 8004e9c:	af02      	add	r7, sp, #8
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	785b      	ldrb	r3, [r3, #1]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	f040 815c 	bne.w	8005172 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d132      	bne.n	8004f28 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	015a      	lsls	r2, r3, #5
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	4413      	add	r3, r2
 8004eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	69ba      	ldr	r2, [r7, #24]
 8004ed2:	0151      	lsls	r1, r2, #5
 8004ed4:	69fa      	ldr	r2, [r7, #28]
 8004ed6:	440a      	add	r2, r1
 8004ed8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004edc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ee0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ee4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	015a      	lsls	r2, r3, #5
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	4413      	add	r3, r2
 8004eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	69ba      	ldr	r2, [r7, #24]
 8004ef6:	0151      	lsls	r1, r2, #5
 8004ef8:	69fa      	ldr	r2, [r7, #28]
 8004efa:	440a      	add	r2, r1
 8004efc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	015a      	lsls	r2, r3, #5
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	69ba      	ldr	r2, [r7, #24]
 8004f16:	0151      	lsls	r1, r2, #5
 8004f18:	69fa      	ldr	r2, [r7, #28]
 8004f1a:	440a      	add	r2, r1
 8004f1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f20:	0cdb      	lsrs	r3, r3, #19
 8004f22:	04db      	lsls	r3, r3, #19
 8004f24:	6113      	str	r3, [r2, #16]
 8004f26:	e074      	b.n	8005012 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	015a      	lsls	r2, r3, #5
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	4413      	add	r3, r2
 8004f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	69ba      	ldr	r2, [r7, #24]
 8004f38:	0151      	lsls	r1, r2, #5
 8004f3a:	69fa      	ldr	r2, [r7, #28]
 8004f3c:	440a      	add	r2, r1
 8004f3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f42:	0cdb      	lsrs	r3, r3, #19
 8004f44:	04db      	lsls	r3, r3, #19
 8004f46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	015a      	lsls	r2, r3, #5
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	4413      	add	r3, r2
 8004f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	69ba      	ldr	r2, [r7, #24]
 8004f58:	0151      	lsls	r1, r2, #5
 8004f5a:	69fa      	ldr	r2, [r7, #28]
 8004f5c:	440a      	add	r2, r1
 8004f5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f62:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f66:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	015a      	lsls	r2, r3, #5
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	4413      	add	r3, r2
 8004f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f78:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	6999      	ldr	r1, [r3, #24]
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	440b      	add	r3, r1
 8004f84:	1e59      	subs	r1, r3, #1
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f8e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004f90:	4b9d      	ldr	r3, [pc, #628]	; (8005208 <USB_EPStartXfer+0x370>)
 8004f92:	400b      	ands	r3, r1
 8004f94:	69b9      	ldr	r1, [r7, #24]
 8004f96:	0148      	lsls	r0, r1, #5
 8004f98:	69f9      	ldr	r1, [r7, #28]
 8004f9a:	4401      	add	r1, r0
 8004f9c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	015a      	lsls	r2, r3, #5
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	4413      	add	r3, r2
 8004fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb0:	691a      	ldr	r2, [r3, #16]
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fba:	69b9      	ldr	r1, [r7, #24]
 8004fbc:	0148      	lsls	r0, r1, #5
 8004fbe:	69f9      	ldr	r1, [r7, #28]
 8004fc0:	4401      	add	r1, r0
 8004fc2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	791b      	ldrb	r3, [r3, #4]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d11f      	bne.n	8005012 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	015a      	lsls	r2, r3, #5
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	4413      	add	r3, r2
 8004fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	0151      	lsls	r1, r2, #5
 8004fe4:	69fa      	ldr	r2, [r7, #28]
 8004fe6:	440a      	add	r2, r1
 8004fe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fec:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004ff0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	015a      	lsls	r2, r3, #5
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	0151      	lsls	r1, r2, #5
 8005004:	69fa      	ldr	r2, [r7, #28]
 8005006:	440a      	add	r2, r1
 8005008:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800500c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005010:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005012:	79fb      	ldrb	r3, [r7, #7]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d14b      	bne.n	80050b0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	695b      	ldr	r3, [r3, #20]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d009      	beq.n	8005034 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	015a      	lsls	r2, r3, #5
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	4413      	add	r3, r2
 8005028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800502c:	461a      	mov	r2, r3
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	791b      	ldrb	r3, [r3, #4]
 8005038:	2b01      	cmp	r3, #1
 800503a:	d128      	bne.n	800508e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005048:	2b00      	cmp	r3, #0
 800504a:	d110      	bne.n	800506e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	015a      	lsls	r2, r3, #5
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	4413      	add	r3, r2
 8005054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	69ba      	ldr	r2, [r7, #24]
 800505c:	0151      	lsls	r1, r2, #5
 800505e:	69fa      	ldr	r2, [r7, #28]
 8005060:	440a      	add	r2, r1
 8005062:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005066:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800506a:	6013      	str	r3, [r2, #0]
 800506c:	e00f      	b.n	800508e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	4413      	add	r3, r2
 8005076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	0151      	lsls	r1, r2, #5
 8005080:	69fa      	ldr	r2, [r7, #28]
 8005082:	440a      	add	r2, r1
 8005084:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800508c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	015a      	lsls	r2, r3, #5
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	4413      	add	r3, r2
 8005096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	0151      	lsls	r1, r2, #5
 80050a0:	69fa      	ldr	r2, [r7, #28]
 80050a2:	440a      	add	r2, r1
 80050a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050ac:	6013      	str	r3, [r2, #0]
 80050ae:	e133      	b.n	8005318 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	69ba      	ldr	r2, [r7, #24]
 80050c0:	0151      	lsls	r1, r2, #5
 80050c2:	69fa      	ldr	r2, [r7, #28]
 80050c4:	440a      	add	r2, r1
 80050c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050ce:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	791b      	ldrb	r3, [r3, #4]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d015      	beq.n	8005104 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f000 811b 	beq.w	8005318 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	f003 030f 	and.w	r3, r3, #15
 80050f2:	2101      	movs	r1, #1
 80050f4:	fa01 f303 	lsl.w	r3, r1, r3
 80050f8:	69f9      	ldr	r1, [r7, #28]
 80050fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050fe:	4313      	orrs	r3, r2
 8005100:	634b      	str	r3, [r1, #52]	; 0x34
 8005102:	e109      	b.n	8005318 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005110:	2b00      	cmp	r3, #0
 8005112:	d110      	bne.n	8005136 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	015a      	lsls	r2, r3, #5
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	4413      	add	r3, r2
 800511c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	69ba      	ldr	r2, [r7, #24]
 8005124:	0151      	lsls	r1, r2, #5
 8005126:	69fa      	ldr	r2, [r7, #28]
 8005128:	440a      	add	r2, r1
 800512a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800512e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005132:	6013      	str	r3, [r2, #0]
 8005134:	e00f      	b.n	8005156 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	015a      	lsls	r2, r3, #5
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	4413      	add	r3, r2
 800513e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	0151      	lsls	r1, r2, #5
 8005148:	69fa      	ldr	r2, [r7, #28]
 800514a:	440a      	add	r2, r1
 800514c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005154:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	6919      	ldr	r1, [r3, #16]
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	781a      	ldrb	r2, [r3, #0]
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	b298      	uxth	r0, r3
 8005164:	79fb      	ldrb	r3, [r7, #7]
 8005166:	9300      	str	r3, [sp, #0]
 8005168:	4603      	mov	r3, r0
 800516a:	68f8      	ldr	r0, [r7, #12]
 800516c:	f000 fade 	bl	800572c <USB_WritePacket>
 8005170:	e0d2      	b.n	8005318 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	4413      	add	r3, r2
 800517a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	0151      	lsls	r1, r2, #5
 8005184:	69fa      	ldr	r2, [r7, #28]
 8005186:	440a      	add	r2, r1
 8005188:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800518c:	0cdb      	lsrs	r3, r3, #19
 800518e:	04db      	lsls	r3, r3, #19
 8005190:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	015a      	lsls	r2, r3, #5
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	4413      	add	r3, r2
 800519a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	0151      	lsls	r1, r2, #5
 80051a4:	69fa      	ldr	r2, [r7, #28]
 80051a6:	440a      	add	r2, r1
 80051a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051b4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d126      	bne.n	800520c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	015a      	lsls	r2, r3, #5
 80051c2:	69fb      	ldr	r3, [r7, #28]
 80051c4:	4413      	add	r3, r2
 80051c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ca:	691a      	ldr	r2, [r3, #16]
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051d4:	69b9      	ldr	r1, [r7, #24]
 80051d6:	0148      	lsls	r0, r1, #5
 80051d8:	69f9      	ldr	r1, [r7, #28]
 80051da:	4401      	add	r1, r0
 80051dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80051e0:	4313      	orrs	r3, r2
 80051e2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	015a      	lsls	r2, r3, #5
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	4413      	add	r3, r2
 80051ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	0151      	lsls	r1, r2, #5
 80051f6:	69fa      	ldr	r2, [r7, #28]
 80051f8:	440a      	add	r2, r1
 80051fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005202:	6113      	str	r3, [r2, #16]
 8005204:	e03a      	b.n	800527c <USB_EPStartXfer+0x3e4>
 8005206:	bf00      	nop
 8005208:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	699a      	ldr	r2, [r3, #24]
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	4413      	add	r3, r2
 8005216:	1e5a      	subs	r2, r3, #1
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005220:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	8afa      	ldrh	r2, [r7, #22]
 8005228:	fb03 f202 	mul.w	r2, r3, r2
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	015a      	lsls	r2, r3, #5
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	4413      	add	r3, r2
 8005238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800523c:	691a      	ldr	r2, [r3, #16]
 800523e:	8afb      	ldrh	r3, [r7, #22]
 8005240:	04d9      	lsls	r1, r3, #19
 8005242:	4b38      	ldr	r3, [pc, #224]	; (8005324 <USB_EPStartXfer+0x48c>)
 8005244:	400b      	ands	r3, r1
 8005246:	69b9      	ldr	r1, [r7, #24]
 8005248:	0148      	lsls	r0, r1, #5
 800524a:	69f9      	ldr	r1, [r7, #28]
 800524c:	4401      	add	r1, r0
 800524e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005252:	4313      	orrs	r3, r2
 8005254:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	015a      	lsls	r2, r3, #5
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	4413      	add	r3, r2
 800525e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005262:	691a      	ldr	r2, [r3, #16]
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	69db      	ldr	r3, [r3, #28]
 8005268:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800526c:	69b9      	ldr	r1, [r7, #24]
 800526e:	0148      	lsls	r0, r1, #5
 8005270:	69f9      	ldr	r1, [r7, #28]
 8005272:	4401      	add	r1, r0
 8005274:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005278:	4313      	orrs	r3, r2
 800527a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800527c:	79fb      	ldrb	r3, [r7, #7]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d10d      	bne.n	800529e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d009      	beq.n	800529e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	6919      	ldr	r1, [r3, #16]
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	015a      	lsls	r2, r3, #5
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	4413      	add	r3, r2
 8005296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800529a:	460a      	mov	r2, r1
 800529c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	791b      	ldrb	r3, [r3, #4]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d128      	bne.n	80052f8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d110      	bne.n	80052d8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	015a      	lsls	r2, r3, #5
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	4413      	add	r3, r2
 80052be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	69ba      	ldr	r2, [r7, #24]
 80052c6:	0151      	lsls	r1, r2, #5
 80052c8:	69fa      	ldr	r2, [r7, #28]
 80052ca:	440a      	add	r2, r1
 80052cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80052d4:	6013      	str	r3, [r2, #0]
 80052d6:	e00f      	b.n	80052f8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	015a      	lsls	r2, r3, #5
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	4413      	add	r3, r2
 80052e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	69ba      	ldr	r2, [r7, #24]
 80052e8:	0151      	lsls	r1, r2, #5
 80052ea:	69fa      	ldr	r2, [r7, #28]
 80052ec:	440a      	add	r2, r1
 80052ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052f6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80052f8:	69bb      	ldr	r3, [r7, #24]
 80052fa:	015a      	lsls	r2, r3, #5
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	4413      	add	r3, r2
 8005300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	69ba      	ldr	r2, [r7, #24]
 8005308:	0151      	lsls	r1, r2, #5
 800530a:	69fa      	ldr	r2, [r7, #28]
 800530c:	440a      	add	r2, r1
 800530e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005312:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005316:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3720      	adds	r7, #32
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	1ff80000 	.word	0x1ff80000

08005328 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005328:	b480      	push	{r7}
 800532a:	b087      	sub	sp, #28
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	4613      	mov	r3, r2
 8005334:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	785b      	ldrb	r3, [r3, #1]
 8005344:	2b01      	cmp	r3, #1
 8005346:	f040 80ce 	bne.w	80054e6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d132      	bne.n	80053b8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	015a      	lsls	r2, r3, #5
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	4413      	add	r3, r2
 800535a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	0151      	lsls	r1, r2, #5
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	440a      	add	r2, r1
 8005368:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800536c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005370:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005374:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	015a      	lsls	r2, r3, #5
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	4413      	add	r3, r2
 800537e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	0151      	lsls	r1, r2, #5
 8005388:	697a      	ldr	r2, [r7, #20]
 800538a:	440a      	add	r2, r1
 800538c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005390:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005394:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	015a      	lsls	r2, r3, #5
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	4413      	add	r3, r2
 800539e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	0151      	lsls	r1, r2, #5
 80053a8:	697a      	ldr	r2, [r7, #20]
 80053aa:	440a      	add	r2, r1
 80053ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053b0:	0cdb      	lsrs	r3, r3, #19
 80053b2:	04db      	lsls	r3, r3, #19
 80053b4:	6113      	str	r3, [r2, #16]
 80053b6:	e04e      	b.n	8005456 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	015a      	lsls	r2, r3, #5
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	4413      	add	r3, r2
 80053c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	0151      	lsls	r1, r2, #5
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	440a      	add	r2, r1
 80053ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053d2:	0cdb      	lsrs	r3, r3, #19
 80053d4:	04db      	lsls	r3, r3, #19
 80053d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	015a      	lsls	r2, r3, #5
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	4413      	add	r3, r2
 80053e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	0151      	lsls	r1, r2, #5
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	440a      	add	r2, r1
 80053ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053f2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053f6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053fa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	699a      	ldr	r2, [r3, #24]
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	429a      	cmp	r2, r3
 8005406:	d903      	bls.n	8005410 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	68da      	ldr	r2, [r3, #12]
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	015a      	lsls	r2, r3, #5
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	4413      	add	r3, r2
 8005418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	0151      	lsls	r1, r2, #5
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	440a      	add	r2, r1
 8005426:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800542a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800542e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	015a      	lsls	r2, r3, #5
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	4413      	add	r3, r2
 8005438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800543c:	691a      	ldr	r2, [r3, #16]
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	699b      	ldr	r3, [r3, #24]
 8005442:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005446:	6939      	ldr	r1, [r7, #16]
 8005448:	0148      	lsls	r0, r1, #5
 800544a:	6979      	ldr	r1, [r7, #20]
 800544c:	4401      	add	r1, r0
 800544e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005452:	4313      	orrs	r3, r2
 8005454:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005456:	79fb      	ldrb	r3, [r7, #7]
 8005458:	2b01      	cmp	r3, #1
 800545a:	d11e      	bne.n	800549a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d009      	beq.n	8005478 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	015a      	lsls	r2, r3, #5
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	4413      	add	r3, r2
 800546c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005470:	461a      	mov	r2, r3
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	015a      	lsls	r2, r3, #5
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	4413      	add	r3, r2
 8005480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	0151      	lsls	r1, r2, #5
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	440a      	add	r2, r1
 800548e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005492:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005496:	6013      	str	r3, [r2, #0]
 8005498:	e097      	b.n	80055ca <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	015a      	lsls	r2, r3, #5
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	4413      	add	r3, r2
 80054a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	0151      	lsls	r1, r2, #5
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	440a      	add	r2, r1
 80054b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054b8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	f000 8083 	beq.w	80055ca <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	f003 030f 	and.w	r3, r3, #15
 80054d4:	2101      	movs	r1, #1
 80054d6:	fa01 f303 	lsl.w	r3, r1, r3
 80054da:	6979      	ldr	r1, [r7, #20]
 80054dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054e0:	4313      	orrs	r3, r2
 80054e2:	634b      	str	r3, [r1, #52]	; 0x34
 80054e4:	e071      	b.n	80055ca <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	015a      	lsls	r2, r3, #5
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	4413      	add	r3, r2
 80054ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	0151      	lsls	r1, r2, #5
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	440a      	add	r2, r1
 80054fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005500:	0cdb      	lsrs	r3, r3, #19
 8005502:	04db      	lsls	r3, r3, #19
 8005504:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	015a      	lsls	r2, r3, #5
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	4413      	add	r3, r2
 800550e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	0151      	lsls	r1, r2, #5
 8005518:	697a      	ldr	r2, [r7, #20]
 800551a:	440a      	add	r2, r1
 800551c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005520:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005524:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005528:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	699b      	ldr	r3, [r3, #24]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d003      	beq.n	800553a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	68da      	ldr	r2, [r3, #12]
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	68da      	ldr	r2, [r3, #12]
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	015a      	lsls	r2, r3, #5
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	4413      	add	r3, r2
 800554a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	0151      	lsls	r1, r2, #5
 8005554:	697a      	ldr	r2, [r7, #20]
 8005556:	440a      	add	r2, r1
 8005558:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800555c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005560:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	015a      	lsls	r2, r3, #5
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	4413      	add	r3, r2
 800556a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800556e:	691a      	ldr	r2, [r3, #16]
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	69db      	ldr	r3, [r3, #28]
 8005574:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005578:	6939      	ldr	r1, [r7, #16]
 800557a:	0148      	lsls	r0, r1, #5
 800557c:	6979      	ldr	r1, [r7, #20]
 800557e:	4401      	add	r1, r0
 8005580:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005584:	4313      	orrs	r3, r2
 8005586:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005588:	79fb      	ldrb	r3, [r7, #7]
 800558a:	2b01      	cmp	r3, #1
 800558c:	d10d      	bne.n	80055aa <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d009      	beq.n	80055aa <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	6919      	ldr	r1, [r3, #16]
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	015a      	lsls	r2, r3, #5
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	4413      	add	r3, r2
 80055a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a6:	460a      	mov	r2, r1
 80055a8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	015a      	lsls	r2, r3, #5
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	4413      	add	r3, r2
 80055b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	0151      	lsls	r1, r2, #5
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	440a      	add	r2, r1
 80055c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80055c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	371c      	adds	r7, #28
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80055d8:	b480      	push	{r7}
 80055da:	b087      	sub	sp, #28
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80055e2:	2300      	movs	r3, #0
 80055e4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80055e6:	2300      	movs	r3, #0
 80055e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	785b      	ldrb	r3, [r3, #1]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d14a      	bne.n	800568c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	015a      	lsls	r2, r3, #5
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	4413      	add	r3, r2
 8005600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800560a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800560e:	f040 8086 	bne.w	800571e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	015a      	lsls	r2, r3, #5
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	4413      	add	r3, r2
 800561c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	683a      	ldr	r2, [r7, #0]
 8005624:	7812      	ldrb	r2, [r2, #0]
 8005626:	0151      	lsls	r1, r2, #5
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	440a      	add	r2, r1
 800562c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005630:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005634:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	4413      	add	r3, r2
 8005640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	683a      	ldr	r2, [r7, #0]
 8005648:	7812      	ldrb	r2, [r2, #0]
 800564a:	0151      	lsls	r1, r2, #5
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	440a      	add	r2, r1
 8005650:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005654:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005658:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	3301      	adds	r3, #1
 800565e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f242 7210 	movw	r2, #10000	; 0x2710
 8005666:	4293      	cmp	r3, r2
 8005668:	d902      	bls.n	8005670 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	75fb      	strb	r3, [r7, #23]
          break;
 800566e:	e056      	b.n	800571e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	015a      	lsls	r2, r3, #5
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	4413      	add	r3, r2
 800567a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005684:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005688:	d0e7      	beq.n	800565a <USB_EPStopXfer+0x82>
 800568a:	e048      	b.n	800571e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	015a      	lsls	r2, r3, #5
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	4413      	add	r3, r2
 8005696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056a4:	d13b      	bne.n	800571e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	015a      	lsls	r2, r3, #5
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	4413      	add	r3, r2
 80056b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	683a      	ldr	r2, [r7, #0]
 80056b8:	7812      	ldrb	r2, [r2, #0]
 80056ba:	0151      	lsls	r1, r2, #5
 80056bc:	693a      	ldr	r2, [r7, #16]
 80056be:	440a      	add	r2, r1
 80056c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80056c8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	015a      	lsls	r2, r3, #5
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	4413      	add	r3, r2
 80056d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	683a      	ldr	r2, [r7, #0]
 80056dc:	7812      	ldrb	r2, [r2, #0]
 80056de:	0151      	lsls	r1, r2, #5
 80056e0:	693a      	ldr	r2, [r7, #16]
 80056e2:	440a      	add	r2, r1
 80056e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	3301      	adds	r3, #1
 80056f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d902      	bls.n	8005704 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	75fb      	strb	r3, [r7, #23]
          break;
 8005702:	e00c      	b.n	800571e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	015a      	lsls	r2, r3, #5
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	4413      	add	r3, r2
 800570e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005718:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800571c:	d0e7      	beq.n	80056ee <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800571e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005720:	4618      	mov	r0, r3
 8005722:	371c      	adds	r7, #28
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800572c:	b480      	push	{r7}
 800572e:	b089      	sub	sp, #36	; 0x24
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	4611      	mov	r1, r2
 8005738:	461a      	mov	r2, r3
 800573a:	460b      	mov	r3, r1
 800573c:	71fb      	strb	r3, [r7, #7]
 800573e:	4613      	mov	r3, r2
 8005740:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800574a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800574e:	2b00      	cmp	r3, #0
 8005750:	d123      	bne.n	800579a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005752:	88bb      	ldrh	r3, [r7, #4]
 8005754:	3303      	adds	r3, #3
 8005756:	089b      	lsrs	r3, r3, #2
 8005758:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800575a:	2300      	movs	r3, #0
 800575c:	61bb      	str	r3, [r7, #24]
 800575e:	e018      	b.n	8005792 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005760:	79fb      	ldrb	r3, [r7, #7]
 8005762:	031a      	lsls	r2, r3, #12
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	4413      	add	r3, r2
 8005768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800576c:	461a      	mov	r2, r3
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	3301      	adds	r3, #1
 8005778:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	3301      	adds	r3, #1
 800577e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	3301      	adds	r3, #1
 8005784:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	3301      	adds	r3, #1
 800578a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	3301      	adds	r3, #1
 8005790:	61bb      	str	r3, [r7, #24]
 8005792:	69ba      	ldr	r2, [r7, #24]
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	429a      	cmp	r2, r3
 8005798:	d3e2      	bcc.n	8005760 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3724      	adds	r7, #36	; 0x24
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b08b      	sub	sp, #44	; 0x2c
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	4613      	mov	r3, r2
 80057b4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80057be:	88fb      	ldrh	r3, [r7, #6]
 80057c0:	089b      	lsrs	r3, r3, #2
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80057c6:	88fb      	ldrh	r3, [r7, #6]
 80057c8:	f003 0303 	and.w	r3, r3, #3
 80057cc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80057ce:	2300      	movs	r3, #0
 80057d0:	623b      	str	r3, [r7, #32]
 80057d2:	e014      	b.n	80057fe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057de:	601a      	str	r2, [r3, #0]
    pDest++;
 80057e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e2:	3301      	adds	r3, #1
 80057e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80057e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e8:	3301      	adds	r3, #1
 80057ea:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80057ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ee:	3301      	adds	r3, #1
 80057f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80057f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f4:	3301      	adds	r3, #1
 80057f6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	3301      	adds	r3, #1
 80057fc:	623b      	str	r3, [r7, #32]
 80057fe:	6a3a      	ldr	r2, [r7, #32]
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	429a      	cmp	r2, r3
 8005804:	d3e6      	bcc.n	80057d4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005806:	8bfb      	ldrh	r3, [r7, #30]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d01e      	beq.n	800584a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800580c:	2300      	movs	r3, #0
 800580e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005816:	461a      	mov	r2, r3
 8005818:	f107 0310 	add.w	r3, r7, #16
 800581c:	6812      	ldr	r2, [r2, #0]
 800581e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	6a3b      	ldr	r3, [r7, #32]
 8005824:	b2db      	uxtb	r3, r3
 8005826:	00db      	lsls	r3, r3, #3
 8005828:	fa22 f303 	lsr.w	r3, r2, r3
 800582c:	b2da      	uxtb	r2, r3
 800582e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005830:	701a      	strb	r2, [r3, #0]
      i++;
 8005832:	6a3b      	ldr	r3, [r7, #32]
 8005834:	3301      	adds	r3, #1
 8005836:	623b      	str	r3, [r7, #32]
      pDest++;
 8005838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583a:	3301      	adds	r3, #1
 800583c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800583e:	8bfb      	ldrh	r3, [r7, #30]
 8005840:	3b01      	subs	r3, #1
 8005842:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005844:	8bfb      	ldrh	r3, [r7, #30]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1ea      	bne.n	8005820 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800584a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800584c:	4618      	mov	r0, r3
 800584e:	372c      	adds	r7, #44	; 0x2c
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005858:	b480      	push	{r7}
 800585a:	b085      	sub	sp, #20
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	785b      	ldrb	r3, [r3, #1]
 8005870:	2b01      	cmp	r3, #1
 8005872:	d12c      	bne.n	80058ce <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	015a      	lsls	r2, r3, #5
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	4413      	add	r3, r2
 800587c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	db12      	blt.n	80058ac <USB_EPSetStall+0x54>
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00f      	beq.n	80058ac <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	015a      	lsls	r2, r3, #5
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	4413      	add	r3, r2
 8005894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68ba      	ldr	r2, [r7, #8]
 800589c:	0151      	lsls	r1, r2, #5
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	440a      	add	r2, r1
 80058a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80058aa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	015a      	lsls	r2, r3, #5
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	4413      	add	r3, r2
 80058b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68ba      	ldr	r2, [r7, #8]
 80058bc:	0151      	lsls	r1, r2, #5
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	440a      	add	r2, r1
 80058c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80058ca:	6013      	str	r3, [r2, #0]
 80058cc:	e02b      	b.n	8005926 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	015a      	lsls	r2, r3, #5
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	4413      	add	r3, r2
 80058d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	db12      	blt.n	8005906 <USB_EPSetStall+0xae>
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00f      	beq.n	8005906 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	015a      	lsls	r2, r3, #5
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	4413      	add	r3, r2
 80058ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68ba      	ldr	r2, [r7, #8]
 80058f6:	0151      	lsls	r1, r2, #5
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	440a      	add	r2, r1
 80058fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005900:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005904:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	015a      	lsls	r2, r3, #5
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	4413      	add	r3, r2
 800590e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68ba      	ldr	r2, [r7, #8]
 8005916:	0151      	lsls	r1, r2, #5
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	440a      	add	r2, r1
 800591c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005920:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005924:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3714      	adds	r7, #20
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	785b      	ldrb	r3, [r3, #1]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d128      	bne.n	80059a2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	015a      	lsls	r2, r3, #5
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	4413      	add	r3, r2
 8005958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	0151      	lsls	r1, r2, #5
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	440a      	add	r2, r1
 8005966:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800596a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800596e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	791b      	ldrb	r3, [r3, #4]
 8005974:	2b03      	cmp	r3, #3
 8005976:	d003      	beq.n	8005980 <USB_EPClearStall+0x4c>
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	791b      	ldrb	r3, [r3, #4]
 800597c:	2b02      	cmp	r3, #2
 800597e:	d138      	bne.n	80059f2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	4413      	add	r3, r2
 8005988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68ba      	ldr	r2, [r7, #8]
 8005990:	0151      	lsls	r1, r2, #5
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	440a      	add	r2, r1
 8005996:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800599a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800599e:	6013      	str	r3, [r2, #0]
 80059a0:	e027      	b.n	80059f2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	015a      	lsls	r2, r3, #5
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	4413      	add	r3, r2
 80059aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	0151      	lsls	r1, r2, #5
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	440a      	add	r2, r1
 80059b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80059c0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	791b      	ldrb	r3, [r3, #4]
 80059c6:	2b03      	cmp	r3, #3
 80059c8:	d003      	beq.n	80059d2 <USB_EPClearStall+0x9e>
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	791b      	ldrb	r3, [r3, #4]
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d10f      	bne.n	80059f2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	015a      	lsls	r2, r3, #5
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	4413      	add	r3, r2
 80059da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	0151      	lsls	r1, r2, #5
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	440a      	add	r2, r1
 80059e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059f0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3714      	adds	r7, #20
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b085      	sub	sp, #20
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	460b      	mov	r3, r1
 8005a0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a1e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005a22:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	78fb      	ldrb	r3, [r7, #3]
 8005a2e:	011b      	lsls	r3, r3, #4
 8005a30:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005a34:	68f9      	ldr	r1, [r7, #12]
 8005a36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3714      	adds	r7, #20
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005a66:	f023 0303 	bic.w	r3, r3, #3
 8005a6a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a7a:	f023 0302 	bic.w	r3, r3, #2
 8005a7e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3714      	adds	r7, #20
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b085      	sub	sp, #20
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005aa8:	f023 0303 	bic.w	r3, r3, #3
 8005aac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005abc:	f043 0302 	orr.w	r3, r3, #2
 8005ac0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3714      	adds	r7, #20
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	695b      	ldr	r3, [r3, #20]
 8005adc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	699b      	ldr	r3, [r3, #24]
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3714      	adds	r7, #20
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr

08005af6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005af6:	b480      	push	{r7}
 8005af8:	b085      	sub	sp, #20
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b12:	69db      	ldr	r3, [r3, #28]
 8005b14:	68ba      	ldr	r2, [r7, #8]
 8005b16:	4013      	ands	r3, r2
 8005b18:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	0c1b      	lsrs	r3, r3, #16
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3714      	adds	r7, #20
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b085      	sub	sp, #20
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b46:	69db      	ldr	r3, [r3, #28]
 8005b48:	68ba      	ldr	r2, [r7, #8]
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	b29b      	uxth	r3, r3
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3714      	adds	r7, #20
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr

08005b5e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005b5e:	b480      	push	{r7}
 8005b60:	b085      	sub	sp, #20
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
 8005b66:	460b      	mov	r3, r1
 8005b68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005b6e:	78fb      	ldrb	r3, [r7, #3]
 8005b70:	015a      	lsls	r2, r3, #5
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	4413      	add	r3, r2
 8005b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b84:	695b      	ldr	r3, [r3, #20]
 8005b86:	68ba      	ldr	r2, [r7, #8]
 8005b88:	4013      	ands	r3, r2
 8005b8a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005b8c:	68bb      	ldr	r3, [r7, #8]
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3714      	adds	r7, #20
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr

08005b9a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	b087      	sub	sp, #28
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bbc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005bbe:	78fb      	ldrb	r3, [r7, #3]
 8005bc0:	f003 030f 	and.w	r3, r3, #15
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8005bca:	01db      	lsls	r3, r3, #7
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005bd4:	78fb      	ldrb	r3, [r7, #3]
 8005bd6:	015a      	lsls	r2, r3, #5
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	4413      	add	r3, r2
 8005bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	4013      	ands	r3, r2
 8005be6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005be8:	68bb      	ldr	r3, [r7, #8]
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	371c      	adds	r7, #28
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr

08005bf6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b083      	sub	sp, #12
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	f003 0301 	and.w	r3, r3, #1
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	370c      	adds	r7, #12
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005c12:	b480      	push	{r7}
 8005c14:	b085      	sub	sp, #20
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c2c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005c30:	f023 0307 	bic.w	r3, r3, #7
 8005c34:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c48:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3714      	adds	r7, #20
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b087      	sub	sp, #28
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	460b      	mov	r3, r1
 8005c62:	607a      	str	r2, [r7, #4]
 8005c64:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	333c      	adds	r3, #60	; 0x3c
 8005c6e:	3304      	adds	r3, #4
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	4a26      	ldr	r2, [pc, #152]	; (8005d10 <USB_EP0_OutStart+0xb8>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d90a      	bls.n	8005c92 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c8c:	d101      	bne.n	8005c92 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	e037      	b.n	8005d02 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c98:	461a      	mov	r2, r3
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cb0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cc0:	f043 0318 	orr.w	r3, r3, #24
 8005cc4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cd4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005cd8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005cda:	7afb      	ldrb	r3, [r7, #11]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d10f      	bne.n	8005d00 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cfa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005cfe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	371c      	adds	r7, #28
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	4f54300a 	.word	0x4f54300a

08005d14 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	3301      	adds	r3, #1
 8005d24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	4a13      	ldr	r2, [pc, #76]	; (8005d78 <USB_CoreReset+0x64>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d901      	bls.n	8005d32 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e01b      	b.n	8005d6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	daf2      	bge.n	8005d20 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	f043 0201 	orr.w	r2, r3, #1
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	4a09      	ldr	r2, [pc, #36]	; (8005d78 <USB_CoreReset+0x64>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d901      	bls.n	8005d5c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e006      	b.n	8005d6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	f003 0301 	and.w	r3, r3, #1
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d0f0      	beq.n	8005d4a <USB_CoreReset+0x36>

  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3714      	adds	r7, #20
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	00030d40 	.word	0x00030d40

08005d7c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	460b      	mov	r3, r1
 8005d86:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005d88:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005d8c:	f002 fca0 	bl	80086d0 <USBD_static_malloc>
 8005d90:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d109      	bne.n	8005dac <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	32b0      	adds	r2, #176	; 0xb0
 8005da2:	2100      	movs	r1, #0
 8005da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005da8:	2302      	movs	r3, #2
 8005daa:	e0d4      	b.n	8005f56 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005dac:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005db0:	2100      	movs	r1, #0
 8005db2:	68f8      	ldr	r0, [r7, #12]
 8005db4:	f002 fd0c 	bl	80087d0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	32b0      	adds	r2, #176	; 0xb0
 8005dc2:	68f9      	ldr	r1, [r7, #12]
 8005dc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	32b0      	adds	r2, #176	; 0xb0
 8005dd2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	7c1b      	ldrb	r3, [r3, #16]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d138      	bne.n	8005e56 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005de4:	4b5e      	ldr	r3, [pc, #376]	; (8005f60 <USBD_CDC_Init+0x1e4>)
 8005de6:	7819      	ldrb	r1, [r3, #0]
 8005de8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dec:	2202      	movs	r2, #2
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f002 fb4b 	bl	800848a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005df4:	4b5a      	ldr	r3, [pc, #360]	; (8005f60 <USBD_CDC_Init+0x1e4>)
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	f003 020f 	and.w	r2, r3, #15
 8005dfc:	6879      	ldr	r1, [r7, #4]
 8005dfe:	4613      	mov	r3, r2
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	4413      	add	r3, r2
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	440b      	add	r3, r1
 8005e08:	3324      	adds	r3, #36	; 0x24
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005e0e:	4b55      	ldr	r3, [pc, #340]	; (8005f64 <USBD_CDC_Init+0x1e8>)
 8005e10:	7819      	ldrb	r1, [r3, #0]
 8005e12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e16:	2202      	movs	r2, #2
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f002 fb36 	bl	800848a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005e1e:	4b51      	ldr	r3, [pc, #324]	; (8005f64 <USBD_CDC_Init+0x1e8>)
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	f003 020f 	and.w	r2, r3, #15
 8005e26:	6879      	ldr	r1, [r7, #4]
 8005e28:	4613      	mov	r3, r2
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	4413      	add	r3, r2
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	440b      	add	r3, r1
 8005e32:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005e36:	2201      	movs	r2, #1
 8005e38:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005e3a:	4b4b      	ldr	r3, [pc, #300]	; (8005f68 <USBD_CDC_Init+0x1ec>)
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	f003 020f 	and.w	r2, r3, #15
 8005e42:	6879      	ldr	r1, [r7, #4]
 8005e44:	4613      	mov	r3, r2
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4413      	add	r3, r2
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	440b      	add	r3, r1
 8005e4e:	3326      	adds	r3, #38	; 0x26
 8005e50:	2210      	movs	r2, #16
 8005e52:	801a      	strh	r2, [r3, #0]
 8005e54:	e035      	b.n	8005ec2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005e56:	4b42      	ldr	r3, [pc, #264]	; (8005f60 <USBD_CDC_Init+0x1e4>)
 8005e58:	7819      	ldrb	r1, [r3, #0]
 8005e5a:	2340      	movs	r3, #64	; 0x40
 8005e5c:	2202      	movs	r2, #2
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f002 fb13 	bl	800848a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005e64:	4b3e      	ldr	r3, [pc, #248]	; (8005f60 <USBD_CDC_Init+0x1e4>)
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	f003 020f 	and.w	r2, r3, #15
 8005e6c:	6879      	ldr	r1, [r7, #4]
 8005e6e:	4613      	mov	r3, r2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4413      	add	r3, r2
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	440b      	add	r3, r1
 8005e78:	3324      	adds	r3, #36	; 0x24
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005e7e:	4b39      	ldr	r3, [pc, #228]	; (8005f64 <USBD_CDC_Init+0x1e8>)
 8005e80:	7819      	ldrb	r1, [r3, #0]
 8005e82:	2340      	movs	r3, #64	; 0x40
 8005e84:	2202      	movs	r2, #2
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f002 faff 	bl	800848a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005e8c:	4b35      	ldr	r3, [pc, #212]	; (8005f64 <USBD_CDC_Init+0x1e8>)
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	f003 020f 	and.w	r2, r3, #15
 8005e94:	6879      	ldr	r1, [r7, #4]
 8005e96:	4613      	mov	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4413      	add	r3, r2
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	440b      	add	r3, r1
 8005ea0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005ea8:	4b2f      	ldr	r3, [pc, #188]	; (8005f68 <USBD_CDC_Init+0x1ec>)
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	f003 020f 	and.w	r2, r3, #15
 8005eb0:	6879      	ldr	r1, [r7, #4]
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	4413      	add	r3, r2
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	440b      	add	r3, r1
 8005ebc:	3326      	adds	r3, #38	; 0x26
 8005ebe:	2210      	movs	r2, #16
 8005ec0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005ec2:	4b29      	ldr	r3, [pc, #164]	; (8005f68 <USBD_CDC_Init+0x1ec>)
 8005ec4:	7819      	ldrb	r1, [r3, #0]
 8005ec6:	2308      	movs	r3, #8
 8005ec8:	2203      	movs	r2, #3
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f002 fadd 	bl	800848a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005ed0:	4b25      	ldr	r3, [pc, #148]	; (8005f68 <USBD_CDC_Init+0x1ec>)
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	f003 020f 	and.w	r2, r3, #15
 8005ed8:	6879      	ldr	r1, [r7, #4]
 8005eda:	4613      	mov	r3, r2
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	4413      	add	r3, r2
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	440b      	add	r3, r1
 8005ee4:	3324      	adds	r3, #36	; 0x24
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	33b0      	adds	r3, #176	; 0xb0
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	4413      	add	r3, r2
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d101      	bne.n	8005f24 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005f20:	2302      	movs	r3, #2
 8005f22:	e018      	b.n	8005f56 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	7c1b      	ldrb	r3, [r3, #16]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d10a      	bne.n	8005f42 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005f2c:	4b0d      	ldr	r3, [pc, #52]	; (8005f64 <USBD_CDC_Init+0x1e8>)
 8005f2e:	7819      	ldrb	r1, [r3, #0]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f002 fb94 	bl	8008668 <USBD_LL_PrepareReceive>
 8005f40:	e008      	b.n	8005f54 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005f42:	4b08      	ldr	r3, [pc, #32]	; (8005f64 <USBD_CDC_Init+0x1e8>)
 8005f44:	7819      	ldrb	r1, [r3, #0]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005f4c:	2340      	movs	r3, #64	; 0x40
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f002 fb8a 	bl	8008668 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	200000c7 	.word	0x200000c7
 8005f64:	200000c8 	.word	0x200000c8
 8005f68:	200000c9 	.word	0x200000c9

08005f6c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	460b      	mov	r3, r1
 8005f76:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005f78:	4b3a      	ldr	r3, [pc, #232]	; (8006064 <USBD_CDC_DeInit+0xf8>)
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f002 faa9 	bl	80084d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005f84:	4b37      	ldr	r3, [pc, #220]	; (8006064 <USBD_CDC_DeInit+0xf8>)
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	f003 020f 	and.w	r2, r3, #15
 8005f8c:	6879      	ldr	r1, [r7, #4]
 8005f8e:	4613      	mov	r3, r2
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	4413      	add	r3, r2
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	440b      	add	r3, r1
 8005f98:	3324      	adds	r3, #36	; 0x24
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005f9e:	4b32      	ldr	r3, [pc, #200]	; (8006068 <USBD_CDC_DeInit+0xfc>)
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f002 fa96 	bl	80084d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005faa:	4b2f      	ldr	r3, [pc, #188]	; (8006068 <USBD_CDC_DeInit+0xfc>)
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	f003 020f 	and.w	r2, r3, #15
 8005fb2:	6879      	ldr	r1, [r7, #4]
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	4413      	add	r3, r2
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	440b      	add	r3, r1
 8005fbe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005fc6:	4b29      	ldr	r3, [pc, #164]	; (800606c <USBD_CDC_DeInit+0x100>)
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	4619      	mov	r1, r3
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f002 fa82 	bl	80084d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005fd2:	4b26      	ldr	r3, [pc, #152]	; (800606c <USBD_CDC_DeInit+0x100>)
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	f003 020f 	and.w	r2, r3, #15
 8005fda:	6879      	ldr	r1, [r7, #4]
 8005fdc:	4613      	mov	r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	440b      	add	r3, r1
 8005fe6:	3324      	adds	r3, #36	; 0x24
 8005fe8:	2200      	movs	r2, #0
 8005fea:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005fec:	4b1f      	ldr	r3, [pc, #124]	; (800606c <USBD_CDC_DeInit+0x100>)
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	f003 020f 	and.w	r2, r3, #15
 8005ff4:	6879      	ldr	r1, [r7, #4]
 8005ff6:	4613      	mov	r3, r2
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	4413      	add	r3, r2
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	440b      	add	r3, r1
 8006000:	3326      	adds	r3, #38	; 0x26
 8006002:	2200      	movs	r2, #0
 8006004:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	32b0      	adds	r2, #176	; 0xb0
 8006010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d01f      	beq.n	8006058 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	33b0      	adds	r3, #176	; 0xb0
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	4413      	add	r3, r2
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	32b0      	adds	r2, #176	; 0xb0
 8006036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800603a:	4618      	mov	r0, r3
 800603c:	f002 fb56 	bl	80086ec <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	32b0      	adds	r2, #176	; 0xb0
 800604a:	2100      	movs	r1, #0
 800604c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3708      	adds	r7, #8
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	200000c7 	.word	0x200000c7
 8006068:	200000c8 	.word	0x200000c8
 800606c:	200000c9 	.word	0x200000c9

08006070 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b086      	sub	sp, #24
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	32b0      	adds	r2, #176	; 0xb0
 8006084:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006088:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800608a:	2300      	movs	r3, #0
 800608c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800608e:	2300      	movs	r3, #0
 8006090:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006092:	2300      	movs	r3, #0
 8006094:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d101      	bne.n	80060a0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800609c:	2303      	movs	r3, #3
 800609e:	e0bf      	b.n	8006220 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d050      	beq.n	800614e <USBD_CDC_Setup+0xde>
 80060ac:	2b20      	cmp	r3, #32
 80060ae:	f040 80af 	bne.w	8006210 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	88db      	ldrh	r3, [r3, #6]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d03a      	beq.n	8006130 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	b25b      	sxtb	r3, r3
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	da1b      	bge.n	80060fc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	33b0      	adds	r3, #176	; 0xb0
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	4413      	add	r3, r2
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	683a      	ldr	r2, [r7, #0]
 80060d8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80060da:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80060dc:	683a      	ldr	r2, [r7, #0]
 80060de:	88d2      	ldrh	r2, [r2, #6]
 80060e0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	88db      	ldrh	r3, [r3, #6]
 80060e6:	2b07      	cmp	r3, #7
 80060e8:	bf28      	it	cs
 80060ea:	2307      	movcs	r3, #7
 80060ec:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	89fa      	ldrh	r2, [r7, #14]
 80060f2:	4619      	mov	r1, r3
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f001 fd89 	bl	8007c0c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80060fa:	e090      	b.n	800621e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	785a      	ldrb	r2, [r3, #1]
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	88db      	ldrh	r3, [r3, #6]
 800610a:	2b3f      	cmp	r3, #63	; 0x3f
 800610c:	d803      	bhi.n	8006116 <USBD_CDC_Setup+0xa6>
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	88db      	ldrh	r3, [r3, #6]
 8006112:	b2da      	uxtb	r2, r3
 8006114:	e000      	b.n	8006118 <USBD_CDC_Setup+0xa8>
 8006116:	2240      	movs	r2, #64	; 0x40
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800611e:	6939      	ldr	r1, [r7, #16]
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8006126:	461a      	mov	r2, r3
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f001 fd9b 	bl	8007c64 <USBD_CtlPrepareRx>
      break;
 800612e:	e076      	b.n	800621e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	33b0      	adds	r3, #176	; 0xb0
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	4413      	add	r3, r2
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	683a      	ldr	r2, [r7, #0]
 8006144:	7850      	ldrb	r0, [r2, #1]
 8006146:	2200      	movs	r2, #0
 8006148:	6839      	ldr	r1, [r7, #0]
 800614a:	4798      	blx	r3
      break;
 800614c:	e067      	b.n	800621e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	785b      	ldrb	r3, [r3, #1]
 8006152:	2b0b      	cmp	r3, #11
 8006154:	d851      	bhi.n	80061fa <USBD_CDC_Setup+0x18a>
 8006156:	a201      	add	r2, pc, #4	; (adr r2, 800615c <USBD_CDC_Setup+0xec>)
 8006158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800615c:	0800618d 	.word	0x0800618d
 8006160:	08006209 	.word	0x08006209
 8006164:	080061fb 	.word	0x080061fb
 8006168:	080061fb 	.word	0x080061fb
 800616c:	080061fb 	.word	0x080061fb
 8006170:	080061fb 	.word	0x080061fb
 8006174:	080061fb 	.word	0x080061fb
 8006178:	080061fb 	.word	0x080061fb
 800617c:	080061fb 	.word	0x080061fb
 8006180:	080061fb 	.word	0x080061fb
 8006184:	080061b7 	.word	0x080061b7
 8006188:	080061e1 	.word	0x080061e1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006192:	b2db      	uxtb	r3, r3
 8006194:	2b03      	cmp	r3, #3
 8006196:	d107      	bne.n	80061a8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006198:	f107 030a 	add.w	r3, r7, #10
 800619c:	2202      	movs	r2, #2
 800619e:	4619      	mov	r1, r3
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f001 fd33 	bl	8007c0c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80061a6:	e032      	b.n	800620e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80061a8:	6839      	ldr	r1, [r7, #0]
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f001 fcbd 	bl	8007b2a <USBD_CtlError>
            ret = USBD_FAIL;
 80061b0:	2303      	movs	r3, #3
 80061b2:	75fb      	strb	r3, [r7, #23]
          break;
 80061b4:	e02b      	b.n	800620e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2b03      	cmp	r3, #3
 80061c0:	d107      	bne.n	80061d2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80061c2:	f107 030d 	add.w	r3, r7, #13
 80061c6:	2201      	movs	r2, #1
 80061c8:	4619      	mov	r1, r3
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f001 fd1e 	bl	8007c0c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80061d0:	e01d      	b.n	800620e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80061d2:	6839      	ldr	r1, [r7, #0]
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f001 fca8 	bl	8007b2a <USBD_CtlError>
            ret = USBD_FAIL;
 80061da:	2303      	movs	r3, #3
 80061dc:	75fb      	strb	r3, [r7, #23]
          break;
 80061de:	e016      	b.n	800620e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	2b03      	cmp	r3, #3
 80061ea:	d00f      	beq.n	800620c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80061ec:	6839      	ldr	r1, [r7, #0]
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f001 fc9b 	bl	8007b2a <USBD_CtlError>
            ret = USBD_FAIL;
 80061f4:	2303      	movs	r3, #3
 80061f6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80061f8:	e008      	b.n	800620c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80061fa:	6839      	ldr	r1, [r7, #0]
 80061fc:	6878      	ldr	r0, [r7, #4]
 80061fe:	f001 fc94 	bl	8007b2a <USBD_CtlError>
          ret = USBD_FAIL;
 8006202:	2303      	movs	r3, #3
 8006204:	75fb      	strb	r3, [r7, #23]
          break;
 8006206:	e002      	b.n	800620e <USBD_CDC_Setup+0x19e>
          break;
 8006208:	bf00      	nop
 800620a:	e008      	b.n	800621e <USBD_CDC_Setup+0x1ae>
          break;
 800620c:	bf00      	nop
      }
      break;
 800620e:	e006      	b.n	800621e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006210:	6839      	ldr	r1, [r7, #0]
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f001 fc89 	bl	8007b2a <USBD_CtlError>
      ret = USBD_FAIL;
 8006218:	2303      	movs	r3, #3
 800621a:	75fb      	strb	r3, [r7, #23]
      break;
 800621c:	bf00      	nop
  }

  return (uint8_t)ret;
 800621e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006220:	4618      	mov	r0, r3
 8006222:	3718      	adds	r7, #24
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	460b      	mov	r3, r1
 8006232:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800623a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	32b0      	adds	r2, #176	; 0xb0
 8006246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d101      	bne.n	8006252 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800624e:	2303      	movs	r3, #3
 8006250:	e065      	b.n	800631e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	32b0      	adds	r2, #176	; 0xb0
 800625c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006260:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006262:	78fb      	ldrb	r3, [r7, #3]
 8006264:	f003 020f 	and.w	r2, r3, #15
 8006268:	6879      	ldr	r1, [r7, #4]
 800626a:	4613      	mov	r3, r2
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	4413      	add	r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	440b      	add	r3, r1
 8006274:	3318      	adds	r3, #24
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d02f      	beq.n	80062dc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800627c:	78fb      	ldrb	r3, [r7, #3]
 800627e:	f003 020f 	and.w	r2, r3, #15
 8006282:	6879      	ldr	r1, [r7, #4]
 8006284:	4613      	mov	r3, r2
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	4413      	add	r3, r2
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	440b      	add	r3, r1
 800628e:	3318      	adds	r3, #24
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	78fb      	ldrb	r3, [r7, #3]
 8006294:	f003 010f 	and.w	r1, r3, #15
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	460b      	mov	r3, r1
 800629c:	00db      	lsls	r3, r3, #3
 800629e:	440b      	add	r3, r1
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	4403      	add	r3, r0
 80062a4:	3348      	adds	r3, #72	; 0x48
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	fbb2 f1f3 	udiv	r1, r2, r3
 80062ac:	fb01 f303 	mul.w	r3, r1, r3
 80062b0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d112      	bne.n	80062dc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80062b6:	78fb      	ldrb	r3, [r7, #3]
 80062b8:	f003 020f 	and.w	r2, r3, #15
 80062bc:	6879      	ldr	r1, [r7, #4]
 80062be:	4613      	mov	r3, r2
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	4413      	add	r3, r2
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	440b      	add	r3, r1
 80062c8:	3318      	adds	r3, #24
 80062ca:	2200      	movs	r2, #0
 80062cc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80062ce:	78f9      	ldrb	r1, [r7, #3]
 80062d0:	2300      	movs	r3, #0
 80062d2:	2200      	movs	r2, #0
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f002 f9a6 	bl	8008626 <USBD_LL_Transmit>
 80062da:	e01f      	b.n	800631c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	2200      	movs	r2, #0
 80062e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	33b0      	adds	r3, #176	; 0xb0
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	4413      	add	r3, r2
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d010      	beq.n	800631c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	33b0      	adds	r3, #176	; 0xb0
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	4413      	add	r3, r2
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006312:	68ba      	ldr	r2, [r7, #8]
 8006314:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006318:	78fa      	ldrb	r2, [r7, #3]
 800631a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006326:	b580      	push	{r7, lr}
 8006328:	b084      	sub	sp, #16
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
 800632e:	460b      	mov	r3, r1
 8006330:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	32b0      	adds	r2, #176	; 0xb0
 800633c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006340:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	32b0      	adds	r2, #176	; 0xb0
 800634c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d101      	bne.n	8006358 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006354:	2303      	movs	r3, #3
 8006356:	e01a      	b.n	800638e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006358:	78fb      	ldrb	r3, [r7, #3]
 800635a:	4619      	mov	r1, r3
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f002 f9a4 	bl	80086aa <USBD_LL_GetRxDataSize>
 8006362:	4602      	mov	r2, r0
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	33b0      	adds	r3, #176	; 0xb0
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	4413      	add	r3, r2
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006388:	4611      	mov	r1, r2
 800638a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800638c:	2300      	movs	r3, #0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3710      	adds	r7, #16
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006396:	b580      	push	{r7, lr}
 8006398:	b084      	sub	sp, #16
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	32b0      	adds	r2, #176	; 0xb0
 80063a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063ac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d101      	bne.n	80063b8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80063b4:	2303      	movs	r3, #3
 80063b6:	e025      	b.n	8006404 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	33b0      	adds	r3, #176	; 0xb0
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	4413      	add	r3, r2
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d01a      	beq.n	8006402 <USBD_CDC_EP0_RxReady+0x6c>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80063d2:	2bff      	cmp	r3, #255	; 0xff
 80063d4:	d015      	beq.n	8006402 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	33b0      	adds	r3, #176	; 0xb0
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	4413      	add	r3, r2
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80063ee:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80063f6:	b292      	uxth	r2, r2
 80063f8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	22ff      	movs	r2, #255	; 0xff
 80063fe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3710      	adds	r7, #16
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b086      	sub	sp, #24
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006414:	2182      	movs	r1, #130	; 0x82
 8006416:	4818      	ldr	r0, [pc, #96]	; (8006478 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006418:	f000 fd4f 	bl	8006eba <USBD_GetEpDesc>
 800641c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800641e:	2101      	movs	r1, #1
 8006420:	4815      	ldr	r0, [pc, #84]	; (8006478 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006422:	f000 fd4a 	bl	8006eba <USBD_GetEpDesc>
 8006426:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006428:	2181      	movs	r1, #129	; 0x81
 800642a:	4813      	ldr	r0, [pc, #76]	; (8006478 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800642c:	f000 fd45 	bl	8006eba <USBD_GetEpDesc>
 8006430:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d002      	beq.n	800643e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	2210      	movs	r2, #16
 800643c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d006      	beq.n	8006452 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	2200      	movs	r2, #0
 8006448:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800644c:	711a      	strb	r2, [r3, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d006      	beq.n	8006466 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2200      	movs	r2, #0
 800645c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006460:	711a      	strb	r2, [r3, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2243      	movs	r2, #67	; 0x43
 800646a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800646c:	4b02      	ldr	r3, [pc, #8]	; (8006478 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800646e:	4618      	mov	r0, r3
 8006470:	3718      	adds	r7, #24
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	20000084 	.word	0x20000084

0800647c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b086      	sub	sp, #24
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006484:	2182      	movs	r1, #130	; 0x82
 8006486:	4818      	ldr	r0, [pc, #96]	; (80064e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006488:	f000 fd17 	bl	8006eba <USBD_GetEpDesc>
 800648c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800648e:	2101      	movs	r1, #1
 8006490:	4815      	ldr	r0, [pc, #84]	; (80064e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006492:	f000 fd12 	bl	8006eba <USBD_GetEpDesc>
 8006496:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006498:	2181      	movs	r1, #129	; 0x81
 800649a:	4813      	ldr	r0, [pc, #76]	; (80064e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800649c:	f000 fd0d 	bl	8006eba <USBD_GetEpDesc>
 80064a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d002      	beq.n	80064ae <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	2210      	movs	r2, #16
 80064ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d006      	beq.n	80064c2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	2200      	movs	r2, #0
 80064b8:	711a      	strb	r2, [r3, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f042 0202 	orr.w	r2, r2, #2
 80064c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d006      	beq.n	80064d6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2200      	movs	r2, #0
 80064cc:	711a      	strb	r2, [r3, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f042 0202 	orr.w	r2, r2, #2
 80064d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2243      	movs	r2, #67	; 0x43
 80064da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80064dc:	4b02      	ldr	r3, [pc, #8]	; (80064e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3718      	adds	r7, #24
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	20000084 	.word	0x20000084

080064ec <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b086      	sub	sp, #24
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80064f4:	2182      	movs	r1, #130	; 0x82
 80064f6:	4818      	ldr	r0, [pc, #96]	; (8006558 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80064f8:	f000 fcdf 	bl	8006eba <USBD_GetEpDesc>
 80064fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80064fe:	2101      	movs	r1, #1
 8006500:	4815      	ldr	r0, [pc, #84]	; (8006558 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006502:	f000 fcda 	bl	8006eba <USBD_GetEpDesc>
 8006506:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006508:	2181      	movs	r1, #129	; 0x81
 800650a:	4813      	ldr	r0, [pc, #76]	; (8006558 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800650c:	f000 fcd5 	bl	8006eba <USBD_GetEpDesc>
 8006510:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d002      	beq.n	800651e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	2210      	movs	r2, #16
 800651c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d006      	beq.n	8006532 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	2200      	movs	r2, #0
 8006528:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800652c:	711a      	strb	r2, [r3, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d006      	beq.n	8006546 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2200      	movs	r2, #0
 800653c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006540:	711a      	strb	r2, [r3, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2243      	movs	r2, #67	; 0x43
 800654a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800654c:	4b02      	ldr	r3, [pc, #8]	; (8006558 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800654e:	4618      	mov	r0, r3
 8006550:	3718      	adds	r7, #24
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	20000084 	.word	0x20000084

0800655c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	220a      	movs	r2, #10
 8006568:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800656a:	4b03      	ldr	r3, [pc, #12]	; (8006578 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800656c:	4618      	mov	r0, r3
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr
 8006578:	20000040 	.word	0x20000040

0800657c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d101      	bne.n	8006590 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800658c:	2303      	movs	r3, #3
 800658e:	e009      	b.n	80065a4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	33b0      	adds	r3, #176	; 0xb0
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	4413      	add	r3, r2
 800659e:	683a      	ldr	r2, [r7, #0]
 80065a0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b087      	sub	sp, #28
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	32b0      	adds	r2, #176	; 0xb0
 80065c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ca:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d101      	bne.n	80065d6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e008      	b.n	80065e8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	371c      	adds	r7, #28
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	32b0      	adds	r2, #176	; 0xb0
 8006608:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800660c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d101      	bne.n	8006618 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006614:	2303      	movs	r3, #3
 8006616:	e004      	b.n	8006622 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	683a      	ldr	r2, [r7, #0]
 800661c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3714      	adds	r7, #20
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
	...

08006630 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	32b0      	adds	r2, #176	; 0xb0
 8006642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006646:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006648:	2301      	movs	r3, #1
 800664a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	32b0      	adds	r2, #176	; 0xb0
 8006656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d101      	bne.n	8006662 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800665e:	2303      	movs	r3, #3
 8006660:	e025      	b.n	80066ae <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006668:	2b00      	cmp	r3, #0
 800666a:	d11f      	bne.n	80066ac <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	2201      	movs	r2, #1
 8006670:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006674:	4b10      	ldr	r3, [pc, #64]	; (80066b8 <USBD_CDC_TransmitPacket+0x88>)
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	f003 020f 	and.w	r2, r3, #15
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	4613      	mov	r3, r2
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	4413      	add	r3, r2
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	4403      	add	r3, r0
 800668e:	3318      	adds	r3, #24
 8006690:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006692:	4b09      	ldr	r3, [pc, #36]	; (80066b8 <USBD_CDC_TransmitPacket+0x88>)
 8006694:	7819      	ldrb	r1, [r3, #0]
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f001 ffbf 	bl	8008626 <USBD_LL_Transmit>

    ret = USBD_OK;
 80066a8:	2300      	movs	r3, #0
 80066aa:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80066ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	200000c7 	.word	0x200000c7

080066bc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	32b0      	adds	r2, #176	; 0xb0
 80066ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066d2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	32b0      	adds	r2, #176	; 0xb0
 80066de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d101      	bne.n	80066ea <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e018      	b.n	800671c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	7c1b      	ldrb	r3, [r3, #16]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d10a      	bne.n	8006708 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80066f2:	4b0c      	ldr	r3, [pc, #48]	; (8006724 <USBD_CDC_ReceivePacket+0x68>)
 80066f4:	7819      	ldrb	r1, [r3, #0]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80066fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f001 ffb1 	bl	8008668 <USBD_LL_PrepareReceive>
 8006706:	e008      	b.n	800671a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006708:	4b06      	ldr	r3, [pc, #24]	; (8006724 <USBD_CDC_ReceivePacket+0x68>)
 800670a:	7819      	ldrb	r1, [r3, #0]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006712:	2340      	movs	r3, #64	; 0x40
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f001 ffa7 	bl	8008668 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3710      	adds	r7, #16
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}
 8006724:	200000c8 	.word	0x200000c8

08006728 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b086      	sub	sp, #24
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	4613      	mov	r3, r2
 8006734:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d101      	bne.n	8006740 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800673c:	2303      	movs	r3, #3
 800673e:	e01f      	b.n	8006780 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2200      	movs	r2, #0
 8006754:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d003      	beq.n	8006766 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	68ba      	ldr	r2, [r7, #8]
 8006762:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2201      	movs	r2, #1
 800676a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	79fa      	ldrb	r2, [r7, #7]
 8006772:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	f001 fe21 	bl	80083bc <USBD_LL_Init>
 800677a:	4603      	mov	r3, r0
 800677c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800677e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006780:	4618      	mov	r0, r3
 8006782:	3718      	adds	r7, #24
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006792:	2300      	movs	r3, #0
 8006794:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d101      	bne.n	80067a0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800679c:	2303      	movs	r3, #3
 800679e:	e025      	b.n	80067ec <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	683a      	ldr	r2, [r7, #0]
 80067a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	32ae      	adds	r2, #174	; 0xae
 80067b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00f      	beq.n	80067dc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	32ae      	adds	r2, #174	; 0xae
 80067c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067cc:	f107 020e 	add.w	r2, r7, #14
 80067d0:	4610      	mov	r0, r2
 80067d2:	4798      	blx	r3
 80067d4:	4602      	mov	r2, r0
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80067e2:	1c5a      	adds	r2, r3, #1
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80067ea:	2300      	movs	r3, #0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3710      	adds	r7, #16
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}

080067f4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b082      	sub	sp, #8
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f001 fe29 	bl	8008454 <USBD_LL_Start>
 8006802:	4603      	mov	r3, r0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3708      	adds	r7, #8
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006814:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006816:	4618      	mov	r0, r3
 8006818:	370c      	adds	r7, #12
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr

08006822 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b084      	sub	sp, #16
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
 800682a:	460b      	mov	r3, r1
 800682c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800682e:	2300      	movs	r3, #0
 8006830:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006838:	2b00      	cmp	r3, #0
 800683a:	d009      	beq.n	8006850 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	78fa      	ldrb	r2, [r7, #3]
 8006846:	4611      	mov	r1, r2
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	4798      	blx	r3
 800684c:	4603      	mov	r3, r0
 800684e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006850:	7bfb      	ldrb	r3, [r7, #15]
}
 8006852:	4618      	mov	r0, r3
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}

0800685a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800685a:	b580      	push	{r7, lr}
 800685c:	b084      	sub	sp, #16
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
 8006862:	460b      	mov	r3, r1
 8006864:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006866:	2300      	movs	r3, #0
 8006868:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	78fa      	ldrb	r2, [r7, #3]
 8006874:	4611      	mov	r1, r2
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	4798      	blx	r3
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d001      	beq.n	8006884 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006880:	2303      	movs	r3, #3
 8006882:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006884:	7bfb      	ldrb	r3, [r7, #15]
}
 8006886:	4618      	mov	r0, r3
 8006888:	3710      	adds	r7, #16
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}

0800688e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800688e:	b580      	push	{r7, lr}
 8006890:	b084      	sub	sp, #16
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
 8006896:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800689e:	6839      	ldr	r1, [r7, #0]
 80068a0:	4618      	mov	r0, r3
 80068a2:	f001 f908 	bl	8007ab6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80068b4:	461a      	mov	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80068c2:	f003 031f 	and.w	r3, r3, #31
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	d01a      	beq.n	8006900 <USBD_LL_SetupStage+0x72>
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d822      	bhi.n	8006914 <USBD_LL_SetupStage+0x86>
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d002      	beq.n	80068d8 <USBD_LL_SetupStage+0x4a>
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d00a      	beq.n	80068ec <USBD_LL_SetupStage+0x5e>
 80068d6:	e01d      	b.n	8006914 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80068de:	4619      	mov	r1, r3
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 fb5f 	bl	8006fa4 <USBD_StdDevReq>
 80068e6:	4603      	mov	r3, r0
 80068e8:	73fb      	strb	r3, [r7, #15]
      break;
 80068ea:	e020      	b.n	800692e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80068f2:	4619      	mov	r1, r3
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 fbc7 	bl	8007088 <USBD_StdItfReq>
 80068fa:	4603      	mov	r3, r0
 80068fc:	73fb      	strb	r3, [r7, #15]
      break;
 80068fe:	e016      	b.n	800692e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006906:	4619      	mov	r1, r3
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 fc29 	bl	8007160 <USBD_StdEPReq>
 800690e:	4603      	mov	r3, r0
 8006910:	73fb      	strb	r3, [r7, #15]
      break;
 8006912:	e00c      	b.n	800692e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800691a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800691e:	b2db      	uxtb	r3, r3
 8006920:	4619      	mov	r1, r3
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f001 fdf6 	bl	8008514 <USBD_LL_StallEP>
 8006928:	4603      	mov	r3, r0
 800692a:	73fb      	strb	r3, [r7, #15]
      break;
 800692c:	bf00      	nop
  }

  return ret;
 800692e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006930:	4618      	mov	r0, r3
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b086      	sub	sp, #24
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	460b      	mov	r3, r1
 8006942:	607a      	str	r2, [r7, #4]
 8006944:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006946:	2300      	movs	r3, #0
 8006948:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800694a:	7afb      	ldrb	r3, [r7, #11]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d16e      	bne.n	8006a2e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006956:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800695e:	2b03      	cmp	r3, #3
 8006960:	f040 8098 	bne.w	8006a94 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	689a      	ldr	r2, [r3, #8]
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	429a      	cmp	r2, r3
 800696e:	d913      	bls.n	8006998 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	689a      	ldr	r2, [r3, #8]
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	1ad2      	subs	r2, r2, r3
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	68da      	ldr	r2, [r3, #12]
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	4293      	cmp	r3, r2
 8006988:	bf28      	it	cs
 800698a:	4613      	movcs	r3, r2
 800698c:	461a      	mov	r2, r3
 800698e:	6879      	ldr	r1, [r7, #4]
 8006990:	68f8      	ldr	r0, [r7, #12]
 8006992:	f001 f984 	bl	8007c9e <USBD_CtlContinueRx>
 8006996:	e07d      	b.n	8006a94 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800699e:	f003 031f 	and.w	r3, r3, #31
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d014      	beq.n	80069d0 <USBD_LL_DataOutStage+0x98>
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	d81d      	bhi.n	80069e6 <USBD_LL_DataOutStage+0xae>
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d002      	beq.n	80069b4 <USBD_LL_DataOutStage+0x7c>
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	d003      	beq.n	80069ba <USBD_LL_DataOutStage+0x82>
 80069b2:	e018      	b.n	80069e6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80069b4:	2300      	movs	r3, #0
 80069b6:	75bb      	strb	r3, [r7, #22]
            break;
 80069b8:	e018      	b.n	80069ec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	4619      	mov	r1, r3
 80069c4:	68f8      	ldr	r0, [r7, #12]
 80069c6:	f000 fa5e 	bl	8006e86 <USBD_CoreFindIF>
 80069ca:	4603      	mov	r3, r0
 80069cc:	75bb      	strb	r3, [r7, #22]
            break;
 80069ce:	e00d      	b.n	80069ec <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	4619      	mov	r1, r3
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f000 fa60 	bl	8006ea0 <USBD_CoreFindEP>
 80069e0:	4603      	mov	r3, r0
 80069e2:	75bb      	strb	r3, [r7, #22]
            break;
 80069e4:	e002      	b.n	80069ec <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80069e6:	2300      	movs	r3, #0
 80069e8:	75bb      	strb	r3, [r7, #22]
            break;
 80069ea:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80069ec:	7dbb      	ldrb	r3, [r7, #22]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d119      	bne.n	8006a26 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	2b03      	cmp	r3, #3
 80069fc:	d113      	bne.n	8006a26 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80069fe:	7dba      	ldrb	r2, [r7, #22]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	32ae      	adds	r2, #174	; 0xae
 8006a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00b      	beq.n	8006a26 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006a0e:	7dba      	ldrb	r2, [r7, #22]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006a16:	7dba      	ldrb	r2, [r7, #22]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	32ae      	adds	r2, #174	; 0xae
 8006a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a20:	691b      	ldr	r3, [r3, #16]
 8006a22:	68f8      	ldr	r0, [r7, #12]
 8006a24:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f001 f94a 	bl	8007cc0 <USBD_CtlSendStatus>
 8006a2c:	e032      	b.n	8006a94 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006a2e:	7afb      	ldrb	r3, [r7, #11]
 8006a30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	4619      	mov	r1, r3
 8006a38:	68f8      	ldr	r0, [r7, #12]
 8006a3a:	f000 fa31 	bl	8006ea0 <USBD_CoreFindEP>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a42:	7dbb      	ldrb	r3, [r7, #22]
 8006a44:	2bff      	cmp	r3, #255	; 0xff
 8006a46:	d025      	beq.n	8006a94 <USBD_LL_DataOutStage+0x15c>
 8006a48:	7dbb      	ldrb	r3, [r7, #22]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d122      	bne.n	8006a94 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	2b03      	cmp	r3, #3
 8006a58:	d117      	bne.n	8006a8a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006a5a:	7dba      	ldrb	r2, [r7, #22]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	32ae      	adds	r2, #174	; 0xae
 8006a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a64:	699b      	ldr	r3, [r3, #24]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00f      	beq.n	8006a8a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006a6a:	7dba      	ldrb	r2, [r7, #22]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006a72:	7dba      	ldrb	r2, [r7, #22]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	32ae      	adds	r2, #174	; 0xae
 8006a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a7c:	699b      	ldr	r3, [r3, #24]
 8006a7e:	7afa      	ldrb	r2, [r7, #11]
 8006a80:	4611      	mov	r1, r2
 8006a82:	68f8      	ldr	r0, [r7, #12]
 8006a84:	4798      	blx	r3
 8006a86:	4603      	mov	r3, r0
 8006a88:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006a8a:	7dfb      	ldrb	r3, [r7, #23]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d001      	beq.n	8006a94 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006a90:	7dfb      	ldrb	r3, [r7, #23]
 8006a92:	e000      	b.n	8006a96 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3718      	adds	r7, #24
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006a9e:	b580      	push	{r7, lr}
 8006aa0:	b086      	sub	sp, #24
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	60f8      	str	r0, [r7, #12]
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	607a      	str	r2, [r7, #4]
 8006aaa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006aac:	7afb      	ldrb	r3, [r7, #11]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d16f      	bne.n	8006b92 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	3314      	adds	r3, #20
 8006ab6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d15a      	bne.n	8006b78 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	689a      	ldr	r2, [r3, #8]
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d914      	bls.n	8006af8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	689a      	ldr	r2, [r3, #8]
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	1ad2      	subs	r2, r2, r3
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	6879      	ldr	r1, [r7, #4]
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f001 f8ac 	bl	8007c42 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006aea:	2300      	movs	r3, #0
 8006aec:	2200      	movs	r2, #0
 8006aee:	2100      	movs	r1, #0
 8006af0:	68f8      	ldr	r0, [r7, #12]
 8006af2:	f001 fdb9 	bl	8008668 <USBD_LL_PrepareReceive>
 8006af6:	e03f      	b.n	8006b78 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	68da      	ldr	r2, [r3, #12]
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d11c      	bne.n	8006b3e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	685a      	ldr	r2, [r3, #4]
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d316      	bcc.n	8006b3e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	685a      	ldr	r2, [r3, #4]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d20f      	bcs.n	8006b3e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006b1e:	2200      	movs	r2, #0
 8006b20:	2100      	movs	r1, #0
 8006b22:	68f8      	ldr	r0, [r7, #12]
 8006b24:	f001 f88d 	bl	8007c42 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b30:	2300      	movs	r3, #0
 8006b32:	2200      	movs	r2, #0
 8006b34:	2100      	movs	r1, #0
 8006b36:	68f8      	ldr	r0, [r7, #12]
 8006b38:	f001 fd96 	bl	8008668 <USBD_LL_PrepareReceive>
 8006b3c:	e01c      	b.n	8006b78 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	2b03      	cmp	r3, #3
 8006b48:	d10f      	bne.n	8006b6a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d009      	beq.n	8006b6a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b64:	68db      	ldr	r3, [r3, #12]
 8006b66:	68f8      	ldr	r0, [r7, #12]
 8006b68:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006b6a:	2180      	movs	r1, #128	; 0x80
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f001 fcd1 	bl	8008514 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	f001 f8b7 	bl	8007ce6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d03a      	beq.n	8006bf8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006b82:	68f8      	ldr	r0, [r7, #12]
 8006b84:	f7ff fe42 	bl	800680c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006b90:	e032      	b.n	8006bf8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006b92:	7afb      	ldrb	r3, [r7, #11]
 8006b94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	f000 f97f 	bl	8006ea0 <USBD_CoreFindEP>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006ba6:	7dfb      	ldrb	r3, [r7, #23]
 8006ba8:	2bff      	cmp	r3, #255	; 0xff
 8006baa:	d025      	beq.n	8006bf8 <USBD_LL_DataInStage+0x15a>
 8006bac:	7dfb      	ldrb	r3, [r7, #23]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d122      	bne.n	8006bf8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	2b03      	cmp	r3, #3
 8006bbc:	d11c      	bne.n	8006bf8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006bbe:	7dfa      	ldrb	r2, [r7, #23]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	32ae      	adds	r2, #174	; 0xae
 8006bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bc8:	695b      	ldr	r3, [r3, #20]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d014      	beq.n	8006bf8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006bce:	7dfa      	ldrb	r2, [r7, #23]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006bd6:	7dfa      	ldrb	r2, [r7, #23]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	32ae      	adds	r2, #174	; 0xae
 8006bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006be0:	695b      	ldr	r3, [r3, #20]
 8006be2:	7afa      	ldrb	r2, [r7, #11]
 8006be4:	4611      	mov	r1, r2
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	4798      	blx	r3
 8006bea:	4603      	mov	r3, r0
 8006bec:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006bee:	7dbb      	ldrb	r3, [r7, #22]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d001      	beq.n	8006bf8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006bf4:	7dbb      	ldrb	r3, [r7, #22]
 8006bf6:	e000      	b.n	8006bfa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3718      	adds	r7, #24
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b084      	sub	sp, #16
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2201      	movs	r2, #1
 8006c12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d014      	beq.n	8006c68 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d00e      	beq.n	8006c68 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	687a      	ldr	r2, [r7, #4]
 8006c54:	6852      	ldr	r2, [r2, #4]
 8006c56:	b2d2      	uxtb	r2, r2
 8006c58:	4611      	mov	r1, r2
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	4798      	blx	r3
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d001      	beq.n	8006c68 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006c64:	2303      	movs	r3, #3
 8006c66:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c68:	2340      	movs	r3, #64	; 0x40
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	2100      	movs	r1, #0
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f001 fc0b 	bl	800848a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2240      	movs	r2, #64	; 0x40
 8006c80:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c84:	2340      	movs	r3, #64	; 0x40
 8006c86:	2200      	movs	r2, #0
 8006c88:	2180      	movs	r1, #128	; 0x80
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f001 fbfd 	bl	800848a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2240      	movs	r2, #64	; 0x40
 8006c9a:	621a      	str	r2, [r3, #32]

  return ret;
 8006c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3710      	adds	r7, #16
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b083      	sub	sp, #12
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
 8006cae:	460b      	mov	r3, r1
 8006cb0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	78fa      	ldrb	r2, [r7, #3]
 8006cb6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	370c      	adds	r7, #12
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr

08006cc6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006cc6:	b480      	push	{r7}
 8006cc8:	b083      	sub	sp, #12
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cd4:	b2da      	uxtb	r2, r3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2204      	movs	r2, #4
 8006ce0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	370c      	adds	r7, #12
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr

08006cf2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006cf2:	b480      	push	{r7}
 8006cf4:	b083      	sub	sp, #12
 8006cf6:	af00      	add	r7, sp, #0
 8006cf8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	2b04      	cmp	r3, #4
 8006d04:	d106      	bne.n	8006d14 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006d0c:	b2da      	uxtb	r2, r3
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	370c      	adds	r7, #12
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr

08006d22 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006d22:	b580      	push	{r7, lr}
 8006d24:	b082      	sub	sp, #8
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	2b03      	cmp	r3, #3
 8006d34:	d110      	bne.n	8006d58 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00b      	beq.n	8006d58 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d46:	69db      	ldr	r3, [r3, #28]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d005      	beq.n	8006d58 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d52:	69db      	ldr	r3, [r3, #28]
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3708      	adds	r7, #8
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}

08006d62 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006d62:	b580      	push	{r7, lr}
 8006d64:	b082      	sub	sp, #8
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	32ae      	adds	r2, #174	; 0xae
 8006d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d101      	bne.n	8006d84 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006d80:	2303      	movs	r3, #3
 8006d82:	e01c      	b.n	8006dbe <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	2b03      	cmp	r3, #3
 8006d8e:	d115      	bne.n	8006dbc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	32ae      	adds	r2, #174	; 0xae
 8006d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d9e:	6a1b      	ldr	r3, [r3, #32]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d00b      	beq.n	8006dbc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	32ae      	adds	r2, #174	; 0xae
 8006dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006db2:	6a1b      	ldr	r3, [r3, #32]
 8006db4:	78fa      	ldrb	r2, [r7, #3]
 8006db6:	4611      	mov	r1, r2
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3708      	adds	r7, #8
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}

08006dc6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b082      	sub	sp, #8
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
 8006dce:	460b      	mov	r3, r1
 8006dd0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	32ae      	adds	r2, #174	; 0xae
 8006ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d101      	bne.n	8006de8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006de4:	2303      	movs	r3, #3
 8006de6:	e01c      	b.n	8006e22 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	2b03      	cmp	r3, #3
 8006df2:	d115      	bne.n	8006e20 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	32ae      	adds	r2, #174	; 0xae
 8006dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d00b      	beq.n	8006e20 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	32ae      	adds	r2, #174	; 0xae
 8006e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e18:	78fa      	ldrb	r2, [r7, #3]
 8006e1a:	4611      	mov	r1, r2
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3708      	adds	r7, #8
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006e2a:	b480      	push	{r7}
 8006e2c:	b083      	sub	sp, #12
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00e      	beq.n	8006e7c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	6852      	ldr	r2, [r2, #4]
 8006e6a:	b2d2      	uxtb	r2, r2
 8006e6c:	4611      	mov	r1, r2
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	4798      	blx	r3
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d001      	beq.n	8006e7c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006e86:	b480      	push	{r7}
 8006e88:	b083      	sub	sp, #12
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
 8006e8e:	460b      	mov	r3, r1
 8006e90:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006e92:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	370c      	adds	r7, #12
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	460b      	mov	r3, r1
 8006eaa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006eac:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	370c      	adds	r7, #12
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr

08006eba <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b086      	sub	sp, #24
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
 8006ec2:	460b      	mov	r3, r1
 8006ec4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	885b      	ldrh	r3, [r3, #2]
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d920      	bls.n	8006f24 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006eea:	e013      	b.n	8006f14 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006eec:	f107 030a 	add.w	r3, r7, #10
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	6978      	ldr	r0, [r7, #20]
 8006ef4:	f000 f81b 	bl	8006f2e <USBD_GetNextDesc>
 8006ef8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	785b      	ldrb	r3, [r3, #1]
 8006efe:	2b05      	cmp	r3, #5
 8006f00:	d108      	bne.n	8006f14 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	789b      	ldrb	r3, [r3, #2]
 8006f0a:	78fa      	ldrb	r2, [r7, #3]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d008      	beq.n	8006f22 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006f10:	2300      	movs	r3, #0
 8006f12:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	885b      	ldrh	r3, [r3, #2]
 8006f18:	b29a      	uxth	r2, r3
 8006f1a:	897b      	ldrh	r3, [r7, #10]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d8e5      	bhi.n	8006eec <USBD_GetEpDesc+0x32>
 8006f20:	e000      	b.n	8006f24 <USBD_GetEpDesc+0x6a>
          break;
 8006f22:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006f24:	693b      	ldr	r3, [r7, #16]
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3718      	adds	r7, #24
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006f2e:	b480      	push	{r7}
 8006f30:	b085      	sub	sp, #20
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
 8006f36:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	881a      	ldrh	r2, [r3, #0]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	4413      	add	r3, r2
 8006f48:	b29a      	uxth	r2, r3
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	461a      	mov	r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4413      	add	r3, r2
 8006f58:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006f5a:	68fb      	ldr	r3, [r7, #12]
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3714      	adds	r7, #20
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b087      	sub	sp, #28
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006f86:	8a3b      	ldrh	r3, [r7, #16]
 8006f88:	021b      	lsls	r3, r3, #8
 8006f8a:	b21a      	sxth	r2, r3
 8006f8c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006f90:	4313      	orrs	r3, r2
 8006f92:	b21b      	sxth	r3, r3
 8006f94:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006f96:	89fb      	ldrh	r3, [r7, #14]
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	371c      	adds	r7, #28
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fba:	2b40      	cmp	r3, #64	; 0x40
 8006fbc:	d005      	beq.n	8006fca <USBD_StdDevReq+0x26>
 8006fbe:	2b40      	cmp	r3, #64	; 0x40
 8006fc0:	d857      	bhi.n	8007072 <USBD_StdDevReq+0xce>
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00f      	beq.n	8006fe6 <USBD_StdDevReq+0x42>
 8006fc6:	2b20      	cmp	r3, #32
 8006fc8:	d153      	bne.n	8007072 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	32ae      	adds	r2, #174	; 0xae
 8006fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	6839      	ldr	r1, [r7, #0]
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	4798      	blx	r3
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	73fb      	strb	r3, [r7, #15]
      break;
 8006fe4:	e04a      	b.n	800707c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	785b      	ldrb	r3, [r3, #1]
 8006fea:	2b09      	cmp	r3, #9
 8006fec:	d83b      	bhi.n	8007066 <USBD_StdDevReq+0xc2>
 8006fee:	a201      	add	r2, pc, #4	; (adr r2, 8006ff4 <USBD_StdDevReq+0x50>)
 8006ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff4:	08007049 	.word	0x08007049
 8006ff8:	0800705d 	.word	0x0800705d
 8006ffc:	08007067 	.word	0x08007067
 8007000:	08007053 	.word	0x08007053
 8007004:	08007067 	.word	0x08007067
 8007008:	08007027 	.word	0x08007027
 800700c:	0800701d 	.word	0x0800701d
 8007010:	08007067 	.word	0x08007067
 8007014:	0800703f 	.word	0x0800703f
 8007018:	08007031 	.word	0x08007031
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800701c:	6839      	ldr	r1, [r7, #0]
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 fa3c 	bl	800749c <USBD_GetDescriptor>
          break;
 8007024:	e024      	b.n	8007070 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007026:	6839      	ldr	r1, [r7, #0]
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 fba1 	bl	8007770 <USBD_SetAddress>
          break;
 800702e:	e01f      	b.n	8007070 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007030:	6839      	ldr	r1, [r7, #0]
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 fbe0 	bl	80077f8 <USBD_SetConfig>
 8007038:	4603      	mov	r3, r0
 800703a:	73fb      	strb	r3, [r7, #15]
          break;
 800703c:	e018      	b.n	8007070 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800703e:	6839      	ldr	r1, [r7, #0]
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 fc83 	bl	800794c <USBD_GetConfig>
          break;
 8007046:	e013      	b.n	8007070 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007048:	6839      	ldr	r1, [r7, #0]
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 fcb4 	bl	80079b8 <USBD_GetStatus>
          break;
 8007050:	e00e      	b.n	8007070 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007052:	6839      	ldr	r1, [r7, #0]
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 fce3 	bl	8007a20 <USBD_SetFeature>
          break;
 800705a:	e009      	b.n	8007070 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800705c:	6839      	ldr	r1, [r7, #0]
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 fd07 	bl	8007a72 <USBD_ClrFeature>
          break;
 8007064:	e004      	b.n	8007070 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007066:	6839      	ldr	r1, [r7, #0]
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 fd5e 	bl	8007b2a <USBD_CtlError>
          break;
 800706e:	bf00      	nop
      }
      break;
 8007070:	e004      	b.n	800707c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007072:	6839      	ldr	r1, [r7, #0]
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 fd58 	bl	8007b2a <USBD_CtlError>
      break;
 800707a:	bf00      	nop
  }

  return ret;
 800707c:	7bfb      	ldrb	r3, [r7, #15]
}
 800707e:	4618      	mov	r0, r3
 8007080:	3710      	adds	r7, #16
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop

08007088 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007092:	2300      	movs	r3, #0
 8007094:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800709e:	2b40      	cmp	r3, #64	; 0x40
 80070a0:	d005      	beq.n	80070ae <USBD_StdItfReq+0x26>
 80070a2:	2b40      	cmp	r3, #64	; 0x40
 80070a4:	d852      	bhi.n	800714c <USBD_StdItfReq+0xc4>
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d001      	beq.n	80070ae <USBD_StdItfReq+0x26>
 80070aa:	2b20      	cmp	r3, #32
 80070ac:	d14e      	bne.n	800714c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	3b01      	subs	r3, #1
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d840      	bhi.n	800713e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	889b      	ldrh	r3, [r3, #4]
 80070c0:	b2db      	uxtb	r3, r3
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d836      	bhi.n	8007134 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	889b      	ldrh	r3, [r3, #4]
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	4619      	mov	r1, r3
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f7ff fed9 	bl	8006e86 <USBD_CoreFindIF>
 80070d4:	4603      	mov	r3, r0
 80070d6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80070d8:	7bbb      	ldrb	r3, [r7, #14]
 80070da:	2bff      	cmp	r3, #255	; 0xff
 80070dc:	d01d      	beq.n	800711a <USBD_StdItfReq+0x92>
 80070de:	7bbb      	ldrb	r3, [r7, #14]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d11a      	bne.n	800711a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80070e4:	7bba      	ldrb	r2, [r7, #14]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	32ae      	adds	r2, #174	; 0xae
 80070ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00f      	beq.n	8007114 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80070f4:	7bba      	ldrb	r2, [r7, #14]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80070fc:	7bba      	ldrb	r2, [r7, #14]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	32ae      	adds	r2, #174	; 0xae
 8007102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	6839      	ldr	r1, [r7, #0]
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	4798      	blx	r3
 800710e:	4603      	mov	r3, r0
 8007110:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007112:	e004      	b.n	800711e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007114:	2303      	movs	r3, #3
 8007116:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007118:	e001      	b.n	800711e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800711a:	2303      	movs	r3, #3
 800711c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	88db      	ldrh	r3, [r3, #6]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d110      	bne.n	8007148 <USBD_StdItfReq+0xc0>
 8007126:	7bfb      	ldrb	r3, [r7, #15]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d10d      	bne.n	8007148 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 fdc7 	bl	8007cc0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007132:	e009      	b.n	8007148 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007134:	6839      	ldr	r1, [r7, #0]
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 fcf7 	bl	8007b2a <USBD_CtlError>
          break;
 800713c:	e004      	b.n	8007148 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800713e:	6839      	ldr	r1, [r7, #0]
 8007140:	6878      	ldr	r0, [r7, #4]
 8007142:	f000 fcf2 	bl	8007b2a <USBD_CtlError>
          break;
 8007146:	e000      	b.n	800714a <USBD_StdItfReq+0xc2>
          break;
 8007148:	bf00      	nop
      }
      break;
 800714a:	e004      	b.n	8007156 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800714c:	6839      	ldr	r1, [r7, #0]
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 fceb 	bl	8007b2a <USBD_CtlError>
      break;
 8007154:	bf00      	nop
  }

  return ret;
 8007156:	7bfb      	ldrb	r3, [r7, #15]
}
 8007158:	4618      	mov	r0, r3
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800716a:	2300      	movs	r3, #0
 800716c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	889b      	ldrh	r3, [r3, #4]
 8007172:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800717c:	2b40      	cmp	r3, #64	; 0x40
 800717e:	d007      	beq.n	8007190 <USBD_StdEPReq+0x30>
 8007180:	2b40      	cmp	r3, #64	; 0x40
 8007182:	f200 817f 	bhi.w	8007484 <USBD_StdEPReq+0x324>
 8007186:	2b00      	cmp	r3, #0
 8007188:	d02a      	beq.n	80071e0 <USBD_StdEPReq+0x80>
 800718a:	2b20      	cmp	r3, #32
 800718c:	f040 817a 	bne.w	8007484 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007190:	7bbb      	ldrb	r3, [r7, #14]
 8007192:	4619      	mov	r1, r3
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f7ff fe83 	bl	8006ea0 <USBD_CoreFindEP>
 800719a:	4603      	mov	r3, r0
 800719c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800719e:	7b7b      	ldrb	r3, [r7, #13]
 80071a0:	2bff      	cmp	r3, #255	; 0xff
 80071a2:	f000 8174 	beq.w	800748e <USBD_StdEPReq+0x32e>
 80071a6:	7b7b      	ldrb	r3, [r7, #13]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	f040 8170 	bne.w	800748e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80071ae:	7b7a      	ldrb	r2, [r7, #13]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80071b6:	7b7a      	ldrb	r2, [r7, #13]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	32ae      	adds	r2, #174	; 0xae
 80071bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	f000 8163 	beq.w	800748e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80071c8:	7b7a      	ldrb	r2, [r7, #13]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	32ae      	adds	r2, #174	; 0xae
 80071ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	6839      	ldr	r1, [r7, #0]
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	4798      	blx	r3
 80071da:	4603      	mov	r3, r0
 80071dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80071de:	e156      	b.n	800748e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	785b      	ldrb	r3, [r3, #1]
 80071e4:	2b03      	cmp	r3, #3
 80071e6:	d008      	beq.n	80071fa <USBD_StdEPReq+0x9a>
 80071e8:	2b03      	cmp	r3, #3
 80071ea:	f300 8145 	bgt.w	8007478 <USBD_StdEPReq+0x318>
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	f000 809b 	beq.w	800732a <USBD_StdEPReq+0x1ca>
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d03c      	beq.n	8007272 <USBD_StdEPReq+0x112>
 80071f8:	e13e      	b.n	8007478 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007200:	b2db      	uxtb	r3, r3
 8007202:	2b02      	cmp	r3, #2
 8007204:	d002      	beq.n	800720c <USBD_StdEPReq+0xac>
 8007206:	2b03      	cmp	r3, #3
 8007208:	d016      	beq.n	8007238 <USBD_StdEPReq+0xd8>
 800720a:	e02c      	b.n	8007266 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800720c:	7bbb      	ldrb	r3, [r7, #14]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00d      	beq.n	800722e <USBD_StdEPReq+0xce>
 8007212:	7bbb      	ldrb	r3, [r7, #14]
 8007214:	2b80      	cmp	r3, #128	; 0x80
 8007216:	d00a      	beq.n	800722e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007218:	7bbb      	ldrb	r3, [r7, #14]
 800721a:	4619      	mov	r1, r3
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f001 f979 	bl	8008514 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007222:	2180      	movs	r1, #128	; 0x80
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f001 f975 	bl	8008514 <USBD_LL_StallEP>
 800722a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800722c:	e020      	b.n	8007270 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800722e:	6839      	ldr	r1, [r7, #0]
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 fc7a 	bl	8007b2a <USBD_CtlError>
              break;
 8007236:	e01b      	b.n	8007270 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	885b      	ldrh	r3, [r3, #2]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d10e      	bne.n	800725e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007240:	7bbb      	ldrb	r3, [r7, #14]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00b      	beq.n	800725e <USBD_StdEPReq+0xfe>
 8007246:	7bbb      	ldrb	r3, [r7, #14]
 8007248:	2b80      	cmp	r3, #128	; 0x80
 800724a:	d008      	beq.n	800725e <USBD_StdEPReq+0xfe>
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	88db      	ldrh	r3, [r3, #6]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d104      	bne.n	800725e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007254:	7bbb      	ldrb	r3, [r7, #14]
 8007256:	4619      	mov	r1, r3
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f001 f95b 	bl	8008514 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 fd2e 	bl	8007cc0 <USBD_CtlSendStatus>

              break;
 8007264:	e004      	b.n	8007270 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007266:	6839      	ldr	r1, [r7, #0]
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 fc5e 	bl	8007b2a <USBD_CtlError>
              break;
 800726e:	bf00      	nop
          }
          break;
 8007270:	e107      	b.n	8007482 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007278:	b2db      	uxtb	r3, r3
 800727a:	2b02      	cmp	r3, #2
 800727c:	d002      	beq.n	8007284 <USBD_StdEPReq+0x124>
 800727e:	2b03      	cmp	r3, #3
 8007280:	d016      	beq.n	80072b0 <USBD_StdEPReq+0x150>
 8007282:	e04b      	b.n	800731c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007284:	7bbb      	ldrb	r3, [r7, #14]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00d      	beq.n	80072a6 <USBD_StdEPReq+0x146>
 800728a:	7bbb      	ldrb	r3, [r7, #14]
 800728c:	2b80      	cmp	r3, #128	; 0x80
 800728e:	d00a      	beq.n	80072a6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007290:	7bbb      	ldrb	r3, [r7, #14]
 8007292:	4619      	mov	r1, r3
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f001 f93d 	bl	8008514 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800729a:	2180      	movs	r1, #128	; 0x80
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f001 f939 	bl	8008514 <USBD_LL_StallEP>
 80072a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80072a4:	e040      	b.n	8007328 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80072a6:	6839      	ldr	r1, [r7, #0]
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 fc3e 	bl	8007b2a <USBD_CtlError>
              break;
 80072ae:	e03b      	b.n	8007328 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	885b      	ldrh	r3, [r3, #2]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d136      	bne.n	8007326 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80072b8:	7bbb      	ldrb	r3, [r7, #14]
 80072ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d004      	beq.n	80072cc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80072c2:	7bbb      	ldrb	r3, [r7, #14]
 80072c4:	4619      	mov	r1, r3
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f001 f943 	bl	8008552 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 fcf7 	bl	8007cc0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80072d2:	7bbb      	ldrb	r3, [r7, #14]
 80072d4:	4619      	mov	r1, r3
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f7ff fde2 	bl	8006ea0 <USBD_CoreFindEP>
 80072dc:	4603      	mov	r3, r0
 80072de:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072e0:	7b7b      	ldrb	r3, [r7, #13]
 80072e2:	2bff      	cmp	r3, #255	; 0xff
 80072e4:	d01f      	beq.n	8007326 <USBD_StdEPReq+0x1c6>
 80072e6:	7b7b      	ldrb	r3, [r7, #13]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d11c      	bne.n	8007326 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80072ec:	7b7a      	ldrb	r2, [r7, #13]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80072f4:	7b7a      	ldrb	r2, [r7, #13]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	32ae      	adds	r2, #174	; 0xae
 80072fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d010      	beq.n	8007326 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007304:	7b7a      	ldrb	r2, [r7, #13]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	32ae      	adds	r2, #174	; 0xae
 800730a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	6839      	ldr	r1, [r7, #0]
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	4798      	blx	r3
 8007316:	4603      	mov	r3, r0
 8007318:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800731a:	e004      	b.n	8007326 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800731c:	6839      	ldr	r1, [r7, #0]
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 fc03 	bl	8007b2a <USBD_CtlError>
              break;
 8007324:	e000      	b.n	8007328 <USBD_StdEPReq+0x1c8>
              break;
 8007326:	bf00      	nop
          }
          break;
 8007328:	e0ab      	b.n	8007482 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007330:	b2db      	uxtb	r3, r3
 8007332:	2b02      	cmp	r3, #2
 8007334:	d002      	beq.n	800733c <USBD_StdEPReq+0x1dc>
 8007336:	2b03      	cmp	r3, #3
 8007338:	d032      	beq.n	80073a0 <USBD_StdEPReq+0x240>
 800733a:	e097      	b.n	800746c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800733c:	7bbb      	ldrb	r3, [r7, #14]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d007      	beq.n	8007352 <USBD_StdEPReq+0x1f2>
 8007342:	7bbb      	ldrb	r3, [r7, #14]
 8007344:	2b80      	cmp	r3, #128	; 0x80
 8007346:	d004      	beq.n	8007352 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007348:	6839      	ldr	r1, [r7, #0]
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 fbed 	bl	8007b2a <USBD_CtlError>
                break;
 8007350:	e091      	b.n	8007476 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007352:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007356:	2b00      	cmp	r3, #0
 8007358:	da0b      	bge.n	8007372 <USBD_StdEPReq+0x212>
 800735a:	7bbb      	ldrb	r3, [r7, #14]
 800735c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007360:	4613      	mov	r3, r2
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	4413      	add	r3, r2
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	3310      	adds	r3, #16
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	4413      	add	r3, r2
 800736e:	3304      	adds	r3, #4
 8007370:	e00b      	b.n	800738a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007372:	7bbb      	ldrb	r3, [r7, #14]
 8007374:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007378:	4613      	mov	r3, r2
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	4413      	add	r3, r2
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	4413      	add	r3, r2
 8007388:	3304      	adds	r3, #4
 800738a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	2200      	movs	r2, #0
 8007390:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	2202      	movs	r2, #2
 8007396:	4619      	mov	r1, r3
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f000 fc37 	bl	8007c0c <USBD_CtlSendData>
              break;
 800739e:	e06a      	b.n	8007476 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80073a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	da11      	bge.n	80073cc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80073a8:	7bbb      	ldrb	r3, [r7, #14]
 80073aa:	f003 020f 	and.w	r2, r3, #15
 80073ae:	6879      	ldr	r1, [r7, #4]
 80073b0:	4613      	mov	r3, r2
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	4413      	add	r3, r2
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	440b      	add	r3, r1
 80073ba:	3324      	adds	r3, #36	; 0x24
 80073bc:	881b      	ldrh	r3, [r3, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d117      	bne.n	80073f2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80073c2:	6839      	ldr	r1, [r7, #0]
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f000 fbb0 	bl	8007b2a <USBD_CtlError>
                  break;
 80073ca:	e054      	b.n	8007476 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80073cc:	7bbb      	ldrb	r3, [r7, #14]
 80073ce:	f003 020f 	and.w	r2, r3, #15
 80073d2:	6879      	ldr	r1, [r7, #4]
 80073d4:	4613      	mov	r3, r2
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	4413      	add	r3, r2
 80073da:	009b      	lsls	r3, r3, #2
 80073dc:	440b      	add	r3, r1
 80073de:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80073e2:	881b      	ldrh	r3, [r3, #0]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d104      	bne.n	80073f2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80073e8:	6839      	ldr	r1, [r7, #0]
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 fb9d 	bl	8007b2a <USBD_CtlError>
                  break;
 80073f0:	e041      	b.n	8007476 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	da0b      	bge.n	8007412 <USBD_StdEPReq+0x2b2>
 80073fa:	7bbb      	ldrb	r3, [r7, #14]
 80073fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007400:	4613      	mov	r3, r2
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	4413      	add	r3, r2
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	3310      	adds	r3, #16
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	4413      	add	r3, r2
 800740e:	3304      	adds	r3, #4
 8007410:	e00b      	b.n	800742a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007412:	7bbb      	ldrb	r3, [r7, #14]
 8007414:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007418:	4613      	mov	r3, r2
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	4413      	add	r3, r2
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	4413      	add	r3, r2
 8007428:	3304      	adds	r3, #4
 800742a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800742c:	7bbb      	ldrb	r3, [r7, #14]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d002      	beq.n	8007438 <USBD_StdEPReq+0x2d8>
 8007432:	7bbb      	ldrb	r3, [r7, #14]
 8007434:	2b80      	cmp	r3, #128	; 0x80
 8007436:	d103      	bne.n	8007440 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	2200      	movs	r2, #0
 800743c:	601a      	str	r2, [r3, #0]
 800743e:	e00e      	b.n	800745e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007440:	7bbb      	ldrb	r3, [r7, #14]
 8007442:	4619      	mov	r1, r3
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f001 f8a3 	bl	8008590 <USBD_LL_IsStallEP>
 800744a:	4603      	mov	r3, r0
 800744c:	2b00      	cmp	r3, #0
 800744e:	d003      	beq.n	8007458 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	2201      	movs	r2, #1
 8007454:	601a      	str	r2, [r3, #0]
 8007456:	e002      	b.n	800745e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	2200      	movs	r2, #0
 800745c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	2202      	movs	r2, #2
 8007462:	4619      	mov	r1, r3
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 fbd1 	bl	8007c0c <USBD_CtlSendData>
              break;
 800746a:	e004      	b.n	8007476 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800746c:	6839      	ldr	r1, [r7, #0]
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 fb5b 	bl	8007b2a <USBD_CtlError>
              break;
 8007474:	bf00      	nop
          }
          break;
 8007476:	e004      	b.n	8007482 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007478:	6839      	ldr	r1, [r7, #0]
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 fb55 	bl	8007b2a <USBD_CtlError>
          break;
 8007480:	bf00      	nop
      }
      break;
 8007482:	e005      	b.n	8007490 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007484:	6839      	ldr	r1, [r7, #0]
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 fb4f 	bl	8007b2a <USBD_CtlError>
      break;
 800748c:	e000      	b.n	8007490 <USBD_StdEPReq+0x330>
      break;
 800748e:	bf00      	nop
  }

  return ret;
 8007490:	7bfb      	ldrb	r3, [r7, #15]
}
 8007492:	4618      	mov	r0, r3
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
	...

0800749c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80074a6:	2300      	movs	r3, #0
 80074a8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80074aa:	2300      	movs	r3, #0
 80074ac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80074ae:	2300      	movs	r3, #0
 80074b0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	885b      	ldrh	r3, [r3, #2]
 80074b6:	0a1b      	lsrs	r3, r3, #8
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	3b01      	subs	r3, #1
 80074bc:	2b06      	cmp	r3, #6
 80074be:	f200 8128 	bhi.w	8007712 <USBD_GetDescriptor+0x276>
 80074c2:	a201      	add	r2, pc, #4	; (adr r2, 80074c8 <USBD_GetDescriptor+0x2c>)
 80074c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c8:	080074e5 	.word	0x080074e5
 80074cc:	080074fd 	.word	0x080074fd
 80074d0:	0800753d 	.word	0x0800753d
 80074d4:	08007713 	.word	0x08007713
 80074d8:	08007713 	.word	0x08007713
 80074dc:	080076b3 	.word	0x080076b3
 80074e0:	080076df 	.word	0x080076df
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	7c12      	ldrb	r2, [r2, #16]
 80074f0:	f107 0108 	add.w	r1, r7, #8
 80074f4:	4610      	mov	r0, r2
 80074f6:	4798      	blx	r3
 80074f8:	60f8      	str	r0, [r7, #12]
      break;
 80074fa:	e112      	b.n	8007722 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	7c1b      	ldrb	r3, [r3, #16]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d10d      	bne.n	8007520 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800750a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800750c:	f107 0208 	add.w	r2, r7, #8
 8007510:	4610      	mov	r0, r2
 8007512:	4798      	blx	r3
 8007514:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	3301      	adds	r3, #1
 800751a:	2202      	movs	r2, #2
 800751c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800751e:	e100      	b.n	8007722 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007528:	f107 0208 	add.w	r2, r7, #8
 800752c:	4610      	mov	r0, r2
 800752e:	4798      	blx	r3
 8007530:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	3301      	adds	r3, #1
 8007536:	2202      	movs	r2, #2
 8007538:	701a      	strb	r2, [r3, #0]
      break;
 800753a:	e0f2      	b.n	8007722 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	885b      	ldrh	r3, [r3, #2]
 8007540:	b2db      	uxtb	r3, r3
 8007542:	2b05      	cmp	r3, #5
 8007544:	f200 80ac 	bhi.w	80076a0 <USBD_GetDescriptor+0x204>
 8007548:	a201      	add	r2, pc, #4	; (adr r2, 8007550 <USBD_GetDescriptor+0xb4>)
 800754a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800754e:	bf00      	nop
 8007550:	08007569 	.word	0x08007569
 8007554:	0800759d 	.word	0x0800759d
 8007558:	080075d1 	.word	0x080075d1
 800755c:	08007605 	.word	0x08007605
 8007560:	08007639 	.word	0x08007639
 8007564:	0800766d 	.word	0x0800766d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d00b      	beq.n	800758c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	7c12      	ldrb	r2, [r2, #16]
 8007580:	f107 0108 	add.w	r1, r7, #8
 8007584:	4610      	mov	r0, r2
 8007586:	4798      	blx	r3
 8007588:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800758a:	e091      	b.n	80076b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800758c:	6839      	ldr	r1, [r7, #0]
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 facb 	bl	8007b2a <USBD_CtlError>
            err++;
 8007594:	7afb      	ldrb	r3, [r7, #11]
 8007596:	3301      	adds	r3, #1
 8007598:	72fb      	strb	r3, [r7, #11]
          break;
 800759a:	e089      	b.n	80076b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00b      	beq.n	80075c0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	7c12      	ldrb	r2, [r2, #16]
 80075b4:	f107 0108 	add.w	r1, r7, #8
 80075b8:	4610      	mov	r0, r2
 80075ba:	4798      	blx	r3
 80075bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075be:	e077      	b.n	80076b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075c0:	6839      	ldr	r1, [r7, #0]
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 fab1 	bl	8007b2a <USBD_CtlError>
            err++;
 80075c8:	7afb      	ldrb	r3, [r7, #11]
 80075ca:	3301      	adds	r3, #1
 80075cc:	72fb      	strb	r3, [r7, #11]
          break;
 80075ce:	e06f      	b.n	80076b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00b      	beq.n	80075f4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	687a      	ldr	r2, [r7, #4]
 80075e6:	7c12      	ldrb	r2, [r2, #16]
 80075e8:	f107 0108 	add.w	r1, r7, #8
 80075ec:	4610      	mov	r0, r2
 80075ee:	4798      	blx	r3
 80075f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075f2:	e05d      	b.n	80076b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075f4:	6839      	ldr	r1, [r7, #0]
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f000 fa97 	bl	8007b2a <USBD_CtlError>
            err++;
 80075fc:	7afb      	ldrb	r3, [r7, #11]
 80075fe:	3301      	adds	r3, #1
 8007600:	72fb      	strb	r3, [r7, #11]
          break;
 8007602:	e055      	b.n	80076b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800760a:	691b      	ldr	r3, [r3, #16]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d00b      	beq.n	8007628 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	7c12      	ldrb	r2, [r2, #16]
 800761c:	f107 0108 	add.w	r1, r7, #8
 8007620:	4610      	mov	r0, r2
 8007622:	4798      	blx	r3
 8007624:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007626:	e043      	b.n	80076b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007628:	6839      	ldr	r1, [r7, #0]
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 fa7d 	bl	8007b2a <USBD_CtlError>
            err++;
 8007630:	7afb      	ldrb	r3, [r7, #11]
 8007632:	3301      	adds	r3, #1
 8007634:	72fb      	strb	r3, [r7, #11]
          break;
 8007636:	e03b      	b.n	80076b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800763e:	695b      	ldr	r3, [r3, #20]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00b      	beq.n	800765c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800764a:	695b      	ldr	r3, [r3, #20]
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	7c12      	ldrb	r2, [r2, #16]
 8007650:	f107 0108 	add.w	r1, r7, #8
 8007654:	4610      	mov	r0, r2
 8007656:	4798      	blx	r3
 8007658:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800765a:	e029      	b.n	80076b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800765c:	6839      	ldr	r1, [r7, #0]
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 fa63 	bl	8007b2a <USBD_CtlError>
            err++;
 8007664:	7afb      	ldrb	r3, [r7, #11]
 8007666:	3301      	adds	r3, #1
 8007668:	72fb      	strb	r3, [r7, #11]
          break;
 800766a:	e021      	b.n	80076b0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007672:	699b      	ldr	r3, [r3, #24]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00b      	beq.n	8007690 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800767e:	699b      	ldr	r3, [r3, #24]
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	7c12      	ldrb	r2, [r2, #16]
 8007684:	f107 0108 	add.w	r1, r7, #8
 8007688:	4610      	mov	r0, r2
 800768a:	4798      	blx	r3
 800768c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800768e:	e00f      	b.n	80076b0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007690:	6839      	ldr	r1, [r7, #0]
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 fa49 	bl	8007b2a <USBD_CtlError>
            err++;
 8007698:	7afb      	ldrb	r3, [r7, #11]
 800769a:	3301      	adds	r3, #1
 800769c:	72fb      	strb	r3, [r7, #11]
          break;
 800769e:	e007      	b.n	80076b0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80076a0:	6839      	ldr	r1, [r7, #0]
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 fa41 	bl	8007b2a <USBD_CtlError>
          err++;
 80076a8:	7afb      	ldrb	r3, [r7, #11]
 80076aa:	3301      	adds	r3, #1
 80076ac:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80076ae:	bf00      	nop
      }
      break;
 80076b0:	e037      	b.n	8007722 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	7c1b      	ldrb	r3, [r3, #16]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d109      	bne.n	80076ce <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076c2:	f107 0208 	add.w	r2, r7, #8
 80076c6:	4610      	mov	r0, r2
 80076c8:	4798      	blx	r3
 80076ca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076cc:	e029      	b.n	8007722 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80076ce:	6839      	ldr	r1, [r7, #0]
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 fa2a 	bl	8007b2a <USBD_CtlError>
        err++;
 80076d6:	7afb      	ldrb	r3, [r7, #11]
 80076d8:	3301      	adds	r3, #1
 80076da:	72fb      	strb	r3, [r7, #11]
      break;
 80076dc:	e021      	b.n	8007722 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	7c1b      	ldrb	r3, [r3, #16]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d10d      	bne.n	8007702 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ee:	f107 0208 	add.w	r2, r7, #8
 80076f2:	4610      	mov	r0, r2
 80076f4:	4798      	blx	r3
 80076f6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	3301      	adds	r3, #1
 80076fc:	2207      	movs	r2, #7
 80076fe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007700:	e00f      	b.n	8007722 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007702:	6839      	ldr	r1, [r7, #0]
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 fa10 	bl	8007b2a <USBD_CtlError>
        err++;
 800770a:	7afb      	ldrb	r3, [r7, #11]
 800770c:	3301      	adds	r3, #1
 800770e:	72fb      	strb	r3, [r7, #11]
      break;
 8007710:	e007      	b.n	8007722 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007712:	6839      	ldr	r1, [r7, #0]
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 fa08 	bl	8007b2a <USBD_CtlError>
      err++;
 800771a:	7afb      	ldrb	r3, [r7, #11]
 800771c:	3301      	adds	r3, #1
 800771e:	72fb      	strb	r3, [r7, #11]
      break;
 8007720:	bf00      	nop
  }

  if (err != 0U)
 8007722:	7afb      	ldrb	r3, [r7, #11]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d11e      	bne.n	8007766 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	88db      	ldrh	r3, [r3, #6]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d016      	beq.n	800775e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007730:	893b      	ldrh	r3, [r7, #8]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00e      	beq.n	8007754 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	88da      	ldrh	r2, [r3, #6]
 800773a:	893b      	ldrh	r3, [r7, #8]
 800773c:	4293      	cmp	r3, r2
 800773e:	bf28      	it	cs
 8007740:	4613      	movcs	r3, r2
 8007742:	b29b      	uxth	r3, r3
 8007744:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007746:	893b      	ldrh	r3, [r7, #8]
 8007748:	461a      	mov	r2, r3
 800774a:	68f9      	ldr	r1, [r7, #12]
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 fa5d 	bl	8007c0c <USBD_CtlSendData>
 8007752:	e009      	b.n	8007768 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007754:	6839      	ldr	r1, [r7, #0]
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f9e7 	bl	8007b2a <USBD_CtlError>
 800775c:	e004      	b.n	8007768 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 faae 	bl	8007cc0 <USBD_CtlSendStatus>
 8007764:	e000      	b.n	8007768 <USBD_GetDescriptor+0x2cc>
    return;
 8007766:	bf00      	nop
  }
}
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop

08007770 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	889b      	ldrh	r3, [r3, #4]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d131      	bne.n	80077e6 <USBD_SetAddress+0x76>
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	88db      	ldrh	r3, [r3, #6]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d12d      	bne.n	80077e6 <USBD_SetAddress+0x76>
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	885b      	ldrh	r3, [r3, #2]
 800778e:	2b7f      	cmp	r3, #127	; 0x7f
 8007790:	d829      	bhi.n	80077e6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	885b      	ldrh	r3, [r3, #2]
 8007796:	b2db      	uxtb	r3, r3
 8007798:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800779c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	2b03      	cmp	r3, #3
 80077a8:	d104      	bne.n	80077b4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80077aa:	6839      	ldr	r1, [r7, #0]
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 f9bc 	bl	8007b2a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077b2:	e01d      	b.n	80077f0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	7bfa      	ldrb	r2, [r7, #15]
 80077b8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80077bc:	7bfb      	ldrb	r3, [r7, #15]
 80077be:	4619      	mov	r1, r3
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 ff11 	bl	80085e8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 fa7a 	bl	8007cc0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80077cc:	7bfb      	ldrb	r3, [r7, #15]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d004      	beq.n	80077dc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2202      	movs	r2, #2
 80077d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077da:	e009      	b.n	80077f0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077e4:	e004      	b.n	80077f0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80077e6:	6839      	ldr	r1, [r7, #0]
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 f99e 	bl	8007b2a <USBD_CtlError>
  }
}
 80077ee:	bf00      	nop
 80077f0:	bf00      	nop
 80077f2:	3710      	adds	r7, #16
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007802:	2300      	movs	r3, #0
 8007804:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	885b      	ldrh	r3, [r3, #2]
 800780a:	b2da      	uxtb	r2, r3
 800780c:	4b4e      	ldr	r3, [pc, #312]	; (8007948 <USBD_SetConfig+0x150>)
 800780e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007810:	4b4d      	ldr	r3, [pc, #308]	; (8007948 <USBD_SetConfig+0x150>)
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	2b01      	cmp	r3, #1
 8007816:	d905      	bls.n	8007824 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007818:	6839      	ldr	r1, [r7, #0]
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 f985 	bl	8007b2a <USBD_CtlError>
    return USBD_FAIL;
 8007820:	2303      	movs	r3, #3
 8007822:	e08c      	b.n	800793e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800782a:	b2db      	uxtb	r3, r3
 800782c:	2b02      	cmp	r3, #2
 800782e:	d002      	beq.n	8007836 <USBD_SetConfig+0x3e>
 8007830:	2b03      	cmp	r3, #3
 8007832:	d029      	beq.n	8007888 <USBD_SetConfig+0x90>
 8007834:	e075      	b.n	8007922 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007836:	4b44      	ldr	r3, [pc, #272]	; (8007948 <USBD_SetConfig+0x150>)
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d020      	beq.n	8007880 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800783e:	4b42      	ldr	r3, [pc, #264]	; (8007948 <USBD_SetConfig+0x150>)
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	461a      	mov	r2, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007848:	4b3f      	ldr	r3, [pc, #252]	; (8007948 <USBD_SetConfig+0x150>)
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	4619      	mov	r1, r3
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f7fe ffe7 	bl	8006822 <USBD_SetClassConfig>
 8007854:	4603      	mov	r3, r0
 8007856:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007858:	7bfb      	ldrb	r3, [r7, #15]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d008      	beq.n	8007870 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800785e:	6839      	ldr	r1, [r7, #0]
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 f962 	bl	8007b2a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2202      	movs	r2, #2
 800786a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800786e:	e065      	b.n	800793c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 fa25 	bl	8007cc0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2203      	movs	r2, #3
 800787a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800787e:	e05d      	b.n	800793c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 fa1d 	bl	8007cc0 <USBD_CtlSendStatus>
      break;
 8007886:	e059      	b.n	800793c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007888:	4b2f      	ldr	r3, [pc, #188]	; (8007948 <USBD_SetConfig+0x150>)
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d112      	bne.n	80078b6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2202      	movs	r2, #2
 8007894:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007898:	4b2b      	ldr	r3, [pc, #172]	; (8007948 <USBD_SetConfig+0x150>)
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	461a      	mov	r2, r3
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80078a2:	4b29      	ldr	r3, [pc, #164]	; (8007948 <USBD_SetConfig+0x150>)
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	4619      	mov	r1, r3
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f7fe ffd6 	bl	800685a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 fa06 	bl	8007cc0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80078b4:	e042      	b.n	800793c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80078b6:	4b24      	ldr	r3, [pc, #144]	; (8007948 <USBD_SetConfig+0x150>)
 80078b8:	781b      	ldrb	r3, [r3, #0]
 80078ba:	461a      	mov	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d02a      	beq.n	800791a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	4619      	mov	r1, r3
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f7fe ffc4 	bl	800685a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80078d2:	4b1d      	ldr	r3, [pc, #116]	; (8007948 <USBD_SetConfig+0x150>)
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	461a      	mov	r2, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80078dc:	4b1a      	ldr	r3, [pc, #104]	; (8007948 <USBD_SetConfig+0x150>)
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	4619      	mov	r1, r3
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f7fe ff9d 	bl	8006822 <USBD_SetClassConfig>
 80078e8:	4603      	mov	r3, r0
 80078ea:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80078ec:	7bfb      	ldrb	r3, [r7, #15]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00f      	beq.n	8007912 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80078f2:	6839      	ldr	r1, [r7, #0]
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 f918 	bl	8007b2a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	4619      	mov	r1, r3
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f7fe ffa9 	bl	800685a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2202      	movs	r2, #2
 800790c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007910:	e014      	b.n	800793c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 f9d4 	bl	8007cc0 <USBD_CtlSendStatus>
      break;
 8007918:	e010      	b.n	800793c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 f9d0 	bl	8007cc0 <USBD_CtlSendStatus>
      break;
 8007920:	e00c      	b.n	800793c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007922:	6839      	ldr	r1, [r7, #0]
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 f900 	bl	8007b2a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800792a:	4b07      	ldr	r3, [pc, #28]	; (8007948 <USBD_SetConfig+0x150>)
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	4619      	mov	r1, r3
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f7fe ff92 	bl	800685a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007936:	2303      	movs	r3, #3
 8007938:	73fb      	strb	r3, [r7, #15]
      break;
 800793a:	bf00      	nop
  }

  return ret;
 800793c:	7bfb      	ldrb	r3, [r7, #15]
}
 800793e:	4618      	mov	r0, r3
 8007940:	3710      	adds	r7, #16
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	20000334 	.word	0x20000334

0800794c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	88db      	ldrh	r3, [r3, #6]
 800795a:	2b01      	cmp	r3, #1
 800795c:	d004      	beq.n	8007968 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800795e:	6839      	ldr	r1, [r7, #0]
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 f8e2 	bl	8007b2a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007966:	e023      	b.n	80079b0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800796e:	b2db      	uxtb	r3, r3
 8007970:	2b02      	cmp	r3, #2
 8007972:	dc02      	bgt.n	800797a <USBD_GetConfig+0x2e>
 8007974:	2b00      	cmp	r3, #0
 8007976:	dc03      	bgt.n	8007980 <USBD_GetConfig+0x34>
 8007978:	e015      	b.n	80079a6 <USBD_GetConfig+0x5a>
 800797a:	2b03      	cmp	r3, #3
 800797c:	d00b      	beq.n	8007996 <USBD_GetConfig+0x4a>
 800797e:	e012      	b.n	80079a6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	3308      	adds	r3, #8
 800798a:	2201      	movs	r2, #1
 800798c:	4619      	mov	r1, r3
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 f93c 	bl	8007c0c <USBD_CtlSendData>
        break;
 8007994:	e00c      	b.n	80079b0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	3304      	adds	r3, #4
 800799a:	2201      	movs	r2, #1
 800799c:	4619      	mov	r1, r3
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 f934 	bl	8007c0c <USBD_CtlSendData>
        break;
 80079a4:	e004      	b.n	80079b0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80079a6:	6839      	ldr	r1, [r7, #0]
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 f8be 	bl	8007b2a <USBD_CtlError>
        break;
 80079ae:	bf00      	nop
}
 80079b0:	bf00      	nop
 80079b2:	3708      	adds	r7, #8
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	3b01      	subs	r3, #1
 80079cc:	2b02      	cmp	r3, #2
 80079ce:	d81e      	bhi.n	8007a0e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	88db      	ldrh	r3, [r3, #6]
 80079d4:	2b02      	cmp	r3, #2
 80079d6:	d004      	beq.n	80079e2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80079d8:	6839      	ldr	r1, [r7, #0]
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 f8a5 	bl	8007b2a <USBD_CtlError>
        break;
 80079e0:	e01a      	b.n	8007a18 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2201      	movs	r2, #1
 80079e6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d005      	beq.n	80079fe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	f043 0202 	orr.w	r2, r3, #2
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	330c      	adds	r3, #12
 8007a02:	2202      	movs	r2, #2
 8007a04:	4619      	mov	r1, r3
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 f900 	bl	8007c0c <USBD_CtlSendData>
      break;
 8007a0c:	e004      	b.n	8007a18 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007a0e:	6839      	ldr	r1, [r7, #0]
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 f88a 	bl	8007b2a <USBD_CtlError>
      break;
 8007a16:	bf00      	nop
  }
}
 8007a18:	bf00      	nop
 8007a1a:	3708      	adds	r7, #8
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	885b      	ldrh	r3, [r3, #2]
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d107      	bne.n	8007a42 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2201      	movs	r2, #1
 8007a36:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 f940 	bl	8007cc0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007a40:	e013      	b.n	8007a6a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	885b      	ldrh	r3, [r3, #2]
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d10b      	bne.n	8007a62 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	889b      	ldrh	r3, [r3, #4]
 8007a4e:	0a1b      	lsrs	r3, r3, #8
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	b2da      	uxtb	r2, r3
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 f930 	bl	8007cc0 <USBD_CtlSendStatus>
}
 8007a60:	e003      	b.n	8007a6a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007a62:	6839      	ldr	r1, [r7, #0]
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 f860 	bl	8007b2a <USBD_CtlError>
}
 8007a6a:	bf00      	nop
 8007a6c:	3708      	adds	r7, #8
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}

08007a72 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a72:	b580      	push	{r7, lr}
 8007a74:	b082      	sub	sp, #8
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
 8007a7a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	3b01      	subs	r3, #1
 8007a86:	2b02      	cmp	r3, #2
 8007a88:	d80b      	bhi.n	8007aa2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	885b      	ldrh	r3, [r3, #2]
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d10c      	bne.n	8007aac <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 f910 	bl	8007cc0 <USBD_CtlSendStatus>
      }
      break;
 8007aa0:	e004      	b.n	8007aac <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007aa2:	6839      	ldr	r1, [r7, #0]
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 f840 	bl	8007b2a <USBD_CtlError>
      break;
 8007aaa:	e000      	b.n	8007aae <USBD_ClrFeature+0x3c>
      break;
 8007aac:	bf00      	nop
  }
}
 8007aae:	bf00      	nop
 8007ab0:	3708      	adds	r7, #8
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b084      	sub	sp, #16
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
 8007abe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	781a      	ldrb	r2, [r3, #0]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	3301      	adds	r3, #1
 8007ad0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	781a      	ldrb	r2, [r3, #0]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	3301      	adds	r3, #1
 8007ade:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f7ff fa41 	bl	8006f68 <SWAPBYTE>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	461a      	mov	r2, r3
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	3301      	adds	r3, #1
 8007af2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	3301      	adds	r3, #1
 8007af8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007afa:	68f8      	ldr	r0, [r7, #12]
 8007afc:	f7ff fa34 	bl	8006f68 <SWAPBYTE>
 8007b00:	4603      	mov	r3, r0
 8007b02:	461a      	mov	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	3301      	adds	r3, #1
 8007b0c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	3301      	adds	r3, #1
 8007b12:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	f7ff fa27 	bl	8006f68 <SWAPBYTE>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	80da      	strh	r2, [r3, #6]
}
 8007b22:	bf00      	nop
 8007b24:	3710      	adds	r7, #16
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b082      	sub	sp, #8
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
 8007b32:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b34:	2180      	movs	r1, #128	; 0x80
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 fcec 	bl	8008514 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007b3c:	2100      	movs	r1, #0
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 fce8 	bl	8008514 <USBD_LL_StallEP>
}
 8007b44:	bf00      	nop
 8007b46:	3708      	adds	r7, #8
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b086      	sub	sp, #24
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d036      	beq.n	8007bd0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007b66:	6938      	ldr	r0, [r7, #16]
 8007b68:	f000 f836 	bl	8007bd8 <USBD_GetLen>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	3301      	adds	r3, #1
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	005b      	lsls	r3, r3, #1
 8007b74:	b29a      	uxth	r2, r3
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007b7a:	7dfb      	ldrb	r3, [r7, #23]
 8007b7c:	68ba      	ldr	r2, [r7, #8]
 8007b7e:	4413      	add	r3, r2
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	7812      	ldrb	r2, [r2, #0]
 8007b84:	701a      	strb	r2, [r3, #0]
  idx++;
 8007b86:	7dfb      	ldrb	r3, [r7, #23]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007b8c:	7dfb      	ldrb	r3, [r7, #23]
 8007b8e:	68ba      	ldr	r2, [r7, #8]
 8007b90:	4413      	add	r3, r2
 8007b92:	2203      	movs	r2, #3
 8007b94:	701a      	strb	r2, [r3, #0]
  idx++;
 8007b96:	7dfb      	ldrb	r3, [r7, #23]
 8007b98:	3301      	adds	r3, #1
 8007b9a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007b9c:	e013      	b.n	8007bc6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007b9e:	7dfb      	ldrb	r3, [r7, #23]
 8007ba0:	68ba      	ldr	r2, [r7, #8]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	693a      	ldr	r2, [r7, #16]
 8007ba6:	7812      	ldrb	r2, [r2, #0]
 8007ba8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	3301      	adds	r3, #1
 8007bae:	613b      	str	r3, [r7, #16]
    idx++;
 8007bb0:	7dfb      	ldrb	r3, [r7, #23]
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007bb6:	7dfb      	ldrb	r3, [r7, #23]
 8007bb8:	68ba      	ldr	r2, [r7, #8]
 8007bba:	4413      	add	r3, r2
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	701a      	strb	r2, [r3, #0]
    idx++;
 8007bc0:	7dfb      	ldrb	r3, [r7, #23]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d1e7      	bne.n	8007b9e <USBD_GetString+0x52>
 8007bce:	e000      	b.n	8007bd2 <USBD_GetString+0x86>
    return;
 8007bd0:	bf00      	nop
  }
}
 8007bd2:	3718      	adds	r7, #24
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b085      	sub	sp, #20
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007be0:	2300      	movs	r3, #0
 8007be2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007be8:	e005      	b.n	8007bf6 <USBD_GetLen+0x1e>
  {
    len++;
 8007bea:	7bfb      	ldrb	r3, [r7, #15]
 8007bec:	3301      	adds	r3, #1
 8007bee:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d1f5      	bne.n	8007bea <USBD_GetLen+0x12>
  }

  return len;
 8007bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3714      	adds	r7, #20
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2202      	movs	r2, #2
 8007c1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	687a      	ldr	r2, [r7, #4]
 8007c24:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	68ba      	ldr	r2, [r7, #8]
 8007c30:	2100      	movs	r1, #0
 8007c32:	68f8      	ldr	r0, [r7, #12]
 8007c34:	f000 fcf7 	bl	8008626 <USBD_LL_Transmit>

  return USBD_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3710      	adds	r7, #16
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b084      	sub	sp, #16
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	60f8      	str	r0, [r7, #12]
 8007c4a:	60b9      	str	r1, [r7, #8]
 8007c4c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	68ba      	ldr	r2, [r7, #8]
 8007c52:	2100      	movs	r1, #0
 8007c54:	68f8      	ldr	r0, [r7, #12]
 8007c56:	f000 fce6 	bl	8008626 <USBD_LL_Transmit>

  return USBD_OK;
 8007c5a:	2300      	movs	r3, #0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3710      	adds	r7, #16
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2203      	movs	r2, #3
 8007c74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	68ba      	ldr	r2, [r7, #8]
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	68f8      	ldr	r0, [r7, #12]
 8007c90:	f000 fcea 	bl	8008668 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c94:	2300      	movs	r3, #0
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3710      	adds	r7, #16
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b084      	sub	sp, #16
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	60f8      	str	r0, [r7, #12]
 8007ca6:	60b9      	str	r1, [r7, #8]
 8007ca8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	68ba      	ldr	r2, [r7, #8]
 8007cae:	2100      	movs	r1, #0
 8007cb0:	68f8      	ldr	r0, [r7, #12]
 8007cb2:	f000 fcd9 	bl	8008668 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3710      	adds	r7, #16
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2204      	movs	r2, #4
 8007ccc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 fca5 	bl	8008626 <USBD_LL_Transmit>

  return USBD_OK;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3708      	adds	r7, #8
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b082      	sub	sp, #8
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2205      	movs	r2, #5
 8007cf2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	2100      	movs	r1, #0
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 fcb3 	bl	8008668 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d02:	2300      	movs	r3, #0
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3708      	adds	r7, #8
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007d10:	2200      	movs	r2, #0
 8007d12:	4912      	ldr	r1, [pc, #72]	; (8007d5c <MX_USB_DEVICE_Init+0x50>)
 8007d14:	4812      	ldr	r0, [pc, #72]	; (8007d60 <MX_USB_DEVICE_Init+0x54>)
 8007d16:	f7fe fd07 	bl	8006728 <USBD_Init>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d001      	beq.n	8007d24 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007d20:	f7f9 f93c 	bl	8000f9c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007d24:	490f      	ldr	r1, [pc, #60]	; (8007d64 <MX_USB_DEVICE_Init+0x58>)
 8007d26:	480e      	ldr	r0, [pc, #56]	; (8007d60 <MX_USB_DEVICE_Init+0x54>)
 8007d28:	f7fe fd2e 	bl	8006788 <USBD_RegisterClass>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d001      	beq.n	8007d36 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007d32:	f7f9 f933 	bl	8000f9c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007d36:	490c      	ldr	r1, [pc, #48]	; (8007d68 <MX_USB_DEVICE_Init+0x5c>)
 8007d38:	4809      	ldr	r0, [pc, #36]	; (8007d60 <MX_USB_DEVICE_Init+0x54>)
 8007d3a:	f7fe fc1f 	bl	800657c <USBD_CDC_RegisterInterface>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d001      	beq.n	8007d48 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007d44:	f7f9 f92a 	bl	8000f9c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007d48:	4805      	ldr	r0, [pc, #20]	; (8007d60 <MX_USB_DEVICE_Init+0x54>)
 8007d4a:	f7fe fd53 	bl	80067f4 <USBD_Start>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d001      	beq.n	8007d58 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007d54:	f7f9 f922 	bl	8000f9c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007d58:	bf00      	nop
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	200000e0 	.word	0x200000e0
 8007d60:	20000338 	.word	0x20000338
 8007d64:	2000004c 	.word	0x2000004c
 8007d68:	200000cc 	.word	0x200000cc

08007d6c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007d70:	2200      	movs	r2, #0
 8007d72:	4905      	ldr	r1, [pc, #20]	; (8007d88 <CDC_Init_FS+0x1c>)
 8007d74:	4805      	ldr	r0, [pc, #20]	; (8007d8c <CDC_Init_FS+0x20>)
 8007d76:	f7fe fc1b 	bl	80065b0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007d7a:	4905      	ldr	r1, [pc, #20]	; (8007d90 <CDC_Init_FS+0x24>)
 8007d7c:	4803      	ldr	r0, [pc, #12]	; (8007d8c <CDC_Init_FS+0x20>)
 8007d7e:	f7fe fc39 	bl	80065f4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007d82:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	bd80      	pop	{r7, pc}
 8007d88:	20000e14 	.word	0x20000e14
 8007d8c:	20000338 	.word	0x20000338
 8007d90:	20000614 	.word	0x20000614

08007d94 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007d94:	b480      	push	{r7}
 8007d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007d98:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b083      	sub	sp, #12
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	4603      	mov	r3, r0
 8007dac:	6039      	str	r1, [r7, #0]
 8007dae:	71fb      	strb	r3, [r7, #7]
 8007db0:	4613      	mov	r3, r2
 8007db2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007db4:	79fb      	ldrb	r3, [r7, #7]
 8007db6:	2b23      	cmp	r3, #35	; 0x23
 8007db8:	d84a      	bhi.n	8007e50 <CDC_Control_FS+0xac>
 8007dba:	a201      	add	r2, pc, #4	; (adr r2, 8007dc0 <CDC_Control_FS+0x1c>)
 8007dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc0:	08007e51 	.word	0x08007e51
 8007dc4:	08007e51 	.word	0x08007e51
 8007dc8:	08007e51 	.word	0x08007e51
 8007dcc:	08007e51 	.word	0x08007e51
 8007dd0:	08007e51 	.word	0x08007e51
 8007dd4:	08007e51 	.word	0x08007e51
 8007dd8:	08007e51 	.word	0x08007e51
 8007ddc:	08007e51 	.word	0x08007e51
 8007de0:	08007e51 	.word	0x08007e51
 8007de4:	08007e51 	.word	0x08007e51
 8007de8:	08007e51 	.word	0x08007e51
 8007dec:	08007e51 	.word	0x08007e51
 8007df0:	08007e51 	.word	0x08007e51
 8007df4:	08007e51 	.word	0x08007e51
 8007df8:	08007e51 	.word	0x08007e51
 8007dfc:	08007e51 	.word	0x08007e51
 8007e00:	08007e51 	.word	0x08007e51
 8007e04:	08007e51 	.word	0x08007e51
 8007e08:	08007e51 	.word	0x08007e51
 8007e0c:	08007e51 	.word	0x08007e51
 8007e10:	08007e51 	.word	0x08007e51
 8007e14:	08007e51 	.word	0x08007e51
 8007e18:	08007e51 	.word	0x08007e51
 8007e1c:	08007e51 	.word	0x08007e51
 8007e20:	08007e51 	.word	0x08007e51
 8007e24:	08007e51 	.word	0x08007e51
 8007e28:	08007e51 	.word	0x08007e51
 8007e2c:	08007e51 	.word	0x08007e51
 8007e30:	08007e51 	.word	0x08007e51
 8007e34:	08007e51 	.word	0x08007e51
 8007e38:	08007e51 	.word	0x08007e51
 8007e3c:	08007e51 	.word	0x08007e51
 8007e40:	08007e51 	.word	0x08007e51
 8007e44:	08007e51 	.word	0x08007e51
 8007e48:	08007e51 	.word	0x08007e51
 8007e4c:	08007e51 	.word	0x08007e51
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007e50:	bf00      	nop
  }

  return (USBD_OK);
 8007e52:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007e6a:	6879      	ldr	r1, [r7, #4]
 8007e6c:	480f      	ldr	r0, [pc, #60]	; (8007eac <CDC_Receive_FS+0x4c>)
 8007e6e:	f7fe fbc1 	bl	80065f4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007e72:	480e      	ldr	r0, [pc, #56]	; (8007eac <CDC_Receive_FS+0x4c>)
 8007e74:	f7fe fc22 	bl	80066bc <USBD_CDC_ReceivePacket>
  memset (buffer, '\0', 64);  // clear the buffer
 8007e78:	2240      	movs	r2, #64	; 0x40
 8007e7a:	2100      	movs	r1, #0
 8007e7c:	480c      	ldr	r0, [pc, #48]	; (8007eb0 <CDC_Receive_FS+0x50>)
 8007e7e:	f000 fca7 	bl	80087d0 <memset>
  uint8_t len = (uint8_t)*Len;
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	73fb      	strb	r3, [r7, #15]
  memcpy(buffer, Buf, len);  // copy the data to the buffer
 8007e88:	7bfb      	ldrb	r3, [r7, #15]
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	6879      	ldr	r1, [r7, #4]
 8007e8e:	4808      	ldr	r0, [pc, #32]	; (8007eb0 <CDC_Receive_FS+0x50>)
 8007e90:	f000 fc90 	bl	80087b4 <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 8007e94:	7bfb      	ldrb	r3, [r7, #15]
 8007e96:	461a      	mov	r2, r3
 8007e98:	2100      	movs	r1, #0
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 fc98 	bl	80087d0 <memset>
  return (USBD_OK);
 8007ea0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	20000338 	.word	0x20000338
 8007eb0:	200002e4 	.word	0x200002e4

08007eb4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007ec4:	4b0d      	ldr	r3, [pc, #52]	; (8007efc <CDC_Transmit_FS+0x48>)
 8007ec6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007eca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d001      	beq.n	8007eda <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e00b      	b.n	8007ef2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007eda:	887b      	ldrh	r3, [r7, #2]
 8007edc:	461a      	mov	r2, r3
 8007ede:	6879      	ldr	r1, [r7, #4]
 8007ee0:	4806      	ldr	r0, [pc, #24]	; (8007efc <CDC_Transmit_FS+0x48>)
 8007ee2:	f7fe fb65 	bl	80065b0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007ee6:	4805      	ldr	r0, [pc, #20]	; (8007efc <CDC_Transmit_FS+0x48>)
 8007ee8:	f7fe fba2 	bl	8006630 <USBD_CDC_TransmitPacket>
 8007eec:	4603      	mov	r3, r0
 8007eee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3710      	adds	r7, #16
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	20000338 	.word	0x20000338

08007f00 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b087      	sub	sp, #28
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	4613      	mov	r3, r2
 8007f0c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007f12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	371c      	adds	r7, #28
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr
	...

08007f24 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	6039      	str	r1, [r7, #0]
 8007f2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	2212      	movs	r2, #18
 8007f34:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007f36:	4b03      	ldr	r3, [pc, #12]	; (8007f44 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr
 8007f44:	200000fc 	.word	0x200000fc

08007f48 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	4603      	mov	r3, r0
 8007f50:	6039      	str	r1, [r7, #0]
 8007f52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	2204      	movs	r2, #4
 8007f58:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007f5a:	4b03      	ldr	r3, [pc, #12]	; (8007f68 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr
 8007f68:	20000110 	.word	0x20000110

08007f6c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	4603      	mov	r3, r0
 8007f74:	6039      	str	r1, [r7, #0]
 8007f76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f78:	79fb      	ldrb	r3, [r7, #7]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d105      	bne.n	8007f8a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007f7e:	683a      	ldr	r2, [r7, #0]
 8007f80:	4907      	ldr	r1, [pc, #28]	; (8007fa0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007f82:	4808      	ldr	r0, [pc, #32]	; (8007fa4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007f84:	f7ff fde2 	bl	8007b4c <USBD_GetString>
 8007f88:	e004      	b.n	8007f94 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007f8a:	683a      	ldr	r2, [r7, #0]
 8007f8c:	4904      	ldr	r1, [pc, #16]	; (8007fa0 <USBD_FS_ProductStrDescriptor+0x34>)
 8007f8e:	4805      	ldr	r0, [pc, #20]	; (8007fa4 <USBD_FS_ProductStrDescriptor+0x38>)
 8007f90:	f7ff fddc 	bl	8007b4c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f94:	4b02      	ldr	r3, [pc, #8]	; (8007fa0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3708      	adds	r7, #8
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	20001614 	.word	0x20001614
 8007fa4:	080089d8 	.word	0x080089d8

08007fa8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b082      	sub	sp, #8
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	4603      	mov	r3, r0
 8007fb0:	6039      	str	r1, [r7, #0]
 8007fb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007fb4:	683a      	ldr	r2, [r7, #0]
 8007fb6:	4904      	ldr	r1, [pc, #16]	; (8007fc8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007fb8:	4804      	ldr	r0, [pc, #16]	; (8007fcc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007fba:	f7ff fdc7 	bl	8007b4c <USBD_GetString>
  return USBD_StrDesc;
 8007fbe:	4b02      	ldr	r3, [pc, #8]	; (8007fc8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3708      	adds	r7, #8
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}
 8007fc8:	20001614 	.word	0x20001614
 8007fcc:	080089f0 	.word	0x080089f0

08007fd0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	6039      	str	r1, [r7, #0]
 8007fda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	221a      	movs	r2, #26
 8007fe0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007fe2:	f000 f843 	bl	800806c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007fe6:	4b02      	ldr	r3, [pc, #8]	; (8007ff0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3708      	adds	r7, #8
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}
 8007ff0:	20000114 	.word	0x20000114

08007ff4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	6039      	str	r1, [r7, #0]
 8007ffe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008000:	79fb      	ldrb	r3, [r7, #7]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d105      	bne.n	8008012 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008006:	683a      	ldr	r2, [r7, #0]
 8008008:	4907      	ldr	r1, [pc, #28]	; (8008028 <USBD_FS_ConfigStrDescriptor+0x34>)
 800800a:	4808      	ldr	r0, [pc, #32]	; (800802c <USBD_FS_ConfigStrDescriptor+0x38>)
 800800c:	f7ff fd9e 	bl	8007b4c <USBD_GetString>
 8008010:	e004      	b.n	800801c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008012:	683a      	ldr	r2, [r7, #0]
 8008014:	4904      	ldr	r1, [pc, #16]	; (8008028 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008016:	4805      	ldr	r0, [pc, #20]	; (800802c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008018:	f7ff fd98 	bl	8007b4c <USBD_GetString>
  }
  return USBD_StrDesc;
 800801c:	4b02      	ldr	r3, [pc, #8]	; (8008028 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800801e:	4618      	mov	r0, r3
 8008020:	3708      	adds	r7, #8
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop
 8008028:	20001614 	.word	0x20001614
 800802c:	08008a04 	.word	0x08008a04

08008030 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b082      	sub	sp, #8
 8008034:	af00      	add	r7, sp, #0
 8008036:	4603      	mov	r3, r0
 8008038:	6039      	str	r1, [r7, #0]
 800803a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800803c:	79fb      	ldrb	r3, [r7, #7]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d105      	bne.n	800804e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008042:	683a      	ldr	r2, [r7, #0]
 8008044:	4907      	ldr	r1, [pc, #28]	; (8008064 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008046:	4808      	ldr	r0, [pc, #32]	; (8008068 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008048:	f7ff fd80 	bl	8007b4c <USBD_GetString>
 800804c:	e004      	b.n	8008058 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800804e:	683a      	ldr	r2, [r7, #0]
 8008050:	4904      	ldr	r1, [pc, #16]	; (8008064 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008052:	4805      	ldr	r0, [pc, #20]	; (8008068 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008054:	f7ff fd7a 	bl	8007b4c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008058:	4b02      	ldr	r3, [pc, #8]	; (8008064 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800805a:	4618      	mov	r0, r3
 800805c:	3708      	adds	r7, #8
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	20001614 	.word	0x20001614
 8008068:	08008a10 	.word	0x08008a10

0800806c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008072:	4b0f      	ldr	r3, [pc, #60]	; (80080b0 <Get_SerialNum+0x44>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008078:	4b0e      	ldr	r3, [pc, #56]	; (80080b4 <Get_SerialNum+0x48>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800807e:	4b0e      	ldr	r3, [pc, #56]	; (80080b8 <Get_SerialNum+0x4c>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008084:	68fa      	ldr	r2, [r7, #12]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	4413      	add	r3, r2
 800808a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d009      	beq.n	80080a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008092:	2208      	movs	r2, #8
 8008094:	4909      	ldr	r1, [pc, #36]	; (80080bc <Get_SerialNum+0x50>)
 8008096:	68f8      	ldr	r0, [r7, #12]
 8008098:	f000 f814 	bl	80080c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800809c:	2204      	movs	r2, #4
 800809e:	4908      	ldr	r1, [pc, #32]	; (80080c0 <Get_SerialNum+0x54>)
 80080a0:	68b8      	ldr	r0, [r7, #8]
 80080a2:	f000 f80f 	bl	80080c4 <IntToUnicode>
  }
}
 80080a6:	bf00      	nop
 80080a8:	3710      	adds	r7, #16
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop
 80080b0:	1fff7a10 	.word	0x1fff7a10
 80080b4:	1fff7a14 	.word	0x1fff7a14
 80080b8:	1fff7a18 	.word	0x1fff7a18
 80080bc:	20000116 	.word	0x20000116
 80080c0:	20000126 	.word	0x20000126

080080c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b087      	sub	sp, #28
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	4613      	mov	r3, r2
 80080d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80080d2:	2300      	movs	r3, #0
 80080d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80080d6:	2300      	movs	r3, #0
 80080d8:	75fb      	strb	r3, [r7, #23]
 80080da:	e027      	b.n	800812c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	0f1b      	lsrs	r3, r3, #28
 80080e0:	2b09      	cmp	r3, #9
 80080e2:	d80b      	bhi.n	80080fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	0f1b      	lsrs	r3, r3, #28
 80080e8:	b2da      	uxtb	r2, r3
 80080ea:	7dfb      	ldrb	r3, [r7, #23]
 80080ec:	005b      	lsls	r3, r3, #1
 80080ee:	4619      	mov	r1, r3
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	440b      	add	r3, r1
 80080f4:	3230      	adds	r2, #48	; 0x30
 80080f6:	b2d2      	uxtb	r2, r2
 80080f8:	701a      	strb	r2, [r3, #0]
 80080fa:	e00a      	b.n	8008112 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	0f1b      	lsrs	r3, r3, #28
 8008100:	b2da      	uxtb	r2, r3
 8008102:	7dfb      	ldrb	r3, [r7, #23]
 8008104:	005b      	lsls	r3, r3, #1
 8008106:	4619      	mov	r1, r3
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	440b      	add	r3, r1
 800810c:	3237      	adds	r2, #55	; 0x37
 800810e:	b2d2      	uxtb	r2, r2
 8008110:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	011b      	lsls	r3, r3, #4
 8008116:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008118:	7dfb      	ldrb	r3, [r7, #23]
 800811a:	005b      	lsls	r3, r3, #1
 800811c:	3301      	adds	r3, #1
 800811e:	68ba      	ldr	r2, [r7, #8]
 8008120:	4413      	add	r3, r2
 8008122:	2200      	movs	r2, #0
 8008124:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008126:	7dfb      	ldrb	r3, [r7, #23]
 8008128:	3301      	adds	r3, #1
 800812a:	75fb      	strb	r3, [r7, #23]
 800812c:	7dfa      	ldrb	r2, [r7, #23]
 800812e:	79fb      	ldrb	r3, [r7, #7]
 8008130:	429a      	cmp	r2, r3
 8008132:	d3d3      	bcc.n	80080dc <IntToUnicode+0x18>
  }
}
 8008134:	bf00      	nop
 8008136:	bf00      	nop
 8008138:	371c      	adds	r7, #28
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr
	...

08008144 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b08a      	sub	sp, #40	; 0x28
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800814c:	f107 0314 	add.w	r3, r7, #20
 8008150:	2200      	movs	r2, #0
 8008152:	601a      	str	r2, [r3, #0]
 8008154:	605a      	str	r2, [r3, #4]
 8008156:	609a      	str	r2, [r3, #8]
 8008158:	60da      	str	r2, [r3, #12]
 800815a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008164:	d13a      	bne.n	80081dc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008166:	2300      	movs	r3, #0
 8008168:	613b      	str	r3, [r7, #16]
 800816a:	4b1e      	ldr	r3, [pc, #120]	; (80081e4 <HAL_PCD_MspInit+0xa0>)
 800816c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800816e:	4a1d      	ldr	r2, [pc, #116]	; (80081e4 <HAL_PCD_MspInit+0xa0>)
 8008170:	f043 0301 	orr.w	r3, r3, #1
 8008174:	6313      	str	r3, [r2, #48]	; 0x30
 8008176:	4b1b      	ldr	r3, [pc, #108]	; (80081e4 <HAL_PCD_MspInit+0xa0>)
 8008178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800817a:	f003 0301 	and.w	r3, r3, #1
 800817e:	613b      	str	r3, [r7, #16]
 8008180:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008182:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008186:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008188:	2302      	movs	r3, #2
 800818a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800818c:	2300      	movs	r3, #0
 800818e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008190:	2303      	movs	r3, #3
 8008192:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008194:	230a      	movs	r3, #10
 8008196:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008198:	f107 0314 	add.w	r3, r7, #20
 800819c:	4619      	mov	r1, r3
 800819e:	4812      	ldr	r0, [pc, #72]	; (80081e8 <HAL_PCD_MspInit+0xa4>)
 80081a0:	f7f9 fc6e 	bl	8001a80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80081a4:	4b0f      	ldr	r3, [pc, #60]	; (80081e4 <HAL_PCD_MspInit+0xa0>)
 80081a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081a8:	4a0e      	ldr	r2, [pc, #56]	; (80081e4 <HAL_PCD_MspInit+0xa0>)
 80081aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081ae:	6353      	str	r3, [r2, #52]	; 0x34
 80081b0:	2300      	movs	r3, #0
 80081b2:	60fb      	str	r3, [r7, #12]
 80081b4:	4b0b      	ldr	r3, [pc, #44]	; (80081e4 <HAL_PCD_MspInit+0xa0>)
 80081b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081b8:	4a0a      	ldr	r2, [pc, #40]	; (80081e4 <HAL_PCD_MspInit+0xa0>)
 80081ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80081be:	6453      	str	r3, [r2, #68]	; 0x44
 80081c0:	4b08      	ldr	r3, [pc, #32]	; (80081e4 <HAL_PCD_MspInit+0xa0>)
 80081c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081c8:	60fb      	str	r3, [r7, #12]
 80081ca:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80081cc:	2200      	movs	r2, #0
 80081ce:	2100      	movs	r1, #0
 80081d0:	2043      	movs	r0, #67	; 0x43
 80081d2:	f7f9 fc1e 	bl	8001a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80081d6:	2043      	movs	r0, #67	; 0x43
 80081d8:	f7f9 fc37 	bl	8001a4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80081dc:	bf00      	nop
 80081de:	3728      	adds	r7, #40	; 0x28
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	40023800 	.word	0x40023800
 80081e8:	40020000 	.word	0x40020000

080081ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008200:	4619      	mov	r1, r3
 8008202:	4610      	mov	r0, r2
 8008204:	f7fe fb43 	bl	800688e <USBD_LL_SetupStage>
}
 8008208:	bf00      	nop
 800820a:	3708      	adds	r7, #8
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}

08008210 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	460b      	mov	r3, r1
 800821a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008222:	78fa      	ldrb	r2, [r7, #3]
 8008224:	6879      	ldr	r1, [r7, #4]
 8008226:	4613      	mov	r3, r2
 8008228:	00db      	lsls	r3, r3, #3
 800822a:	4413      	add	r3, r2
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	440b      	add	r3, r1
 8008230:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	78fb      	ldrb	r3, [r7, #3]
 8008238:	4619      	mov	r1, r3
 800823a:	f7fe fb7d 	bl	8006938 <USBD_LL_DataOutStage>
}
 800823e:	bf00      	nop
 8008240:	3708      	adds	r7, #8
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008246:	b580      	push	{r7, lr}
 8008248:	b082      	sub	sp, #8
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]
 800824e:	460b      	mov	r3, r1
 8008250:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008258:	78fa      	ldrb	r2, [r7, #3]
 800825a:	6879      	ldr	r1, [r7, #4]
 800825c:	4613      	mov	r3, r2
 800825e:	00db      	lsls	r3, r3, #3
 8008260:	4413      	add	r3, r2
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	440b      	add	r3, r1
 8008266:	334c      	adds	r3, #76	; 0x4c
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	78fb      	ldrb	r3, [r7, #3]
 800826c:	4619      	mov	r1, r3
 800826e:	f7fe fc16 	bl	8006a9e <USBD_LL_DataInStage>
}
 8008272:	bf00      	nop
 8008274:	3708      	adds	r7, #8
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800827a:	b580      	push	{r7, lr}
 800827c:	b082      	sub	sp, #8
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008288:	4618      	mov	r0, r3
 800828a:	f7fe fd4a 	bl	8006d22 <USBD_LL_SOF>
}
 800828e:	bf00      	nop
 8008290:	3708      	adds	r7, #8
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008296:	b580      	push	{r7, lr}
 8008298:	b084      	sub	sp, #16
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800829e:	2301      	movs	r3, #1
 80082a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	68db      	ldr	r3, [r3, #12]
 80082a6:	2b02      	cmp	r3, #2
 80082a8:	d001      	beq.n	80082ae <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80082aa:	f7f8 fe77 	bl	8000f9c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80082b4:	7bfa      	ldrb	r2, [r7, #15]
 80082b6:	4611      	mov	r1, r2
 80082b8:	4618      	mov	r0, r3
 80082ba:	f7fe fcf4 	bl	8006ca6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80082c4:	4618      	mov	r0, r3
 80082c6:	f7fe fc9c 	bl	8006c02 <USBD_LL_Reset>
}
 80082ca:	bf00      	nop
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
	...

080082d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7fe fcef 	bl	8006cc6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	6812      	ldr	r2, [r2, #0]
 80082f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80082fa:	f043 0301 	orr.w	r3, r3, #1
 80082fe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6a1b      	ldr	r3, [r3, #32]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d005      	beq.n	8008314 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008308:	4b04      	ldr	r3, [pc, #16]	; (800831c <HAL_PCD_SuspendCallback+0x48>)
 800830a:	691b      	ldr	r3, [r3, #16]
 800830c:	4a03      	ldr	r2, [pc, #12]	; (800831c <HAL_PCD_SuspendCallback+0x48>)
 800830e:	f043 0306 	orr.w	r3, r3, #6
 8008312:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008314:	bf00      	nop
 8008316:	3708      	adds	r7, #8
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}
 800831c:	e000ed00 	.word	0xe000ed00

08008320 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800832e:	4618      	mov	r0, r3
 8008330:	f7fe fcdf 	bl	8006cf2 <USBD_LL_Resume>
}
 8008334:	bf00      	nop
 8008336:	3708      	adds	r7, #8
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	460b      	mov	r3, r1
 8008346:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800834e:	78fa      	ldrb	r2, [r7, #3]
 8008350:	4611      	mov	r1, r2
 8008352:	4618      	mov	r0, r3
 8008354:	f7fe fd37 	bl	8006dc6 <USBD_LL_IsoOUTIncomplete>
}
 8008358:	bf00      	nop
 800835a:	3708      	adds	r7, #8
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b082      	sub	sp, #8
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	460b      	mov	r3, r1
 800836a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008372:	78fa      	ldrb	r2, [r7, #3]
 8008374:	4611      	mov	r1, r2
 8008376:	4618      	mov	r0, r3
 8008378:	f7fe fcf3 	bl	8006d62 <USBD_LL_IsoINIncomplete>
}
 800837c:	bf00      	nop
 800837e:	3708      	adds	r7, #8
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}

08008384 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b082      	sub	sp, #8
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008392:	4618      	mov	r0, r3
 8008394:	f7fe fd49 	bl	8006e2a <USBD_LL_DevConnected>
}
 8008398:	bf00      	nop
 800839a:	3708      	adds	r7, #8
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80083ae:	4618      	mov	r0, r3
 80083b0:	f7fe fd46 	bl	8006e40 <USBD_LL_DevDisconnected>
}
 80083b4:	bf00      	nop
 80083b6:	3708      	adds	r7, #8
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d13c      	bne.n	8008446 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80083cc:	4a20      	ldr	r2, [pc, #128]	; (8008450 <USBD_LL_Init+0x94>)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	4a1e      	ldr	r2, [pc, #120]	; (8008450 <USBD_LL_Init+0x94>)
 80083d8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80083dc:	4b1c      	ldr	r3, [pc, #112]	; (8008450 <USBD_LL_Init+0x94>)
 80083de:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80083e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80083e4:	4b1a      	ldr	r3, [pc, #104]	; (8008450 <USBD_LL_Init+0x94>)
 80083e6:	2204      	movs	r2, #4
 80083e8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80083ea:	4b19      	ldr	r3, [pc, #100]	; (8008450 <USBD_LL_Init+0x94>)
 80083ec:	2202      	movs	r2, #2
 80083ee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80083f0:	4b17      	ldr	r3, [pc, #92]	; (8008450 <USBD_LL_Init+0x94>)
 80083f2:	2200      	movs	r2, #0
 80083f4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80083f6:	4b16      	ldr	r3, [pc, #88]	; (8008450 <USBD_LL_Init+0x94>)
 80083f8:	2202      	movs	r2, #2
 80083fa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80083fc:	4b14      	ldr	r3, [pc, #80]	; (8008450 <USBD_LL_Init+0x94>)
 80083fe:	2200      	movs	r2, #0
 8008400:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008402:	4b13      	ldr	r3, [pc, #76]	; (8008450 <USBD_LL_Init+0x94>)
 8008404:	2200      	movs	r2, #0
 8008406:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008408:	4b11      	ldr	r3, [pc, #68]	; (8008450 <USBD_LL_Init+0x94>)
 800840a:	2200      	movs	r2, #0
 800840c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800840e:	4b10      	ldr	r3, [pc, #64]	; (8008450 <USBD_LL_Init+0x94>)
 8008410:	2200      	movs	r2, #0
 8008412:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008414:	4b0e      	ldr	r3, [pc, #56]	; (8008450 <USBD_LL_Init+0x94>)
 8008416:	2200      	movs	r2, #0
 8008418:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800841a:	480d      	ldr	r0, [pc, #52]	; (8008450 <USBD_LL_Init+0x94>)
 800841c:	f7f9 fcfe 	bl	8001e1c <HAL_PCD_Init>
 8008420:	4603      	mov	r3, r0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d001      	beq.n	800842a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008426:	f7f8 fdb9 	bl	8000f9c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800842a:	2180      	movs	r1, #128	; 0x80
 800842c:	4808      	ldr	r0, [pc, #32]	; (8008450 <USBD_LL_Init+0x94>)
 800842e:	f7fa ff56 	bl	80032de <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008432:	2240      	movs	r2, #64	; 0x40
 8008434:	2100      	movs	r1, #0
 8008436:	4806      	ldr	r0, [pc, #24]	; (8008450 <USBD_LL_Init+0x94>)
 8008438:	f7fa ff0a 	bl	8003250 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800843c:	2280      	movs	r2, #128	; 0x80
 800843e:	2101      	movs	r1, #1
 8008440:	4803      	ldr	r0, [pc, #12]	; (8008450 <USBD_LL_Init+0x94>)
 8008442:	f7fa ff05 	bl	8003250 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008446:	2300      	movs	r3, #0
}
 8008448:	4618      	mov	r0, r3
 800844a:	3708      	adds	r7, #8
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}
 8008450:	20001814 	.word	0x20001814

08008454 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800845c:	2300      	movs	r3, #0
 800845e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008460:	2300      	movs	r3, #0
 8008462:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800846a:	4618      	mov	r0, r3
 800846c:	f7f9 fdf3 	bl	8002056 <HAL_PCD_Start>
 8008470:	4603      	mov	r3, r0
 8008472:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008474:	7bfb      	ldrb	r3, [r7, #15]
 8008476:	4618      	mov	r0, r3
 8008478:	f000 f942 	bl	8008700 <USBD_Get_USB_Status>
 800847c:	4603      	mov	r3, r0
 800847e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008480:	7bbb      	ldrb	r3, [r7, #14]
}
 8008482:	4618      	mov	r0, r3
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}

0800848a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800848a:	b580      	push	{r7, lr}
 800848c:	b084      	sub	sp, #16
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
 8008492:	4608      	mov	r0, r1
 8008494:	4611      	mov	r1, r2
 8008496:	461a      	mov	r2, r3
 8008498:	4603      	mov	r3, r0
 800849a:	70fb      	strb	r3, [r7, #3]
 800849c:	460b      	mov	r3, r1
 800849e:	70bb      	strb	r3, [r7, #2]
 80084a0:	4613      	mov	r3, r2
 80084a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084a4:	2300      	movs	r3, #0
 80084a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084a8:	2300      	movs	r3, #0
 80084aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80084b2:	78bb      	ldrb	r3, [r7, #2]
 80084b4:	883a      	ldrh	r2, [r7, #0]
 80084b6:	78f9      	ldrb	r1, [r7, #3]
 80084b8:	f7fa fac4 	bl	8002a44 <HAL_PCD_EP_Open>
 80084bc:	4603      	mov	r3, r0
 80084be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084c0:	7bfb      	ldrb	r3, [r7, #15]
 80084c2:	4618      	mov	r0, r3
 80084c4:	f000 f91c 	bl	8008700 <USBD_Get_USB_Status>
 80084c8:	4603      	mov	r3, r0
 80084ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}

080084d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b084      	sub	sp, #16
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
 80084de:	460b      	mov	r3, r1
 80084e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084e2:	2300      	movs	r3, #0
 80084e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084e6:	2300      	movs	r3, #0
 80084e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80084f0:	78fa      	ldrb	r2, [r7, #3]
 80084f2:	4611      	mov	r1, r2
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7fa fb0d 	bl	8002b14 <HAL_PCD_EP_Close>
 80084fa:	4603      	mov	r3, r0
 80084fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084fe:	7bfb      	ldrb	r3, [r7, #15]
 8008500:	4618      	mov	r0, r3
 8008502:	f000 f8fd 	bl	8008700 <USBD_Get_USB_Status>
 8008506:	4603      	mov	r3, r0
 8008508:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800850a:	7bbb      	ldrb	r3, [r7, #14]
}
 800850c:	4618      	mov	r0, r3
 800850e:	3710      	adds	r7, #16
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b084      	sub	sp, #16
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	460b      	mov	r3, r1
 800851e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008520:	2300      	movs	r3, #0
 8008522:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008524:	2300      	movs	r3, #0
 8008526:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800852e:	78fa      	ldrb	r2, [r7, #3]
 8008530:	4611      	mov	r1, r2
 8008532:	4618      	mov	r0, r3
 8008534:	f7fa fbe5 	bl	8002d02 <HAL_PCD_EP_SetStall>
 8008538:	4603      	mov	r3, r0
 800853a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800853c:	7bfb      	ldrb	r3, [r7, #15]
 800853e:	4618      	mov	r0, r3
 8008540:	f000 f8de 	bl	8008700 <USBD_Get_USB_Status>
 8008544:	4603      	mov	r3, r0
 8008546:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008548:	7bbb      	ldrb	r3, [r7, #14]
}
 800854a:	4618      	mov	r0, r3
 800854c:	3710      	adds	r7, #16
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}

08008552 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008552:	b580      	push	{r7, lr}
 8008554:	b084      	sub	sp, #16
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
 800855a:	460b      	mov	r3, r1
 800855c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800855e:	2300      	movs	r3, #0
 8008560:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008562:	2300      	movs	r3, #0
 8008564:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800856c:	78fa      	ldrb	r2, [r7, #3]
 800856e:	4611      	mov	r1, r2
 8008570:	4618      	mov	r0, r3
 8008572:	f7fa fc2a 	bl	8002dca <HAL_PCD_EP_ClrStall>
 8008576:	4603      	mov	r3, r0
 8008578:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800857a:	7bfb      	ldrb	r3, [r7, #15]
 800857c:	4618      	mov	r0, r3
 800857e:	f000 f8bf 	bl	8008700 <USBD_Get_USB_Status>
 8008582:	4603      	mov	r3, r0
 8008584:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008586:	7bbb      	ldrb	r3, [r7, #14]
}
 8008588:	4618      	mov	r0, r3
 800858a:	3710      	adds	r7, #16
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008590:	b480      	push	{r7}
 8008592:	b085      	sub	sp, #20
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	460b      	mov	r3, r1
 800859a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80085a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80085a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	da0b      	bge.n	80085c4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80085ac:	78fb      	ldrb	r3, [r7, #3]
 80085ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085b2:	68f9      	ldr	r1, [r7, #12]
 80085b4:	4613      	mov	r3, r2
 80085b6:	00db      	lsls	r3, r3, #3
 80085b8:	4413      	add	r3, r2
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	440b      	add	r3, r1
 80085be:	333e      	adds	r3, #62	; 0x3e
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	e00b      	b.n	80085dc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80085c4:	78fb      	ldrb	r3, [r7, #3]
 80085c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085ca:	68f9      	ldr	r1, [r7, #12]
 80085cc:	4613      	mov	r3, r2
 80085ce:	00db      	lsls	r3, r3, #3
 80085d0:	4413      	add	r3, r2
 80085d2:	009b      	lsls	r3, r3, #2
 80085d4:	440b      	add	r3, r1
 80085d6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80085da:	781b      	ldrb	r3, [r3, #0]
  }
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3714      	adds	r7, #20
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
 80085f0:	460b      	mov	r3, r1
 80085f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085f4:	2300      	movs	r3, #0
 80085f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085f8:	2300      	movs	r3, #0
 80085fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008602:	78fa      	ldrb	r2, [r7, #3]
 8008604:	4611      	mov	r1, r2
 8008606:	4618      	mov	r0, r3
 8008608:	f7fa f9f7 	bl	80029fa <HAL_PCD_SetAddress>
 800860c:	4603      	mov	r3, r0
 800860e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008610:	7bfb      	ldrb	r3, [r7, #15]
 8008612:	4618      	mov	r0, r3
 8008614:	f000 f874 	bl	8008700 <USBD_Get_USB_Status>
 8008618:	4603      	mov	r3, r0
 800861a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800861c:	7bbb      	ldrb	r3, [r7, #14]
}
 800861e:	4618      	mov	r0, r3
 8008620:	3710      	adds	r7, #16
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}

08008626 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008626:	b580      	push	{r7, lr}
 8008628:	b086      	sub	sp, #24
 800862a:	af00      	add	r7, sp, #0
 800862c:	60f8      	str	r0, [r7, #12]
 800862e:	607a      	str	r2, [r7, #4]
 8008630:	603b      	str	r3, [r7, #0]
 8008632:	460b      	mov	r3, r1
 8008634:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008636:	2300      	movs	r3, #0
 8008638:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800863a:	2300      	movs	r3, #0
 800863c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008644:	7af9      	ldrb	r1, [r7, #11]
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	f7fa fb10 	bl	8002c6e <HAL_PCD_EP_Transmit>
 800864e:	4603      	mov	r3, r0
 8008650:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008652:	7dfb      	ldrb	r3, [r7, #23]
 8008654:	4618      	mov	r0, r3
 8008656:	f000 f853 	bl	8008700 <USBD_Get_USB_Status>
 800865a:	4603      	mov	r3, r0
 800865c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800865e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008660:	4618      	mov	r0, r3
 8008662:	3718      	adds	r7, #24
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}

08008668 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b086      	sub	sp, #24
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	607a      	str	r2, [r7, #4]
 8008672:	603b      	str	r3, [r7, #0]
 8008674:	460b      	mov	r3, r1
 8008676:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008678:	2300      	movs	r3, #0
 800867a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800867c:	2300      	movs	r3, #0
 800867e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008686:	7af9      	ldrb	r1, [r7, #11]
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	f7fa fa8c 	bl	8002ba8 <HAL_PCD_EP_Receive>
 8008690:	4603      	mov	r3, r0
 8008692:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008694:	7dfb      	ldrb	r3, [r7, #23]
 8008696:	4618      	mov	r0, r3
 8008698:	f000 f832 	bl	8008700 <USBD_Get_USB_Status>
 800869c:	4603      	mov	r3, r0
 800869e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80086a0:	7dbb      	ldrb	r3, [r7, #22]
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3718      	adds	r7, #24
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}

080086aa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086aa:	b580      	push	{r7, lr}
 80086ac:	b082      	sub	sp, #8
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
 80086b2:	460b      	mov	r3, r1
 80086b4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80086bc:	78fa      	ldrb	r2, [r7, #3]
 80086be:	4611      	mov	r1, r2
 80086c0:	4618      	mov	r0, r3
 80086c2:	f7fa fabc 	bl	8002c3e <HAL_PCD_EP_GetRxCount>
 80086c6:	4603      	mov	r3, r0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3708      	adds	r7, #8
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b083      	sub	sp, #12
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80086d8:	4b03      	ldr	r3, [pc, #12]	; (80086e8 <USBD_static_malloc+0x18>)
}
 80086da:	4618      	mov	r0, r3
 80086dc:	370c      	adds	r7, #12
 80086de:	46bd      	mov	sp, r7
 80086e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e4:	4770      	bx	lr
 80086e6:	bf00      	nop
 80086e8:	20001d20 	.word	0x20001d20

080086ec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]

}
 80086f4:	bf00      	nop
 80086f6:	370c      	adds	r7, #12
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008700:	b480      	push	{r7}
 8008702:	b085      	sub	sp, #20
 8008704:	af00      	add	r7, sp, #0
 8008706:	4603      	mov	r3, r0
 8008708:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800870a:	2300      	movs	r3, #0
 800870c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800870e:	79fb      	ldrb	r3, [r7, #7]
 8008710:	2b03      	cmp	r3, #3
 8008712:	d817      	bhi.n	8008744 <USBD_Get_USB_Status+0x44>
 8008714:	a201      	add	r2, pc, #4	; (adr r2, 800871c <USBD_Get_USB_Status+0x1c>)
 8008716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800871a:	bf00      	nop
 800871c:	0800872d 	.word	0x0800872d
 8008720:	08008733 	.word	0x08008733
 8008724:	08008739 	.word	0x08008739
 8008728:	0800873f 	.word	0x0800873f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800872c:	2300      	movs	r3, #0
 800872e:	73fb      	strb	r3, [r7, #15]
    break;
 8008730:	e00b      	b.n	800874a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008732:	2303      	movs	r3, #3
 8008734:	73fb      	strb	r3, [r7, #15]
    break;
 8008736:	e008      	b.n	800874a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008738:	2301      	movs	r3, #1
 800873a:	73fb      	strb	r3, [r7, #15]
    break;
 800873c:	e005      	b.n	800874a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800873e:	2303      	movs	r3, #3
 8008740:	73fb      	strb	r3, [r7, #15]
    break;
 8008742:	e002      	b.n	800874a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008744:	2303      	movs	r3, #3
 8008746:	73fb      	strb	r3, [r7, #15]
    break;
 8008748:	bf00      	nop
  }
  return usb_status;
 800874a:	7bfb      	ldrb	r3, [r7, #15]
}
 800874c:	4618      	mov	r0, r3
 800874e:	3714      	adds	r7, #20
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr

08008758 <atoi>:
 8008758:	220a      	movs	r2, #10
 800875a:	2100      	movs	r1, #0
 800875c:	f000 b8d8 	b.w	8008910 <strtol>

08008760 <__errno>:
 8008760:	4b01      	ldr	r3, [pc, #4]	; (8008768 <__errno+0x8>)
 8008762:	6818      	ldr	r0, [r3, #0]
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop
 8008768:	20000130 	.word	0x20000130

0800876c <__libc_init_array>:
 800876c:	b570      	push	{r4, r5, r6, lr}
 800876e:	4d0d      	ldr	r5, [pc, #52]	; (80087a4 <__libc_init_array+0x38>)
 8008770:	4c0d      	ldr	r4, [pc, #52]	; (80087a8 <__libc_init_array+0x3c>)
 8008772:	1b64      	subs	r4, r4, r5
 8008774:	10a4      	asrs	r4, r4, #2
 8008776:	2600      	movs	r6, #0
 8008778:	42a6      	cmp	r6, r4
 800877a:	d109      	bne.n	8008790 <__libc_init_array+0x24>
 800877c:	4d0b      	ldr	r5, [pc, #44]	; (80087ac <__libc_init_array+0x40>)
 800877e:	4c0c      	ldr	r4, [pc, #48]	; (80087b0 <__libc_init_array+0x44>)
 8008780:	f000 f8d0 	bl	8008924 <_init>
 8008784:	1b64      	subs	r4, r4, r5
 8008786:	10a4      	asrs	r4, r4, #2
 8008788:	2600      	movs	r6, #0
 800878a:	42a6      	cmp	r6, r4
 800878c:	d105      	bne.n	800879a <__libc_init_array+0x2e>
 800878e:	bd70      	pop	{r4, r5, r6, pc}
 8008790:	f855 3b04 	ldr.w	r3, [r5], #4
 8008794:	4798      	blx	r3
 8008796:	3601      	adds	r6, #1
 8008798:	e7ee      	b.n	8008778 <__libc_init_array+0xc>
 800879a:	f855 3b04 	ldr.w	r3, [r5], #4
 800879e:	4798      	blx	r3
 80087a0:	3601      	adds	r6, #1
 80087a2:	e7f2      	b.n	800878a <__libc_init_array+0x1e>
 80087a4:	08008b3c 	.word	0x08008b3c
 80087a8:	08008b3c 	.word	0x08008b3c
 80087ac:	08008b3c 	.word	0x08008b3c
 80087b0:	08008b40 	.word	0x08008b40

080087b4 <memcpy>:
 80087b4:	440a      	add	r2, r1
 80087b6:	4291      	cmp	r1, r2
 80087b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80087bc:	d100      	bne.n	80087c0 <memcpy+0xc>
 80087be:	4770      	bx	lr
 80087c0:	b510      	push	{r4, lr}
 80087c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087ca:	4291      	cmp	r1, r2
 80087cc:	d1f9      	bne.n	80087c2 <memcpy+0xe>
 80087ce:	bd10      	pop	{r4, pc}

080087d0 <memset>:
 80087d0:	4402      	add	r2, r0
 80087d2:	4603      	mov	r3, r0
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d100      	bne.n	80087da <memset+0xa>
 80087d8:	4770      	bx	lr
 80087da:	f803 1b01 	strb.w	r1, [r3], #1
 80087de:	e7f9      	b.n	80087d4 <memset+0x4>

080087e0 <strstr>:
 80087e0:	780a      	ldrb	r2, [r1, #0]
 80087e2:	b570      	push	{r4, r5, r6, lr}
 80087e4:	b96a      	cbnz	r2, 8008802 <strstr+0x22>
 80087e6:	bd70      	pop	{r4, r5, r6, pc}
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d109      	bne.n	8008800 <strstr+0x20>
 80087ec:	460c      	mov	r4, r1
 80087ee:	4605      	mov	r5, r0
 80087f0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d0f6      	beq.n	80087e6 <strstr+0x6>
 80087f8:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80087fc:	429e      	cmp	r6, r3
 80087fe:	d0f7      	beq.n	80087f0 <strstr+0x10>
 8008800:	3001      	adds	r0, #1
 8008802:	7803      	ldrb	r3, [r0, #0]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d1ef      	bne.n	80087e8 <strstr+0x8>
 8008808:	4618      	mov	r0, r3
 800880a:	e7ec      	b.n	80087e6 <strstr+0x6>

0800880c <_strtol_l.constprop.0>:
 800880c:	2b01      	cmp	r3, #1
 800880e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008812:	d001      	beq.n	8008818 <_strtol_l.constprop.0+0xc>
 8008814:	2b24      	cmp	r3, #36	; 0x24
 8008816:	d906      	bls.n	8008826 <_strtol_l.constprop.0+0x1a>
 8008818:	f7ff ffa2 	bl	8008760 <__errno>
 800881c:	2316      	movs	r3, #22
 800881e:	6003      	str	r3, [r0, #0]
 8008820:	2000      	movs	r0, #0
 8008822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008826:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800890c <_strtol_l.constprop.0+0x100>
 800882a:	460d      	mov	r5, r1
 800882c:	462e      	mov	r6, r5
 800882e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008832:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008836:	f017 0708 	ands.w	r7, r7, #8
 800883a:	d1f7      	bne.n	800882c <_strtol_l.constprop.0+0x20>
 800883c:	2c2d      	cmp	r4, #45	; 0x2d
 800883e:	d132      	bne.n	80088a6 <_strtol_l.constprop.0+0x9a>
 8008840:	782c      	ldrb	r4, [r5, #0]
 8008842:	2701      	movs	r7, #1
 8008844:	1cb5      	adds	r5, r6, #2
 8008846:	2b00      	cmp	r3, #0
 8008848:	d05b      	beq.n	8008902 <_strtol_l.constprop.0+0xf6>
 800884a:	2b10      	cmp	r3, #16
 800884c:	d109      	bne.n	8008862 <_strtol_l.constprop.0+0x56>
 800884e:	2c30      	cmp	r4, #48	; 0x30
 8008850:	d107      	bne.n	8008862 <_strtol_l.constprop.0+0x56>
 8008852:	782c      	ldrb	r4, [r5, #0]
 8008854:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008858:	2c58      	cmp	r4, #88	; 0x58
 800885a:	d14d      	bne.n	80088f8 <_strtol_l.constprop.0+0xec>
 800885c:	786c      	ldrb	r4, [r5, #1]
 800885e:	2310      	movs	r3, #16
 8008860:	3502      	adds	r5, #2
 8008862:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008866:	f108 38ff 	add.w	r8, r8, #4294967295
 800886a:	f04f 0c00 	mov.w	ip, #0
 800886e:	fbb8 f9f3 	udiv	r9, r8, r3
 8008872:	4666      	mov	r6, ip
 8008874:	fb03 8a19 	mls	sl, r3, r9, r8
 8008878:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800887c:	f1be 0f09 	cmp.w	lr, #9
 8008880:	d816      	bhi.n	80088b0 <_strtol_l.constprop.0+0xa4>
 8008882:	4674      	mov	r4, lr
 8008884:	42a3      	cmp	r3, r4
 8008886:	dd24      	ble.n	80088d2 <_strtol_l.constprop.0+0xc6>
 8008888:	f1bc 0f00 	cmp.w	ip, #0
 800888c:	db1e      	blt.n	80088cc <_strtol_l.constprop.0+0xc0>
 800888e:	45b1      	cmp	r9, r6
 8008890:	d31c      	bcc.n	80088cc <_strtol_l.constprop.0+0xc0>
 8008892:	d101      	bne.n	8008898 <_strtol_l.constprop.0+0x8c>
 8008894:	45a2      	cmp	sl, r4
 8008896:	db19      	blt.n	80088cc <_strtol_l.constprop.0+0xc0>
 8008898:	fb06 4603 	mla	r6, r6, r3, r4
 800889c:	f04f 0c01 	mov.w	ip, #1
 80088a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80088a4:	e7e8      	b.n	8008878 <_strtol_l.constprop.0+0x6c>
 80088a6:	2c2b      	cmp	r4, #43	; 0x2b
 80088a8:	bf04      	itt	eq
 80088aa:	782c      	ldrbeq	r4, [r5, #0]
 80088ac:	1cb5      	addeq	r5, r6, #2
 80088ae:	e7ca      	b.n	8008846 <_strtol_l.constprop.0+0x3a>
 80088b0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80088b4:	f1be 0f19 	cmp.w	lr, #25
 80088b8:	d801      	bhi.n	80088be <_strtol_l.constprop.0+0xb2>
 80088ba:	3c37      	subs	r4, #55	; 0x37
 80088bc:	e7e2      	b.n	8008884 <_strtol_l.constprop.0+0x78>
 80088be:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80088c2:	f1be 0f19 	cmp.w	lr, #25
 80088c6:	d804      	bhi.n	80088d2 <_strtol_l.constprop.0+0xc6>
 80088c8:	3c57      	subs	r4, #87	; 0x57
 80088ca:	e7db      	b.n	8008884 <_strtol_l.constprop.0+0x78>
 80088cc:	f04f 3cff 	mov.w	ip, #4294967295
 80088d0:	e7e6      	b.n	80088a0 <_strtol_l.constprop.0+0x94>
 80088d2:	f1bc 0f00 	cmp.w	ip, #0
 80088d6:	da05      	bge.n	80088e4 <_strtol_l.constprop.0+0xd8>
 80088d8:	2322      	movs	r3, #34	; 0x22
 80088da:	6003      	str	r3, [r0, #0]
 80088dc:	4646      	mov	r6, r8
 80088de:	b942      	cbnz	r2, 80088f2 <_strtol_l.constprop.0+0xe6>
 80088e0:	4630      	mov	r0, r6
 80088e2:	e79e      	b.n	8008822 <_strtol_l.constprop.0+0x16>
 80088e4:	b107      	cbz	r7, 80088e8 <_strtol_l.constprop.0+0xdc>
 80088e6:	4276      	negs	r6, r6
 80088e8:	2a00      	cmp	r2, #0
 80088ea:	d0f9      	beq.n	80088e0 <_strtol_l.constprop.0+0xd4>
 80088ec:	f1bc 0f00 	cmp.w	ip, #0
 80088f0:	d000      	beq.n	80088f4 <_strtol_l.constprop.0+0xe8>
 80088f2:	1e69      	subs	r1, r5, #1
 80088f4:	6011      	str	r1, [r2, #0]
 80088f6:	e7f3      	b.n	80088e0 <_strtol_l.constprop.0+0xd4>
 80088f8:	2430      	movs	r4, #48	; 0x30
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d1b1      	bne.n	8008862 <_strtol_l.constprop.0+0x56>
 80088fe:	2308      	movs	r3, #8
 8008900:	e7af      	b.n	8008862 <_strtol_l.constprop.0+0x56>
 8008902:	2c30      	cmp	r4, #48	; 0x30
 8008904:	d0a5      	beq.n	8008852 <_strtol_l.constprop.0+0x46>
 8008906:	230a      	movs	r3, #10
 8008908:	e7ab      	b.n	8008862 <_strtol_l.constprop.0+0x56>
 800890a:	bf00      	nop
 800890c:	08008a31 	.word	0x08008a31

08008910 <strtol>:
 8008910:	4613      	mov	r3, r2
 8008912:	460a      	mov	r2, r1
 8008914:	4601      	mov	r1, r0
 8008916:	4802      	ldr	r0, [pc, #8]	; (8008920 <strtol+0x10>)
 8008918:	6800      	ldr	r0, [r0, #0]
 800891a:	f7ff bf77 	b.w	800880c <_strtol_l.constprop.0>
 800891e:	bf00      	nop
 8008920:	20000130 	.word	0x20000130

08008924 <_init>:
 8008924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008926:	bf00      	nop
 8008928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800892a:	bc08      	pop	{r3}
 800892c:	469e      	mov	lr, r3
 800892e:	4770      	bx	lr

08008930 <_fini>:
 8008930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008932:	bf00      	nop
 8008934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008936:	bc08      	pop	{r3}
 8008938:	469e      	mov	lr, r3
 800893a:	4770      	bx	lr
