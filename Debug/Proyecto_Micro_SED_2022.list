
Proyecto_Micro_SED_2022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000871c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  080088b4  080088b4  000188b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008aac  08008aac  0002018c  2**0
                  CONTENTS
  4 .ARM          00000008  08008aac  08008aac  00018aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ab4  08008ab4  0002018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ab4  08008ab4  00018ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ab8  08008ab8  00018ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  08008abc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001da0  2000018c  08008c48  0002018c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f2c  08008c48  00021f2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015342  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003264  00000000  00000000  000354fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  00038768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d8  00000000  00000000  000399a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a522  00000000  00000000  0003aa80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015bd7  00000000  00000000  00054fa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b65d  00000000  00000000  0006ab79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001061d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d54  00000000  00000000  00106228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000018c 	.word	0x2000018c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800889c 	.word	0x0800889c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000190 	.word	0x20000190
 80001d4:	0800889c 	.word	0x0800889c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <tiempoTranscurridoMinutos>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/************************************* TIEMPO ********************************************/

int tiempoTranscurridoMinutos(int tiempo){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	int retorno = 0;
 80004e4:	2300      	movs	r3, #0
 80004e6:	60fb      	str	r3, [r7, #12]
	HAL_TIM_Base_Start_IT(&htim3);
 80004e8:	480b      	ldr	r0, [pc, #44]	; (8000518 <tiempoTranscurridoMinutos+0x3c>)
 80004ea:	f003 fb91 	bl	8003c10 <HAL_TIM_Base_Start_IT>
	if (minutos < tiempo){
 80004ee:	4b0b      	ldr	r3, [pc, #44]	; (800051c <tiempoTranscurridoMinutos+0x40>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	687a      	ldr	r2, [r7, #4]
 80004f4:	429a      	cmp	r2, r3
 80004f6:	dd02      	ble.n	80004fe <tiempoTranscurridoMinutos+0x22>
		retorno = 0;
 80004f8:	2300      	movs	r3, #0
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	e007      	b.n	800050e <tiempoTranscurridoMinutos+0x32>
	}
	else{
		retorno = 1;
 80004fe:	2301      	movs	r3, #1
 8000500:	60fb      	str	r3, [r7, #12]
		HAL_TIM_Base_Stop_IT(&htim3);
 8000502:	4805      	ldr	r0, [pc, #20]	; (8000518 <tiempoTranscurridoMinutos+0x3c>)
 8000504:	f003 fbe6 	bl	8003cd4 <HAL_TIM_Base_Stop_IT>
		minutos = 0;
 8000508:	4b04      	ldr	r3, [pc, #16]	; (800051c <tiempoTranscurridoMinutos+0x40>)
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
	}
	return retorno;
 800050e:	68fb      	ldr	r3, [r7, #12]
}
 8000510:	4618      	mov	r0, r3
 8000512:	3710      	adds	r7, #16
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	20000238 	.word	0x20000238
 800051c:	200002c8 	.word	0x200002c8

08000520 <displayModo>:
static State_Type Current_State;
volatile int btn_pressed;

/*********************************** GENERAL ********************************************/

void displayModo(int k){
 8000520:	b5b0      	push	{r4, r5, r7, lr}
 8000522:	b08e      	sub	sp, #56	; 0x38
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
	int i;
	char msg[19];
	switch(k){
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	2b03      	cmp	r3, #3
 800052c:	d83e      	bhi.n	80005ac <displayModo+0x8c>
 800052e:	a201      	add	r2, pc, #4	; (adr r2, 8000534 <displayModo+0x14>)
 8000530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000534:	08000545 	.word	0x08000545
 8000538:	0800055f 	.word	0x0800055f
 800053c:	08000579 	.word	0x08000579
 8000540:	08000593 	.word	0x08000593
	case 0:
		strcpy(msg,"MODO: ESPERA    \r\n");
 8000544:	4b28      	ldr	r3, [pc, #160]	; (80005e8 <displayModo+0xc8>)
 8000546:	f107 0420 	add.w	r4, r7, #32
 800054a:	461d      	mov	r5, r3
 800054c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800054e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000550:	682b      	ldr	r3, [r5, #0]
 8000552:	461a      	mov	r2, r3
 8000554:	8022      	strh	r2, [r4, #0]
 8000556:	3402      	adds	r4, #2
 8000558:	0c1b      	lsrs	r3, r3, #16
 800055a:	7023      	strb	r3, [r4, #0]
		break;
 800055c:	e026      	b.n	80005ac <displayModo+0x8c>
	case 1:
		strcpy(msg,"MODO: MANUAL    \r\n");
 800055e:	4b23      	ldr	r3, [pc, #140]	; (80005ec <displayModo+0xcc>)
 8000560:	f107 0420 	add.w	r4, r7, #32
 8000564:	461d      	mov	r5, r3
 8000566:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000568:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800056a:	682b      	ldr	r3, [r5, #0]
 800056c:	461a      	mov	r2, r3
 800056e:	8022      	strh	r2, [r4, #0]
 8000570:	3402      	adds	r4, #2
 8000572:	0c1b      	lsrs	r3, r3, #16
 8000574:	7023      	strb	r3, [r4, #0]
		break;
 8000576:	e019      	b.n	80005ac <displayModo+0x8c>
	case 2:
		strcpy(msg,"MODO: HORARIO   \r\n");
 8000578:	4b1d      	ldr	r3, [pc, #116]	; (80005f0 <displayModo+0xd0>)
 800057a:	f107 0420 	add.w	r4, r7, #32
 800057e:	461d      	mov	r5, r3
 8000580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000584:	682b      	ldr	r3, [r5, #0]
 8000586:	461a      	mov	r2, r3
 8000588:	8022      	strh	r2, [r4, #0]
 800058a:	3402      	adds	r4, #2
 800058c:	0c1b      	lsrs	r3, r3, #16
 800058e:	7023      	strb	r3, [r4, #0]
		break;
 8000590:	e00c      	b.n	80005ac <displayModo+0x8c>
	case 3:
		strcpy(msg,"MODO: AUTOMATICO\r\n");
 8000592:	4b18      	ldr	r3, [pc, #96]	; (80005f4 <displayModo+0xd4>)
 8000594:	f107 0420 	add.w	r4, r7, #32
 8000598:	461d      	mov	r5, r3
 800059a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800059c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800059e:	682b      	ldr	r3, [r5, #0]
 80005a0:	461a      	mov	r2, r3
 80005a2:	8022      	strh	r2, [r4, #0]
 80005a4:	3402      	adds	r4, #2
 80005a6:	0c1b      	lsrs	r3, r3, #16
 80005a8:	7023      	strb	r3, [r4, #0]
		break;
 80005aa:	bf00      	nop
	}
	uint8_t data[sizeof(msg)];
	for(i = 0;i<=sizeof(msg);i++){
 80005ac:	2300      	movs	r3, #0
 80005ae:	637b      	str	r3, [r7, #52]	; 0x34
 80005b0:	e00d      	b.n	80005ce <displayModo+0xae>
	  data[i] = msg[i];
 80005b2:	f107 0220 	add.w	r2, r7, #32
 80005b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005b8:	4413      	add	r3, r2
 80005ba:	7819      	ldrb	r1, [r3, #0]
 80005bc:	f107 020c 	add.w	r2, r7, #12
 80005c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005c2:	4413      	add	r3, r2
 80005c4:	460a      	mov	r2, r1
 80005c6:	701a      	strb	r2, [r3, #0]
	for(i = 0;i<=sizeof(msg);i++){
 80005c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005ca:	3301      	adds	r3, #1
 80005cc:	637b      	str	r3, [r7, #52]	; 0x34
 80005ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80005d0:	2b13      	cmp	r3, #19
 80005d2:	d9ee      	bls.n	80005b2 <displayModo+0x92>
	};
	CDC_Transmit_FS(data, sizeof(data));
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2113      	movs	r1, #19
 80005da:	4618      	mov	r0, r3
 80005dc:	f007 fc26 	bl	8007e2c <CDC_Transmit_FS>
}
 80005e0:	bf00      	nop
 80005e2:	3738      	adds	r7, #56	; 0x38
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bdb0      	pop	{r4, r5, r7, pc}
 80005e8:	08008900 	.word	0x08008900
 80005ec:	08008914 	.word	0x08008914
 80005f0:	08008928 	.word	0x08008928
 80005f4:	0800893c 	.word	0x0800893c

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fc:	f000 fde2 	bl	80011c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000600:	f000 f81a 	bl	8000638 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000604:	f000 f9be 	bl	8000984 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000608:	f000 f87e 	bl	8000708 <MX_ADC1_Init>
  MX_TIM3_Init();
 800060c:	f000 f91e 	bl	800084c <MX_TIM3_Init>
  MX_TIM5_Init();
 8000610:	f000 f96a 	bl	80008e8 <MX_TIM5_Init>
  MX_USB_DEVICE_Init();
 8000614:	f007 fb36 	bl	8007c84 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000618:	f000 f8ca 	bl	80007b0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  state_machine_init();
 800061c:	f000 fa2a 	bl	8000a74 <state_machine_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  state_table[Current_State]();
 8000620:	4b03      	ldr	r3, [pc, #12]	; (8000630 <main+0x38>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	461a      	mov	r2, r3
 8000626:	4b03      	ldr	r3, [pc, #12]	; (8000634 <main+0x3c>)
 8000628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800062c:	4798      	blx	r3
 800062e:	e7f7      	b.n	8000620 <main+0x28>
 8000630:	20000314 	.word	0x20000314
 8000634:	2000001c 	.word	0x2000001c

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b094      	sub	sp, #80	; 0x50
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0320 	add.w	r3, r7, #32
 8000642:	2230      	movs	r2, #48	; 0x30
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f008 f87e 	bl	8008748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	4b27      	ldr	r3, [pc, #156]	; (8000700 <SystemClock_Config+0xc8>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	4a26      	ldr	r2, [pc, #152]	; (8000700 <SystemClock_Config+0xc8>)
 8000666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066a:	6413      	str	r3, [r2, #64]	; 0x40
 800066c:	4b24      	ldr	r3, [pc, #144]	; (8000700 <SystemClock_Config+0xc8>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000678:	2300      	movs	r3, #0
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	4b21      	ldr	r3, [pc, #132]	; (8000704 <SystemClock_Config+0xcc>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a20      	ldr	r2, [pc, #128]	; (8000704 <SystemClock_Config+0xcc>)
 8000682:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000686:	6013      	str	r3, [r2, #0]
 8000688:	4b1e      	ldr	r3, [pc, #120]	; (8000704 <SystemClock_Config+0xcc>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000694:	2301      	movs	r3, #1
 8000696:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000698:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069e:	2302      	movs	r3, #2
 80006a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006a8:	2304      	movs	r3, #4
 80006aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80006ac:	23c0      	movs	r3, #192	; 0xc0
 80006ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006b0:	2304      	movs	r3, #4
 80006b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80006b4:	2308      	movs	r3, #8
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 0320 	add.w	r3, r7, #32
 80006bc:	4618      	mov	r0, r3
 80006be:	f002 fde7 	bl	8003290 <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006c8:	f000 fc24 	bl	8000f14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d0:	2302      	movs	r3, #2
 80006d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	2103      	movs	r1, #3
 80006e8:	4618      	mov	r0, r3
 80006ea:	f003 f849 	bl	8003780 <HAL_RCC_ClockConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006f4:	f000 fc0e 	bl	8000f14 <Error_Handler>
  }
}
 80006f8:	bf00      	nop
 80006fa:	3750      	adds	r7, #80	; 0x50
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40023800 	.word	0x40023800
 8000704:	40007000 	.word	0x40007000

08000708 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800070e:	463b      	mov	r3, r7
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800071a:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <MX_ADC1_Init+0x9c>)
 800071c:	4a22      	ldr	r2, [pc, #136]	; (80007a8 <MX_ADC1_Init+0xa0>)
 800071e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000720:	4b20      	ldr	r3, [pc, #128]	; (80007a4 <MX_ADC1_Init+0x9c>)
 8000722:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000726:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000728:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <MX_ADC1_Init+0x9c>)
 800072a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800072e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000730:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <MX_ADC1_Init+0x9c>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000736:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <MX_ADC1_Init+0x9c>)
 8000738:	2200      	movs	r2, #0
 800073a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800073c:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <MX_ADC1_Init+0x9c>)
 800073e:	2200      	movs	r2, #0
 8000740:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000744:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <MX_ADC1_Init+0x9c>)
 8000746:	2200      	movs	r2, #0
 8000748:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800074a:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MX_ADC1_Init+0x9c>)
 800074c:	4a17      	ldr	r2, [pc, #92]	; (80007ac <MX_ADC1_Init+0xa4>)
 800074e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000750:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <MX_ADC1_Init+0x9c>)
 8000752:	2200      	movs	r2, #0
 8000754:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <MX_ADC1_Init+0x9c>)
 8000758:	2201      	movs	r2, #1
 800075a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_ADC1_Init+0x9c>)
 800075e:	2200      	movs	r2, #0
 8000760:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_ADC1_Init+0x9c>)
 8000766:	2201      	movs	r2, #1
 8000768:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800076a:	480e      	ldr	r0, [pc, #56]	; (80007a4 <MX_ADC1_Init+0x9c>)
 800076c:	f000 fdc0 	bl	80012f0 <HAL_ADC_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000776:	f000 fbcd 	bl	8000f14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800077a:	2304      	movs	r3, #4
 800077c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800077e:	2301      	movs	r3, #1
 8000780:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000782:	2300      	movs	r3, #0
 8000784:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000786:	463b      	mov	r3, r7
 8000788:	4619      	mov	r1, r3
 800078a:	4806      	ldr	r0, [pc, #24]	; (80007a4 <MX_ADC1_Init+0x9c>)
 800078c:	f000 fdf4 	bl	8001378 <HAL_ADC_ConfigChannel>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000796:	f000 fbbd 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800079a:	bf00      	nop
 800079c:	3710      	adds	r7, #16
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200001a8 	.word	0x200001a8
 80007a8:	40012000 	.word	0x40012000
 80007ac:	0f000001 	.word	0x0f000001

080007b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007b6:	f107 0308 	add.w	r3, r7, #8
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c4:	463b      	mov	r3, r7
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007cc:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <MX_TIM2_Init+0x94>)
 80007ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47999;
 80007d4:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <MX_TIM2_Init+0x94>)
 80007d6:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 80007da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007dc:	4b19      	ldr	r3, [pc, #100]	; (8000844 <MX_TIM2_Init+0x94>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3599999;
 80007e2:	4b18      	ldr	r3, [pc, #96]	; (8000844 <MX_TIM2_Init+0x94>)
 80007e4:	4a18      	ldr	r2, [pc, #96]	; (8000848 <MX_TIM2_Init+0x98>)
 80007e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e8:	4b16      	ldr	r3, [pc, #88]	; (8000844 <MX_TIM2_Init+0x94>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007ee:	4b15      	ldr	r3, [pc, #84]	; (8000844 <MX_TIM2_Init+0x94>)
 80007f0:	2280      	movs	r2, #128	; 0x80
 80007f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007f4:	4813      	ldr	r0, [pc, #76]	; (8000844 <MX_TIM2_Init+0x94>)
 80007f6:	f003 f9bb 	bl	8003b70 <HAL_TIM_Base_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000800:	f000 fb88 	bl	8000f14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000808:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800080a:	f107 0308 	add.w	r3, r7, #8
 800080e:	4619      	mov	r1, r3
 8000810:	480c      	ldr	r0, [pc, #48]	; (8000844 <MX_TIM2_Init+0x94>)
 8000812:	f003 fb96 	bl	8003f42 <HAL_TIM_ConfigClockSource>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800081c:	f000 fb7a 	bl	8000f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000820:	2300      	movs	r3, #0
 8000822:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000824:	2300      	movs	r3, #0
 8000826:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000828:	463b      	mov	r3, r7
 800082a:	4619      	mov	r1, r3
 800082c:	4805      	ldr	r0, [pc, #20]	; (8000844 <MX_TIM2_Init+0x94>)
 800082e:	f003 fd91 	bl	8004354 <HAL_TIMEx_MasterConfigSynchronization>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000838:	f000 fb6c 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800083c:	bf00      	nop
 800083e:	3718      	adds	r7, #24
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	200001f0 	.word	0x200001f0
 8000848:	0036ee7f 	.word	0x0036ee7f

0800084c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000852:	f107 0308 	add.w	r3, r7, #8
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000860:	463b      	mov	r3, r7
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000868:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <MX_TIM3_Init+0x94>)
 800086a:	4a1e      	ldr	r2, [pc, #120]	; (80008e4 <MX_TIM3_Init+0x98>)
 800086c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47999;
 800086e:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <MX_TIM3_Init+0x94>)
 8000870:	f64b 327f 	movw	r2, #47999	; 0xbb7f
 8000874:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000876:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <MX_TIM3_Init+0x94>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 59999;
 800087c:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <MX_TIM3_Init+0x94>)
 800087e:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8000882:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000884:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <MX_TIM3_Init+0x94>)
 8000886:	2200      	movs	r2, #0
 8000888:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800088a:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <MX_TIM3_Init+0x94>)
 800088c:	2280      	movs	r2, #128	; 0x80
 800088e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000890:	4813      	ldr	r0, [pc, #76]	; (80008e0 <MX_TIM3_Init+0x94>)
 8000892:	f003 f96d 	bl	8003b70 <HAL_TIM_Base_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800089c:	f000 fb3a 	bl	8000f14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80008a6:	f107 0308 	add.w	r3, r7, #8
 80008aa:	4619      	mov	r1, r3
 80008ac:	480c      	ldr	r0, [pc, #48]	; (80008e0 <MX_TIM3_Init+0x94>)
 80008ae:	f003 fb48 	bl	8003f42 <HAL_TIM_ConfigClockSource>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80008b8:	f000 fb2c 	bl	8000f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008bc:	2300      	movs	r3, #0
 80008be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c0:	2300      	movs	r3, #0
 80008c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008c4:	463b      	mov	r3, r7
 80008c6:	4619      	mov	r1, r3
 80008c8:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_TIM3_Init+0x94>)
 80008ca:	f003 fd43 	bl	8004354 <HAL_TIMEx_MasterConfigSynchronization>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80008d4:	f000 fb1e 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008d8:	bf00      	nop
 80008da:	3718      	adds	r7, #24
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000238 	.word	0x20000238
 80008e4:	40000400 	.word	0x40000400

080008e8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b086      	sub	sp, #24
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ee:	f107 0308 	add.w	r3, r7, #8
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008fc:	463b      	mov	r3, r7
 80008fe:	2200      	movs	r2, #0
 8000900:	601a      	str	r2, [r3, #0]
 8000902:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000904:	4b1d      	ldr	r3, [pc, #116]	; (800097c <MX_TIM5_Init+0x94>)
 8000906:	4a1e      	ldr	r2, [pc, #120]	; (8000980 <MX_TIM5_Init+0x98>)
 8000908:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 48-1;
 800090a:	4b1c      	ldr	r3, [pc, #112]	; (800097c <MX_TIM5_Init+0x94>)
 800090c:	222f      	movs	r2, #47	; 0x2f
 800090e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000910:	4b1a      	ldr	r3, [pc, #104]	; (800097c <MX_TIM5_Init+0x94>)
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xffff-1;
 8000916:	4b19      	ldr	r3, [pc, #100]	; (800097c <MX_TIM5_Init+0x94>)
 8000918:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800091c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800091e:	4b17      	ldr	r3, [pc, #92]	; (800097c <MX_TIM5_Init+0x94>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000924:	4b15      	ldr	r3, [pc, #84]	; (800097c <MX_TIM5_Init+0x94>)
 8000926:	2200      	movs	r2, #0
 8000928:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800092a:	4814      	ldr	r0, [pc, #80]	; (800097c <MX_TIM5_Init+0x94>)
 800092c:	f003 f920 	bl	8003b70 <HAL_TIM_Base_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8000936:	f000 faed 	bl	8000f14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800093a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800093e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000940:	f107 0308 	add.w	r3, r7, #8
 8000944:	4619      	mov	r1, r3
 8000946:	480d      	ldr	r0, [pc, #52]	; (800097c <MX_TIM5_Init+0x94>)
 8000948:	f003 fafb 	bl	8003f42 <HAL_TIM_ConfigClockSource>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8000952:	f000 fadf 	bl	8000f14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000956:	2300      	movs	r3, #0
 8000958:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800095a:	2300      	movs	r3, #0
 800095c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800095e:	463b      	mov	r3, r7
 8000960:	4619      	mov	r1, r3
 8000962:	4806      	ldr	r0, [pc, #24]	; (800097c <MX_TIM5_Init+0x94>)
 8000964:	f003 fcf6 	bl	8004354 <HAL_TIMEx_MasterConfigSynchronization>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800096e:	f000 fad1 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	3718      	adds	r7, #24
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	20000280 	.word	0x20000280
 8000980:	40000c00 	.word	0x40000c00

08000984 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	; 0x28
 8000988:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	60da      	str	r2, [r3, #12]
 8000998:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	4b32      	ldr	r3, [pc, #200]	; (8000a68 <MX_GPIO_Init+0xe4>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a31      	ldr	r2, [pc, #196]	; (8000a68 <MX_GPIO_Init+0xe4>)
 80009a4:	f043 0304 	orr.w	r3, r3, #4
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b2f      	ldr	r3, [pc, #188]	; (8000a68 <MX_GPIO_Init+0xe4>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0304 	and.w	r3, r3, #4
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	4b2b      	ldr	r3, [pc, #172]	; (8000a68 <MX_GPIO_Init+0xe4>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a2a      	ldr	r2, [pc, #168]	; (8000a68 <MX_GPIO_Init+0xe4>)
 80009c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b28      	ldr	r3, [pc, #160]	; (8000a68 <MX_GPIO_Init+0xe4>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	60bb      	str	r3, [r7, #8]
 80009d6:	4b24      	ldr	r3, [pc, #144]	; (8000a68 <MX_GPIO_Init+0xe4>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a23      	ldr	r2, [pc, #140]	; (8000a68 <MX_GPIO_Init+0xe4>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b21      	ldr	r3, [pc, #132]	; (8000a68 <MX_GPIO_Init+0xe4>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0301 	and.w	r3, r3, #1
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <MX_GPIO_Init+0xe4>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a1c      	ldr	r2, [pc, #112]	; (8000a68 <MX_GPIO_Init+0xe4>)
 80009f8:	f043 0308 	orr.w	r3, r3, #8
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <MX_GPIO_Init+0xe4>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0308 	and.w	r3, r3, #8
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8000a10:	4816      	ldr	r0, [pc, #88]	; (8000a6c <MX_GPIO_Init+0xe8>)
 8000a12:	f001 f98d 	bl	8001d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a16:	2301      	movs	r3, #1
 8000a18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a1a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4811      	ldr	r0, [pc, #68]	; (8000a70 <MX_GPIO_Init+0xec>)
 8000a2c:	f000 ffe4 	bl	80019f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD13 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000a30:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000a34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a36:	2301      	movs	r3, #1
 8000a38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	4619      	mov	r1, r3
 8000a48:	4808      	ldr	r0, [pc, #32]	; (8000a6c <MX_GPIO_Init+0xe8>)
 8000a4a:	f000 ffd5 	bl	80019f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2100      	movs	r1, #0
 8000a52:	2006      	movs	r0, #6
 8000a54:	f000 ff99 	bl	800198a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a58:	2006      	movs	r0, #6
 8000a5a:	f000 ffb2 	bl	80019c2 <HAL_NVIC_EnableIRQ>

}
 8000a5e:	bf00      	nop
 8000a60:	3728      	adds	r7, #40	; 0x28
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40020c00 	.word	0x40020c00
 8000a70:	40020000 	.word	0x40020000

08000a74 <state_machine_init>:

/* USER CODE BEGIN 4 */

void state_machine_init(void){
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
	displayModo(ESPERA);
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f7ff fd51 	bl	8000520 <displayModo>
	Current_State = ESPERA;
 8000a7e:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <state_machine_init+0x1c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	701a      	strb	r2, [r3, #0]
	btn_pressed = 0;
 8000a84:	4b03      	ldr	r3, [pc, #12]	; (8000a94 <state_machine_init+0x20>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000314 	.word	0x20000314
 8000a94:	20000318 	.word	0x20000318

08000a98 <ESPERA_function>:
void ESPERA_function(void){
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
	char *s  = strstr((char*)buffer,str_CAMBIAR_A_MODO);
 8000a9e:	4b2d      	ldr	r3, [pc, #180]	; (8000b54 <ESPERA_function+0xbc>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	482c      	ldr	r0, [pc, #176]	; (8000b58 <ESPERA_function+0xc0>)
 8000aa6:	f007 fe57 	bl	8008758 <strstr>
 8000aaa:	60f8      	str	r0, [r7, #12]
	char *sH = strstr((char*)buffer,str_HORARIO);
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <ESPERA_function+0xc4>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4829      	ldr	r0, [pc, #164]	; (8000b58 <ESPERA_function+0xc0>)
 8000ab4:	f007 fe50 	bl	8008758 <strstr>
 8000ab8:	60b8      	str	r0, [r7, #8]
	char *sM = strstr((char*)buffer,str_MANUAL);
 8000aba:	4b29      	ldr	r3, [pc, #164]	; (8000b60 <ESPERA_function+0xc8>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4825      	ldr	r0, [pc, #148]	; (8000b58 <ESPERA_function+0xc0>)
 8000ac2:	f007 fe49 	bl	8008758 <strstr>
 8000ac6:	6078      	str	r0, [r7, #4]
	char *sA = strstr((char*)buffer,str_AUTOMATICO);
 8000ac8:	4b26      	ldr	r3, [pc, #152]	; (8000b64 <ESPERA_function+0xcc>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4619      	mov	r1, r3
 8000ace:	4822      	ldr	r0, [pc, #136]	; (8000b58 <ESPERA_function+0xc0>)
 8000ad0:	f007 fe42 	bl	8008758 <strstr>
 8000ad4:	6038      	str	r0, [r7, #0]
	//Funcionamiento del modo ESPERA
	//
	if(btn_pressed == 1){
 8000ad6:	4b24      	ldr	r3, [pc, #144]	; (8000b68 <ESPERA_function+0xd0>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d10c      	bne.n	8000af8 <ESPERA_function+0x60>
		btn_pressed = 0;
 8000ade:	4b22      	ldr	r3, [pc, #136]	; (8000b68 <ESPERA_function+0xd0>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
		displayModo(MANUAL);
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	f7ff fd1b 	bl	8000520 <displayModo>
		buffer[0] = '\0';
 8000aea:	4b1b      	ldr	r3, [pc, #108]	; (8000b58 <ESPERA_function+0xc0>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	701a      	strb	r2, [r3, #0]
		Current_State = MANUAL;
 8000af0:	4b1e      	ldr	r3, [pc, #120]	; (8000b6c <ESPERA_function+0xd4>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	701a      	strb	r2, [r3, #0]
			displayModo(AUTOMATICO);
			buffer[0] = '\0';
			Current_State = AUTOMATICO;
		}
	}
}
 8000af6:	e028      	b.n	8000b4a <ESPERA_function+0xb2>
	else if(s != NULL){
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d025      	beq.n	8000b4a <ESPERA_function+0xb2>
		if(sH != NULL){
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d009      	beq.n	8000b18 <ESPERA_function+0x80>
			displayModo(HORARIO);
 8000b04:	2002      	movs	r0, #2
 8000b06:	f7ff fd0b 	bl	8000520 <displayModo>
			buffer[0] = '\0';
 8000b0a:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <ESPERA_function+0xc0>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
			Current_State = HORARIO;
 8000b10:	4b16      	ldr	r3, [pc, #88]	; (8000b6c <ESPERA_function+0xd4>)
 8000b12:	2202      	movs	r2, #2
 8000b14:	701a      	strb	r2, [r3, #0]
}
 8000b16:	e018      	b.n	8000b4a <ESPERA_function+0xb2>
		else if(sM != NULL){
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d009      	beq.n	8000b32 <ESPERA_function+0x9a>
			displayModo(MANUAL);
 8000b1e:	2001      	movs	r0, #1
 8000b20:	f7ff fcfe 	bl	8000520 <displayModo>
			buffer[0] = '\0';
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <ESPERA_function+0xc0>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	701a      	strb	r2, [r3, #0]
			Current_State = MANUAL;
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <ESPERA_function+0xd4>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	701a      	strb	r2, [r3, #0]
}
 8000b30:	e00b      	b.n	8000b4a <ESPERA_function+0xb2>
		else if(sA != NULL){
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d008      	beq.n	8000b4a <ESPERA_function+0xb2>
			displayModo(AUTOMATICO);
 8000b38:	2003      	movs	r0, #3
 8000b3a:	f7ff fcf1 	bl	8000520 <displayModo>
			buffer[0] = '\0';
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <ESPERA_function+0xc0>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	701a      	strb	r2, [r3, #0]
			Current_State = AUTOMATICO;
 8000b44:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <ESPERA_function+0xd4>)
 8000b46:	2203      	movs	r2, #3
 8000b48:	701a      	strb	r2, [r3, #0]
}
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000000 	.word	0x20000000
 8000b58:	200002d0 	.word	0x200002d0
 8000b5c:	2000000c 	.word	0x2000000c
 8000b60:	20000008 	.word	0x20000008
 8000b64:	20000010 	.word	0x20000010
 8000b68:	20000318 	.word	0x20000318
 8000b6c:	20000314 	.word	0x20000314

08000b70 <MANUAL_function>:
void MANUAL_function(void){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08a      	sub	sp, #40	; 0x28
 8000b74:	af00      	add	r7, sp, #0
	int apagar = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
	char *s     = strstr((char*)buffer,str_CAMBIAR_A_MODO);
 8000b7a:	4b48      	ldr	r3, [pc, #288]	; (8000c9c <MANUAL_function+0x12c>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4847      	ldr	r0, [pc, #284]	; (8000ca0 <MANUAL_function+0x130>)
 8000b82:	f007 fde9 	bl	8008758 <strstr>
 8000b86:	6238      	str	r0, [r7, #32]
	char *sE    = strstr((char*)buffer,str_ESPERA);
 8000b88:	4b46      	ldr	r3, [pc, #280]	; (8000ca4 <MANUAL_function+0x134>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4844      	ldr	r0, [pc, #272]	; (8000ca0 <MANUAL_function+0x130>)
 8000b90:	f007 fde2 	bl	8008758 <strstr>
 8000b94:	61f8      	str	r0, [r7, #28]
	char *sH    = strstr((char*)buffer,str_HORARIO);
 8000b96:	4b44      	ldr	r3, [pc, #272]	; (8000ca8 <MANUAL_function+0x138>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4840      	ldr	r0, [pc, #256]	; (8000ca0 <MANUAL_function+0x130>)
 8000b9e:	f007 fddb 	bl	8008758 <strstr>
 8000ba2:	61b8      	str	r0, [r7, #24]
	char *sA    = strstr((char*)buffer,str_AUTOMATICO);
 8000ba4:	4b41      	ldr	r3, [pc, #260]	; (8000cac <MANUAL_function+0x13c>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4619      	mov	r1, r3
 8000baa:	483d      	ldr	r0, [pc, #244]	; (8000ca0 <MANUAL_function+0x130>)
 8000bac:	f007 fdd4 	bl	8008758 <strstr>
 8000bb0:	6178      	str	r0, [r7, #20]
	char *s_ON  = strstr((char*)buffer,str_ENCENDER_POR);
 8000bb2:	4b3f      	ldr	r3, [pc, #252]	; (8000cb0 <MANUAL_function+0x140>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4839      	ldr	r0, [pc, #228]	; (8000ca0 <MANUAL_function+0x130>)
 8000bba:	f007 fdcd 	bl	8008758 <strstr>
 8000bbe:	6138      	str	r0, [r7, #16]
	char *s_OFF = strstr((char*)buffer,str_APAGAR);
 8000bc0:	4b3c      	ldr	r3, [pc, #240]	; (8000cb4 <MANUAL_function+0x144>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4836      	ldr	r0, [pc, #216]	; (8000ca0 <MANUAL_function+0x130>)
 8000bc8:	f007 fdc6 	bl	8008758 <strstr>
 8000bcc:	60f8      	str	r0, [r7, #12]
	//Funcionamiento del modo MANUAL
	if(s_ON != NULL){
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d024      	beq.n	8000c1e <MANUAL_function+0xae>
		char arr_tiempo[2] = {buffer[13],buffer[14]};
 8000bd4:	4b32      	ldr	r3, [pc, #200]	; (8000ca0 <MANUAL_function+0x130>)
 8000bd6:	7b5b      	ldrb	r3, [r3, #13]
 8000bd8:	713b      	strb	r3, [r7, #4]
 8000bda:	4b31      	ldr	r3, [pc, #196]	; (8000ca0 <MANUAL_function+0x130>)
 8000bdc:	7b9b      	ldrb	r3, [r3, #14]
 8000bde:	717b      	strb	r3, [r7, #5]
		buffer[0] = '\0';
 8000be0:	4b2f      	ldr	r3, [pc, #188]	; (8000ca0 <MANUAL_function+0x130>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	701a      	strb	r2, [r3, #0]
		int tiempo = atoi(arr_tiempo);
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	4618      	mov	r0, r3
 8000bea:	f007 fd71 	bl	80086d0 <atoi>
 8000bee:	60b8      	str	r0, [r7, #8]
		do{
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, 1);
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bf6:	4830      	ldr	r0, [pc, #192]	; (8000cb8 <MANUAL_function+0x148>)
 8000bf8:	f001 f89a 	bl	8001d30 <HAL_GPIO_WritePin>
			if(s_OFF != NULL){
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d004      	beq.n	8000c0c <MANUAL_function+0x9c>
				apagar = 1;
 8000c02:	2301      	movs	r3, #1
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
				buffer[0] = '\0';
 8000c06:	4b26      	ldr	r3, [pc, #152]	; (8000ca0 <MANUAL_function+0x130>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	701a      	strb	r2, [r3, #0]
			}
		} while(tiempoTranscurridoMinutos(tiempo) == 0 && apagar == 0);
 8000c0c:	68b8      	ldr	r0, [r7, #8]
 8000c0e:	f7ff fc65 	bl	80004dc <tiempoTranscurridoMinutos>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d102      	bne.n	8000c1e <MANUAL_function+0xae>
 8000c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d0e8      	beq.n	8000bf0 <MANUAL_function+0x80>
	}
	//
	if(btn_pressed == 1){
 8000c1e:	4b27      	ldr	r3, [pc, #156]	; (8000cbc <MANUAL_function+0x14c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d10c      	bne.n	8000c40 <MANUAL_function+0xd0>
		btn_pressed = 0;
 8000c26:	4b25      	ldr	r3, [pc, #148]	; (8000cbc <MANUAL_function+0x14c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
		displayModo(HORARIO);
 8000c2c:	2002      	movs	r0, #2
 8000c2e:	f7ff fc77 	bl	8000520 <displayModo>
		buffer[0] = '\0';
 8000c32:	4b1b      	ldr	r3, [pc, #108]	; (8000ca0 <MANUAL_function+0x130>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	701a      	strb	r2, [r3, #0]
		Current_State = HORARIO;
 8000c38:	4b21      	ldr	r3, [pc, #132]	; (8000cc0 <MANUAL_function+0x150>)
 8000c3a:	2202      	movs	r2, #2
 8000c3c:	701a      	strb	r2, [r3, #0]
			displayModo(AUTOMATICO);
			buffer[0] = '\0';
			Current_State = AUTOMATICO;
		}
	}
}
 8000c3e:	e028      	b.n	8000c92 <MANUAL_function+0x122>
	else if(s != NULL){
 8000c40:	6a3b      	ldr	r3, [r7, #32]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d025      	beq.n	8000c92 <MANUAL_function+0x122>
		if(sH != NULL){
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d009      	beq.n	8000c60 <MANUAL_function+0xf0>
			displayModo(HORARIO);
 8000c4c:	2002      	movs	r0, #2
 8000c4e:	f7ff fc67 	bl	8000520 <displayModo>
			buffer[0] = '\0';
 8000c52:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <MANUAL_function+0x130>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]
			Current_State = HORARIO;
 8000c58:	4b19      	ldr	r3, [pc, #100]	; (8000cc0 <MANUAL_function+0x150>)
 8000c5a:	2202      	movs	r2, #2
 8000c5c:	701a      	strb	r2, [r3, #0]
}
 8000c5e:	e018      	b.n	8000c92 <MANUAL_function+0x122>
		else if(sE != NULL){
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d009      	beq.n	8000c7a <MANUAL_function+0x10a>
			displayModo(ESPERA);
 8000c66:	2000      	movs	r0, #0
 8000c68:	f7ff fc5a 	bl	8000520 <displayModo>
			buffer[0] = '\0';
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <MANUAL_function+0x130>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	701a      	strb	r2, [r3, #0]
			Current_State = ESPERA;
 8000c72:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <MANUAL_function+0x150>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	701a      	strb	r2, [r3, #0]
}
 8000c78:	e00b      	b.n	8000c92 <MANUAL_function+0x122>
		else if(sA != NULL){
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d008      	beq.n	8000c92 <MANUAL_function+0x122>
			displayModo(AUTOMATICO);
 8000c80:	2003      	movs	r0, #3
 8000c82:	f7ff fc4d 	bl	8000520 <displayModo>
			buffer[0] = '\0';
 8000c86:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <MANUAL_function+0x130>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	701a      	strb	r2, [r3, #0]
			Current_State = AUTOMATICO;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <MANUAL_function+0x150>)
 8000c8e:	2203      	movs	r2, #3
 8000c90:	701a      	strb	r2, [r3, #0]
}
 8000c92:	bf00      	nop
 8000c94:	3728      	adds	r7, #40	; 0x28
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000000 	.word	0x20000000
 8000ca0:	200002d0 	.word	0x200002d0
 8000ca4:	20000004 	.word	0x20000004
 8000ca8:	2000000c 	.word	0x2000000c
 8000cac:	20000010 	.word	0x20000010
 8000cb0:	20000014 	.word	0x20000014
 8000cb4:	20000018 	.word	0x20000018
 8000cb8:	40020c00 	.word	0x40020c00
 8000cbc:	20000318 	.word	0x20000318
 8000cc0:	20000314 	.word	0x20000314

08000cc4 <HORARIO_function>:
void HORARIO_function(void){
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
	char *s  = strstr((char*)buffer,str_CAMBIAR_A_MODO);
 8000cca:	4b2d      	ldr	r3, [pc, #180]	; (8000d80 <HORARIO_function+0xbc>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4619      	mov	r1, r3
 8000cd0:	482c      	ldr	r0, [pc, #176]	; (8000d84 <HORARIO_function+0xc0>)
 8000cd2:	f007 fd41 	bl	8008758 <strstr>
 8000cd6:	60f8      	str	r0, [r7, #12]
	char *sE = strstr((char*)buffer,str_ESPERA);
 8000cd8:	4b2b      	ldr	r3, [pc, #172]	; (8000d88 <HORARIO_function+0xc4>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4829      	ldr	r0, [pc, #164]	; (8000d84 <HORARIO_function+0xc0>)
 8000ce0:	f007 fd3a 	bl	8008758 <strstr>
 8000ce4:	60b8      	str	r0, [r7, #8]
	char *sM = strstr((char*)buffer,str_MANUAL);
 8000ce6:	4b29      	ldr	r3, [pc, #164]	; (8000d8c <HORARIO_function+0xc8>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4619      	mov	r1, r3
 8000cec:	4825      	ldr	r0, [pc, #148]	; (8000d84 <HORARIO_function+0xc0>)
 8000cee:	f007 fd33 	bl	8008758 <strstr>
 8000cf2:	6078      	str	r0, [r7, #4]
	char *sA = strstr((char*)buffer,str_AUTOMATICO);
 8000cf4:	4b26      	ldr	r3, [pc, #152]	; (8000d90 <HORARIO_function+0xcc>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4822      	ldr	r0, [pc, #136]	; (8000d84 <HORARIO_function+0xc0>)
 8000cfc:	f007 fd2c 	bl	8008758 <strstr>
 8000d00:	6038      	str	r0, [r7, #0]
	//Funcionamiento del modo horario
	//
	if(btn_pressed == 1){
 8000d02:	4b24      	ldr	r3, [pc, #144]	; (8000d94 <HORARIO_function+0xd0>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d10c      	bne.n	8000d24 <HORARIO_function+0x60>
		btn_pressed = 0;
 8000d0a:	4b22      	ldr	r3, [pc, #136]	; (8000d94 <HORARIO_function+0xd0>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
		displayModo(AUTOMATICO);
 8000d10:	2003      	movs	r0, #3
 8000d12:	f7ff fc05 	bl	8000520 <displayModo>
		buffer[0] = '\0';
 8000d16:	4b1b      	ldr	r3, [pc, #108]	; (8000d84 <HORARIO_function+0xc0>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	701a      	strb	r2, [r3, #0]
		Current_State = AUTOMATICO;
 8000d1c:	4b1e      	ldr	r3, [pc, #120]	; (8000d98 <HORARIO_function+0xd4>)
 8000d1e:	2203      	movs	r2, #3
 8000d20:	701a      	strb	r2, [r3, #0]
			displayModo(AUTOMATICO);
			buffer[0] = '\0';
			Current_State = AUTOMATICO;
		}
	}
}
 8000d22:	e028      	b.n	8000d76 <HORARIO_function+0xb2>
	else if(s != NULL){
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d025      	beq.n	8000d76 <HORARIO_function+0xb2>
		if(sM != NULL){
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d009      	beq.n	8000d44 <HORARIO_function+0x80>
			displayModo(MANUAL);
 8000d30:	2001      	movs	r0, #1
 8000d32:	f7ff fbf5 	bl	8000520 <displayModo>
			buffer[0] = '\0';
 8000d36:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <HORARIO_function+0xc0>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	701a      	strb	r2, [r3, #0]
			Current_State = MANUAL;
 8000d3c:	4b16      	ldr	r3, [pc, #88]	; (8000d98 <HORARIO_function+0xd4>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	701a      	strb	r2, [r3, #0]
}
 8000d42:	e018      	b.n	8000d76 <HORARIO_function+0xb2>
		else if(sE != NULL){
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d009      	beq.n	8000d5e <HORARIO_function+0x9a>
			displayModo(ESPERA);
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f7ff fbe8 	bl	8000520 <displayModo>
			buffer[0] = '\0';
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <HORARIO_function+0xc0>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	701a      	strb	r2, [r3, #0]
			Current_State = ESPERA;
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <HORARIO_function+0xd4>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	701a      	strb	r2, [r3, #0]
}
 8000d5c:	e00b      	b.n	8000d76 <HORARIO_function+0xb2>
		else if(sA != NULL){
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d008      	beq.n	8000d76 <HORARIO_function+0xb2>
			displayModo(AUTOMATICO);
 8000d64:	2003      	movs	r0, #3
 8000d66:	f7ff fbdb 	bl	8000520 <displayModo>
			buffer[0] = '\0';
 8000d6a:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <HORARIO_function+0xc0>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
			Current_State = AUTOMATICO;
 8000d70:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <HORARIO_function+0xd4>)
 8000d72:	2203      	movs	r2, #3
 8000d74:	701a      	strb	r2, [r3, #0]
}
 8000d76:	bf00      	nop
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000000 	.word	0x20000000
 8000d84:	200002d0 	.word	0x200002d0
 8000d88:	20000004 	.word	0x20000004
 8000d8c:	20000008 	.word	0x20000008
 8000d90:	20000010 	.word	0x20000010
 8000d94:	20000318 	.word	0x20000318
 8000d98:	20000314 	.word	0x20000314

08000d9c <AUTOMATICO_function>:

void AUTOMATICO_function(void){
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
	char *s  = strstr((char*)buffer,str_CAMBIAR_A_MODO);
 8000da2:	4b2d      	ldr	r3, [pc, #180]	; (8000e58 <AUTOMATICO_function+0xbc>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4619      	mov	r1, r3
 8000da8:	482c      	ldr	r0, [pc, #176]	; (8000e5c <AUTOMATICO_function+0xc0>)
 8000daa:	f007 fcd5 	bl	8008758 <strstr>
 8000dae:	60f8      	str	r0, [r7, #12]
	char *sE = strstr((char*)buffer,str_ESPERA);
 8000db0:	4b2b      	ldr	r3, [pc, #172]	; (8000e60 <AUTOMATICO_function+0xc4>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4619      	mov	r1, r3
 8000db6:	4829      	ldr	r0, [pc, #164]	; (8000e5c <AUTOMATICO_function+0xc0>)
 8000db8:	f007 fcce 	bl	8008758 <strstr>
 8000dbc:	60b8      	str	r0, [r7, #8]
	char *sM = strstr((char*)buffer,str_MANUAL);
 8000dbe:	4b29      	ldr	r3, [pc, #164]	; (8000e64 <AUTOMATICO_function+0xc8>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4825      	ldr	r0, [pc, #148]	; (8000e5c <AUTOMATICO_function+0xc0>)
 8000dc6:	f007 fcc7 	bl	8008758 <strstr>
 8000dca:	6078      	str	r0, [r7, #4]
	char *sH = strstr((char*)buffer,str_HORARIO);
 8000dcc:	4b26      	ldr	r3, [pc, #152]	; (8000e68 <AUTOMATICO_function+0xcc>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4822      	ldr	r0, [pc, #136]	; (8000e5c <AUTOMATICO_function+0xc0>)
 8000dd4:	f007 fcc0 	bl	8008758 <strstr>
 8000dd8:	6038      	str	r0, [r7, #0]
	//Funcionamiento del modo automático
	//
	if(btn_pressed == 1){
 8000dda:	4b24      	ldr	r3, [pc, #144]	; (8000e6c <AUTOMATICO_function+0xd0>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d10c      	bne.n	8000dfc <AUTOMATICO_function+0x60>
		btn_pressed = 0;
 8000de2:	4b22      	ldr	r3, [pc, #136]	; (8000e6c <AUTOMATICO_function+0xd0>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
		displayModo(ESPERA);
 8000de8:	2000      	movs	r0, #0
 8000dea:	f7ff fb99 	bl	8000520 <displayModo>
		buffer[0] = '\0';
 8000dee:	4b1b      	ldr	r3, [pc, #108]	; (8000e5c <AUTOMATICO_function+0xc0>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	701a      	strb	r2, [r3, #0]
		Current_State = ESPERA;
 8000df4:	4b1e      	ldr	r3, [pc, #120]	; (8000e70 <AUTOMATICO_function+0xd4>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	701a      	strb	r2, [r3, #0]
			displayModo(HORARIO);
			buffer[0] = '\0';
			Current_State = HORARIO;
		}
	}
}
 8000dfa:	e028      	b.n	8000e4e <AUTOMATICO_function+0xb2>
	else if(s != NULL){
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d025      	beq.n	8000e4e <AUTOMATICO_function+0xb2>
		if(sM != NULL){
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d009      	beq.n	8000e1c <AUTOMATICO_function+0x80>
			displayModo(MANUAL);
 8000e08:	2001      	movs	r0, #1
 8000e0a:	f7ff fb89 	bl	8000520 <displayModo>
			buffer[0] = '\0';
 8000e0e:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <AUTOMATICO_function+0xc0>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]
			Current_State = MANUAL;
 8000e14:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <AUTOMATICO_function+0xd4>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	701a      	strb	r2, [r3, #0]
}
 8000e1a:	e018      	b.n	8000e4e <AUTOMATICO_function+0xb2>
		else if(sE != NULL){
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d009      	beq.n	8000e36 <AUTOMATICO_function+0x9a>
			displayModo(ESPERA);
 8000e22:	2000      	movs	r0, #0
 8000e24:	f7ff fb7c 	bl	8000520 <displayModo>
			buffer[0] = '\0';
 8000e28:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <AUTOMATICO_function+0xc0>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	701a      	strb	r2, [r3, #0]
			Current_State = ESPERA;
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <AUTOMATICO_function+0xd4>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	701a      	strb	r2, [r3, #0]
}
 8000e34:	e00b      	b.n	8000e4e <AUTOMATICO_function+0xb2>
		else if(sH != NULL){
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d008      	beq.n	8000e4e <AUTOMATICO_function+0xb2>
			displayModo(HORARIO);
 8000e3c:	2002      	movs	r0, #2
 8000e3e:	f7ff fb6f 	bl	8000520 <displayModo>
			buffer[0] = '\0';
 8000e42:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <AUTOMATICO_function+0xc0>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	701a      	strb	r2, [r3, #0]
			Current_State = HORARIO;
 8000e48:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <AUTOMATICO_function+0xd4>)
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	701a      	strb	r2, [r3, #0]
}
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000000 	.word	0x20000000
 8000e5c:	200002d0 	.word	0x200002d0
 8000e60:	20000004 	.word	0x20000004
 8000e64:	20000008 	.word	0x20000008
 8000e68:	2000000c 	.word	0x2000000c
 8000e6c:	20000318 	.word	0x20000318
 8000e70:	20000314 	.word	0x20000314

08000e74 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){ //Horas
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e84:	d104      	bne.n	8000e90 <HAL_TIM_PeriodElapsedCallback+0x1c>
		horas++;
 8000e86:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	4a08      	ldr	r2, [pc, #32]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000e8e:	6013      	str	r3, [r2, #0]
	}
	if(htim->Instance == TIM3){ //Minutos
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a07      	ldr	r2, [pc, #28]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d104      	bne.n	8000ea4 <HAL_TIM_PeriodElapsedCallback+0x30>
		minutos++;
 8000e9a:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	4a05      	ldr	r2, [pc, #20]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000ea2:	6013      	str	r3, [r2, #0]
	}
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	200002cc 	.word	0x200002cc
 8000eb4:	40000400 	.word	0x40000400
 8000eb8:	200002c8 	.word	0x200002c8

08000ebc <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	80fb      	strh	r3, [r7, #6]
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)){};
 8000ec6:	bf00      	nop
 8000ec8:	2101      	movs	r1, #1
 8000eca:	480f      	ldr	r0, [pc, #60]	; (8000f08 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000ecc:	f000 ff18 	bl	8001d00 <HAL_GPIO_ReadPin>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d1f8      	bne.n	8000ec8 <HAL_GPIO_EXTI_Callback+0xc>
    if (GPIO_Pin == GPIO_PIN_0) // check if the interrupt was triggered by PA0
 8000ed6:	88fb      	ldrh	r3, [r7, #6]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d111      	bne.n	8000f00 <HAL_GPIO_EXTI_Callback+0x44>
    {
        uint32_t current_time = HAL_GetTick(); // get current time
 8000edc:	f000 f9d8 	bl	8001290 <HAL_GetTick>
 8000ee0:	60f8      	str	r0, [r7, #12]
        if (current_time < last_interrupt_time + DEBOUNCE_DELAY) // check if the interrupt was triggered within the debounce delay
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <HAL_GPIO_EXTI_Callback+0x50>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	3332      	adds	r3, #50	; 0x32
 8000ee8:	461a      	mov	r2, r3
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d306      	bcc.n	8000efe <HAL_GPIO_EXTI_Callback+0x42>
        {
            return; // ignore interrupt
        }
        last_interrupt_time = current_time; // update last interrupt time
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	4a06      	ldr	r2, [pc, #24]	; (8000f0c <HAL_GPIO_EXTI_Callback+0x50>)
 8000ef4:	6013      	str	r3, [r2, #0]
        btn_pressed = 1;
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_GPIO_EXTI_Callback+0x54>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	e000      	b.n	8000f00 <HAL_GPIO_EXTI_Callback+0x44>
            return; // ignore interrupt
 8000efe:	bf00      	nop
    }
}
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40020000 	.word	0x40020000
 8000f0c:	20000310 	.word	0x20000310
 8000f10:	20000318 	.word	0x20000318

08000f14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f18:	b672      	cpsid	i
}
 8000f1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <Error_Handler+0x8>
	...

08000f20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <HAL_MspInit+0x4c>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2e:	4a0f      	ldr	r2, [pc, #60]	; (8000f6c <HAL_MspInit+0x4c>)
 8000f30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f34:	6453      	str	r3, [r2, #68]	; 0x44
 8000f36:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <HAL_MspInit+0x4c>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	603b      	str	r3, [r7, #0]
 8000f46:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <HAL_MspInit+0x4c>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	4a08      	ldr	r2, [pc, #32]	; (8000f6c <HAL_MspInit+0x4c>)
 8000f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f50:	6413      	str	r3, [r2, #64]	; 0x40
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <HAL_MspInit+0x4c>)
 8000f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f5a:	603b      	str	r3, [r7, #0]
 8000f5c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f5e:	2007      	movs	r0, #7
 8000f60:	f000 fd08 	bl	8001974 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40023800 	.word	0x40023800

08000f70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	; 0x28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a17      	ldr	r2, [pc, #92]	; (8000fec <HAL_ADC_MspInit+0x7c>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d127      	bne.n	8000fe2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
 8000f96:	4b16      	ldr	r3, [pc, #88]	; (8000ff0 <HAL_ADC_MspInit+0x80>)
 8000f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9a:	4a15      	ldr	r2, [pc, #84]	; (8000ff0 <HAL_ADC_MspInit+0x80>)
 8000f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fa2:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <HAL_ADC_MspInit+0x80>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <HAL_ADC_MspInit+0x80>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	4a0e      	ldr	r2, [pc, #56]	; (8000ff0 <HAL_ADC_MspInit+0x80>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <HAL_ADC_MspInit+0x80>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fca:	2310      	movs	r3, #16
 8000fcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <HAL_ADC_MspInit+0x84>)
 8000fde:	f000 fd0b 	bl	80019f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fe2:	bf00      	nop
 8000fe4:	3728      	adds	r7, #40	; 0x28
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40012000 	.word	0x40012000
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40020000 	.word	0x40020000

08000ff8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001008:	d116      	bne.n	8001038 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
 800100e:	4b24      	ldr	r3, [pc, #144]	; (80010a0 <HAL_TIM_Base_MspInit+0xa8>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	4a23      	ldr	r2, [pc, #140]	; (80010a0 <HAL_TIM_Base_MspInit+0xa8>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6413      	str	r3, [r2, #64]	; 0x40
 800101a:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <HAL_TIM_Base_MspInit+0xa8>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	617b      	str	r3, [r7, #20]
 8001024:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2100      	movs	r1, #0
 800102a:	201c      	movs	r0, #28
 800102c:	f000 fcad 	bl	800198a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001030:	201c      	movs	r0, #28
 8001032:	f000 fcc6 	bl	80019c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001036:	e02e      	b.n	8001096 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a19      	ldr	r2, [pc, #100]	; (80010a4 <HAL_TIM_Base_MspInit+0xac>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d116      	bne.n	8001070 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]
 8001046:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <HAL_TIM_Base_MspInit+0xa8>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	4a15      	ldr	r2, [pc, #84]	; (80010a0 <HAL_TIM_Base_MspInit+0xa8>)
 800104c:	f043 0302 	orr.w	r3, r3, #2
 8001050:	6413      	str	r3, [r2, #64]	; 0x40
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <HAL_TIM_Base_MspInit+0xa8>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2100      	movs	r1, #0
 8001062:	201d      	movs	r0, #29
 8001064:	f000 fc91 	bl	800198a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001068:	201d      	movs	r0, #29
 800106a:	f000 fcaa 	bl	80019c2 <HAL_NVIC_EnableIRQ>
}
 800106e:	e012      	b.n	8001096 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM5)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a0c      	ldr	r2, [pc, #48]	; (80010a8 <HAL_TIM_Base_MspInit+0xb0>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d10d      	bne.n	8001096 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <HAL_TIM_Base_MspInit+0xa8>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	4a07      	ldr	r2, [pc, #28]	; (80010a0 <HAL_TIM_Base_MspInit+0xa8>)
 8001084:	f043 0308 	orr.w	r3, r3, #8
 8001088:	6413      	str	r3, [r2, #64]	; 0x40
 800108a:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <HAL_TIM_Base_MspInit+0xa8>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	f003 0308 	and.w	r3, r3, #8
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
}
 8001096:	bf00      	nop
 8001098:	3718      	adds	r7, #24
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40000400 	.word	0x40000400
 80010a8:	40000c00 	.word	0x40000c00

080010ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010b0:	e7fe      	b.n	80010b0 <NMI_Handler+0x4>

080010b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010b6:	e7fe      	b.n	80010b6 <HardFault_Handler+0x4>

080010b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010bc:	e7fe      	b.n	80010bc <MemManage_Handler+0x4>

080010be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c2:	e7fe      	b.n	80010c2 <BusFault_Handler+0x4>

080010c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <UsageFault_Handler+0x4>

080010ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f8:	f000 f8b6 	bl	8001268 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}

08001100 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001104:	2001      	movs	r0, #1
 8001106:	f000 fe2d 	bl	8001d64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
	...

08001110 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001114:	4802      	ldr	r0, [pc, #8]	; (8001120 <TIM2_IRQHandler+0x10>)
 8001116:	f002 fe0c 	bl	8003d32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200001f0 	.word	0x200001f0

08001124 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001128:	4802      	ldr	r0, [pc, #8]	; (8001134 <TIM3_IRQHandler+0x10>)
 800112a:	f002 fe02 	bl	8003d32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000238 	.word	0x20000238

08001138 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800113c:	4802      	ldr	r0, [pc, #8]	; (8001148 <OTG_FS_IRQHandler+0x10>)
 800113e:	f000 ff79 	bl	8002034 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20001800 	.word	0x20001800

0800114c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <SystemInit+0x20>)
 8001152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001156:	4a05      	ldr	r2, [pc, #20]	; (800116c <SystemInit+0x20>)
 8001158:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800115c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001170:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001174:	480d      	ldr	r0, [pc, #52]	; (80011ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001176:	490e      	ldr	r1, [pc, #56]	; (80011b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001178:	4a0e      	ldr	r2, [pc, #56]	; (80011b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800117a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800117c:	e002      	b.n	8001184 <LoopCopyDataInit>

0800117e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800117e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001180:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001182:	3304      	adds	r3, #4

08001184 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001184:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001186:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001188:	d3f9      	bcc.n	800117e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800118a:	4a0b      	ldr	r2, [pc, #44]	; (80011b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800118c:	4c0b      	ldr	r4, [pc, #44]	; (80011bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800118e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001190:	e001      	b.n	8001196 <LoopFillZerobss>

08001192 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001192:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001194:	3204      	adds	r2, #4

08001196 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001196:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001198:	d3fb      	bcc.n	8001192 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800119a:	f7ff ffd7 	bl	800114c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800119e:	f007 faa1 	bl	80086e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011a2:	f7ff fa29 	bl	80005f8 <main>
  bx  lr    
 80011a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b0:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 80011b4:	08008abc 	.word	0x08008abc
  ldr r2, =_sbss
 80011b8:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 80011bc:	20001f2c 	.word	0x20001f2c

080011c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011c0:	e7fe      	b.n	80011c0 <ADC_IRQHandler>
	...

080011c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011c8:	4b0e      	ldr	r3, [pc, #56]	; (8001204 <HAL_Init+0x40>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a0d      	ldr	r2, [pc, #52]	; (8001204 <HAL_Init+0x40>)
 80011ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011d4:	4b0b      	ldr	r3, [pc, #44]	; (8001204 <HAL_Init+0x40>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a0a      	ldr	r2, [pc, #40]	; (8001204 <HAL_Init+0x40>)
 80011da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <HAL_Init+0x40>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a07      	ldr	r2, [pc, #28]	; (8001204 <HAL_Init+0x40>)
 80011e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ec:	2003      	movs	r0, #3
 80011ee:	f000 fbc1 	bl	8001974 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011f2:	2000      	movs	r0, #0
 80011f4:	f000 f808 	bl	8001208 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f8:	f7ff fe92 	bl	8000f20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023c00 	.word	0x40023c00

08001208 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_InitTick+0x54>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <HAL_InitTick+0x58>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	4619      	mov	r1, r3
 800121a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001222:	fbb2 f3f3 	udiv	r3, r2, r3
 8001226:	4618      	mov	r0, r3
 8001228:	f000 fbd9 	bl	80019de <HAL_SYSTICK_Config>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e00e      	b.n	8001254 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b0f      	cmp	r3, #15
 800123a:	d80a      	bhi.n	8001252 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800123c:	2200      	movs	r2, #0
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	f04f 30ff 	mov.w	r0, #4294967295
 8001244:	f000 fba1 	bl	800198a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001248:	4a06      	ldr	r2, [pc, #24]	; (8001264 <HAL_InitTick+0x5c>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800124e:	2300      	movs	r3, #0
 8001250:	e000      	b.n	8001254 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
}
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	2000002c 	.word	0x2000002c
 8001260:	20000034 	.word	0x20000034
 8001264:	20000030 	.word	0x20000030

08001268 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800126c:	4b06      	ldr	r3, [pc, #24]	; (8001288 <HAL_IncTick+0x20>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	461a      	mov	r2, r3
 8001272:	4b06      	ldr	r3, [pc, #24]	; (800128c <HAL_IncTick+0x24>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4413      	add	r3, r2
 8001278:	4a04      	ldr	r2, [pc, #16]	; (800128c <HAL_IncTick+0x24>)
 800127a:	6013      	str	r3, [r2, #0]
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	20000034 	.word	0x20000034
 800128c:	2000031c 	.word	0x2000031c

08001290 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  return uwTick;
 8001294:	4b03      	ldr	r3, [pc, #12]	; (80012a4 <HAL_GetTick+0x14>)
 8001296:	681b      	ldr	r3, [r3, #0]
}
 8001298:	4618      	mov	r0, r3
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	2000031c 	.word	0x2000031c

080012a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012b0:	f7ff ffee 	bl	8001290 <HAL_GetTick>
 80012b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c0:	d005      	beq.n	80012ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012c2:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <HAL_Delay+0x44>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	461a      	mov	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4413      	add	r3, r2
 80012cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012ce:	bf00      	nop
 80012d0:	f7ff ffde 	bl	8001290 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d8f7      	bhi.n	80012d0 <HAL_Delay+0x28>
  {
  }
}
 80012e0:	bf00      	nop
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000034 	.word	0x20000034

080012f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012f8:	2300      	movs	r3, #0
 80012fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d101      	bne.n	8001306 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e033      	b.n	800136e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	2b00      	cmp	r3, #0
 800130c:	d109      	bne.n	8001322 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff fe2e 	bl	8000f70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	f003 0310 	and.w	r3, r3, #16
 800132a:	2b00      	cmp	r3, #0
 800132c:	d118      	bne.n	8001360 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001336:	f023 0302 	bic.w	r3, r3, #2
 800133a:	f043 0202 	orr.w	r2, r3, #2
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f000 f94a 	bl	80015dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f023 0303 	bic.w	r3, r3, #3
 8001356:	f043 0201 	orr.w	r2, r3, #1
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	641a      	str	r2, [r3, #64]	; 0x40
 800135e:	e001      	b.n	8001364 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2200      	movs	r2, #0
 8001368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800136c:	7bfb      	ldrb	r3, [r7, #15]
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001382:	2300      	movs	r3, #0
 8001384:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800138c:	2b01      	cmp	r3, #1
 800138e:	d101      	bne.n	8001394 <HAL_ADC_ConfigChannel+0x1c>
 8001390:	2302      	movs	r3, #2
 8001392:	e113      	b.n	80015bc <HAL_ADC_ConfigChannel+0x244>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2201      	movs	r2, #1
 8001398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b09      	cmp	r3, #9
 80013a2:	d925      	bls.n	80013f0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	68d9      	ldr	r1, [r3, #12]
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	461a      	mov	r2, r3
 80013b2:	4613      	mov	r3, r2
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	4413      	add	r3, r2
 80013b8:	3b1e      	subs	r3, #30
 80013ba:	2207      	movs	r2, #7
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43da      	mvns	r2, r3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	400a      	ands	r2, r1
 80013c8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	68d9      	ldr	r1, [r3, #12]
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	689a      	ldr	r2, [r3, #8]
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	b29b      	uxth	r3, r3
 80013da:	4618      	mov	r0, r3
 80013dc:	4603      	mov	r3, r0
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	4403      	add	r3, r0
 80013e2:	3b1e      	subs	r3, #30
 80013e4:	409a      	lsls	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	430a      	orrs	r2, r1
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	e022      	b.n	8001436 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	6919      	ldr	r1, [r3, #16]
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	461a      	mov	r2, r3
 80013fe:	4613      	mov	r3, r2
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	4413      	add	r3, r2
 8001404:	2207      	movs	r2, #7
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	43da      	mvns	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	400a      	ands	r2, r1
 8001412:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6919      	ldr	r1, [r3, #16]
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	689a      	ldr	r2, [r3, #8]
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	b29b      	uxth	r3, r3
 8001424:	4618      	mov	r0, r3
 8001426:	4603      	mov	r3, r0
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	4403      	add	r3, r0
 800142c:	409a      	lsls	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	430a      	orrs	r2, r1
 8001434:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b06      	cmp	r3, #6
 800143c:	d824      	bhi.n	8001488 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685a      	ldr	r2, [r3, #4]
 8001448:	4613      	mov	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4413      	add	r3, r2
 800144e:	3b05      	subs	r3, #5
 8001450:	221f      	movs	r2, #31
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	43da      	mvns	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	400a      	ands	r2, r1
 800145e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	b29b      	uxth	r3, r3
 800146c:	4618      	mov	r0, r3
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	4613      	mov	r3, r2
 8001474:	009b      	lsls	r3, r3, #2
 8001476:	4413      	add	r3, r2
 8001478:	3b05      	subs	r3, #5
 800147a:	fa00 f203 	lsl.w	r2, r0, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	430a      	orrs	r2, r1
 8001484:	635a      	str	r2, [r3, #52]	; 0x34
 8001486:	e04c      	b.n	8001522 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	2b0c      	cmp	r3, #12
 800148e:	d824      	bhi.n	80014da <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	4613      	mov	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	3b23      	subs	r3, #35	; 0x23
 80014a2:	221f      	movs	r2, #31
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43da      	mvns	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	400a      	ands	r2, r1
 80014b0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	b29b      	uxth	r3, r3
 80014be:	4618      	mov	r0, r3
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	4613      	mov	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4413      	add	r3, r2
 80014ca:	3b23      	subs	r3, #35	; 0x23
 80014cc:	fa00 f203 	lsl.w	r2, r0, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	430a      	orrs	r2, r1
 80014d6:	631a      	str	r2, [r3, #48]	; 0x30
 80014d8:	e023      	b.n	8001522 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	3b41      	subs	r3, #65	; 0x41
 80014ec:	221f      	movs	r2, #31
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43da      	mvns	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	400a      	ands	r2, r1
 80014fa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	b29b      	uxth	r3, r3
 8001508:	4618      	mov	r0, r3
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685a      	ldr	r2, [r3, #4]
 800150e:	4613      	mov	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	3b41      	subs	r3, #65	; 0x41
 8001516:	fa00 f203 	lsl.w	r2, r0, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	430a      	orrs	r2, r1
 8001520:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001522:	4b29      	ldr	r3, [pc, #164]	; (80015c8 <HAL_ADC_ConfigChannel+0x250>)
 8001524:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a28      	ldr	r2, [pc, #160]	; (80015cc <HAL_ADC_ConfigChannel+0x254>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d10f      	bne.n	8001550 <HAL_ADC_ConfigChannel+0x1d8>
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b12      	cmp	r3, #18
 8001536:	d10b      	bne.n	8001550 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a1d      	ldr	r2, [pc, #116]	; (80015cc <HAL_ADC_ConfigChannel+0x254>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d12b      	bne.n	80015b2 <HAL_ADC_ConfigChannel+0x23a>
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a1c      	ldr	r2, [pc, #112]	; (80015d0 <HAL_ADC_ConfigChannel+0x258>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d003      	beq.n	800156c <HAL_ADC_ConfigChannel+0x1f4>
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b11      	cmp	r3, #17
 800156a:	d122      	bne.n	80015b2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a11      	ldr	r2, [pc, #68]	; (80015d0 <HAL_ADC_ConfigChannel+0x258>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d111      	bne.n	80015b2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800158e:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <HAL_ADC_ConfigChannel+0x25c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a11      	ldr	r2, [pc, #68]	; (80015d8 <HAL_ADC_ConfigChannel+0x260>)
 8001594:	fba2 2303 	umull	r2, r3, r2, r3
 8001598:	0c9a      	lsrs	r2, r3, #18
 800159a:	4613      	mov	r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	4413      	add	r3, r2
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015a4:	e002      	b.n	80015ac <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	3b01      	subs	r3, #1
 80015aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1f9      	bne.n	80015a6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	40012300 	.word	0x40012300
 80015cc:	40012000 	.word	0x40012000
 80015d0:	10000012 	.word	0x10000012
 80015d4:	2000002c 	.word	0x2000002c
 80015d8:	431bde83 	.word	0x431bde83

080015dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015e4:	4b79      	ldr	r3, [pc, #484]	; (80017cc <ADC_Init+0x1f0>)
 80015e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	431a      	orrs	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001610:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6859      	ldr	r1, [r3, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	021a      	lsls	r2, r3, #8
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001634:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6859      	ldr	r1, [r3, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001656:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6899      	ldr	r1, [r3, #8]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166e:	4a58      	ldr	r2, [pc, #352]	; (80017d0 <ADC_Init+0x1f4>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d022      	beq.n	80016ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001682:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6899      	ldr	r1, [r3, #8]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6899      	ldr	r1, [r3, #8]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	e00f      	b.n	80016da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 0202 	bic.w	r2, r2, #2
 80016e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6899      	ldr	r1, [r3, #8]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	7e1b      	ldrb	r3, [r3, #24]
 80016f4:	005a      	lsls	r2, r3, #1
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d01b      	beq.n	8001740 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001716:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001726:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6859      	ldr	r1, [r3, #4]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	3b01      	subs	r3, #1
 8001734:	035a      	lsls	r2, r3, #13
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	e007      	b.n	8001750 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800174e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800175e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	3b01      	subs	r3, #1
 800176c:	051a      	lsls	r2, r3, #20
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001784:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6899      	ldr	r1, [r3, #8]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001792:	025a      	lsls	r2, r3, #9
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6899      	ldr	r1, [r3, #8]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	029a      	lsls	r2, r3, #10
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	430a      	orrs	r2, r1
 80017be:	609a      	str	r2, [r3, #8]
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	40012300 	.word	0x40012300
 80017d0:	0f000001 	.word	0x0f000001

080017d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f0:	4013      	ands	r3, r2
 80017f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001806:	4a04      	ldr	r2, [pc, #16]	; (8001818 <__NVIC_SetPriorityGrouping+0x44>)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	60d3      	str	r3, [r2, #12]
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	e000ed00 	.word	0xe000ed00

0800181c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001820:	4b04      	ldr	r3, [pc, #16]	; (8001834 <__NVIC_GetPriorityGrouping+0x18>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	0a1b      	lsrs	r3, r3, #8
 8001826:	f003 0307 	and.w	r3, r3, #7
}
 800182a:	4618      	mov	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	2b00      	cmp	r3, #0
 8001848:	db0b      	blt.n	8001862 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	f003 021f 	and.w	r2, r3, #31
 8001850:	4907      	ldr	r1, [pc, #28]	; (8001870 <__NVIC_EnableIRQ+0x38>)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	095b      	lsrs	r3, r3, #5
 8001858:	2001      	movs	r0, #1
 800185a:	fa00 f202 	lsl.w	r2, r0, r2
 800185e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000e100 	.word	0xe000e100

08001874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	6039      	str	r1, [r7, #0]
 800187e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001884:	2b00      	cmp	r3, #0
 8001886:	db0a      	blt.n	800189e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	b2da      	uxtb	r2, r3
 800188c:	490c      	ldr	r1, [pc, #48]	; (80018c0 <__NVIC_SetPriority+0x4c>)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	0112      	lsls	r2, r2, #4
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	440b      	add	r3, r1
 8001898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800189c:	e00a      	b.n	80018b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4908      	ldr	r1, [pc, #32]	; (80018c4 <__NVIC_SetPriority+0x50>)
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	3b04      	subs	r3, #4
 80018ac:	0112      	lsls	r2, r2, #4
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	440b      	add	r3, r1
 80018b2:	761a      	strb	r2, [r3, #24]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000e100 	.word	0xe000e100
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b089      	sub	sp, #36	; 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f1c3 0307 	rsb	r3, r3, #7
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	bf28      	it	cs
 80018e6:	2304      	movcs	r3, #4
 80018e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3304      	adds	r3, #4
 80018ee:	2b06      	cmp	r3, #6
 80018f0:	d902      	bls.n	80018f8 <NVIC_EncodePriority+0x30>
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3b03      	subs	r3, #3
 80018f6:	e000      	b.n	80018fa <NVIC_EncodePriority+0x32>
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43da      	mvns	r2, r3
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	401a      	ands	r2, r3
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001910:	f04f 31ff 	mov.w	r1, #4294967295
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	fa01 f303 	lsl.w	r3, r1, r3
 800191a:	43d9      	mvns	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	4313      	orrs	r3, r2
         );
}
 8001922:	4618      	mov	r0, r3
 8001924:	3724      	adds	r7, #36	; 0x24
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
	...

08001930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001940:	d301      	bcc.n	8001946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001942:	2301      	movs	r3, #1
 8001944:	e00f      	b.n	8001966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001946:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <SysTick_Config+0x40>)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3b01      	subs	r3, #1
 800194c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800194e:	210f      	movs	r1, #15
 8001950:	f04f 30ff 	mov.w	r0, #4294967295
 8001954:	f7ff ff8e 	bl	8001874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001958:	4b05      	ldr	r3, [pc, #20]	; (8001970 <SysTick_Config+0x40>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800195e:	4b04      	ldr	r3, [pc, #16]	; (8001970 <SysTick_Config+0x40>)
 8001960:	2207      	movs	r2, #7
 8001962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	e000e010 	.word	0xe000e010

08001974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ff29 	bl	80017d4 <__NVIC_SetPriorityGrouping>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800198a:	b580      	push	{r7, lr}
 800198c:	b086      	sub	sp, #24
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800199c:	f7ff ff3e 	bl	800181c <__NVIC_GetPriorityGrouping>
 80019a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	68b9      	ldr	r1, [r7, #8]
 80019a6:	6978      	ldr	r0, [r7, #20]
 80019a8:	f7ff ff8e 	bl	80018c8 <NVIC_EncodePriority>
 80019ac:	4602      	mov	r2, r0
 80019ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff5d 	bl	8001874 <__NVIC_SetPriority>
}
 80019ba:	bf00      	nop
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff ff31 	bl	8001838 <__NVIC_EnableIRQ>
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ffa2 	bl	8001930 <SysTick_Config>
 80019ec:	4603      	mov	r3, r0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b089      	sub	sp, #36	; 0x24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
 8001a12:	e159      	b.n	8001cc8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a14:	2201      	movs	r2, #1
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	697a      	ldr	r2, [r7, #20]
 8001a24:	4013      	ands	r3, r2
 8001a26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	f040 8148 	bne.w	8001cc2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f003 0303 	and.w	r3, r3, #3
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d005      	beq.n	8001a4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d130      	bne.n	8001aac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	2203      	movs	r2, #3
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	68da      	ldr	r2, [r3, #12]
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a80:	2201      	movs	r2, #1
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	091b      	lsrs	r3, r3, #4
 8001a96:	f003 0201 	and.w	r2, r3, #1
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	2b03      	cmp	r3, #3
 8001ab6:	d017      	beq.n	8001ae8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	2203      	movs	r2, #3
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	689a      	ldr	r2, [r3, #8]
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 0303 	and.w	r3, r3, #3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d123      	bne.n	8001b3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	08da      	lsrs	r2, r3, #3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3208      	adds	r2, #8
 8001afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	f003 0307 	and.w	r3, r3, #7
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	220f      	movs	r2, #15
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	691a      	ldr	r2, [r3, #16]
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f003 0307 	and.w	r3, r3, #7
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	08da      	lsrs	r2, r3, #3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3208      	adds	r2, #8
 8001b36:	69b9      	ldr	r1, [r7, #24]
 8001b38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	2203      	movs	r2, #3
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4013      	ands	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 0203 	and.w	r2, r3, #3
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f000 80a2 	beq.w	8001cc2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	4b57      	ldr	r3, [pc, #348]	; (8001ce0 <HAL_GPIO_Init+0x2e8>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	4a56      	ldr	r2, [pc, #344]	; (8001ce0 <HAL_GPIO_Init+0x2e8>)
 8001b88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b8e:	4b54      	ldr	r3, [pc, #336]	; (8001ce0 <HAL_GPIO_Init+0x2e8>)
 8001b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b9a:	4a52      	ldr	r2, [pc, #328]	; (8001ce4 <HAL_GPIO_Init+0x2ec>)
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	089b      	lsrs	r3, r3, #2
 8001ba0:	3302      	adds	r3, #2
 8001ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	f003 0303 	and.w	r3, r3, #3
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	220f      	movs	r2, #15
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	43db      	mvns	r3, r3
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a49      	ldr	r2, [pc, #292]	; (8001ce8 <HAL_GPIO_Init+0x2f0>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d019      	beq.n	8001bfa <HAL_GPIO_Init+0x202>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a48      	ldr	r2, [pc, #288]	; (8001cec <HAL_GPIO_Init+0x2f4>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d013      	beq.n	8001bf6 <HAL_GPIO_Init+0x1fe>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a47      	ldr	r2, [pc, #284]	; (8001cf0 <HAL_GPIO_Init+0x2f8>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d00d      	beq.n	8001bf2 <HAL_GPIO_Init+0x1fa>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a46      	ldr	r2, [pc, #280]	; (8001cf4 <HAL_GPIO_Init+0x2fc>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d007      	beq.n	8001bee <HAL_GPIO_Init+0x1f6>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a45      	ldr	r2, [pc, #276]	; (8001cf8 <HAL_GPIO_Init+0x300>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d101      	bne.n	8001bea <HAL_GPIO_Init+0x1f2>
 8001be6:	2304      	movs	r3, #4
 8001be8:	e008      	b.n	8001bfc <HAL_GPIO_Init+0x204>
 8001bea:	2307      	movs	r3, #7
 8001bec:	e006      	b.n	8001bfc <HAL_GPIO_Init+0x204>
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e004      	b.n	8001bfc <HAL_GPIO_Init+0x204>
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	e002      	b.n	8001bfc <HAL_GPIO_Init+0x204>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <HAL_GPIO_Init+0x204>
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	69fa      	ldr	r2, [r7, #28]
 8001bfe:	f002 0203 	and.w	r2, r2, #3
 8001c02:	0092      	lsls	r2, r2, #2
 8001c04:	4093      	lsls	r3, r2
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c0c:	4935      	ldr	r1, [pc, #212]	; (8001ce4 <HAL_GPIO_Init+0x2ec>)
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	089b      	lsrs	r3, r3, #2
 8001c12:	3302      	adds	r3, #2
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c1a:	4b38      	ldr	r3, [pc, #224]	; (8001cfc <HAL_GPIO_Init+0x304>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	43db      	mvns	r3, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4013      	ands	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c3e:	4a2f      	ldr	r2, [pc, #188]	; (8001cfc <HAL_GPIO_Init+0x304>)
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c44:	4b2d      	ldr	r3, [pc, #180]	; (8001cfc <HAL_GPIO_Init+0x304>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c68:	4a24      	ldr	r2, [pc, #144]	; (8001cfc <HAL_GPIO_Init+0x304>)
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c6e:	4b23      	ldr	r3, [pc, #140]	; (8001cfc <HAL_GPIO_Init+0x304>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	43db      	mvns	r3, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c92:	4a1a      	ldr	r2, [pc, #104]	; (8001cfc <HAL_GPIO_Init+0x304>)
 8001c94:	69bb      	ldr	r3, [r7, #24]
 8001c96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c98:	4b18      	ldr	r3, [pc, #96]	; (8001cfc <HAL_GPIO_Init+0x304>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d003      	beq.n	8001cbc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cbc:	4a0f      	ldr	r2, [pc, #60]	; (8001cfc <HAL_GPIO_Init+0x304>)
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	61fb      	str	r3, [r7, #28]
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	2b0f      	cmp	r3, #15
 8001ccc:	f67f aea2 	bls.w	8001a14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cd0:	bf00      	nop
 8001cd2:	bf00      	nop
 8001cd4:	3724      	adds	r7, #36	; 0x24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	40013800 	.word	0x40013800
 8001ce8:	40020000 	.word	0x40020000
 8001cec:	40020400 	.word	0x40020400
 8001cf0:	40020800 	.word	0x40020800
 8001cf4:	40020c00 	.word	0x40020c00
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	40013c00 	.word	0x40013c00

08001d00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691a      	ldr	r2, [r3, #16]
 8001d10:	887b      	ldrh	r3, [r7, #2]
 8001d12:	4013      	ands	r3, r2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d002      	beq.n	8001d1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	73fb      	strb	r3, [r7, #15]
 8001d1c:	e001      	b.n	8001d22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	460b      	mov	r3, r1
 8001d3a:	807b      	strh	r3, [r7, #2]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d40:	787b      	ldrb	r3, [r7, #1]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d46:	887a      	ldrh	r2, [r7, #2]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d4c:	e003      	b.n	8001d56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d4e:	887b      	ldrh	r3, [r7, #2]
 8001d50:	041a      	lsls	r2, r3, #16
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	619a      	str	r2, [r3, #24]
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
	...

08001d64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d6e:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d70:	695a      	ldr	r2, [r3, #20]
 8001d72:	88fb      	ldrh	r3, [r7, #6]
 8001d74:	4013      	ands	r3, r2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d006      	beq.n	8001d88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d7a:	4a05      	ldr	r2, [pc, #20]	; (8001d90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d7c:	88fb      	ldrh	r3, [r7, #6]
 8001d7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d80:	88fb      	ldrh	r3, [r7, #6]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff f89a 	bl	8000ebc <HAL_GPIO_EXTI_Callback>
  }
}
 8001d88:	bf00      	nop
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40013c00 	.word	0x40013c00

08001d94 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d96:	b08f      	sub	sp, #60	; 0x3c
 8001d98:	af0a      	add	r7, sp, #40	; 0x28
 8001d9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e10f      	b.n	8001fc6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d106      	bne.n	8001dc6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f006 f97b 	bl	80080bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2203      	movs	r2, #3
 8001dca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d102      	bne.n	8001de0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f002 fc4c 	bl	8004682 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	603b      	str	r3, [r7, #0]
 8001df0:	687e      	ldr	r6, [r7, #4]
 8001df2:	466d      	mov	r5, sp
 8001df4:	f106 0410 	add.w	r4, r6, #16
 8001df8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dfc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dfe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e00:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e04:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e08:	1d33      	adds	r3, r6, #4
 8001e0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e0c:	6838      	ldr	r0, [r7, #0]
 8001e0e:	f002 fb23 	bl	8004458 <USB_CoreInit>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d005      	beq.n	8001e24 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e0d0      	b.n	8001fc6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2100      	movs	r1, #0
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f002 fc3a 	bl	80046a4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e30:	2300      	movs	r3, #0
 8001e32:	73fb      	strb	r3, [r7, #15]
 8001e34:	e04a      	b.n	8001ecc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e36:	7bfa      	ldrb	r2, [r7, #15]
 8001e38:	6879      	ldr	r1, [r7, #4]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	4413      	add	r3, r2
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	440b      	add	r3, r1
 8001e44:	333d      	adds	r3, #61	; 0x3d
 8001e46:	2201      	movs	r2, #1
 8001e48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e4a:	7bfa      	ldrb	r2, [r7, #15]
 8001e4c:	6879      	ldr	r1, [r7, #4]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	4413      	add	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	440b      	add	r3, r1
 8001e58:	333c      	adds	r3, #60	; 0x3c
 8001e5a:	7bfa      	ldrb	r2, [r7, #15]
 8001e5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001e5e:	7bfa      	ldrb	r2, [r7, #15]
 8001e60:	7bfb      	ldrb	r3, [r7, #15]
 8001e62:	b298      	uxth	r0, r3
 8001e64:	6879      	ldr	r1, [r7, #4]
 8001e66:	4613      	mov	r3, r2
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	4413      	add	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	440b      	add	r3, r1
 8001e70:	3344      	adds	r3, #68	; 0x44
 8001e72:	4602      	mov	r2, r0
 8001e74:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e76:	7bfa      	ldrb	r2, [r7, #15]
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	4413      	add	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	440b      	add	r3, r1
 8001e84:	3340      	adds	r3, #64	; 0x40
 8001e86:	2200      	movs	r2, #0
 8001e88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e8a:	7bfa      	ldrb	r2, [r7, #15]
 8001e8c:	6879      	ldr	r1, [r7, #4]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	4413      	add	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	440b      	add	r3, r1
 8001e98:	3348      	adds	r3, #72	; 0x48
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ea0:	6879      	ldr	r1, [r7, #4]
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	4413      	add	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	440b      	add	r3, r1
 8001eac:	334c      	adds	r3, #76	; 0x4c
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001eb2:	7bfa      	ldrb	r2, [r7, #15]
 8001eb4:	6879      	ldr	r1, [r7, #4]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	4413      	add	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	440b      	add	r3, r1
 8001ec0:	3354      	adds	r3, #84	; 0x54
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ec6:	7bfb      	ldrb	r3, [r7, #15]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	73fb      	strb	r3, [r7, #15]
 8001ecc:	7bfa      	ldrb	r2, [r7, #15]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d3af      	bcc.n	8001e36 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	73fb      	strb	r3, [r7, #15]
 8001eda:	e044      	b.n	8001f66 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001edc:	7bfa      	ldrb	r2, [r7, #15]
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	00db      	lsls	r3, r3, #3
 8001ee4:	4413      	add	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	440b      	add	r3, r1
 8001eea:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001eee:	2200      	movs	r2, #0
 8001ef0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ef2:	7bfa      	ldrb	r2, [r7, #15]
 8001ef4:	6879      	ldr	r1, [r7, #4]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	4413      	add	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	440b      	add	r3, r1
 8001f00:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001f04:	7bfa      	ldrb	r2, [r7, #15]
 8001f06:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f08:	7bfa      	ldrb	r2, [r7, #15]
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	4413      	add	r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	440b      	add	r3, r1
 8001f16:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f1e:	7bfa      	ldrb	r2, [r7, #15]
 8001f20:	6879      	ldr	r1, [r7, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	4413      	add	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	440b      	add	r3, r1
 8001f2c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f34:	7bfa      	ldrb	r2, [r7, #15]
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	4413      	add	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f4a:	7bfa      	ldrb	r2, [r7, #15]
 8001f4c:	6879      	ldr	r1, [r7, #4]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	4413      	add	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	440b      	add	r3, r1
 8001f58:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f60:	7bfb      	ldrb	r3, [r7, #15]
 8001f62:	3301      	adds	r3, #1
 8001f64:	73fb      	strb	r3, [r7, #15]
 8001f66:	7bfa      	ldrb	r2, [r7, #15]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d3b5      	bcc.n	8001edc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	603b      	str	r3, [r7, #0]
 8001f76:	687e      	ldr	r6, [r7, #4]
 8001f78:	466d      	mov	r5, sp
 8001f7a:	f106 0410 	add.w	r4, r6, #16
 8001f7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f8a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f8e:	1d33      	adds	r3, r6, #4
 8001f90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f92:	6838      	ldr	r0, [r7, #0]
 8001f94:	f002 fbd2 	bl	800473c <USB_DevInit>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d005      	beq.n	8001faa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e00d      	b.n	8001fc6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f003 fd21 	bl	8005a06 <USB_DevDisconnect>

  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3714      	adds	r7, #20
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001fce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b084      	sub	sp, #16
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d101      	bne.n	8001fea <HAL_PCD_Start+0x1c>
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	e020      	b.n	800202c <HAL_PCD_Start+0x5e>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2201      	movs	r2, #1
 8001fee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d109      	bne.n	800200e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d005      	beq.n	800200e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002006:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f002 fb24 	bl	8004660 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4618      	mov	r0, r3
 800201e:	f003 fcd1 	bl	80059c4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002034:	b590      	push	{r4, r7, lr}
 8002036:	b08d      	sub	sp, #52	; 0x34
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002042:	6a3b      	ldr	r3, [r7, #32]
 8002044:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4618      	mov	r0, r3
 800204c:	f003 fd8f 	bl	8005b6e <USB_GetMode>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	f040 848a 	bne.w	800296c <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f003 fcf3 	bl	8005a48 <USB_ReadInterrupts>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 8480 	beq.w	800296a <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	0a1b      	lsrs	r3, r3, #8
 8002074:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	f003 fce0 	bl	8005a48 <USB_ReadInterrupts>
 8002088:	4603      	mov	r3, r0
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b02      	cmp	r3, #2
 8002090:	d107      	bne.n	80020a2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	695a      	ldr	r2, [r3, #20]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f002 0202 	and.w	r2, r2, #2
 80020a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f003 fcce 	bl	8005a48 <USB_ReadInterrupts>
 80020ac:	4603      	mov	r3, r0
 80020ae:	f003 0310 	and.w	r3, r3, #16
 80020b2:	2b10      	cmp	r3, #16
 80020b4:	d161      	bne.n	800217a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	699a      	ldr	r2, [r3, #24]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 0210 	bic.w	r2, r2, #16
 80020c4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80020c6:	6a3b      	ldr	r3, [r7, #32]
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	f003 020f 	and.w	r2, r3, #15
 80020d2:	4613      	mov	r3, r2
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	4413      	add	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	4413      	add	r3, r2
 80020e2:	3304      	adds	r3, #4
 80020e4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	0c5b      	lsrs	r3, r3, #17
 80020ea:	f003 030f 	and.w	r3, r3, #15
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d124      	bne.n	800213c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d035      	beq.n	800216a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	091b      	lsrs	r3, r3, #4
 8002106:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002108:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800210c:	b29b      	uxth	r3, r3
 800210e:	461a      	mov	r2, r3
 8002110:	6a38      	ldr	r0, [r7, #32]
 8002112:	f003 fb05 	bl	8005720 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	691a      	ldr	r2, [r3, #16]
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	091b      	lsrs	r3, r3, #4
 800211e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002122:	441a      	add	r2, r3
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	6a1a      	ldr	r2, [r3, #32]
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	091b      	lsrs	r3, r3, #4
 8002130:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002134:	441a      	add	r2, r3
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	621a      	str	r2, [r3, #32]
 800213a:	e016      	b.n	800216a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	0c5b      	lsrs	r3, r3, #17
 8002140:	f003 030f 	and.w	r3, r3, #15
 8002144:	2b06      	cmp	r3, #6
 8002146:	d110      	bne.n	800216a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800214e:	2208      	movs	r2, #8
 8002150:	4619      	mov	r1, r3
 8002152:	6a38      	ldr	r0, [r7, #32]
 8002154:	f003 fae4 	bl	8005720 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	6a1a      	ldr	r2, [r3, #32]
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	091b      	lsrs	r3, r3, #4
 8002160:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002164:	441a      	add	r2, r3
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	699a      	ldr	r2, [r3, #24]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f042 0210 	orr.w	r2, r2, #16
 8002178:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f003 fc62 	bl	8005a48 <USB_ReadInterrupts>
 8002184:	4603      	mov	r3, r0
 8002186:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800218a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800218e:	f040 80a7 	bne.w	80022e0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002192:	2300      	movs	r3, #0
 8002194:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4618      	mov	r0, r3
 800219c:	f003 fc67 	bl	8005a6e <USB_ReadDevAllOutEpInterrupt>
 80021a0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80021a2:	e099      	b.n	80022d8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80021a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 808e 	beq.w	80022cc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	4611      	mov	r1, r2
 80021ba:	4618      	mov	r0, r3
 80021bc:	f003 fc8b 	bl	8005ad6 <USB_ReadDevOutEPInterrupt>
 80021c0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00c      	beq.n	80021e6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80021cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ce:	015a      	lsls	r2, r3, #5
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	4413      	add	r3, r2
 80021d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021d8:	461a      	mov	r2, r3
 80021da:	2301      	movs	r3, #1
 80021dc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80021de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f000 fec3 	bl	8002f6c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	f003 0308 	and.w	r3, r3, #8
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00c      	beq.n	800220a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	015a      	lsls	r2, r3, #5
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	4413      	add	r3, r2
 80021f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021fc:	461a      	mov	r2, r3
 80021fe:	2308      	movs	r3, #8
 8002200:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002202:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 ff99 	bl	800313c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	f003 0310 	and.w	r3, r3, #16
 8002210:	2b00      	cmp	r3, #0
 8002212:	d008      	beq.n	8002226 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	015a      	lsls	r2, r3, #5
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	4413      	add	r3, r2
 800221c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002220:	461a      	mov	r2, r3
 8002222:	2310      	movs	r3, #16
 8002224:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d030      	beq.n	8002292 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002230:	6a3b      	ldr	r3, [r7, #32]
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002238:	2b80      	cmp	r3, #128	; 0x80
 800223a:	d109      	bne.n	8002250 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	69fa      	ldr	r2, [r7, #28]
 8002246:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800224a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800224e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002252:	4613      	mov	r3, r2
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	4413      	add	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	4413      	add	r3, r2
 8002262:	3304      	adds	r3, #4
 8002264:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	78db      	ldrb	r3, [r3, #3]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d108      	bne.n	8002280 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	2200      	movs	r2, #0
 8002272:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002276:	b2db      	uxtb	r3, r3
 8002278:	4619      	mov	r1, r3
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f006 f81a 	bl	80082b4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	015a      	lsls	r2, r3, #5
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	4413      	add	r3, r2
 8002288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800228c:	461a      	mov	r2, r3
 800228e:	2302      	movs	r3, #2
 8002290:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	f003 0320 	and.w	r3, r3, #32
 8002298:	2b00      	cmp	r3, #0
 800229a:	d008      	beq.n	80022ae <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229e:	015a      	lsls	r2, r3, #5
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	4413      	add	r3, r2
 80022a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022a8:	461a      	mov	r2, r3
 80022aa:	2320      	movs	r3, #32
 80022ac:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d009      	beq.n	80022cc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80022b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ba:	015a      	lsls	r2, r3, #5
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	4413      	add	r3, r2
 80022c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022c4:	461a      	mov	r2, r3
 80022c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022ca:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ce:	3301      	adds	r3, #1
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80022d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d4:	085b      	lsrs	r3, r3, #1
 80022d6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80022d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022da:	2b00      	cmp	r3, #0
 80022dc:	f47f af62 	bne.w	80021a4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f003 fbaf 	bl	8005a48 <USB_ReadInterrupts>
 80022ea:	4603      	mov	r3, r0
 80022ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80022f4:	f040 80db 	bne.w	80024ae <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f003 fbd0 	bl	8005aa2 <USB_ReadDevAllInEpInterrupt>
 8002302:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002304:	2300      	movs	r3, #0
 8002306:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002308:	e0cd      	b.n	80024a6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800230a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 80c2 	beq.w	800249a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	4611      	mov	r1, r2
 8002320:	4618      	mov	r0, r3
 8002322:	f003 fbf6 	bl	8005b12 <USB_ReadDevInEPInterrupt>
 8002326:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b00      	cmp	r3, #0
 8002330:	d057      	beq.n	80023e2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	f003 030f 	and.w	r3, r3, #15
 8002338:	2201      	movs	r2, #1
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002346:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	43db      	mvns	r3, r3
 800234c:	69f9      	ldr	r1, [r7, #28]
 800234e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002352:	4013      	ands	r3, r2
 8002354:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	015a      	lsls	r2, r3, #5
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	4413      	add	r3, r2
 800235e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002362:	461a      	mov	r2, r3
 8002364:	2301      	movs	r3, #1
 8002366:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d132      	bne.n	80023d6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002374:	4613      	mov	r3, r2
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	4413      	add	r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	440b      	add	r3, r1
 800237e:	334c      	adds	r3, #76	; 0x4c
 8002380:	6819      	ldr	r1, [r3, #0]
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002386:	4613      	mov	r3, r2
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	4413      	add	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4403      	add	r3, r0
 8002390:	3348      	adds	r3, #72	; 0x48
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4419      	add	r1, r3
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800239a:	4613      	mov	r3, r2
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	4413      	add	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4403      	add	r3, r0
 80023a4:	334c      	adds	r3, #76	; 0x4c
 80023a6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80023a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d113      	bne.n	80023d6 <HAL_PCD_IRQHandler+0x3a2>
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023b2:	4613      	mov	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	4413      	add	r3, r2
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	440b      	add	r3, r1
 80023bc:	3354      	adds	r3, #84	; 0x54
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d108      	bne.n	80023d6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6818      	ldr	r0, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023ce:	461a      	mov	r2, r3
 80023d0:	2101      	movs	r1, #1
 80023d2:	f003 fbfd 	bl	8005bd0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	4619      	mov	r1, r3
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f005 feee 	bl	80081be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	f003 0308 	and.w	r3, r3, #8
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d008      	beq.n	80023fe <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	015a      	lsls	r2, r3, #5
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	4413      	add	r3, r2
 80023f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023f8:	461a      	mov	r2, r3
 80023fa:	2308      	movs	r3, #8
 80023fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	f003 0310 	and.w	r3, r3, #16
 8002404:	2b00      	cmp	r3, #0
 8002406:	d008      	beq.n	800241a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240a:	015a      	lsls	r2, r3, #5
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	4413      	add	r3, r2
 8002410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002414:	461a      	mov	r2, r3
 8002416:	2310      	movs	r3, #16
 8002418:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002420:	2b00      	cmp	r3, #0
 8002422:	d008      	beq.n	8002436 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	015a      	lsls	r2, r3, #5
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	4413      	add	r3, r2
 800242c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002430:	461a      	mov	r2, r3
 8002432:	2340      	movs	r3, #64	; 0x40
 8002434:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d023      	beq.n	8002488 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002440:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002442:	6a38      	ldr	r0, [r7, #32]
 8002444:	f002 fade 	bl	8004a04 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800244a:	4613      	mov	r3, r2
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	4413      	add	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	3338      	adds	r3, #56	; 0x38
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	4413      	add	r3, r2
 8002458:	3304      	adds	r3, #4
 800245a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	78db      	ldrb	r3, [r3, #3]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d108      	bne.n	8002476 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	2200      	movs	r2, #0
 8002468:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	b2db      	uxtb	r3, r3
 800246e:	4619      	mov	r1, r3
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f005 ff31 	bl	80082d8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	015a      	lsls	r2, r3, #5
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	4413      	add	r3, r2
 800247e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002482:	461a      	mov	r2, r3
 8002484:	2302      	movs	r3, #2
 8002486:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002492:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 fcdb 	bl	8002e50 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	3301      	adds	r3, #1
 800249e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80024a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a2:	085b      	lsrs	r3, r3, #1
 80024a4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80024a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f47f af2e 	bne.w	800230a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f003 fac8 	bl	8005a48 <USB_ReadInterrupts>
 80024b8:	4603      	mov	r3, r0
 80024ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80024be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80024c2:	d122      	bne.n	800250a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	69fa      	ldr	r2, [r7, #28]
 80024ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024d2:	f023 0301 	bic.w	r3, r3, #1
 80024d6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d108      	bne.n	80024f4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80024ea:	2100      	movs	r1, #0
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 fec3 	bl	8003278 <HAL_PCDEx_LPM_Callback>
 80024f2:	e002      	b.n	80024fa <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f005 fecf 	bl	8008298 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	695a      	ldr	r2, [r3, #20]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002508:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4618      	mov	r0, r3
 8002510:	f003 fa9a 	bl	8005a48 <USB_ReadInterrupts>
 8002514:	4603      	mov	r3, r0
 8002516:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800251a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800251e:	d112      	bne.n	8002546 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b01      	cmp	r3, #1
 800252e:	d102      	bne.n	8002536 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f005 fe8b 	bl	800824c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	695a      	ldr	r2, [r3, #20]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002544:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f003 fa7c 	bl	8005a48 <USB_ReadInterrupts>
 8002550:	4603      	mov	r3, r0
 8002552:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800255a:	f040 80b7 	bne.w	80026cc <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	69fa      	ldr	r2, [r7, #28]
 8002568:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800256c:	f023 0301 	bic.w	r3, r3, #1
 8002570:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2110      	movs	r1, #16
 8002578:	4618      	mov	r0, r3
 800257a:	f002 fa43 	bl	8004a04 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800257e:	2300      	movs	r3, #0
 8002580:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002582:	e046      	b.n	8002612 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002586:	015a      	lsls	r2, r3, #5
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	4413      	add	r3, r2
 800258c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002590:	461a      	mov	r2, r3
 8002592:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002596:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800259a:	015a      	lsls	r2, r3, #5
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	4413      	add	r3, r2
 80025a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025a8:	0151      	lsls	r1, r2, #5
 80025aa:	69fa      	ldr	r2, [r7, #28]
 80025ac:	440a      	add	r2, r1
 80025ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80025b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80025b6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80025b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ba:	015a      	lsls	r2, r3, #5
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	4413      	add	r3, r2
 80025c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025c4:	461a      	mov	r2, r3
 80025c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80025ca:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80025cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ce:	015a      	lsls	r2, r3, #5
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	4413      	add	r3, r2
 80025d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025dc:	0151      	lsls	r1, r2, #5
 80025de:	69fa      	ldr	r2, [r7, #28]
 80025e0:	440a      	add	r2, r1
 80025e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80025e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80025ea:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80025ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ee:	015a      	lsls	r2, r3, #5
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	4413      	add	r3, r2
 80025f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025fc:	0151      	lsls	r1, r2, #5
 80025fe:	69fa      	ldr	r2, [r7, #28]
 8002600:	440a      	add	r2, r1
 8002602:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002606:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800260a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800260c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800260e:	3301      	adds	r3, #1
 8002610:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002618:	429a      	cmp	r2, r3
 800261a:	d3b3      	bcc.n	8002584 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	69fa      	ldr	r2, [r7, #28]
 8002626:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800262a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800262e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002634:	2b00      	cmp	r3, #0
 8002636:	d016      	beq.n	8002666 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800263e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002642:	69fa      	ldr	r2, [r7, #28]
 8002644:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002648:	f043 030b 	orr.w	r3, r3, #11
 800264c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002658:	69fa      	ldr	r2, [r7, #28]
 800265a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800265e:	f043 030b 	orr.w	r3, r3, #11
 8002662:	6453      	str	r3, [r2, #68]	; 0x44
 8002664:	e015      	b.n	8002692 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	69fa      	ldr	r2, [r7, #28]
 8002670:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002674:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002678:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800267c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	69fa      	ldr	r2, [r7, #28]
 8002688:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800268c:	f043 030b 	orr.w	r3, r3, #11
 8002690:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	69fa      	ldr	r2, [r7, #28]
 800269c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026a0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80026a4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6818      	ldr	r0, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80026b6:	461a      	mov	r2, r3
 80026b8:	f003 fa8a 	bl	8005bd0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	695a      	ldr	r2, [r3, #20]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80026ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f003 f9b9 	bl	8005a48 <USB_ReadInterrupts>
 80026d6:	4603      	mov	r3, r0
 80026d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026e0:	d124      	bne.n	800272c <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f003 fa4f 	bl	8005b8a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f002 fa04 	bl	8004afe <USB_GetDevSpeed>
 80026f6:	4603      	mov	r3, r0
 80026f8:	461a      	mov	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681c      	ldr	r4, [r3, #0]
 8002702:	f001 fa29 	bl	8003b58 <HAL_RCC_GetHCLKFreq>
 8002706:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800270c:	b2db      	uxtb	r3, r3
 800270e:	461a      	mov	r2, r3
 8002710:	4620      	mov	r0, r4
 8002712:	f001 ff03 	bl	800451c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f005 fd79 	bl	800820e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	695a      	ldr	r2, [r3, #20]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800272a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f003 f989 	bl	8005a48 <USB_ReadInterrupts>
 8002736:	4603      	mov	r3, r0
 8002738:	f003 0308 	and.w	r3, r3, #8
 800273c:	2b08      	cmp	r3, #8
 800273e:	d10a      	bne.n	8002756 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f005 fd56 	bl	80081f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	695a      	ldr	r2, [r3, #20]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f002 0208 	and.w	r2, r2, #8
 8002754:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f003 f974 	bl	8005a48 <USB_ReadInterrupts>
 8002760:	4603      	mov	r3, r0
 8002762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002766:	2b80      	cmp	r3, #128	; 0x80
 8002768:	d122      	bne.n	80027b0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800276a:	6a3b      	ldr	r3, [r7, #32]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002772:	6a3b      	ldr	r3, [r7, #32]
 8002774:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002776:	2301      	movs	r3, #1
 8002778:	627b      	str	r3, [r7, #36]	; 0x24
 800277a:	e014      	b.n	80027a6 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800277c:	6879      	ldr	r1, [r7, #4]
 800277e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002780:	4613      	mov	r3, r2
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	4413      	add	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	440b      	add	r3, r1
 800278a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d105      	bne.n	80027a0 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	b2db      	uxtb	r3, r3
 8002798:	4619      	mov	r1, r3
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 fb27 	bl	8002dee <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	3301      	adds	r3, #1
 80027a4:	627b      	str	r3, [r7, #36]	; 0x24
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d3e5      	bcc.n	800277c <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f003 f947 	bl	8005a48 <USB_ReadInterrupts>
 80027ba:	4603      	mov	r3, r0
 80027bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027c4:	d13b      	bne.n	800283e <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027c6:	2301      	movs	r3, #1
 80027c8:	627b      	str	r3, [r7, #36]	; 0x24
 80027ca:	e02b      	b.n	8002824 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80027cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ce:	015a      	lsls	r2, r3, #5
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	4413      	add	r3, r2
 80027d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e0:	4613      	mov	r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	4413      	add	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	3340      	adds	r3, #64	; 0x40
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d115      	bne.n	800281e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80027f2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	da12      	bge.n	800281e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027fc:	4613      	mov	r3, r2
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4413      	add	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	440b      	add	r3, r1
 8002806:	333f      	adds	r3, #63	; 0x3f
 8002808:	2201      	movs	r2, #1
 800280a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	b2db      	uxtb	r3, r3
 8002810:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002814:	b2db      	uxtb	r3, r3
 8002816:	4619      	mov	r1, r3
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 fae8 	bl	8002dee <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	3301      	adds	r3, #1
 8002822:	627b      	str	r3, [r7, #36]	; 0x24
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800282a:	429a      	cmp	r2, r3
 800282c:	d3ce      	bcc.n	80027cc <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	695a      	ldr	r2, [r3, #20]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800283c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f003 f900 	bl	8005a48 <USB_ReadInterrupts>
 8002848:	4603      	mov	r3, r0
 800284a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800284e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002852:	d155      	bne.n	8002900 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002854:	2301      	movs	r3, #1
 8002856:	627b      	str	r3, [r7, #36]	; 0x24
 8002858:	e045      	b.n	80028e6 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	015a      	lsls	r2, r3, #5
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	4413      	add	r3, r2
 8002862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800286e:	4613      	mov	r3, r2
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	4413      	add	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	440b      	add	r3, r1
 8002878:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d12e      	bne.n	80028e0 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002882:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002884:	2b00      	cmp	r3, #0
 8002886:	da2b      	bge.n	80028e0 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002894:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002898:	429a      	cmp	r2, r3
 800289a:	d121      	bne.n	80028e0 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028a0:	4613      	mov	r3, r2
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	4413      	add	r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	440b      	add	r3, r1
 80028aa:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80028ae:	2201      	movs	r2, #1
 80028b0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80028b2:	6a3b      	ldr	r3, [r7, #32]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80028ba:	6a3b      	ldr	r3, [r7, #32]
 80028bc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80028be:	6a3b      	ldr	r3, [r7, #32]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10a      	bne.n	80028e0 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	69fa      	ldr	r2, [r7, #28]
 80028d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028dc:	6053      	str	r3, [r2, #4]
            break;
 80028de:	e007      	b.n	80028f0 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	3301      	adds	r3, #1
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d3b4      	bcc.n	800285a <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	695a      	ldr	r2, [r3, #20]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80028fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f003 f89f 	bl	8005a48 <USB_ReadInterrupts>
 800290a:	4603      	mov	r3, r0
 800290c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002914:	d10a      	bne.n	800292c <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f005 fcf0 	bl	80082fc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	695a      	ldr	r2, [r3, #20]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800292a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f003 f889 	bl	8005a48 <USB_ReadInterrupts>
 8002936:	4603      	mov	r3, r0
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b04      	cmp	r3, #4
 800293e:	d115      	bne.n	800296c <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	f003 0304 	and.w	r3, r3, #4
 800294e:	2b00      	cmp	r3, #0
 8002950:	d002      	beq.n	8002958 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f005 fce0 	bl	8008318 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6859      	ldr	r1, [r3, #4]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	430a      	orrs	r2, r1
 8002966:	605a      	str	r2, [r3, #4]
 8002968:	e000      	b.n	800296c <HAL_PCD_IRQHandler+0x938>
      return;
 800296a:	bf00      	nop
    }
  }
}
 800296c:	3734      	adds	r7, #52	; 0x34
 800296e:	46bd      	mov	sp, r7
 8002970:	bd90      	pop	{r4, r7, pc}

08002972 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b082      	sub	sp, #8
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
 800297a:	460b      	mov	r3, r1
 800297c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_PCD_SetAddress+0x1a>
 8002988:	2302      	movs	r3, #2
 800298a:	e013      	b.n	80029b4 <HAL_PCD_SetAddress+0x42>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	78fa      	ldrb	r2, [r7, #3]
 8002998:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	78fa      	ldrb	r2, [r7, #3]
 80029a2:	4611      	mov	r1, r2
 80029a4:	4618      	mov	r0, r3
 80029a6:	f002 ffe7 	bl	8005978 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80029b2:	2300      	movs	r3, #0
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	4608      	mov	r0, r1
 80029c6:	4611      	mov	r1, r2
 80029c8:	461a      	mov	r2, r3
 80029ca:	4603      	mov	r3, r0
 80029cc:	70fb      	strb	r3, [r7, #3]
 80029ce:	460b      	mov	r3, r1
 80029d0:	803b      	strh	r3, [r7, #0]
 80029d2:	4613      	mov	r3, r2
 80029d4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80029d6:	2300      	movs	r3, #0
 80029d8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	da0f      	bge.n	8002a02 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029e2:	78fb      	ldrb	r3, [r7, #3]
 80029e4:	f003 020f 	and.w	r2, r3, #15
 80029e8:	4613      	mov	r3, r2
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	4413      	add	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	3338      	adds	r3, #56	; 0x38
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	4413      	add	r3, r2
 80029f6:	3304      	adds	r3, #4
 80029f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2201      	movs	r2, #1
 80029fe:	705a      	strb	r2, [r3, #1]
 8002a00:	e00f      	b.n	8002a22 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a02:	78fb      	ldrb	r3, [r7, #3]
 8002a04:	f003 020f 	and.w	r2, r3, #15
 8002a08:	4613      	mov	r3, r2
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	4413      	add	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	4413      	add	r3, r2
 8002a18:	3304      	adds	r3, #4
 8002a1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002a22:	78fb      	ldrb	r3, [r7, #3]
 8002a24:	f003 030f 	and.w	r3, r3, #15
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002a2e:	883a      	ldrh	r2, [r7, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	78ba      	ldrb	r2, [r7, #2]
 8002a38:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	785b      	ldrb	r3, [r3, #1]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d004      	beq.n	8002a4c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002a4c:	78bb      	ldrb	r3, [r7, #2]
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d102      	bne.n	8002a58 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d101      	bne.n	8002a66 <HAL_PCD_EP_Open+0xaa>
 8002a62:	2302      	movs	r3, #2
 8002a64:	e00e      	b.n	8002a84 <HAL_PCD_EP_Open+0xc8>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68f9      	ldr	r1, [r7, #12]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f002 f867 	bl	8004b48 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002a82:	7afb      	ldrb	r3, [r7, #11]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	460b      	mov	r3, r1
 8002a96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	da0f      	bge.n	8002ac0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aa0:	78fb      	ldrb	r3, [r7, #3]
 8002aa2:	f003 020f 	and.w	r2, r3, #15
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	4413      	add	r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	3338      	adds	r3, #56	; 0x38
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3304      	adds	r3, #4
 8002ab6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2201      	movs	r2, #1
 8002abc:	705a      	strb	r2, [r3, #1]
 8002abe:	e00f      	b.n	8002ae0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ac0:	78fb      	ldrb	r3, [r7, #3]
 8002ac2:	f003 020f 	and.w	r2, r3, #15
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	4413      	add	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	3304      	adds	r3, #4
 8002ad8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002ae0:	78fb      	ldrb	r3, [r7, #3]
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	b2da      	uxtb	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d101      	bne.n	8002afa <HAL_PCD_EP_Close+0x6e>
 8002af6:	2302      	movs	r3, #2
 8002af8:	e00e      	b.n	8002b18 <HAL_PCD_EP_Close+0x8c>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68f9      	ldr	r1, [r7, #12]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f002 f8a5 	bl	8004c58 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	607a      	str	r2, [r7, #4]
 8002b2a:	603b      	str	r3, [r7, #0]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b30:	7afb      	ldrb	r3, [r7, #11]
 8002b32:	f003 020f 	and.w	r2, r3, #15
 8002b36:	4613      	mov	r3, r2
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	4413      	add	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	4413      	add	r3, r2
 8002b46:	3304      	adds	r3, #4
 8002b48:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b62:	7afb      	ldrb	r3, [r7, #11]
 8002b64:	f003 030f 	and.w	r3, r3, #15
 8002b68:	b2da      	uxtb	r2, r3
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d102      	bne.n	8002b7c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b7c:	7afb      	ldrb	r3, [r7, #11]
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d109      	bne.n	8002b9a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6818      	ldr	r0, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	461a      	mov	r2, r3
 8002b92:	6979      	ldr	r1, [r7, #20]
 8002b94:	f002 fb84 	bl	80052a0 <USB_EP0StartXfer>
 8002b98:	e008      	b.n	8002bac <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6818      	ldr	r0, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	6979      	ldr	r1, [r7, #20]
 8002ba8:	f002 f932 	bl	8004e10 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3718      	adds	r7, #24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002bc2:	78fb      	ldrb	r3, [r7, #3]
 8002bc4:	f003 020f 	and.w	r2, r3, #15
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	4413      	add	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002bd8:	681b      	ldr	r3, [r3, #0]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b086      	sub	sp, #24
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	60f8      	str	r0, [r7, #12]
 8002bee:	607a      	str	r2, [r7, #4]
 8002bf0:	603b      	str	r3, [r7, #0]
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bf6:	7afb      	ldrb	r3, [r7, #11]
 8002bf8:	f003 020f 	and.w	r2, r3, #15
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	4413      	add	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	3338      	adds	r3, #56	; 0x38
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	4413      	add	r3, r2
 8002c0a:	3304      	adds	r3, #4
 8002c0c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	2201      	movs	r2, #1
 8002c24:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c26:	7afb      	ldrb	r3, [r7, #11]
 8002c28:	f003 030f 	and.w	r3, r3, #15
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d102      	bne.n	8002c40 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c40:	7afb      	ldrb	r3, [r7, #11]
 8002c42:	f003 030f 	and.w	r3, r3, #15
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d109      	bne.n	8002c5e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6818      	ldr	r0, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	461a      	mov	r2, r3
 8002c56:	6979      	ldr	r1, [r7, #20]
 8002c58:	f002 fb22 	bl	80052a0 <USB_EP0StartXfer>
 8002c5c:	e008      	b.n	8002c70 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	6818      	ldr	r0, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	461a      	mov	r2, r3
 8002c6a:	6979      	ldr	r1, [r7, #20]
 8002c6c:	f002 f8d0 	bl	8004e10 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3718      	adds	r7, #24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b084      	sub	sp, #16
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
 8002c82:	460b      	mov	r3, r1
 8002c84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002c86:	78fb      	ldrb	r3, [r7, #3]
 8002c88:	f003 020f 	and.w	r2, r3, #15
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d901      	bls.n	8002c98 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e050      	b.n	8002d3a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	da0f      	bge.n	8002cc0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ca0:	78fb      	ldrb	r3, [r7, #3]
 8002ca2:	f003 020f 	and.w	r2, r3, #15
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	4413      	add	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	3338      	adds	r3, #56	; 0x38
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	3304      	adds	r3, #4
 8002cb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	705a      	strb	r2, [r3, #1]
 8002cbe:	e00d      	b.n	8002cdc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002cc0:	78fa      	ldrb	r2, [r7, #3]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	3304      	adds	r3, #4
 8002cd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ce2:	78fb      	ldrb	r3, [r7, #3]
 8002ce4:	f003 030f 	and.w	r3, r3, #15
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d101      	bne.n	8002cfc <HAL_PCD_EP_SetStall+0x82>
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	e01e      	b.n	8002d3a <HAL_PCD_EP_SetStall+0xc0>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68f9      	ldr	r1, [r7, #12]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f002 fd60 	bl	80057d0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d10:	78fb      	ldrb	r3, [r7, #3]
 8002d12:	f003 030f 	and.w	r3, r3, #15
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10a      	bne.n	8002d30 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6818      	ldr	r0, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	b2d9      	uxtb	r1, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	f002 ff50 	bl	8005bd0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3710      	adds	r7, #16
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b084      	sub	sp, #16
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002d4e:	78fb      	ldrb	r3, [r7, #3]
 8002d50:	f003 020f 	and.w	r2, r3, #15
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d901      	bls.n	8002d60 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e042      	b.n	8002de6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002d60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	da0f      	bge.n	8002d88 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d68:	78fb      	ldrb	r3, [r7, #3]
 8002d6a:	f003 020f 	and.w	r2, r3, #15
 8002d6e:	4613      	mov	r3, r2
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	4413      	add	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	3338      	adds	r3, #56	; 0x38
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	3304      	adds	r3, #4
 8002d7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2201      	movs	r2, #1
 8002d84:	705a      	strb	r2, [r3, #1]
 8002d86:	e00f      	b.n	8002da8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d88:	78fb      	ldrb	r3, [r7, #3]
 8002d8a:	f003 020f 	and.w	r2, r3, #15
 8002d8e:	4613      	mov	r3, r2
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	4413      	add	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	3304      	adds	r3, #4
 8002da0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dae:	78fb      	ldrb	r3, [r7, #3]
 8002db0:	f003 030f 	and.w	r3, r3, #15
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d101      	bne.n	8002dc8 <HAL_PCD_EP_ClrStall+0x86>
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	e00e      	b.n	8002de6 <HAL_PCD_EP_ClrStall+0xa4>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68f9      	ldr	r1, [r7, #12]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f002 fd68 	bl	80058ac <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b084      	sub	sp, #16
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
 8002df6:	460b      	mov	r3, r1
 8002df8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002dfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	da0c      	bge.n	8002e1c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e02:	78fb      	ldrb	r3, [r7, #3]
 8002e04:	f003 020f 	and.w	r2, r3, #15
 8002e08:	4613      	mov	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	4413      	add	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	3338      	adds	r3, #56	; 0x38
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	4413      	add	r3, r2
 8002e16:	3304      	adds	r3, #4
 8002e18:	60fb      	str	r3, [r7, #12]
 8002e1a:	e00c      	b.n	8002e36 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e1c:	78fb      	ldrb	r3, [r7, #3]
 8002e1e:	f003 020f 	and.w	r2, r3, #15
 8002e22:	4613      	mov	r3, r2
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	4413      	add	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	4413      	add	r3, r2
 8002e32:	3304      	adds	r3, #4
 8002e34:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68f9      	ldr	r1, [r7, #12]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f002 fb87 	bl	8005550 <USB_EPStopXfer>
 8002e42:	4603      	mov	r3, r0
 8002e44:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002e46:	7afb      	ldrb	r3, [r7, #11]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b08a      	sub	sp, #40	; 0x28
 8002e54:	af02      	add	r7, sp, #8
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	4613      	mov	r3, r2
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	4413      	add	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	3338      	adds	r3, #56	; 0x38
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	4413      	add	r3, r2
 8002e74:	3304      	adds	r3, #4
 8002e76:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6a1a      	ldr	r2, [r3, #32]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d901      	bls.n	8002e88 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e06c      	b.n	8002f62 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	699a      	ldr	r2, [r3, #24]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	69fa      	ldr	r2, [r7, #28]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d902      	bls.n	8002ea4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	3303      	adds	r3, #3
 8002ea8:	089b      	lsrs	r3, r3, #2
 8002eaa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002eac:	e02b      	b.n	8002f06 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	699a      	ldr	r2, [r3, #24]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	69fa      	ldr	r2, [r7, #28]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d902      	bls.n	8002eca <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	3303      	adds	r3, #3
 8002ece:	089b      	lsrs	r3, r3, #2
 8002ed0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6919      	ldr	r1, [r3, #16]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	b2da      	uxtb	r2, r3
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	6978      	ldr	r0, [r7, #20]
 8002eea:	f002 fbdb 	bl	80056a4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	691a      	ldr	r2, [r3, #16]
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	441a      	add	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6a1a      	ldr	r2, [r3, #32]
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	441a      	add	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	015a      	lsls	r2, r3, #5
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d809      	bhi.n	8002f30 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6a1a      	ldr	r2, [r3, #32]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d203      	bcs.n	8002f30 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1be      	bne.n	8002eae <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	699a      	ldr	r2, [r3, #24]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d811      	bhi.n	8002f60 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	2201      	movs	r2, #1
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	43db      	mvns	r3, r3
 8002f56:	6939      	ldr	r1, [r7, #16]
 8002f58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3720      	adds	r7, #32
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
	...

08002f6c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b088      	sub	sp, #32
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	333c      	adds	r3, #60	; 0x3c
 8002f84:	3304      	adds	r3, #4
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	015a      	lsls	r2, r3, #5
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	4413      	add	r3, r2
 8002f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d17b      	bne.n	800309a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	f003 0308 	and.w	r3, r3, #8
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d015      	beq.n	8002fd8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	4a61      	ldr	r2, [pc, #388]	; (8003134 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	f240 80b9 	bls.w	8003128 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 80b3 	beq.w	8003128 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	015a      	lsls	r2, r3, #5
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	4413      	add	r3, r2
 8002fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fce:	461a      	mov	r2, r3
 8002fd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fd4:	6093      	str	r3, [r2, #8]
 8002fd6:	e0a7      	b.n	8003128 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	f003 0320 	and.w	r3, r3, #32
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d009      	beq.n	8002ff6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	015a      	lsls	r2, r3, #5
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	4413      	add	r3, r2
 8002fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fee:	461a      	mov	r2, r3
 8002ff0:	2320      	movs	r3, #32
 8002ff2:	6093      	str	r3, [r2, #8]
 8002ff4:	e098      	b.n	8003128 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f040 8093 	bne.w	8003128 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	4a4b      	ldr	r2, [pc, #300]	; (8003134 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d90f      	bls.n	800302a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00a      	beq.n	800302a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	015a      	lsls	r2, r3, #5
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	4413      	add	r3, r2
 800301c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003020:	461a      	mov	r2, r3
 8003022:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003026:	6093      	str	r3, [r2, #8]
 8003028:	e07e      	b.n	8003128 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	4613      	mov	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	4413      	add	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	4413      	add	r3, r2
 800303c:	3304      	adds	r3, #4
 800303e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	69da      	ldr	r2, [r3, #28]
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	0159      	lsls	r1, r3, #5
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	440b      	add	r3, r1
 800304c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003056:	1ad2      	subs	r2, r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d114      	bne.n	800308c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d109      	bne.n	800307e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6818      	ldr	r0, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003074:	461a      	mov	r2, r3
 8003076:	2101      	movs	r1, #1
 8003078:	f002 fdaa 	bl	8005bd0 <USB_EP0_OutStart>
 800307c:	e006      	b.n	800308c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	691a      	ldr	r2, [r3, #16]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	441a      	add	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	b2db      	uxtb	r3, r3
 8003090:	4619      	mov	r1, r3
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f005 f878 	bl	8008188 <HAL_PCD_DataOutStageCallback>
 8003098:	e046      	b.n	8003128 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	4a26      	ldr	r2, [pc, #152]	; (8003138 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d124      	bne.n	80030ec <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00a      	beq.n	80030c2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	015a      	lsls	r2, r3, #5
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	4413      	add	r3, r2
 80030b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030b8:	461a      	mov	r2, r3
 80030ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030be:	6093      	str	r3, [r2, #8]
 80030c0:	e032      	b.n	8003128 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	f003 0320 	and.w	r3, r3, #32
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d008      	beq.n	80030de <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	015a      	lsls	r2, r3, #5
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	4413      	add	r3, r2
 80030d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030d8:	461a      	mov	r2, r3
 80030da:	2320      	movs	r3, #32
 80030dc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	4619      	mov	r1, r3
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f005 f84f 	bl	8008188 <HAL_PCD_DataOutStageCallback>
 80030ea:	e01d      	b.n	8003128 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d114      	bne.n	800311c <PCD_EP_OutXfrComplete_int+0x1b0>
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	4613      	mov	r3, r2
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	4413      	add	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	440b      	add	r3, r1
 8003100:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d108      	bne.n	800311c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6818      	ldr	r0, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003114:	461a      	mov	r2, r3
 8003116:	2100      	movs	r1, #0
 8003118:	f002 fd5a 	bl	8005bd0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	b2db      	uxtb	r3, r3
 8003120:	4619      	mov	r1, r3
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f005 f830 	bl	8008188 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3720      	adds	r7, #32
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	4f54300a 	.word	0x4f54300a
 8003138:	4f54310a 	.word	0x4f54310a

0800313c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	333c      	adds	r3, #60	; 0x3c
 8003154:	3304      	adds	r3, #4
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	015a      	lsls	r2, r3, #5
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	4413      	add	r3, r2
 8003162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	4a15      	ldr	r2, [pc, #84]	; (80031c4 <PCD_EP_OutSetupPacket_int+0x88>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d90e      	bls.n	8003190 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003178:	2b00      	cmp	r3, #0
 800317a:	d009      	beq.n	8003190 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	015a      	lsls	r2, r3, #5
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	4413      	add	r3, r2
 8003184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003188:	461a      	mov	r2, r3
 800318a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800318e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f004 ffe7 	bl	8008164 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	4a0a      	ldr	r2, [pc, #40]	; (80031c4 <PCD_EP_OutSetupPacket_int+0x88>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d90c      	bls.n	80031b8 <PCD_EP_OutSetupPacket_int+0x7c>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d108      	bne.n	80031b8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6818      	ldr	r0, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031b0:	461a      	mov	r2, r3
 80031b2:	2101      	movs	r1, #1
 80031b4:	f002 fd0c 	bl	8005bd0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	4f54300a 	.word	0x4f54300a

080031c8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	460b      	mov	r3, r1
 80031d2:	70fb      	strb	r3, [r7, #3]
 80031d4:	4613      	mov	r3, r2
 80031d6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80031e0:	78fb      	ldrb	r3, [r7, #3]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d107      	bne.n	80031f6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80031e6:	883b      	ldrh	r3, [r7, #0]
 80031e8:	0419      	lsls	r1, r3, #16
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	629a      	str	r2, [r3, #40]	; 0x28
 80031f4:	e028      	b.n	8003248 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fc:	0c1b      	lsrs	r3, r3, #16
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	4413      	add	r3, r2
 8003202:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003204:	2300      	movs	r3, #0
 8003206:	73fb      	strb	r3, [r7, #15]
 8003208:	e00d      	b.n	8003226 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	7bfb      	ldrb	r3, [r7, #15]
 8003210:	3340      	adds	r3, #64	; 0x40
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4413      	add	r3, r2
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	0c1b      	lsrs	r3, r3, #16
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	4413      	add	r3, r2
 800321e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003220:	7bfb      	ldrb	r3, [r7, #15]
 8003222:	3301      	adds	r3, #1
 8003224:	73fb      	strb	r3, [r7, #15]
 8003226:	7bfa      	ldrb	r2, [r7, #15]
 8003228:	78fb      	ldrb	r3, [r7, #3]
 800322a:	3b01      	subs	r3, #1
 800322c:	429a      	cmp	r2, r3
 800322e:	d3ec      	bcc.n	800320a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003230:	883b      	ldrh	r3, [r7, #0]
 8003232:	0418      	lsls	r0, r3, #16
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6819      	ldr	r1, [r3, #0]
 8003238:	78fb      	ldrb	r3, [r7, #3]
 800323a:	3b01      	subs	r3, #1
 800323c:	68ba      	ldr	r2, [r7, #8]
 800323e:	4302      	orrs	r2, r0
 8003240:	3340      	adds	r3, #64	; 0x40
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
 800325e:	460b      	mov	r3, r1
 8003260:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	887a      	ldrh	r2, [r7, #2]
 8003268:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	460b      	mov	r3, r1
 8003282:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e267      	b.n	8003772 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d075      	beq.n	800339a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032ae:	4b88      	ldr	r3, [pc, #544]	; (80034d0 <HAL_RCC_OscConfig+0x240>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 030c 	and.w	r3, r3, #12
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	d00c      	beq.n	80032d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032ba:	4b85      	ldr	r3, [pc, #532]	; (80034d0 <HAL_RCC_OscConfig+0x240>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032c2:	2b08      	cmp	r3, #8
 80032c4:	d112      	bne.n	80032ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032c6:	4b82      	ldr	r3, [pc, #520]	; (80034d0 <HAL_RCC_OscConfig+0x240>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032d2:	d10b      	bne.n	80032ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d4:	4b7e      	ldr	r3, [pc, #504]	; (80034d0 <HAL_RCC_OscConfig+0x240>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d05b      	beq.n	8003398 <HAL_RCC_OscConfig+0x108>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d157      	bne.n	8003398 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e242      	b.n	8003772 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032f4:	d106      	bne.n	8003304 <HAL_RCC_OscConfig+0x74>
 80032f6:	4b76      	ldr	r3, [pc, #472]	; (80034d0 <HAL_RCC_OscConfig+0x240>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a75      	ldr	r2, [pc, #468]	; (80034d0 <HAL_RCC_OscConfig+0x240>)
 80032fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003300:	6013      	str	r3, [r2, #0]
 8003302:	e01d      	b.n	8003340 <HAL_RCC_OscConfig+0xb0>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800330c:	d10c      	bne.n	8003328 <HAL_RCC_OscConfig+0x98>
 800330e:	4b70      	ldr	r3, [pc, #448]	; (80034d0 <HAL_RCC_OscConfig+0x240>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a6f      	ldr	r2, [pc, #444]	; (80034d0 <HAL_RCC_OscConfig+0x240>)
 8003314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	4b6d      	ldr	r3, [pc, #436]	; (80034d0 <HAL_RCC_OscConfig+0x240>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a6c      	ldr	r2, [pc, #432]	; (80034d0 <HAL_RCC_OscConfig+0x240>)
 8003320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003324:	6013      	str	r3, [r2, #0]
 8003326:	e00b      	b.n	8003340 <HAL_RCC_OscConfig+0xb0>
 8003328:	4b69      	ldr	r3, [pc, #420]	; (80034d0 <HAL_RCC_OscConfig+0x240>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a68      	ldr	r2, [pc, #416]	; (80034d0 <HAL_RCC_OscConfig+0x240>)
 800332e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003332:	6013      	str	r3, [r2, #0]
 8003334:	4b66      	ldr	r3, [pc, #408]	; (80034d0 <HAL_RCC_OscConfig+0x240>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a65      	ldr	r2, [pc, #404]	; (80034d0 <HAL_RCC_OscConfig+0x240>)
 800333a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800333e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d013      	beq.n	8003370 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003348:	f7fd ffa2 	bl	8001290 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003350:	f7fd ff9e 	bl	8001290 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b64      	cmp	r3, #100	; 0x64
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e207      	b.n	8003772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003362:	4b5b      	ldr	r3, [pc, #364]	; (80034d0 <HAL_RCC_OscConfig+0x240>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0f0      	beq.n	8003350 <HAL_RCC_OscConfig+0xc0>
 800336e:	e014      	b.n	800339a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003370:	f7fd ff8e 	bl	8001290 <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003378:	f7fd ff8a 	bl	8001290 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b64      	cmp	r3, #100	; 0x64
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e1f3      	b.n	8003772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800338a:	4b51      	ldr	r3, [pc, #324]	; (80034d0 <HAL_RCC_OscConfig+0x240>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1f0      	bne.n	8003378 <HAL_RCC_OscConfig+0xe8>
 8003396:	e000      	b.n	800339a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d063      	beq.n	800346e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033a6:	4b4a      	ldr	r3, [pc, #296]	; (80034d0 <HAL_RCC_OscConfig+0x240>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 030c 	and.w	r3, r3, #12
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00b      	beq.n	80033ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033b2:	4b47      	ldr	r3, [pc, #284]	; (80034d0 <HAL_RCC_OscConfig+0x240>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033ba:	2b08      	cmp	r3, #8
 80033bc:	d11c      	bne.n	80033f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033be:	4b44      	ldr	r3, [pc, #272]	; (80034d0 <HAL_RCC_OscConfig+0x240>)
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d116      	bne.n	80033f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ca:	4b41      	ldr	r3, [pc, #260]	; (80034d0 <HAL_RCC_OscConfig+0x240>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d005      	beq.n	80033e2 <HAL_RCC_OscConfig+0x152>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d001      	beq.n	80033e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e1c7      	b.n	8003772 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e2:	4b3b      	ldr	r3, [pc, #236]	; (80034d0 <HAL_RCC_OscConfig+0x240>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	4937      	ldr	r1, [pc, #220]	; (80034d0 <HAL_RCC_OscConfig+0x240>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033f6:	e03a      	b.n	800346e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d020      	beq.n	8003442 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003400:	4b34      	ldr	r3, [pc, #208]	; (80034d4 <HAL_RCC_OscConfig+0x244>)
 8003402:	2201      	movs	r2, #1
 8003404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003406:	f7fd ff43 	bl	8001290 <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800340c:	e008      	b.n	8003420 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800340e:	f7fd ff3f 	bl	8001290 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e1a8      	b.n	8003772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003420:	4b2b      	ldr	r3, [pc, #172]	; (80034d0 <HAL_RCC_OscConfig+0x240>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d0f0      	beq.n	800340e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800342c:	4b28      	ldr	r3, [pc, #160]	; (80034d0 <HAL_RCC_OscConfig+0x240>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	4925      	ldr	r1, [pc, #148]	; (80034d0 <HAL_RCC_OscConfig+0x240>)
 800343c:	4313      	orrs	r3, r2
 800343e:	600b      	str	r3, [r1, #0]
 8003440:	e015      	b.n	800346e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003442:	4b24      	ldr	r3, [pc, #144]	; (80034d4 <HAL_RCC_OscConfig+0x244>)
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003448:	f7fd ff22 	bl	8001290 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003450:	f7fd ff1e 	bl	8001290 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e187      	b.n	8003772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003462:	4b1b      	ldr	r3, [pc, #108]	; (80034d0 <HAL_RCC_OscConfig+0x240>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1f0      	bne.n	8003450 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0308 	and.w	r3, r3, #8
 8003476:	2b00      	cmp	r3, #0
 8003478:	d036      	beq.n	80034e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d016      	beq.n	80034b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003482:	4b15      	ldr	r3, [pc, #84]	; (80034d8 <HAL_RCC_OscConfig+0x248>)
 8003484:	2201      	movs	r2, #1
 8003486:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003488:	f7fd ff02 	bl	8001290 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003490:	f7fd fefe 	bl	8001290 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e167      	b.n	8003772 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034a2:	4b0b      	ldr	r3, [pc, #44]	; (80034d0 <HAL_RCC_OscConfig+0x240>)
 80034a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0f0      	beq.n	8003490 <HAL_RCC_OscConfig+0x200>
 80034ae:	e01b      	b.n	80034e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034b0:	4b09      	ldr	r3, [pc, #36]	; (80034d8 <HAL_RCC_OscConfig+0x248>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034b6:	f7fd feeb 	bl	8001290 <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034bc:	e00e      	b.n	80034dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034be:	f7fd fee7 	bl	8001290 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d907      	bls.n	80034dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e150      	b.n	8003772 <HAL_RCC_OscConfig+0x4e2>
 80034d0:	40023800 	.word	0x40023800
 80034d4:	42470000 	.word	0x42470000
 80034d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034dc:	4b88      	ldr	r3, [pc, #544]	; (8003700 <HAL_RCC_OscConfig+0x470>)
 80034de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1ea      	bne.n	80034be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0304 	and.w	r3, r3, #4
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 8097 	beq.w	8003624 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034f6:	2300      	movs	r3, #0
 80034f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034fa:	4b81      	ldr	r3, [pc, #516]	; (8003700 <HAL_RCC_OscConfig+0x470>)
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10f      	bne.n	8003526 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003506:	2300      	movs	r3, #0
 8003508:	60bb      	str	r3, [r7, #8]
 800350a:	4b7d      	ldr	r3, [pc, #500]	; (8003700 <HAL_RCC_OscConfig+0x470>)
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	4a7c      	ldr	r2, [pc, #496]	; (8003700 <HAL_RCC_OscConfig+0x470>)
 8003510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003514:	6413      	str	r3, [r2, #64]	; 0x40
 8003516:	4b7a      	ldr	r3, [pc, #488]	; (8003700 <HAL_RCC_OscConfig+0x470>)
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800351e:	60bb      	str	r3, [r7, #8]
 8003520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003522:	2301      	movs	r3, #1
 8003524:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003526:	4b77      	ldr	r3, [pc, #476]	; (8003704 <HAL_RCC_OscConfig+0x474>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352e:	2b00      	cmp	r3, #0
 8003530:	d118      	bne.n	8003564 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003532:	4b74      	ldr	r3, [pc, #464]	; (8003704 <HAL_RCC_OscConfig+0x474>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a73      	ldr	r2, [pc, #460]	; (8003704 <HAL_RCC_OscConfig+0x474>)
 8003538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800353c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800353e:	f7fd fea7 	bl	8001290 <HAL_GetTick>
 8003542:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003544:	e008      	b.n	8003558 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003546:	f7fd fea3 	bl	8001290 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e10c      	b.n	8003772 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003558:	4b6a      	ldr	r3, [pc, #424]	; (8003704 <HAL_RCC_OscConfig+0x474>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003560:	2b00      	cmp	r3, #0
 8003562:	d0f0      	beq.n	8003546 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d106      	bne.n	800357a <HAL_RCC_OscConfig+0x2ea>
 800356c:	4b64      	ldr	r3, [pc, #400]	; (8003700 <HAL_RCC_OscConfig+0x470>)
 800356e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003570:	4a63      	ldr	r2, [pc, #396]	; (8003700 <HAL_RCC_OscConfig+0x470>)
 8003572:	f043 0301 	orr.w	r3, r3, #1
 8003576:	6713      	str	r3, [r2, #112]	; 0x70
 8003578:	e01c      	b.n	80035b4 <HAL_RCC_OscConfig+0x324>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	2b05      	cmp	r3, #5
 8003580:	d10c      	bne.n	800359c <HAL_RCC_OscConfig+0x30c>
 8003582:	4b5f      	ldr	r3, [pc, #380]	; (8003700 <HAL_RCC_OscConfig+0x470>)
 8003584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003586:	4a5e      	ldr	r2, [pc, #376]	; (8003700 <HAL_RCC_OscConfig+0x470>)
 8003588:	f043 0304 	orr.w	r3, r3, #4
 800358c:	6713      	str	r3, [r2, #112]	; 0x70
 800358e:	4b5c      	ldr	r3, [pc, #368]	; (8003700 <HAL_RCC_OscConfig+0x470>)
 8003590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003592:	4a5b      	ldr	r2, [pc, #364]	; (8003700 <HAL_RCC_OscConfig+0x470>)
 8003594:	f043 0301 	orr.w	r3, r3, #1
 8003598:	6713      	str	r3, [r2, #112]	; 0x70
 800359a:	e00b      	b.n	80035b4 <HAL_RCC_OscConfig+0x324>
 800359c:	4b58      	ldr	r3, [pc, #352]	; (8003700 <HAL_RCC_OscConfig+0x470>)
 800359e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a0:	4a57      	ldr	r2, [pc, #348]	; (8003700 <HAL_RCC_OscConfig+0x470>)
 80035a2:	f023 0301 	bic.w	r3, r3, #1
 80035a6:	6713      	str	r3, [r2, #112]	; 0x70
 80035a8:	4b55      	ldr	r3, [pc, #340]	; (8003700 <HAL_RCC_OscConfig+0x470>)
 80035aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ac:	4a54      	ldr	r2, [pc, #336]	; (8003700 <HAL_RCC_OscConfig+0x470>)
 80035ae:	f023 0304 	bic.w	r3, r3, #4
 80035b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d015      	beq.n	80035e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035bc:	f7fd fe68 	bl	8001290 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035c2:	e00a      	b.n	80035da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035c4:	f7fd fe64 	bl	8001290 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e0cb      	b.n	8003772 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035da:	4b49      	ldr	r3, [pc, #292]	; (8003700 <HAL_RCC_OscConfig+0x470>)
 80035dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d0ee      	beq.n	80035c4 <HAL_RCC_OscConfig+0x334>
 80035e6:	e014      	b.n	8003612 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035e8:	f7fd fe52 	bl	8001290 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ee:	e00a      	b.n	8003606 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035f0:	f7fd fe4e 	bl	8001290 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80035fe:	4293      	cmp	r3, r2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e0b5      	b.n	8003772 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003606:	4b3e      	ldr	r3, [pc, #248]	; (8003700 <HAL_RCC_OscConfig+0x470>)
 8003608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1ee      	bne.n	80035f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003612:	7dfb      	ldrb	r3, [r7, #23]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d105      	bne.n	8003624 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003618:	4b39      	ldr	r3, [pc, #228]	; (8003700 <HAL_RCC_OscConfig+0x470>)
 800361a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361c:	4a38      	ldr	r2, [pc, #224]	; (8003700 <HAL_RCC_OscConfig+0x470>)
 800361e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003622:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	2b00      	cmp	r3, #0
 800362a:	f000 80a1 	beq.w	8003770 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800362e:	4b34      	ldr	r3, [pc, #208]	; (8003700 <HAL_RCC_OscConfig+0x470>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f003 030c 	and.w	r3, r3, #12
 8003636:	2b08      	cmp	r3, #8
 8003638:	d05c      	beq.n	80036f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	2b02      	cmp	r3, #2
 8003640:	d141      	bne.n	80036c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003642:	4b31      	ldr	r3, [pc, #196]	; (8003708 <HAL_RCC_OscConfig+0x478>)
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003648:	f7fd fe22 	bl	8001290 <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003650:	f7fd fe1e 	bl	8001290 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e087      	b.n	8003772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003662:	4b27      	ldr	r3, [pc, #156]	; (8003700 <HAL_RCC_OscConfig+0x470>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1f0      	bne.n	8003650 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	69da      	ldr	r2, [r3, #28]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	431a      	orrs	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367c:	019b      	lsls	r3, r3, #6
 800367e:	431a      	orrs	r2, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003684:	085b      	lsrs	r3, r3, #1
 8003686:	3b01      	subs	r3, #1
 8003688:	041b      	lsls	r3, r3, #16
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003690:	061b      	lsls	r3, r3, #24
 8003692:	491b      	ldr	r1, [pc, #108]	; (8003700 <HAL_RCC_OscConfig+0x470>)
 8003694:	4313      	orrs	r3, r2
 8003696:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003698:	4b1b      	ldr	r3, [pc, #108]	; (8003708 <HAL_RCC_OscConfig+0x478>)
 800369a:	2201      	movs	r2, #1
 800369c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800369e:	f7fd fdf7 	bl	8001290 <HAL_GetTick>
 80036a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036a4:	e008      	b.n	80036b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036a6:	f7fd fdf3 	bl	8001290 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e05c      	b.n	8003772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b8:	4b11      	ldr	r3, [pc, #68]	; (8003700 <HAL_RCC_OscConfig+0x470>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d0f0      	beq.n	80036a6 <HAL_RCC_OscConfig+0x416>
 80036c4:	e054      	b.n	8003770 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036c6:	4b10      	ldr	r3, [pc, #64]	; (8003708 <HAL_RCC_OscConfig+0x478>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036cc:	f7fd fde0 	bl	8001290 <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036d2:	e008      	b.n	80036e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036d4:	f7fd fddc 	bl	8001290 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e045      	b.n	8003772 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e6:	4b06      	ldr	r3, [pc, #24]	; (8003700 <HAL_RCC_OscConfig+0x470>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d1f0      	bne.n	80036d4 <HAL_RCC_OscConfig+0x444>
 80036f2:	e03d      	b.n	8003770 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d107      	bne.n	800370c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e038      	b.n	8003772 <HAL_RCC_OscConfig+0x4e2>
 8003700:	40023800 	.word	0x40023800
 8003704:	40007000 	.word	0x40007000
 8003708:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800370c:	4b1b      	ldr	r3, [pc, #108]	; (800377c <HAL_RCC_OscConfig+0x4ec>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	699b      	ldr	r3, [r3, #24]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d028      	beq.n	800376c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003724:	429a      	cmp	r2, r3
 8003726:	d121      	bne.n	800376c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003732:	429a      	cmp	r2, r3
 8003734:	d11a      	bne.n	800376c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800373c:	4013      	ands	r3, r2
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003742:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003744:	4293      	cmp	r3, r2
 8003746:	d111      	bne.n	800376c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003752:	085b      	lsrs	r3, r3, #1
 8003754:	3b01      	subs	r3, #1
 8003756:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003758:	429a      	cmp	r2, r3
 800375a:	d107      	bne.n	800376c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003766:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003768:	429a      	cmp	r2, r3
 800376a:	d001      	beq.n	8003770 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e000      	b.n	8003772 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3718      	adds	r7, #24
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	40023800 	.word	0x40023800

08003780 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e0cc      	b.n	800392e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003794:	4b68      	ldr	r3, [pc, #416]	; (8003938 <HAL_RCC_ClockConfig+0x1b8>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0307 	and.w	r3, r3, #7
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d90c      	bls.n	80037bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037a2:	4b65      	ldr	r3, [pc, #404]	; (8003938 <HAL_RCC_ClockConfig+0x1b8>)
 80037a4:	683a      	ldr	r2, [r7, #0]
 80037a6:	b2d2      	uxtb	r2, r2
 80037a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037aa:	4b63      	ldr	r3, [pc, #396]	; (8003938 <HAL_RCC_ClockConfig+0x1b8>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0307 	and.w	r3, r3, #7
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d001      	beq.n	80037bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e0b8      	b.n	800392e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d020      	beq.n	800380a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0304 	and.w	r3, r3, #4
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d005      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037d4:	4b59      	ldr	r3, [pc, #356]	; (800393c <HAL_RCC_ClockConfig+0x1bc>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	4a58      	ldr	r2, [pc, #352]	; (800393c <HAL_RCC_ClockConfig+0x1bc>)
 80037da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0308 	and.w	r3, r3, #8
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d005      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037ec:	4b53      	ldr	r3, [pc, #332]	; (800393c <HAL_RCC_ClockConfig+0x1bc>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	4a52      	ldr	r2, [pc, #328]	; (800393c <HAL_RCC_ClockConfig+0x1bc>)
 80037f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037f8:	4b50      	ldr	r3, [pc, #320]	; (800393c <HAL_RCC_ClockConfig+0x1bc>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	494d      	ldr	r1, [pc, #308]	; (800393c <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	4313      	orrs	r3, r2
 8003808:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d044      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d107      	bne.n	800382e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800381e:	4b47      	ldr	r3, [pc, #284]	; (800393c <HAL_RCC_ClockConfig+0x1bc>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d119      	bne.n	800385e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e07f      	b.n	800392e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2b02      	cmp	r3, #2
 8003834:	d003      	beq.n	800383e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800383a:	2b03      	cmp	r3, #3
 800383c:	d107      	bne.n	800384e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800383e:	4b3f      	ldr	r3, [pc, #252]	; (800393c <HAL_RCC_ClockConfig+0x1bc>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d109      	bne.n	800385e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e06f      	b.n	800392e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800384e:	4b3b      	ldr	r3, [pc, #236]	; (800393c <HAL_RCC_ClockConfig+0x1bc>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e067      	b.n	800392e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800385e:	4b37      	ldr	r3, [pc, #220]	; (800393c <HAL_RCC_ClockConfig+0x1bc>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f023 0203 	bic.w	r2, r3, #3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	4934      	ldr	r1, [pc, #208]	; (800393c <HAL_RCC_ClockConfig+0x1bc>)
 800386c:	4313      	orrs	r3, r2
 800386e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003870:	f7fd fd0e 	bl	8001290 <HAL_GetTick>
 8003874:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003876:	e00a      	b.n	800388e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003878:	f7fd fd0a 	bl	8001290 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	f241 3288 	movw	r2, #5000	; 0x1388
 8003886:	4293      	cmp	r3, r2
 8003888:	d901      	bls.n	800388e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e04f      	b.n	800392e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800388e:	4b2b      	ldr	r3, [pc, #172]	; (800393c <HAL_RCC_ClockConfig+0x1bc>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 020c 	and.w	r2, r3, #12
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	429a      	cmp	r2, r3
 800389e:	d1eb      	bne.n	8003878 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038a0:	4b25      	ldr	r3, [pc, #148]	; (8003938 <HAL_RCC_ClockConfig+0x1b8>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0307 	and.w	r3, r3, #7
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d20c      	bcs.n	80038c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ae:	4b22      	ldr	r3, [pc, #136]	; (8003938 <HAL_RCC_ClockConfig+0x1b8>)
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	b2d2      	uxtb	r2, r2
 80038b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038b6:	4b20      	ldr	r3, [pc, #128]	; (8003938 <HAL_RCC_ClockConfig+0x1b8>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0307 	and.w	r3, r3, #7
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d001      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e032      	b.n	800392e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0304 	and.w	r3, r3, #4
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d008      	beq.n	80038e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038d4:	4b19      	ldr	r3, [pc, #100]	; (800393c <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	4916      	ldr	r1, [pc, #88]	; (800393c <HAL_RCC_ClockConfig+0x1bc>)
 80038e2:	4313      	orrs	r3, r2
 80038e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0308 	and.w	r3, r3, #8
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d009      	beq.n	8003906 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038f2:	4b12      	ldr	r3, [pc, #72]	; (800393c <HAL_RCC_ClockConfig+0x1bc>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	490e      	ldr	r1, [pc, #56]	; (800393c <HAL_RCC_ClockConfig+0x1bc>)
 8003902:	4313      	orrs	r3, r2
 8003904:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003906:	f000 f821 	bl	800394c <HAL_RCC_GetSysClockFreq>
 800390a:	4602      	mov	r2, r0
 800390c:	4b0b      	ldr	r3, [pc, #44]	; (800393c <HAL_RCC_ClockConfig+0x1bc>)
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	091b      	lsrs	r3, r3, #4
 8003912:	f003 030f 	and.w	r3, r3, #15
 8003916:	490a      	ldr	r1, [pc, #40]	; (8003940 <HAL_RCC_ClockConfig+0x1c0>)
 8003918:	5ccb      	ldrb	r3, [r1, r3]
 800391a:	fa22 f303 	lsr.w	r3, r2, r3
 800391e:	4a09      	ldr	r2, [pc, #36]	; (8003944 <HAL_RCC_ClockConfig+0x1c4>)
 8003920:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003922:	4b09      	ldr	r3, [pc, #36]	; (8003948 <HAL_RCC_ClockConfig+0x1c8>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4618      	mov	r0, r3
 8003928:	f7fd fc6e 	bl	8001208 <HAL_InitTick>

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	40023c00 	.word	0x40023c00
 800393c:	40023800 	.word	0x40023800
 8003940:	08008998 	.word	0x08008998
 8003944:	2000002c 	.word	0x2000002c
 8003948:	20000030 	.word	0x20000030

0800394c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800394c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003950:	b094      	sub	sp, #80	; 0x50
 8003952:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003954:	2300      	movs	r3, #0
 8003956:	647b      	str	r3, [r7, #68]	; 0x44
 8003958:	2300      	movs	r3, #0
 800395a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800395c:	2300      	movs	r3, #0
 800395e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003960:	2300      	movs	r3, #0
 8003962:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003964:	4b79      	ldr	r3, [pc, #484]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f003 030c 	and.w	r3, r3, #12
 800396c:	2b08      	cmp	r3, #8
 800396e:	d00d      	beq.n	800398c <HAL_RCC_GetSysClockFreq+0x40>
 8003970:	2b08      	cmp	r3, #8
 8003972:	f200 80e1 	bhi.w	8003b38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003976:	2b00      	cmp	r3, #0
 8003978:	d002      	beq.n	8003980 <HAL_RCC_GetSysClockFreq+0x34>
 800397a:	2b04      	cmp	r3, #4
 800397c:	d003      	beq.n	8003986 <HAL_RCC_GetSysClockFreq+0x3a>
 800397e:	e0db      	b.n	8003b38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003980:	4b73      	ldr	r3, [pc, #460]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x204>)
 8003982:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003984:	e0db      	b.n	8003b3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003986:	4b73      	ldr	r3, [pc, #460]	; (8003b54 <HAL_RCC_GetSysClockFreq+0x208>)
 8003988:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800398a:	e0d8      	b.n	8003b3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800398c:	4b6f      	ldr	r3, [pc, #444]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x200>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003994:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003996:	4b6d      	ldr	r3, [pc, #436]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d063      	beq.n	8003a6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039a2:	4b6a      	ldr	r3, [pc, #424]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x200>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	099b      	lsrs	r3, r3, #6
 80039a8:	2200      	movs	r2, #0
 80039aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80039ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80039ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039b4:	633b      	str	r3, [r7, #48]	; 0x30
 80039b6:	2300      	movs	r3, #0
 80039b8:	637b      	str	r3, [r7, #52]	; 0x34
 80039ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80039be:	4622      	mov	r2, r4
 80039c0:	462b      	mov	r3, r5
 80039c2:	f04f 0000 	mov.w	r0, #0
 80039c6:	f04f 0100 	mov.w	r1, #0
 80039ca:	0159      	lsls	r1, r3, #5
 80039cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039d0:	0150      	lsls	r0, r2, #5
 80039d2:	4602      	mov	r2, r0
 80039d4:	460b      	mov	r3, r1
 80039d6:	4621      	mov	r1, r4
 80039d8:	1a51      	subs	r1, r2, r1
 80039da:	6139      	str	r1, [r7, #16]
 80039dc:	4629      	mov	r1, r5
 80039de:	eb63 0301 	sbc.w	r3, r3, r1
 80039e2:	617b      	str	r3, [r7, #20]
 80039e4:	f04f 0200 	mov.w	r2, #0
 80039e8:	f04f 0300 	mov.w	r3, #0
 80039ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039f0:	4659      	mov	r1, fp
 80039f2:	018b      	lsls	r3, r1, #6
 80039f4:	4651      	mov	r1, sl
 80039f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039fa:	4651      	mov	r1, sl
 80039fc:	018a      	lsls	r2, r1, #6
 80039fe:	4651      	mov	r1, sl
 8003a00:	ebb2 0801 	subs.w	r8, r2, r1
 8003a04:	4659      	mov	r1, fp
 8003a06:	eb63 0901 	sbc.w	r9, r3, r1
 8003a0a:	f04f 0200 	mov.w	r2, #0
 8003a0e:	f04f 0300 	mov.w	r3, #0
 8003a12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a1e:	4690      	mov	r8, r2
 8003a20:	4699      	mov	r9, r3
 8003a22:	4623      	mov	r3, r4
 8003a24:	eb18 0303 	adds.w	r3, r8, r3
 8003a28:	60bb      	str	r3, [r7, #8]
 8003a2a:	462b      	mov	r3, r5
 8003a2c:	eb49 0303 	adc.w	r3, r9, r3
 8003a30:	60fb      	str	r3, [r7, #12]
 8003a32:	f04f 0200 	mov.w	r2, #0
 8003a36:	f04f 0300 	mov.w	r3, #0
 8003a3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a3e:	4629      	mov	r1, r5
 8003a40:	024b      	lsls	r3, r1, #9
 8003a42:	4621      	mov	r1, r4
 8003a44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a48:	4621      	mov	r1, r4
 8003a4a:	024a      	lsls	r2, r1, #9
 8003a4c:	4610      	mov	r0, r2
 8003a4e:	4619      	mov	r1, r3
 8003a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a52:	2200      	movs	r2, #0
 8003a54:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a5c:	f7fc fbbc 	bl	80001d8 <__aeabi_uldivmod>
 8003a60:	4602      	mov	r2, r0
 8003a62:	460b      	mov	r3, r1
 8003a64:	4613      	mov	r3, r2
 8003a66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a68:	e058      	b.n	8003b1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a6a:	4b38      	ldr	r3, [pc, #224]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	099b      	lsrs	r3, r3, #6
 8003a70:	2200      	movs	r2, #0
 8003a72:	4618      	mov	r0, r3
 8003a74:	4611      	mov	r1, r2
 8003a76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a7a:	623b      	str	r3, [r7, #32]
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8003a80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a84:	4642      	mov	r2, r8
 8003a86:	464b      	mov	r3, r9
 8003a88:	f04f 0000 	mov.w	r0, #0
 8003a8c:	f04f 0100 	mov.w	r1, #0
 8003a90:	0159      	lsls	r1, r3, #5
 8003a92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a96:	0150      	lsls	r0, r2, #5
 8003a98:	4602      	mov	r2, r0
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	4641      	mov	r1, r8
 8003a9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003aa2:	4649      	mov	r1, r9
 8003aa4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003aa8:	f04f 0200 	mov.w	r2, #0
 8003aac:	f04f 0300 	mov.w	r3, #0
 8003ab0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ab4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ab8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003abc:	ebb2 040a 	subs.w	r4, r2, sl
 8003ac0:	eb63 050b 	sbc.w	r5, r3, fp
 8003ac4:	f04f 0200 	mov.w	r2, #0
 8003ac8:	f04f 0300 	mov.w	r3, #0
 8003acc:	00eb      	lsls	r3, r5, #3
 8003ace:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ad2:	00e2      	lsls	r2, r4, #3
 8003ad4:	4614      	mov	r4, r2
 8003ad6:	461d      	mov	r5, r3
 8003ad8:	4643      	mov	r3, r8
 8003ada:	18e3      	adds	r3, r4, r3
 8003adc:	603b      	str	r3, [r7, #0]
 8003ade:	464b      	mov	r3, r9
 8003ae0:	eb45 0303 	adc.w	r3, r5, r3
 8003ae4:	607b      	str	r3, [r7, #4]
 8003ae6:	f04f 0200 	mov.w	r2, #0
 8003aea:	f04f 0300 	mov.w	r3, #0
 8003aee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003af2:	4629      	mov	r1, r5
 8003af4:	028b      	lsls	r3, r1, #10
 8003af6:	4621      	mov	r1, r4
 8003af8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003afc:	4621      	mov	r1, r4
 8003afe:	028a      	lsls	r2, r1, #10
 8003b00:	4610      	mov	r0, r2
 8003b02:	4619      	mov	r1, r3
 8003b04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b06:	2200      	movs	r2, #0
 8003b08:	61bb      	str	r3, [r7, #24]
 8003b0a:	61fa      	str	r2, [r7, #28]
 8003b0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b10:	f7fc fb62 	bl	80001d8 <__aeabi_uldivmod>
 8003b14:	4602      	mov	r2, r0
 8003b16:	460b      	mov	r3, r1
 8003b18:	4613      	mov	r3, r2
 8003b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b1c:	4b0b      	ldr	r3, [pc, #44]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x200>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	0c1b      	lsrs	r3, r3, #16
 8003b22:	f003 0303 	and.w	r3, r3, #3
 8003b26:	3301      	adds	r3, #1
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003b2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b36:	e002      	b.n	8003b3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b38:	4b05      	ldr	r3, [pc, #20]	; (8003b50 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b3a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3750      	adds	r7, #80	; 0x50
 8003b44:	46bd      	mov	sp, r7
 8003b46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b4a:	bf00      	nop
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	00f42400 	.word	0x00f42400
 8003b54:	007a1200 	.word	0x007a1200

08003b58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b5c:	4b03      	ldr	r3, [pc, #12]	; (8003b6c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	2000002c 	.word	0x2000002c

08003b70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e041      	b.n	8003c06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d106      	bne.n	8003b9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7fd fa2e 	bl	8000ff8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	3304      	adds	r3, #4
 8003bac:	4619      	mov	r1, r3
 8003bae:	4610      	mov	r0, r2
 8003bb0:	f000 fab6 	bl	8004120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
	...

08003c10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d001      	beq.n	8003c28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e044      	b.n	8003cb2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68da      	ldr	r2, [r3, #12]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f042 0201 	orr.w	r2, r2, #1
 8003c3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a1e      	ldr	r2, [pc, #120]	; (8003cc0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d018      	beq.n	8003c7c <HAL_TIM_Base_Start_IT+0x6c>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c52:	d013      	beq.n	8003c7c <HAL_TIM_Base_Start_IT+0x6c>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a1a      	ldr	r2, [pc, #104]	; (8003cc4 <HAL_TIM_Base_Start_IT+0xb4>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d00e      	beq.n	8003c7c <HAL_TIM_Base_Start_IT+0x6c>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a19      	ldr	r2, [pc, #100]	; (8003cc8 <HAL_TIM_Base_Start_IT+0xb8>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d009      	beq.n	8003c7c <HAL_TIM_Base_Start_IT+0x6c>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a17      	ldr	r2, [pc, #92]	; (8003ccc <HAL_TIM_Base_Start_IT+0xbc>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d004      	beq.n	8003c7c <HAL_TIM_Base_Start_IT+0x6c>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a16      	ldr	r2, [pc, #88]	; (8003cd0 <HAL_TIM_Base_Start_IT+0xc0>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d111      	bne.n	8003ca0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f003 0307 	and.w	r3, r3, #7
 8003c86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2b06      	cmp	r3, #6
 8003c8c:	d010      	beq.n	8003cb0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f042 0201 	orr.w	r2, r2, #1
 8003c9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c9e:	e007      	b.n	8003cb0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0201 	orr.w	r2, r2, #1
 8003cae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3714      	adds	r7, #20
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	40010000 	.word	0x40010000
 8003cc4:	40000400 	.word	0x40000400
 8003cc8:	40000800 	.word	0x40000800
 8003ccc:	40000c00 	.word	0x40000c00
 8003cd0:	40014000 	.word	0x40014000

08003cd4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68da      	ldr	r2, [r3, #12]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f022 0201 	bic.w	r2, r2, #1
 8003cea:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6a1a      	ldr	r2, [r3, #32]
 8003cf2:	f241 1311 	movw	r3, #4369	; 0x1111
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d10f      	bne.n	8003d1c <HAL_TIM_Base_Stop_IT+0x48>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	6a1a      	ldr	r2, [r3, #32]
 8003d02:	f240 4344 	movw	r3, #1092	; 0x444
 8003d06:	4013      	ands	r3, r2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d107      	bne.n	8003d1c <HAL_TIM_Base_Stop_IT+0x48>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 0201 	bic.w	r2, r2, #1
 8003d1a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b082      	sub	sp, #8
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d122      	bne.n	8003d8e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d11b      	bne.n	8003d8e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f06f 0202 	mvn.w	r2, #2
 8003d5e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	f003 0303 	and.w	r3, r3, #3
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d003      	beq.n	8003d7c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 f9b5 	bl	80040e4 <HAL_TIM_IC_CaptureCallback>
 8003d7a:	e005      	b.n	8003d88 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 f9a7 	bl	80040d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f9b8 	bl	80040f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	2b04      	cmp	r3, #4
 8003d9a:	d122      	bne.n	8003de2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	f003 0304 	and.w	r3, r3, #4
 8003da6:	2b04      	cmp	r3, #4
 8003da8:	d11b      	bne.n	8003de2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f06f 0204 	mvn.w	r2, #4
 8003db2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d003      	beq.n	8003dd0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 f98b 	bl	80040e4 <HAL_TIM_IC_CaptureCallback>
 8003dce:	e005      	b.n	8003ddc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 f97d 	bl	80040d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 f98e 	bl	80040f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	f003 0308 	and.w	r3, r3, #8
 8003dec:	2b08      	cmp	r3, #8
 8003dee:	d122      	bne.n	8003e36 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	f003 0308 	and.w	r3, r3, #8
 8003dfa:	2b08      	cmp	r3, #8
 8003dfc:	d11b      	bne.n	8003e36 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f06f 0208 	mvn.w	r2, #8
 8003e06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2204      	movs	r2, #4
 8003e0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	69db      	ldr	r3, [r3, #28]
 8003e14:	f003 0303 	and.w	r3, r3, #3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d003      	beq.n	8003e24 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 f961 	bl	80040e4 <HAL_TIM_IC_CaptureCallback>
 8003e22:	e005      	b.n	8003e30 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 f953 	bl	80040d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 f964 	bl	80040f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	f003 0310 	and.w	r3, r3, #16
 8003e40:	2b10      	cmp	r3, #16
 8003e42:	d122      	bne.n	8003e8a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	f003 0310 	and.w	r3, r3, #16
 8003e4e:	2b10      	cmp	r3, #16
 8003e50:	d11b      	bne.n	8003e8a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f06f 0210 	mvn.w	r2, #16
 8003e5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2208      	movs	r2, #8
 8003e60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	69db      	ldr	r3, [r3, #28]
 8003e68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 f937 	bl	80040e4 <HAL_TIM_IC_CaptureCallback>
 8003e76:	e005      	b.n	8003e84 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f000 f929 	bl	80040d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 f93a 	bl	80040f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	f003 0301 	and.w	r3, r3, #1
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d10e      	bne.n	8003eb6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d107      	bne.n	8003eb6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f06f 0201 	mvn.w	r2, #1
 8003eae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f7fc ffdf 	bl	8000e74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec0:	2b80      	cmp	r3, #128	; 0x80
 8003ec2:	d10e      	bne.n	8003ee2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ece:	2b80      	cmp	r3, #128	; 0x80
 8003ed0:	d107      	bne.n	8003ee2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003eda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 fab1 	bl	8004444 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eec:	2b40      	cmp	r3, #64	; 0x40
 8003eee:	d10e      	bne.n	8003f0e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efa:	2b40      	cmp	r3, #64	; 0x40
 8003efc:	d107      	bne.n	8003f0e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 f8ff 	bl	800410c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	f003 0320 	and.w	r3, r3, #32
 8003f18:	2b20      	cmp	r3, #32
 8003f1a:	d10e      	bne.n	8003f3a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	f003 0320 	and.w	r3, r3, #32
 8003f26:	2b20      	cmp	r3, #32
 8003f28:	d107      	bne.n	8003f3a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f06f 0220 	mvn.w	r2, #32
 8003f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 fa7b 	bl	8004430 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f3a:	bf00      	nop
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b084      	sub	sp, #16
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
 8003f4a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d101      	bne.n	8003f5e <HAL_TIM_ConfigClockSource+0x1c>
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	e0b4      	b.n	80040c8 <HAL_TIM_ConfigClockSource+0x186>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2202      	movs	r2, #2
 8003f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f7c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f84:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f96:	d03e      	beq.n	8004016 <HAL_TIM_ConfigClockSource+0xd4>
 8003f98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f9c:	f200 8087 	bhi.w	80040ae <HAL_TIM_ConfigClockSource+0x16c>
 8003fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa4:	f000 8086 	beq.w	80040b4 <HAL_TIM_ConfigClockSource+0x172>
 8003fa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fac:	d87f      	bhi.n	80040ae <HAL_TIM_ConfigClockSource+0x16c>
 8003fae:	2b70      	cmp	r3, #112	; 0x70
 8003fb0:	d01a      	beq.n	8003fe8 <HAL_TIM_ConfigClockSource+0xa6>
 8003fb2:	2b70      	cmp	r3, #112	; 0x70
 8003fb4:	d87b      	bhi.n	80040ae <HAL_TIM_ConfigClockSource+0x16c>
 8003fb6:	2b60      	cmp	r3, #96	; 0x60
 8003fb8:	d050      	beq.n	800405c <HAL_TIM_ConfigClockSource+0x11a>
 8003fba:	2b60      	cmp	r3, #96	; 0x60
 8003fbc:	d877      	bhi.n	80040ae <HAL_TIM_ConfigClockSource+0x16c>
 8003fbe:	2b50      	cmp	r3, #80	; 0x50
 8003fc0:	d03c      	beq.n	800403c <HAL_TIM_ConfigClockSource+0xfa>
 8003fc2:	2b50      	cmp	r3, #80	; 0x50
 8003fc4:	d873      	bhi.n	80040ae <HAL_TIM_ConfigClockSource+0x16c>
 8003fc6:	2b40      	cmp	r3, #64	; 0x40
 8003fc8:	d058      	beq.n	800407c <HAL_TIM_ConfigClockSource+0x13a>
 8003fca:	2b40      	cmp	r3, #64	; 0x40
 8003fcc:	d86f      	bhi.n	80040ae <HAL_TIM_ConfigClockSource+0x16c>
 8003fce:	2b30      	cmp	r3, #48	; 0x30
 8003fd0:	d064      	beq.n	800409c <HAL_TIM_ConfigClockSource+0x15a>
 8003fd2:	2b30      	cmp	r3, #48	; 0x30
 8003fd4:	d86b      	bhi.n	80040ae <HAL_TIM_ConfigClockSource+0x16c>
 8003fd6:	2b20      	cmp	r3, #32
 8003fd8:	d060      	beq.n	800409c <HAL_TIM_ConfigClockSource+0x15a>
 8003fda:	2b20      	cmp	r3, #32
 8003fdc:	d867      	bhi.n	80040ae <HAL_TIM_ConfigClockSource+0x16c>
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d05c      	beq.n	800409c <HAL_TIM_ConfigClockSource+0x15a>
 8003fe2:	2b10      	cmp	r3, #16
 8003fe4:	d05a      	beq.n	800409c <HAL_TIM_ConfigClockSource+0x15a>
 8003fe6:	e062      	b.n	80040ae <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6818      	ldr	r0, [r3, #0]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	6899      	ldr	r1, [r3, #8]
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685a      	ldr	r2, [r3, #4]
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f000 f98c 	bl	8004314 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800400a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	609a      	str	r2, [r3, #8]
      break;
 8004014:	e04f      	b.n	80040b6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6818      	ldr	r0, [r3, #0]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	6899      	ldr	r1, [r3, #8]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	f000 f975 	bl	8004314 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689a      	ldr	r2, [r3, #8]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004038:	609a      	str	r2, [r3, #8]
      break;
 800403a:	e03c      	b.n	80040b6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6818      	ldr	r0, [r3, #0]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	6859      	ldr	r1, [r3, #4]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	461a      	mov	r2, r3
 800404a:	f000 f8e9 	bl	8004220 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2150      	movs	r1, #80	; 0x50
 8004054:	4618      	mov	r0, r3
 8004056:	f000 f942 	bl	80042de <TIM_ITRx_SetConfig>
      break;
 800405a:	e02c      	b.n	80040b6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6818      	ldr	r0, [r3, #0]
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	6859      	ldr	r1, [r3, #4]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	461a      	mov	r2, r3
 800406a:	f000 f908 	bl	800427e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2160      	movs	r1, #96	; 0x60
 8004074:	4618      	mov	r0, r3
 8004076:	f000 f932 	bl	80042de <TIM_ITRx_SetConfig>
      break;
 800407a:	e01c      	b.n	80040b6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6818      	ldr	r0, [r3, #0]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	6859      	ldr	r1, [r3, #4]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	461a      	mov	r2, r3
 800408a:	f000 f8c9 	bl	8004220 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2140      	movs	r1, #64	; 0x40
 8004094:	4618      	mov	r0, r3
 8004096:	f000 f922 	bl	80042de <TIM_ITRx_SetConfig>
      break;
 800409a:	e00c      	b.n	80040b6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4619      	mov	r1, r3
 80040a6:	4610      	mov	r0, r2
 80040a8:	f000 f919 	bl	80042de <TIM_ITRx_SetConfig>
      break;
 80040ac:	e003      	b.n	80040b6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	73fb      	strb	r3, [r7, #15]
      break;
 80040b2:	e000      	b.n	80040b6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80040b4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3710      	adds	r7, #16
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a34      	ldr	r2, [pc, #208]	; (8004204 <TIM_Base_SetConfig+0xe4>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d00f      	beq.n	8004158 <TIM_Base_SetConfig+0x38>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800413e:	d00b      	beq.n	8004158 <TIM_Base_SetConfig+0x38>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a31      	ldr	r2, [pc, #196]	; (8004208 <TIM_Base_SetConfig+0xe8>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d007      	beq.n	8004158 <TIM_Base_SetConfig+0x38>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a30      	ldr	r2, [pc, #192]	; (800420c <TIM_Base_SetConfig+0xec>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d003      	beq.n	8004158 <TIM_Base_SetConfig+0x38>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a2f      	ldr	r2, [pc, #188]	; (8004210 <TIM_Base_SetConfig+0xf0>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d108      	bne.n	800416a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800415e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	4313      	orrs	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a25      	ldr	r2, [pc, #148]	; (8004204 <TIM_Base_SetConfig+0xe4>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d01b      	beq.n	80041aa <TIM_Base_SetConfig+0x8a>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004178:	d017      	beq.n	80041aa <TIM_Base_SetConfig+0x8a>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a22      	ldr	r2, [pc, #136]	; (8004208 <TIM_Base_SetConfig+0xe8>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d013      	beq.n	80041aa <TIM_Base_SetConfig+0x8a>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a21      	ldr	r2, [pc, #132]	; (800420c <TIM_Base_SetConfig+0xec>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d00f      	beq.n	80041aa <TIM_Base_SetConfig+0x8a>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a20      	ldr	r2, [pc, #128]	; (8004210 <TIM_Base_SetConfig+0xf0>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d00b      	beq.n	80041aa <TIM_Base_SetConfig+0x8a>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a1f      	ldr	r2, [pc, #124]	; (8004214 <TIM_Base_SetConfig+0xf4>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d007      	beq.n	80041aa <TIM_Base_SetConfig+0x8a>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a1e      	ldr	r2, [pc, #120]	; (8004218 <TIM_Base_SetConfig+0xf8>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d003      	beq.n	80041aa <TIM_Base_SetConfig+0x8a>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a1d      	ldr	r2, [pc, #116]	; (800421c <TIM_Base_SetConfig+0xfc>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d108      	bne.n	80041bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	689a      	ldr	r2, [r3, #8]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a08      	ldr	r2, [pc, #32]	; (8004204 <TIM_Base_SetConfig+0xe4>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d103      	bne.n	80041f0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	691a      	ldr	r2, [r3, #16]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	615a      	str	r2, [r3, #20]
}
 80041f6:	bf00      	nop
 80041f8:	3714      	adds	r7, #20
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop
 8004204:	40010000 	.word	0x40010000
 8004208:	40000400 	.word	0x40000400
 800420c:	40000800 	.word	0x40000800
 8004210:	40000c00 	.word	0x40000c00
 8004214:	40014000 	.word	0x40014000
 8004218:	40014400 	.word	0x40014400
 800421c:	40014800 	.word	0x40014800

08004220 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004220:	b480      	push	{r7}
 8004222:	b087      	sub	sp, #28
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6a1b      	ldr	r3, [r3, #32]
 8004230:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	f023 0201 	bic.w	r2, r3, #1
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800424a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	4313      	orrs	r3, r2
 8004254:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f023 030a 	bic.w	r3, r3, #10
 800425c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800425e:	697a      	ldr	r2, [r7, #20]
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	4313      	orrs	r3, r2
 8004264:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	621a      	str	r2, [r3, #32]
}
 8004272:	bf00      	nop
 8004274:	371c      	adds	r7, #28
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr

0800427e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800427e:	b480      	push	{r7}
 8004280:	b087      	sub	sp, #28
 8004282:	af00      	add	r7, sp, #0
 8004284:	60f8      	str	r0, [r7, #12]
 8004286:	60b9      	str	r1, [r7, #8]
 8004288:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	f023 0210 	bic.w	r2, r3, #16
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	031b      	lsls	r3, r3, #12
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	011b      	lsls	r3, r3, #4
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	621a      	str	r2, [r3, #32]
}
 80042d2:	bf00      	nop
 80042d4:	371c      	adds	r7, #28
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042de:	b480      	push	{r7}
 80042e0:	b085      	sub	sp, #20
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
 80042e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	f043 0307 	orr.w	r3, r3, #7
 8004300:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	609a      	str	r2, [r3, #8]
}
 8004308:	bf00      	nop
 800430a:	3714      	adds	r7, #20
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004314:	b480      	push	{r7}
 8004316:	b087      	sub	sp, #28
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
 8004320:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800432e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	021a      	lsls	r2, r3, #8
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	431a      	orrs	r2, r3
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	4313      	orrs	r3, r2
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	4313      	orrs	r3, r2
 8004340:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	609a      	str	r2, [r3, #8]
}
 8004348:	bf00      	nop
 800434a:	371c      	adds	r7, #28
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004364:	2b01      	cmp	r3, #1
 8004366:	d101      	bne.n	800436c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004368:	2302      	movs	r3, #2
 800436a:	e050      	b.n	800440e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2202      	movs	r2, #2
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004392:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	4313      	orrs	r3, r2
 800439c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a1c      	ldr	r2, [pc, #112]	; (800441c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d018      	beq.n	80043e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043b8:	d013      	beq.n	80043e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a18      	ldr	r2, [pc, #96]	; (8004420 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d00e      	beq.n	80043e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a16      	ldr	r2, [pc, #88]	; (8004424 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d009      	beq.n	80043e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a15      	ldr	r2, [pc, #84]	; (8004428 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d004      	beq.n	80043e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a13      	ldr	r2, [pc, #76]	; (800442c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d10c      	bne.n	80043fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	68ba      	ldr	r2, [r7, #8]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3714      	adds	r7, #20
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop
 800441c:	40010000 	.word	0x40010000
 8004420:	40000400 	.word	0x40000400
 8004424:	40000800 	.word	0x40000800
 8004428:	40000c00 	.word	0x40000c00
 800442c:	40014000 	.word	0x40014000

08004430 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004458:	b084      	sub	sp, #16
 800445a:	b580      	push	{r7, lr}
 800445c:	b084      	sub	sp, #16
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
 8004462:	f107 001c 	add.w	r0, r7, #28
 8004466:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800446a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446c:	2b01      	cmp	r3, #1
 800446e:	d122      	bne.n	80044b6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004474:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004484:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800449a:	2b01      	cmp	r3, #1
 800449c:	d105      	bne.n	80044aa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f001 fbee 	bl	8005c8c <USB_CoreReset>
 80044b0:	4603      	mov	r3, r0
 80044b2:	73fb      	strb	r3, [r7, #15]
 80044b4:	e01a      	b.n	80044ec <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f001 fbe2 	bl	8005c8c <USB_CoreReset>
 80044c8:	4603      	mov	r3, r0
 80044ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80044cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d106      	bne.n	80044e0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	639a      	str	r2, [r3, #56]	; 0x38
 80044de:	e005      	b.n	80044ec <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80044ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d10b      	bne.n	800450a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f043 0206 	orr.w	r2, r3, #6
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f043 0220 	orr.w	r2, r3, #32
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800450a:	7bfb      	ldrb	r3, [r7, #15]
}
 800450c:	4618      	mov	r0, r3
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004516:	b004      	add	sp, #16
 8004518:	4770      	bx	lr
	...

0800451c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800451c:	b480      	push	{r7}
 800451e:	b087      	sub	sp, #28
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	4613      	mov	r3, r2
 8004528:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800452a:	79fb      	ldrb	r3, [r7, #7]
 800452c:	2b02      	cmp	r3, #2
 800452e:	d165      	bne.n	80045fc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	4a41      	ldr	r2, [pc, #260]	; (8004638 <USB_SetTurnaroundTime+0x11c>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d906      	bls.n	8004546 <USB_SetTurnaroundTime+0x2a>
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	4a40      	ldr	r2, [pc, #256]	; (800463c <USB_SetTurnaroundTime+0x120>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d202      	bcs.n	8004546 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004540:	230f      	movs	r3, #15
 8004542:	617b      	str	r3, [r7, #20]
 8004544:	e062      	b.n	800460c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	4a3c      	ldr	r2, [pc, #240]	; (800463c <USB_SetTurnaroundTime+0x120>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d306      	bcc.n	800455c <USB_SetTurnaroundTime+0x40>
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	4a3b      	ldr	r2, [pc, #236]	; (8004640 <USB_SetTurnaroundTime+0x124>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d202      	bcs.n	800455c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004556:	230e      	movs	r3, #14
 8004558:	617b      	str	r3, [r7, #20]
 800455a:	e057      	b.n	800460c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	4a38      	ldr	r2, [pc, #224]	; (8004640 <USB_SetTurnaroundTime+0x124>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d306      	bcc.n	8004572 <USB_SetTurnaroundTime+0x56>
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	4a37      	ldr	r2, [pc, #220]	; (8004644 <USB_SetTurnaroundTime+0x128>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d202      	bcs.n	8004572 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800456c:	230d      	movs	r3, #13
 800456e:	617b      	str	r3, [r7, #20]
 8004570:	e04c      	b.n	800460c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	4a33      	ldr	r2, [pc, #204]	; (8004644 <USB_SetTurnaroundTime+0x128>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d306      	bcc.n	8004588 <USB_SetTurnaroundTime+0x6c>
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	4a32      	ldr	r2, [pc, #200]	; (8004648 <USB_SetTurnaroundTime+0x12c>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d802      	bhi.n	8004588 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004582:	230c      	movs	r3, #12
 8004584:	617b      	str	r3, [r7, #20]
 8004586:	e041      	b.n	800460c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	4a2f      	ldr	r2, [pc, #188]	; (8004648 <USB_SetTurnaroundTime+0x12c>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d906      	bls.n	800459e <USB_SetTurnaroundTime+0x82>
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	4a2e      	ldr	r2, [pc, #184]	; (800464c <USB_SetTurnaroundTime+0x130>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d802      	bhi.n	800459e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004598:	230b      	movs	r3, #11
 800459a:	617b      	str	r3, [r7, #20]
 800459c:	e036      	b.n	800460c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	4a2a      	ldr	r2, [pc, #168]	; (800464c <USB_SetTurnaroundTime+0x130>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d906      	bls.n	80045b4 <USB_SetTurnaroundTime+0x98>
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	4a29      	ldr	r2, [pc, #164]	; (8004650 <USB_SetTurnaroundTime+0x134>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d802      	bhi.n	80045b4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80045ae:	230a      	movs	r3, #10
 80045b0:	617b      	str	r3, [r7, #20]
 80045b2:	e02b      	b.n	800460c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	4a26      	ldr	r2, [pc, #152]	; (8004650 <USB_SetTurnaroundTime+0x134>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d906      	bls.n	80045ca <USB_SetTurnaroundTime+0xae>
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	4a25      	ldr	r2, [pc, #148]	; (8004654 <USB_SetTurnaroundTime+0x138>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d202      	bcs.n	80045ca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80045c4:	2309      	movs	r3, #9
 80045c6:	617b      	str	r3, [r7, #20]
 80045c8:	e020      	b.n	800460c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	4a21      	ldr	r2, [pc, #132]	; (8004654 <USB_SetTurnaroundTime+0x138>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d306      	bcc.n	80045e0 <USB_SetTurnaroundTime+0xc4>
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	4a20      	ldr	r2, [pc, #128]	; (8004658 <USB_SetTurnaroundTime+0x13c>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d802      	bhi.n	80045e0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80045da:	2308      	movs	r3, #8
 80045dc:	617b      	str	r3, [r7, #20]
 80045de:	e015      	b.n	800460c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	4a1d      	ldr	r2, [pc, #116]	; (8004658 <USB_SetTurnaroundTime+0x13c>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d906      	bls.n	80045f6 <USB_SetTurnaroundTime+0xda>
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	4a1c      	ldr	r2, [pc, #112]	; (800465c <USB_SetTurnaroundTime+0x140>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d202      	bcs.n	80045f6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80045f0:	2307      	movs	r3, #7
 80045f2:	617b      	str	r3, [r7, #20]
 80045f4:	e00a      	b.n	800460c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80045f6:	2306      	movs	r3, #6
 80045f8:	617b      	str	r3, [r7, #20]
 80045fa:	e007      	b.n	800460c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80045fc:	79fb      	ldrb	r3, [r7, #7]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d102      	bne.n	8004608 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004602:	2309      	movs	r3, #9
 8004604:	617b      	str	r3, [r7, #20]
 8004606:	e001      	b.n	800460c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004608:	2309      	movs	r3, #9
 800460a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	68da      	ldr	r2, [r3, #12]
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	029b      	lsls	r3, r3, #10
 8004620:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004624:	431a      	orrs	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	371c      	adds	r7, #28
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr
 8004638:	00d8acbf 	.word	0x00d8acbf
 800463c:	00e4e1c0 	.word	0x00e4e1c0
 8004640:	00f42400 	.word	0x00f42400
 8004644:	01067380 	.word	0x01067380
 8004648:	011a499f 	.word	0x011a499f
 800464c:	01312cff 	.word	0x01312cff
 8004650:	014ca43f 	.word	0x014ca43f
 8004654:	016e3600 	.word	0x016e3600
 8004658:	01a6ab1f 	.word	0x01a6ab1f
 800465c:	01e84800 	.word	0x01e84800

08004660 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f043 0201 	orr.w	r2, r3, #1
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr

08004682 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004682:	b480      	push	{r7}
 8004684:	b083      	sub	sp, #12
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f023 0201 	bic.w	r2, r3, #1
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	460b      	mov	r3, r1
 80046ae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80046b0:	2300      	movs	r3, #0
 80046b2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80046c0:	78fb      	ldrb	r3, [r7, #3]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d115      	bne.n	80046f2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80046d2:	2001      	movs	r0, #1
 80046d4:	f7fc fde8 	bl	80012a8 <HAL_Delay>
      ms++;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	3301      	adds	r3, #1
 80046dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f001 fa45 	bl	8005b6e <USB_GetMode>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d01e      	beq.n	8004728 <USB_SetCurrentMode+0x84>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2b31      	cmp	r3, #49	; 0x31
 80046ee:	d9f0      	bls.n	80046d2 <USB_SetCurrentMode+0x2e>
 80046f0:	e01a      	b.n	8004728 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80046f2:	78fb      	ldrb	r3, [r7, #3]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d115      	bne.n	8004724 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004704:	2001      	movs	r0, #1
 8004706:	f7fc fdcf 	bl	80012a8 <HAL_Delay>
      ms++;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	3301      	adds	r3, #1
 800470e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f001 fa2c 	bl	8005b6e <USB_GetMode>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d005      	beq.n	8004728 <USB_SetCurrentMode+0x84>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2b31      	cmp	r3, #49	; 0x31
 8004720:	d9f0      	bls.n	8004704 <USB_SetCurrentMode+0x60>
 8004722:	e001      	b.n	8004728 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e005      	b.n	8004734 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2b32      	cmp	r3, #50	; 0x32
 800472c:	d101      	bne.n	8004732 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e000      	b.n	8004734 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800473c:	b084      	sub	sp, #16
 800473e:	b580      	push	{r7, lr}
 8004740:	b086      	sub	sp, #24
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
 8004746:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800474a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800474e:	2300      	movs	r3, #0
 8004750:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004756:	2300      	movs	r3, #0
 8004758:	613b      	str	r3, [r7, #16]
 800475a:	e009      	b.n	8004770 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	3340      	adds	r3, #64	; 0x40
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	4413      	add	r3, r2
 8004766:	2200      	movs	r2, #0
 8004768:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	3301      	adds	r3, #1
 800476e:	613b      	str	r3, [r7, #16]
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	2b0e      	cmp	r3, #14
 8004774:	d9f2      	bls.n	800475c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004778:	2b00      	cmp	r3, #0
 800477a:	d11c      	bne.n	80047b6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800478a:	f043 0302 	orr.w	r3, r3, #2
 800478e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004794:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ac:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	639a      	str	r2, [r3, #56]	; 0x38
 80047b4:	e00b      	b.n	80047ce <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ba:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80047d4:	461a      	mov	r2, r3
 80047d6:	2300      	movs	r3, #0
 80047d8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047e0:	4619      	mov	r1, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047e8:	461a      	mov	r2, r3
 80047ea:	680b      	ldr	r3, [r1, #0]
 80047ec:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d10c      	bne.n	800480e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80047f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d104      	bne.n	8004804 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80047fa:	2100      	movs	r1, #0
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 f965 	bl	8004acc <USB_SetDevSpeed>
 8004802:	e008      	b.n	8004816 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004804:	2101      	movs	r1, #1
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 f960 	bl	8004acc <USB_SetDevSpeed>
 800480c:	e003      	b.n	8004816 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800480e:	2103      	movs	r1, #3
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 f95b 	bl	8004acc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004816:	2110      	movs	r1, #16
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 f8f3 	bl	8004a04 <USB_FlushTxFifo>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d001      	beq.n	8004828 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 f91f 	bl	8004a6c <USB_FlushRxFifo>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d001      	beq.n	8004838 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800483e:	461a      	mov	r2, r3
 8004840:	2300      	movs	r3, #0
 8004842:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800484a:	461a      	mov	r2, r3
 800484c:	2300      	movs	r3, #0
 800484e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004856:	461a      	mov	r2, r3
 8004858:	2300      	movs	r3, #0
 800485a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800485c:	2300      	movs	r3, #0
 800485e:	613b      	str	r3, [r7, #16]
 8004860:	e043      	b.n	80048ea <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	015a      	lsls	r2, r3, #5
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	4413      	add	r3, r2
 800486a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004874:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004878:	d118      	bne.n	80048ac <USB_DevInit+0x170>
    {
      if (i == 0U)
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10a      	bne.n	8004896 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	015a      	lsls	r2, r3, #5
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4413      	add	r3, r2
 8004888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800488c:	461a      	mov	r2, r3
 800488e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004892:	6013      	str	r3, [r2, #0]
 8004894:	e013      	b.n	80048be <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	015a      	lsls	r2, r3, #5
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	4413      	add	r3, r2
 800489e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a2:	461a      	mov	r2, r3
 80048a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80048a8:	6013      	str	r3, [r2, #0]
 80048aa:	e008      	b.n	80048be <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	015a      	lsls	r2, r3, #5
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	4413      	add	r3, r2
 80048b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048b8:	461a      	mov	r2, r3
 80048ba:	2300      	movs	r3, #0
 80048bc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	015a      	lsls	r2, r3, #5
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	4413      	add	r3, r2
 80048c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ca:	461a      	mov	r2, r3
 80048cc:	2300      	movs	r3, #0
 80048ce:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	015a      	lsls	r2, r3, #5
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	4413      	add	r3, r2
 80048d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048dc:	461a      	mov	r2, r3
 80048de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80048e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	3301      	adds	r3, #1
 80048e8:	613b      	str	r3, [r7, #16]
 80048ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d3b7      	bcc.n	8004862 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048f2:	2300      	movs	r3, #0
 80048f4:	613b      	str	r3, [r7, #16]
 80048f6:	e043      	b.n	8004980 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	015a      	lsls	r2, r3, #5
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4413      	add	r3, r2
 8004900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800490a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800490e:	d118      	bne.n	8004942 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10a      	bne.n	800492c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	015a      	lsls	r2, r3, #5
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	4413      	add	r3, r2
 800491e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004922:	461a      	mov	r2, r3
 8004924:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004928:	6013      	str	r3, [r2, #0]
 800492a:	e013      	b.n	8004954 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	015a      	lsls	r2, r3, #5
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4413      	add	r3, r2
 8004934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004938:	461a      	mov	r2, r3
 800493a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800493e:	6013      	str	r3, [r2, #0]
 8004940:	e008      	b.n	8004954 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	015a      	lsls	r2, r3, #5
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	4413      	add	r3, r2
 800494a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800494e:	461a      	mov	r2, r3
 8004950:	2300      	movs	r3, #0
 8004952:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	015a      	lsls	r2, r3, #5
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	4413      	add	r3, r2
 800495c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004960:	461a      	mov	r2, r3
 8004962:	2300      	movs	r3, #0
 8004964:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	015a      	lsls	r2, r3, #5
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	4413      	add	r3, r2
 800496e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004972:	461a      	mov	r2, r3
 8004974:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004978:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	3301      	adds	r3, #1
 800497e:	613b      	str	r3, [r7, #16]
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	693a      	ldr	r2, [r7, #16]
 8004984:	429a      	cmp	r2, r3
 8004986:	d3b7      	bcc.n	80048f8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004996:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800499a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80049a8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80049aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d105      	bne.n	80049bc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	f043 0210 	orr.w	r2, r3, #16
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	699a      	ldr	r2, [r3, #24]
 80049c0:	4b0f      	ldr	r3, [pc, #60]	; (8004a00 <USB_DevInit+0x2c4>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80049c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d005      	beq.n	80049da <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	f043 0208 	orr.w	r2, r3, #8
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80049da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d107      	bne.n	80049f0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049e8:	f043 0304 	orr.w	r3, r3, #4
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80049f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3718      	adds	r7, #24
 80049f6:	46bd      	mov	sp, r7
 80049f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049fc:	b004      	add	sp, #16
 80049fe:	4770      	bx	lr
 8004a00:	803c3800 	.word	0x803c3800

08004a04 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	3301      	adds	r3, #1
 8004a16:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	4a13      	ldr	r2, [pc, #76]	; (8004a68 <USB_FlushTxFifo+0x64>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d901      	bls.n	8004a24 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e01b      	b.n	8004a5c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	daf2      	bge.n	8004a12 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	019b      	lsls	r3, r3, #6
 8004a34:	f043 0220 	orr.w	r2, r3, #32
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	3301      	adds	r3, #1
 8004a40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	4a08      	ldr	r2, [pc, #32]	; (8004a68 <USB_FlushTxFifo+0x64>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d901      	bls.n	8004a4e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e006      	b.n	8004a5c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	f003 0320 	and.w	r3, r3, #32
 8004a56:	2b20      	cmp	r3, #32
 8004a58:	d0f0      	beq.n	8004a3c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3714      	adds	r7, #20
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	00030d40 	.word	0x00030d40

08004a6c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a74:	2300      	movs	r3, #0
 8004a76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	4a11      	ldr	r2, [pc, #68]	; (8004ac8 <USB_FlushRxFifo+0x5c>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d901      	bls.n	8004a8a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e018      	b.n	8004abc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	daf2      	bge.n	8004a78 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004a92:	2300      	movs	r3, #0
 8004a94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2210      	movs	r2, #16
 8004a9a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	4a08      	ldr	r2, [pc, #32]	; (8004ac8 <USB_FlushRxFifo+0x5c>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d901      	bls.n	8004aae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e006      	b.n	8004abc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	f003 0310 	and.w	r3, r3, #16
 8004ab6:	2b10      	cmp	r3, #16
 8004ab8:	d0f0      	beq.n	8004a9c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3714      	adds	r7, #20
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	00030d40 	.word	0x00030d40

08004acc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	78fb      	ldrb	r3, [r7, #3]
 8004ae6:	68f9      	ldr	r1, [r7, #12]
 8004ae8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004aec:	4313      	orrs	r3, r2
 8004aee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3714      	adds	r7, #20
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr

08004afe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004afe:	b480      	push	{r7}
 8004b00:	b087      	sub	sp, #28
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 0306 	and.w	r3, r3, #6
 8004b16:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d102      	bne.n	8004b24 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	75fb      	strb	r3, [r7, #23]
 8004b22:	e00a      	b.n	8004b3a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d002      	beq.n	8004b30 <USB_GetDevSpeed+0x32>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2b06      	cmp	r3, #6
 8004b2e:	d102      	bne.n	8004b36 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004b30:	2302      	movs	r3, #2
 8004b32:	75fb      	strb	r3, [r7, #23]
 8004b34:	e001      	b.n	8004b3a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004b36:	230f      	movs	r3, #15
 8004b38:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004b3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	371c      	adds	r7, #28
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	785b      	ldrb	r3, [r3, #1]
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d13a      	bne.n	8004bda <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b6a:	69da      	ldr	r2, [r3, #28]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	f003 030f 	and.w	r3, r3, #15
 8004b74:	2101      	movs	r1, #1
 8004b76:	fa01 f303 	lsl.w	r3, r1, r3
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	68f9      	ldr	r1, [r7, #12]
 8004b7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b82:	4313      	orrs	r3, r2
 8004b84:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	015a      	lsls	r2, r3, #5
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d155      	bne.n	8004c48 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	015a      	lsls	r2, r3, #5
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	791b      	ldrb	r3, [r3, #4]
 8004bb6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004bb8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	059b      	lsls	r3, r3, #22
 8004bbe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	0151      	lsls	r1, r2, #5
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	440a      	add	r2, r1
 8004bca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bd6:	6013      	str	r3, [r2, #0]
 8004bd8:	e036      	b.n	8004c48 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004be0:	69da      	ldr	r2, [r3, #28]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	f003 030f 	and.w	r3, r3, #15
 8004bea:	2101      	movs	r1, #1
 8004bec:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf0:	041b      	lsls	r3, r3, #16
 8004bf2:	68f9      	ldr	r1, [r7, #12]
 8004bf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d11a      	bne.n	8004c48 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	015a      	lsls	r2, r3, #5
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	4413      	add	r3, r2
 8004c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	791b      	ldrb	r3, [r3, #4]
 8004c2c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004c2e:	430b      	orrs	r3, r1
 8004c30:	4313      	orrs	r3, r2
 8004c32:	68ba      	ldr	r2, [r7, #8]
 8004c34:	0151      	lsls	r1, r2, #5
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	440a      	add	r2, r1
 8004c3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c46:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
	...

08004c58 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	781b      	ldrb	r3, [r3, #0]
 8004c6a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	785b      	ldrb	r3, [r3, #1]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d161      	bne.n	8004d38 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	015a      	lsls	r2, r3, #5
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c8a:	d11f      	bne.n	8004ccc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	015a      	lsls	r2, r3, #5
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	4413      	add	r3, r2
 8004c94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	0151      	lsls	r1, r2, #5
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	440a      	add	r2, r1
 8004ca2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ca6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004caa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	015a      	lsls	r2, r3, #5
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	0151      	lsls	r1, r2, #5
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	440a      	add	r2, r1
 8004cc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cc6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004cca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	f003 030f 	and.w	r3, r3, #15
 8004cdc:	2101      	movs	r1, #1
 8004cde:	fa01 f303 	lsl.w	r3, r1, r3
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	43db      	mvns	r3, r3
 8004ce6:	68f9      	ldr	r1, [r7, #12]
 8004ce8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cec:	4013      	ands	r3, r2
 8004cee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf6:	69da      	ldr	r2, [r3, #28]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	f003 030f 	and.w	r3, r3, #15
 8004d00:	2101      	movs	r1, #1
 8004d02:	fa01 f303 	lsl.w	r3, r1, r3
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	43db      	mvns	r3, r3
 8004d0a:	68f9      	ldr	r1, [r7, #12]
 8004d0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d10:	4013      	ands	r3, r2
 8004d12:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	015a      	lsls	r2, r3, #5
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	0159      	lsls	r1, r3, #5
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	440b      	add	r3, r1
 8004d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d2e:	4619      	mov	r1, r3
 8004d30:	4b35      	ldr	r3, [pc, #212]	; (8004e08 <USB_DeactivateEndpoint+0x1b0>)
 8004d32:	4013      	ands	r3, r2
 8004d34:	600b      	str	r3, [r1, #0]
 8004d36:	e060      	b.n	8004dfa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d4e:	d11f      	bne.n	8004d90 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	015a      	lsls	r2, r3, #5
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	0151      	lsls	r1, r2, #5
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	440a      	add	r2, r1
 8004d66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d6a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d6e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	015a      	lsls	r2, r3, #5
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	4413      	add	r3, r2
 8004d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	0151      	lsls	r1, r2, #5
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	440a      	add	r2, r1
 8004d86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d8e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	f003 030f 	and.w	r3, r3, #15
 8004da0:	2101      	movs	r1, #1
 8004da2:	fa01 f303 	lsl.w	r3, r1, r3
 8004da6:	041b      	lsls	r3, r3, #16
 8004da8:	43db      	mvns	r3, r3
 8004daa:	68f9      	ldr	r1, [r7, #12]
 8004dac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004db0:	4013      	ands	r3, r2
 8004db2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dba:	69da      	ldr	r2, [r3, #28]
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	f003 030f 	and.w	r3, r3, #15
 8004dc4:	2101      	movs	r1, #1
 8004dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8004dca:	041b      	lsls	r3, r3, #16
 8004dcc:	43db      	mvns	r3, r3
 8004dce:	68f9      	ldr	r1, [r7, #12]
 8004dd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	015a      	lsls	r2, r3, #5
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	4413      	add	r3, r2
 8004de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	0159      	lsls	r1, r3, #5
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	440b      	add	r3, r1
 8004dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df2:	4619      	mov	r1, r3
 8004df4:	4b05      	ldr	r3, [pc, #20]	; (8004e0c <USB_DeactivateEndpoint+0x1b4>)
 8004df6:	4013      	ands	r3, r2
 8004df8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3714      	adds	r7, #20
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr
 8004e08:	ec337800 	.word	0xec337800
 8004e0c:	eff37800 	.word	0xeff37800

08004e10 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b08a      	sub	sp, #40	; 0x28
 8004e14:	af02      	add	r7, sp, #8
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	785b      	ldrb	r3, [r3, #1]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	f040 815c 	bne.w	80050ea <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d132      	bne.n	8004ea0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	015a      	lsls	r2, r3, #5
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	4413      	add	r3, r2
 8004e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	69ba      	ldr	r2, [r7, #24]
 8004e4a:	0151      	lsls	r1, r2, #5
 8004e4c:	69fa      	ldr	r2, [r7, #28]
 8004e4e:	440a      	add	r2, r1
 8004e50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e54:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e58:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	015a      	lsls	r2, r3, #5
 8004e62:	69fb      	ldr	r3, [r7, #28]
 8004e64:	4413      	add	r3, r2
 8004e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	0151      	lsls	r1, r2, #5
 8004e70:	69fa      	ldr	r2, [r7, #28]
 8004e72:	440a      	add	r2, r1
 8004e74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e7c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	015a      	lsls	r2, r3, #5
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	4413      	add	r3, r2
 8004e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	0151      	lsls	r1, r2, #5
 8004e90:	69fa      	ldr	r2, [r7, #28]
 8004e92:	440a      	add	r2, r1
 8004e94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e98:	0cdb      	lsrs	r3, r3, #19
 8004e9a:	04db      	lsls	r3, r3, #19
 8004e9c:	6113      	str	r3, [r2, #16]
 8004e9e:	e074      	b.n	8004f8a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	015a      	lsls	r2, r3, #5
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	0151      	lsls	r1, r2, #5
 8004eb2:	69fa      	ldr	r2, [r7, #28]
 8004eb4:	440a      	add	r2, r1
 8004eb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eba:	0cdb      	lsrs	r3, r3, #19
 8004ebc:	04db      	lsls	r3, r3, #19
 8004ebe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ec0:	69bb      	ldr	r3, [r7, #24]
 8004ec2:	015a      	lsls	r2, r3, #5
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ecc:	691b      	ldr	r3, [r3, #16]
 8004ece:	69ba      	ldr	r2, [r7, #24]
 8004ed0:	0151      	lsls	r1, r2, #5
 8004ed2:	69fa      	ldr	r2, [r7, #28]
 8004ed4:	440a      	add	r2, r1
 8004ed6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eda:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ede:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ee2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	015a      	lsls	r2, r3, #5
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ef0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	6999      	ldr	r1, [r3, #24]
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	440b      	add	r3, r1
 8004efc:	1e59      	subs	r1, r3, #1
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f06:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004f08:	4b9d      	ldr	r3, [pc, #628]	; (8005180 <USB_EPStartXfer+0x370>)
 8004f0a:	400b      	ands	r3, r1
 8004f0c:	69b9      	ldr	r1, [r7, #24]
 8004f0e:	0148      	lsls	r0, r1, #5
 8004f10:	69f9      	ldr	r1, [r7, #28]
 8004f12:	4401      	add	r1, r0
 8004f14:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	015a      	lsls	r2, r3, #5
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	4413      	add	r3, r2
 8004f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f28:	691a      	ldr	r2, [r3, #16]
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f32:	69b9      	ldr	r1, [r7, #24]
 8004f34:	0148      	lsls	r0, r1, #5
 8004f36:	69f9      	ldr	r1, [r7, #28]
 8004f38:	4401      	add	r1, r0
 8004f3a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	791b      	ldrb	r3, [r3, #4]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d11f      	bne.n	8004f8a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	015a      	lsls	r2, r3, #5
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	4413      	add	r3, r2
 8004f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	69ba      	ldr	r2, [r7, #24]
 8004f5a:	0151      	lsls	r1, r2, #5
 8004f5c:	69fa      	ldr	r2, [r7, #28]
 8004f5e:	440a      	add	r2, r1
 8004f60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f64:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004f68:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	015a      	lsls	r2, r3, #5
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	4413      	add	r3, r2
 8004f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	69ba      	ldr	r2, [r7, #24]
 8004f7a:	0151      	lsls	r1, r2, #5
 8004f7c:	69fa      	ldr	r2, [r7, #28]
 8004f7e:	440a      	add	r2, r1
 8004f80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f84:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f88:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004f8a:	79fb      	ldrb	r3, [r7, #7]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d14b      	bne.n	8005028 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	695b      	ldr	r3, [r3, #20]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d009      	beq.n	8004fac <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	791b      	ldrb	r3, [r3, #4]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d128      	bne.n	8005006 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d110      	bne.n	8004fe6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	015a      	lsls	r2, r3, #5
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	4413      	add	r3, r2
 8004fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	0151      	lsls	r1, r2, #5
 8004fd6:	69fa      	ldr	r2, [r7, #28]
 8004fd8:	440a      	add	r2, r1
 8004fda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fde:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004fe2:	6013      	str	r3, [r2, #0]
 8004fe4:	e00f      	b.n	8005006 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	015a      	lsls	r2, r3, #5
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	4413      	add	r3, r2
 8004fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	0151      	lsls	r1, r2, #5
 8004ff8:	69fa      	ldr	r2, [r7, #28]
 8004ffa:	440a      	add	r2, r1
 8004ffc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005004:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	015a      	lsls	r2, r3, #5
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	4413      	add	r3, r2
 800500e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	0151      	lsls	r1, r2, #5
 8005018:	69fa      	ldr	r2, [r7, #28]
 800501a:	440a      	add	r2, r1
 800501c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005020:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005024:	6013      	str	r3, [r2, #0]
 8005026:	e133      	b.n	8005290 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	015a      	lsls	r2, r3, #5
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	4413      	add	r3, r2
 8005030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	69ba      	ldr	r2, [r7, #24]
 8005038:	0151      	lsls	r1, r2, #5
 800503a:	69fa      	ldr	r2, [r7, #28]
 800503c:	440a      	add	r2, r1
 800503e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005042:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005046:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	791b      	ldrb	r3, [r3, #4]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d015      	beq.n	800507c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	2b00      	cmp	r3, #0
 8005056:	f000 811b 	beq.w	8005290 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005060:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	f003 030f 	and.w	r3, r3, #15
 800506a:	2101      	movs	r1, #1
 800506c:	fa01 f303 	lsl.w	r3, r1, r3
 8005070:	69f9      	ldr	r1, [r7, #28]
 8005072:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005076:	4313      	orrs	r3, r2
 8005078:	634b      	str	r3, [r1, #52]	; 0x34
 800507a:	e109      	b.n	8005290 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005088:	2b00      	cmp	r3, #0
 800508a:	d110      	bne.n	80050ae <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	015a      	lsls	r2, r3, #5
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	4413      	add	r3, r2
 8005094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	69ba      	ldr	r2, [r7, #24]
 800509c:	0151      	lsls	r1, r2, #5
 800509e:	69fa      	ldr	r2, [r7, #28]
 80050a0:	440a      	add	r2, r1
 80050a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050aa:	6013      	str	r3, [r2, #0]
 80050ac:	e00f      	b.n	80050ce <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	015a      	lsls	r2, r3, #5
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	4413      	add	r3, r2
 80050b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	0151      	lsls	r1, r2, #5
 80050c0:	69fa      	ldr	r2, [r7, #28]
 80050c2:	440a      	add	r2, r1
 80050c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050cc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	6919      	ldr	r1, [r3, #16]
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	781a      	ldrb	r2, [r3, #0]
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	b298      	uxth	r0, r3
 80050dc:	79fb      	ldrb	r3, [r7, #7]
 80050de:	9300      	str	r3, [sp, #0]
 80050e0:	4603      	mov	r3, r0
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f000 fade 	bl	80056a4 <USB_WritePacket>
 80050e8:	e0d2      	b.n	8005290 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	015a      	lsls	r2, r3, #5
 80050ee:	69fb      	ldr	r3, [r7, #28]
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	0151      	lsls	r1, r2, #5
 80050fc:	69fa      	ldr	r2, [r7, #28]
 80050fe:	440a      	add	r2, r1
 8005100:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005104:	0cdb      	lsrs	r3, r3, #19
 8005106:	04db      	lsls	r3, r3, #19
 8005108:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	4413      	add	r3, r2
 8005112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	0151      	lsls	r1, r2, #5
 800511c:	69fa      	ldr	r2, [r7, #28]
 800511e:	440a      	add	r2, r1
 8005120:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005124:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005128:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800512c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d126      	bne.n	8005184 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	015a      	lsls	r2, r3, #5
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	4413      	add	r3, r2
 800513e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005142:	691a      	ldr	r2, [r3, #16]
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800514c:	69b9      	ldr	r1, [r7, #24]
 800514e:	0148      	lsls	r0, r1, #5
 8005150:	69f9      	ldr	r1, [r7, #28]
 8005152:	4401      	add	r1, r0
 8005154:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005158:	4313      	orrs	r3, r2
 800515a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	015a      	lsls	r2, r3, #5
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	4413      	add	r3, r2
 8005164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	0151      	lsls	r1, r2, #5
 800516e:	69fa      	ldr	r2, [r7, #28]
 8005170:	440a      	add	r2, r1
 8005172:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005176:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800517a:	6113      	str	r3, [r2, #16]
 800517c:	e03a      	b.n	80051f4 <USB_EPStartXfer+0x3e4>
 800517e:	bf00      	nop
 8005180:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	699a      	ldr	r2, [r3, #24]
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	4413      	add	r3, r2
 800518e:	1e5a      	subs	r2, r3, #1
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	fbb2 f3f3 	udiv	r3, r2, r3
 8005198:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	8afa      	ldrh	r2, [r7, #22]
 80051a0:	fb03 f202 	mul.w	r2, r3, r2
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	015a      	lsls	r2, r3, #5
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	4413      	add	r3, r2
 80051b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b4:	691a      	ldr	r2, [r3, #16]
 80051b6:	8afb      	ldrh	r3, [r7, #22]
 80051b8:	04d9      	lsls	r1, r3, #19
 80051ba:	4b38      	ldr	r3, [pc, #224]	; (800529c <USB_EPStartXfer+0x48c>)
 80051bc:	400b      	ands	r3, r1
 80051be:	69b9      	ldr	r1, [r7, #24]
 80051c0:	0148      	lsls	r0, r1, #5
 80051c2:	69f9      	ldr	r1, [r7, #28]
 80051c4:	4401      	add	r1, r0
 80051c6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80051ca:	4313      	orrs	r3, r2
 80051cc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	015a      	lsls	r2, r3, #5
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	4413      	add	r3, r2
 80051d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051da:	691a      	ldr	r2, [r3, #16]
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	69db      	ldr	r3, [r3, #28]
 80051e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051e4:	69b9      	ldr	r1, [r7, #24]
 80051e6:	0148      	lsls	r0, r1, #5
 80051e8:	69f9      	ldr	r1, [r7, #28]
 80051ea:	4401      	add	r1, r0
 80051ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80051f0:	4313      	orrs	r3, r2
 80051f2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80051f4:	79fb      	ldrb	r3, [r7, #7]
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d10d      	bne.n	8005216 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d009      	beq.n	8005216 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	6919      	ldr	r1, [r3, #16]
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	015a      	lsls	r2, r3, #5
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	4413      	add	r3, r2
 800520e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005212:	460a      	mov	r2, r1
 8005214:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	791b      	ldrb	r3, [r3, #4]
 800521a:	2b01      	cmp	r3, #1
 800521c:	d128      	bne.n	8005270 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800522a:	2b00      	cmp	r3, #0
 800522c:	d110      	bne.n	8005250 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	015a      	lsls	r2, r3, #5
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	4413      	add	r3, r2
 8005236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	69ba      	ldr	r2, [r7, #24]
 800523e:	0151      	lsls	r1, r2, #5
 8005240:	69fa      	ldr	r2, [r7, #28]
 8005242:	440a      	add	r2, r1
 8005244:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005248:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800524c:	6013      	str	r3, [r2, #0]
 800524e:	e00f      	b.n	8005270 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	015a      	lsls	r2, r3, #5
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	4413      	add	r3, r2
 8005258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	69ba      	ldr	r2, [r7, #24]
 8005260:	0151      	lsls	r1, r2, #5
 8005262:	69fa      	ldr	r2, [r7, #28]
 8005264:	440a      	add	r2, r1
 8005266:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800526a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800526e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	015a      	lsls	r2, r3, #5
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	4413      	add	r3, r2
 8005278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	69ba      	ldr	r2, [r7, #24]
 8005280:	0151      	lsls	r1, r2, #5
 8005282:	69fa      	ldr	r2, [r7, #28]
 8005284:	440a      	add	r2, r1
 8005286:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800528a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800528e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3720      	adds	r7, #32
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	1ff80000 	.word	0x1ff80000

080052a0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b087      	sub	sp, #28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	4613      	mov	r3, r2
 80052ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	785b      	ldrb	r3, [r3, #1]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	f040 80ce 	bne.w	800545e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d132      	bne.n	8005330 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	015a      	lsls	r2, r3, #5
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	4413      	add	r3, r2
 80052d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	0151      	lsls	r1, r2, #5
 80052dc:	697a      	ldr	r2, [r7, #20]
 80052de:	440a      	add	r2, r1
 80052e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80052e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80052ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	015a      	lsls	r2, r3, #5
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	4413      	add	r3, r2
 80052f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	0151      	lsls	r1, r2, #5
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	440a      	add	r2, r1
 8005304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005308:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800530c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	015a      	lsls	r2, r3, #5
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	4413      	add	r3, r2
 8005316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	0151      	lsls	r1, r2, #5
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	440a      	add	r2, r1
 8005324:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005328:	0cdb      	lsrs	r3, r3, #19
 800532a:	04db      	lsls	r3, r3, #19
 800532c:	6113      	str	r3, [r2, #16]
 800532e:	e04e      	b.n	80053ce <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	015a      	lsls	r2, r3, #5
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	4413      	add	r3, r2
 8005338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	0151      	lsls	r1, r2, #5
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	440a      	add	r2, r1
 8005346:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800534a:	0cdb      	lsrs	r3, r3, #19
 800534c:	04db      	lsls	r3, r3, #19
 800534e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	015a      	lsls	r2, r3, #5
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	4413      	add	r3, r2
 8005358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	0151      	lsls	r1, r2, #5
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	440a      	add	r2, r1
 8005366:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800536a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800536e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005372:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	699a      	ldr	r2, [r3, #24]
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	429a      	cmp	r2, r3
 800537e:	d903      	bls.n	8005388 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	68da      	ldr	r2, [r3, #12]
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	015a      	lsls	r2, r3, #5
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	4413      	add	r3, r2
 8005390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	0151      	lsls	r1, r2, #5
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	440a      	add	r2, r1
 800539e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	015a      	lsls	r2, r3, #5
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b4:	691a      	ldr	r2, [r3, #16]
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	699b      	ldr	r3, [r3, #24]
 80053ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053be:	6939      	ldr	r1, [r7, #16]
 80053c0:	0148      	lsls	r0, r1, #5
 80053c2:	6979      	ldr	r1, [r7, #20]
 80053c4:	4401      	add	r1, r0
 80053c6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80053ca:	4313      	orrs	r3, r2
 80053cc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80053ce:	79fb      	ldrb	r3, [r7, #7]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d11e      	bne.n	8005412 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	695b      	ldr	r3, [r3, #20]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d009      	beq.n	80053f0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	015a      	lsls	r2, r3, #5
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	4413      	add	r3, r2
 80053e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e8:	461a      	mov	r2, r3
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	015a      	lsls	r2, r3, #5
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	4413      	add	r3, r2
 80053f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	0151      	lsls	r1, r2, #5
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	440a      	add	r2, r1
 8005406:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800540a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800540e:	6013      	str	r3, [r2, #0]
 8005410:	e097      	b.n	8005542 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	015a      	lsls	r2, r3, #5
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	4413      	add	r3, r2
 800541a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	0151      	lsls	r1, r2, #5
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	440a      	add	r2, r1
 8005428:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800542c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005430:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	2b00      	cmp	r3, #0
 8005438:	f000 8083 	beq.w	8005542 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005442:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	f003 030f 	and.w	r3, r3, #15
 800544c:	2101      	movs	r1, #1
 800544e:	fa01 f303 	lsl.w	r3, r1, r3
 8005452:	6979      	ldr	r1, [r7, #20]
 8005454:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005458:	4313      	orrs	r3, r2
 800545a:	634b      	str	r3, [r1, #52]	; 0x34
 800545c:	e071      	b.n	8005542 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	015a      	lsls	r2, r3, #5
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	4413      	add	r3, r2
 8005466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	0151      	lsls	r1, r2, #5
 8005470:	697a      	ldr	r2, [r7, #20]
 8005472:	440a      	add	r2, r1
 8005474:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005478:	0cdb      	lsrs	r3, r3, #19
 800547a:	04db      	lsls	r3, r3, #19
 800547c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	015a      	lsls	r2, r3, #5
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	4413      	add	r3, r2
 8005486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800548a:	691b      	ldr	r3, [r3, #16]
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	0151      	lsls	r1, r2, #5
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	440a      	add	r2, r1
 8005494:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005498:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800549c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80054a0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	699b      	ldr	r3, [r3, #24]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	68da      	ldr	r2, [r3, #12]
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	68da      	ldr	r2, [r3, #12]
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	015a      	lsls	r2, r3, #5
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	693a      	ldr	r2, [r7, #16]
 80054ca:	0151      	lsls	r1, r2, #5
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	440a      	add	r2, r1
 80054d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	015a      	lsls	r2, r3, #5
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	4413      	add	r3, r2
 80054e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054e6:	691a      	ldr	r2, [r3, #16]
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	69db      	ldr	r3, [r3, #28]
 80054ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054f0:	6939      	ldr	r1, [r7, #16]
 80054f2:	0148      	lsls	r0, r1, #5
 80054f4:	6979      	ldr	r1, [r7, #20]
 80054f6:	4401      	add	r1, r0
 80054f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80054fc:	4313      	orrs	r3, r2
 80054fe:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005500:	79fb      	ldrb	r3, [r7, #7]
 8005502:	2b01      	cmp	r3, #1
 8005504:	d10d      	bne.n	8005522 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d009      	beq.n	8005522 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	6919      	ldr	r1, [r3, #16]
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	015a      	lsls	r2, r3, #5
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	4413      	add	r3, r2
 800551a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800551e:	460a      	mov	r2, r1
 8005520:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	015a      	lsls	r2, r3, #5
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	4413      	add	r3, r2
 800552a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	0151      	lsls	r1, r2, #5
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	440a      	add	r2, r1
 8005538:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800553c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005540:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	371c      	adds	r7, #28
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005550:	b480      	push	{r7}
 8005552:	b087      	sub	sp, #28
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800555a:	2300      	movs	r3, #0
 800555c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800555e:	2300      	movs	r3, #0
 8005560:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	785b      	ldrb	r3, [r3, #1]
 800556a:	2b01      	cmp	r3, #1
 800556c:	d14a      	bne.n	8005604 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	015a      	lsls	r2, r3, #5
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	4413      	add	r3, r2
 8005578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005582:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005586:	f040 8086 	bne.w	8005696 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	015a      	lsls	r2, r3, #5
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	4413      	add	r3, r2
 8005594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	683a      	ldr	r2, [r7, #0]
 800559c:	7812      	ldrb	r2, [r2, #0]
 800559e:	0151      	lsls	r1, r2, #5
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	440a      	add	r2, r1
 80055a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055ac:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	683a      	ldr	r2, [r7, #0]
 80055c0:	7812      	ldrb	r2, [r2, #0]
 80055c2:	0151      	lsls	r1, r2, #5
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	440a      	add	r2, r1
 80055c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055d0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	3301      	adds	r3, #1
 80055d6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f242 7210 	movw	r2, #10000	; 0x2710
 80055de:	4293      	cmp	r3, r2
 80055e0:	d902      	bls.n	80055e8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	75fb      	strb	r3, [r7, #23]
          break;
 80055e6:	e056      	b.n	8005696 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	015a      	lsls	r2, r3, #5
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	4413      	add	r3, r2
 80055f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005600:	d0e7      	beq.n	80055d2 <USB_EPStopXfer+0x82>
 8005602:	e048      	b.n	8005696 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	015a      	lsls	r2, r3, #5
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	4413      	add	r3, r2
 800560e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005618:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800561c:	d13b      	bne.n	8005696 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	015a      	lsls	r2, r3, #5
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	4413      	add	r3, r2
 8005628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	683a      	ldr	r2, [r7, #0]
 8005630:	7812      	ldrb	r2, [r2, #0]
 8005632:	0151      	lsls	r1, r2, #5
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	440a      	add	r2, r1
 8005638:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800563c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005640:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	015a      	lsls	r2, r3, #5
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	4413      	add	r3, r2
 800564c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	683a      	ldr	r2, [r7, #0]
 8005654:	7812      	ldrb	r2, [r2, #0]
 8005656:	0151      	lsls	r1, r2, #5
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	440a      	add	r2, r1
 800565c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005660:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005664:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	3301      	adds	r3, #1
 800566a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005672:	4293      	cmp	r3, r2
 8005674:	d902      	bls.n	800567c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	75fb      	strb	r3, [r7, #23]
          break;
 800567a:	e00c      	b.n	8005696 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	015a      	lsls	r2, r3, #5
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	4413      	add	r3, r2
 8005686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005690:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005694:	d0e7      	beq.n	8005666 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005696:	7dfb      	ldrb	r3, [r7, #23]
}
 8005698:	4618      	mov	r0, r3
 800569a:	371c      	adds	r7, #28
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b089      	sub	sp, #36	; 0x24
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	4611      	mov	r1, r2
 80056b0:	461a      	mov	r2, r3
 80056b2:	460b      	mov	r3, r1
 80056b4:	71fb      	strb	r3, [r7, #7]
 80056b6:	4613      	mov	r3, r2
 80056b8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80056c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d123      	bne.n	8005712 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80056ca:	88bb      	ldrh	r3, [r7, #4]
 80056cc:	3303      	adds	r3, #3
 80056ce:	089b      	lsrs	r3, r3, #2
 80056d0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80056d2:	2300      	movs	r3, #0
 80056d4:	61bb      	str	r3, [r7, #24]
 80056d6:	e018      	b.n	800570a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80056d8:	79fb      	ldrb	r3, [r7, #7]
 80056da:	031a      	lsls	r2, r3, #12
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	4413      	add	r3, r2
 80056e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056e4:	461a      	mov	r2, r3
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	6013      	str	r3, [r2, #0]
      pSrc++;
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	3301      	adds	r3, #1
 80056f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	3301      	adds	r3, #1
 80056f6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	3301      	adds	r3, #1
 80056fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	3301      	adds	r3, #1
 8005702:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	3301      	adds	r3, #1
 8005708:	61bb      	str	r3, [r7, #24]
 800570a:	69ba      	ldr	r2, [r7, #24]
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	429a      	cmp	r2, r3
 8005710:	d3e2      	bcc.n	80056d8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3724      	adds	r7, #36	; 0x24
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005720:	b480      	push	{r7}
 8005722:	b08b      	sub	sp, #44	; 0x2c
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	4613      	mov	r3, r2
 800572c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005736:	88fb      	ldrh	r3, [r7, #6]
 8005738:	089b      	lsrs	r3, r3, #2
 800573a:	b29b      	uxth	r3, r3
 800573c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800573e:	88fb      	ldrh	r3, [r7, #6]
 8005740:	f003 0303 	and.w	r3, r3, #3
 8005744:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005746:	2300      	movs	r3, #0
 8005748:	623b      	str	r3, [r7, #32]
 800574a:	e014      	b.n	8005776 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005756:	601a      	str	r2, [r3, #0]
    pDest++;
 8005758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575a:	3301      	adds	r3, #1
 800575c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800575e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005760:	3301      	adds	r3, #1
 8005762:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005766:	3301      	adds	r3, #1
 8005768:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800576a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576c:	3301      	adds	r3, #1
 800576e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005770:	6a3b      	ldr	r3, [r7, #32]
 8005772:	3301      	adds	r3, #1
 8005774:	623b      	str	r3, [r7, #32]
 8005776:	6a3a      	ldr	r2, [r7, #32]
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	429a      	cmp	r2, r3
 800577c:	d3e6      	bcc.n	800574c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800577e:	8bfb      	ldrh	r3, [r7, #30]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d01e      	beq.n	80057c2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005784:	2300      	movs	r3, #0
 8005786:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800578e:	461a      	mov	r2, r3
 8005790:	f107 0310 	add.w	r3, r7, #16
 8005794:	6812      	ldr	r2, [r2, #0]
 8005796:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	6a3b      	ldr	r3, [r7, #32]
 800579c:	b2db      	uxtb	r3, r3
 800579e:	00db      	lsls	r3, r3, #3
 80057a0:	fa22 f303 	lsr.w	r3, r2, r3
 80057a4:	b2da      	uxtb	r2, r3
 80057a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a8:	701a      	strb	r2, [r3, #0]
      i++;
 80057aa:	6a3b      	ldr	r3, [r7, #32]
 80057ac:	3301      	adds	r3, #1
 80057ae:	623b      	str	r3, [r7, #32]
      pDest++;
 80057b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b2:	3301      	adds	r3, #1
 80057b4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80057b6:	8bfb      	ldrh	r3, [r7, #30]
 80057b8:	3b01      	subs	r3, #1
 80057ba:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80057bc:	8bfb      	ldrh	r3, [r7, #30]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d1ea      	bne.n	8005798 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80057c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	372c      	adds	r7, #44	; 0x2c
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	785b      	ldrb	r3, [r3, #1]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d12c      	bne.n	8005846 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	015a      	lsls	r2, r3, #5
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	4413      	add	r3, r2
 80057f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	db12      	blt.n	8005824 <USB_EPSetStall+0x54>
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d00f      	beq.n	8005824 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	015a      	lsls	r2, r3, #5
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	4413      	add	r3, r2
 800580c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	0151      	lsls	r1, r2, #5
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	440a      	add	r2, r1
 800581a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800581e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005822:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	015a      	lsls	r2, r3, #5
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	4413      	add	r3, r2
 800582c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68ba      	ldr	r2, [r7, #8]
 8005834:	0151      	lsls	r1, r2, #5
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	440a      	add	r2, r1
 800583a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800583e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005842:	6013      	str	r3, [r2, #0]
 8005844:	e02b      	b.n	800589e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	015a      	lsls	r2, r3, #5
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	4413      	add	r3, r2
 800584e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	db12      	blt.n	800587e <USB_EPSetStall+0xae>
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00f      	beq.n	800587e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	015a      	lsls	r2, r3, #5
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	4413      	add	r3, r2
 8005866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68ba      	ldr	r2, [r7, #8]
 800586e:	0151      	lsls	r1, r2, #5
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	440a      	add	r2, r1
 8005874:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005878:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800587c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	015a      	lsls	r2, r3, #5
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	4413      	add	r3, r2
 8005886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68ba      	ldr	r2, [r7, #8]
 800588e:	0151      	lsls	r1, r2, #5
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	440a      	add	r2, r1
 8005894:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005898:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800589c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3714      	adds	r7, #20
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	785b      	ldrb	r3, [r3, #1]
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d128      	bne.n	800591a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	015a      	lsls	r2, r3, #5
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	4413      	add	r3, r2
 80058d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	0151      	lsls	r1, r2, #5
 80058da:	68fa      	ldr	r2, [r7, #12]
 80058dc:	440a      	add	r2, r1
 80058de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80058e6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	791b      	ldrb	r3, [r3, #4]
 80058ec:	2b03      	cmp	r3, #3
 80058ee:	d003      	beq.n	80058f8 <USB_EPClearStall+0x4c>
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	791b      	ldrb	r3, [r3, #4]
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d138      	bne.n	800596a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	015a      	lsls	r2, r3, #5
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	4413      	add	r3, r2
 8005900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	0151      	lsls	r1, r2, #5
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	440a      	add	r2, r1
 800590e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005912:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005916:	6013      	str	r3, [r2, #0]
 8005918:	e027      	b.n	800596a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	015a      	lsls	r2, r3, #5
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	4413      	add	r3, r2
 8005922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	0151      	lsls	r1, r2, #5
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	440a      	add	r2, r1
 8005930:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005934:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005938:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	791b      	ldrb	r3, [r3, #4]
 800593e:	2b03      	cmp	r3, #3
 8005940:	d003      	beq.n	800594a <USB_EPClearStall+0x9e>
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	791b      	ldrb	r3, [r3, #4]
 8005946:	2b02      	cmp	r3, #2
 8005948:	d10f      	bne.n	800596a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	4413      	add	r3, r2
 8005952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	0151      	lsls	r1, r2, #5
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	440a      	add	r2, r1
 8005960:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005968:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3714      	adds	r7, #20
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	460b      	mov	r3, r1
 8005982:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005996:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800599a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	78fb      	ldrb	r3, [r7, #3]
 80059a6:	011b      	lsls	r3, r3, #4
 80059a8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80059ac:	68f9      	ldr	r1, [r7, #12]
 80059ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059b2:	4313      	orrs	r3, r2
 80059b4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3714      	adds	r7, #20
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80059de:	f023 0303 	bic.w	r3, r3, #3
 80059e2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059f2:	f023 0302 	bic.w	r3, r3, #2
 80059f6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3714      	adds	r7, #20
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005a06:	b480      	push	{r7}
 8005a08:	b085      	sub	sp, #20
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005a20:	f023 0303 	bic.w	r3, r3, #3
 8005a24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a34:	f043 0302 	orr.w	r3, r3, #2
 8005a38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3714      	adds	r7, #20
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	695b      	ldr	r3, [r3, #20]
 8005a54:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005a60:	68fb      	ldr	r3, [r7, #12]
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3714      	adds	r7, #20
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a6e:	b480      	push	{r7}
 8005a70:	b085      	sub	sp, #20
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a8a:	69db      	ldr	r3, [r3, #28]
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	4013      	ands	r3, r2
 8005a90:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	0c1b      	lsrs	r3, r3, #16
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3714      	adds	r7, #20
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b085      	sub	sp, #20
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005abe:	69db      	ldr	r3, [r3, #28]
 8005ac0:	68ba      	ldr	r2, [r7, #8]
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	b29b      	uxth	r3, r3
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3714      	adds	r7, #20
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr

08005ad6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	b085      	sub	sp, #20
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
 8005ade:	460b      	mov	r3, r1
 8005ae0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005ae6:	78fb      	ldrb	r3, [r7, #3]
 8005ae8:	015a      	lsls	r2, r3, #5
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	4413      	add	r3, r2
 8005aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	4013      	ands	r3, r2
 8005b02:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005b04:	68bb      	ldr	r3, [r7, #8]
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3714      	adds	r7, #20
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr

08005b12 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005b12:	b480      	push	{r7}
 8005b14:	b087      	sub	sp, #28
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b34:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005b36:	78fb      	ldrb	r3, [r7, #3]
 8005b38:	f003 030f 	and.w	r3, r3, #15
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b42:	01db      	lsls	r3, r3, #7
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	693a      	ldr	r2, [r7, #16]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005b4c:	78fb      	ldrb	r3, [r7, #3]
 8005b4e:	015a      	lsls	r2, r3, #5
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	4413      	add	r3, r2
 8005b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005b60:	68bb      	ldr	r3, [r7, #8]
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	371c      	adds	r7, #28
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr

08005b6e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b083      	sub	sp, #12
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	f003 0301 	and.w	r3, r3, #1
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	370c      	adds	r7, #12
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr

08005b8a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b085      	sub	sp, #20
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ba4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005ba8:	f023 0307 	bic.w	r3, r3, #7
 8005bac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bc0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3714      	adds	r7, #20
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	460b      	mov	r3, r1
 8005bda:	607a      	str	r2, [r7, #4]
 8005bdc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	333c      	adds	r3, #60	; 0x3c
 8005be6:	3304      	adds	r3, #4
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	4a26      	ldr	r2, [pc, #152]	; (8005c88 <USB_EP0_OutStart+0xb8>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d90a      	bls.n	8005c0a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c04:	d101      	bne.n	8005c0a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005c06:	2300      	movs	r3, #0
 8005c08:	e037      	b.n	8005c7a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c10:	461a      	mov	r2, r3
 8005c12:	2300      	movs	r3, #0
 8005c14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c38:	f043 0318 	orr.w	r3, r3, #24
 8005c3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c4c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005c50:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005c52:	7afb      	ldrb	r3, [r7, #11]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d10f      	bne.n	8005c78 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c5e:	461a      	mov	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	697a      	ldr	r2, [r7, #20]
 8005c6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c72:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005c76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	371c      	adds	r7, #28
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr
 8005c86:	bf00      	nop
 8005c88:	4f54300a 	.word	0x4f54300a

08005c8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b085      	sub	sp, #20
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c94:	2300      	movs	r3, #0
 8005c96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	4a13      	ldr	r2, [pc, #76]	; (8005cf0 <USB_CoreReset+0x64>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d901      	bls.n	8005caa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e01b      	b.n	8005ce2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	daf2      	bge.n	8005c98 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	f043 0201 	orr.w	r2, r3, #1
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	4a09      	ldr	r2, [pc, #36]	; (8005cf0 <USB_CoreReset+0x64>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d901      	bls.n	8005cd4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005cd0:	2303      	movs	r3, #3
 8005cd2:	e006      	b.n	8005ce2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	691b      	ldr	r3, [r3, #16]
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d0f0      	beq.n	8005cc2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	00030d40 	.word	0x00030d40

08005cf4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005d00:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005d04:	f002 fca0 	bl	8008648 <USBD_static_malloc>
 8005d08:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d109      	bne.n	8005d24 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	32b0      	adds	r2, #176	; 0xb0
 8005d1a:	2100      	movs	r1, #0
 8005d1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005d20:	2302      	movs	r3, #2
 8005d22:	e0d4      	b.n	8005ece <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005d24:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005d28:	2100      	movs	r1, #0
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f002 fd0c 	bl	8008748 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	32b0      	adds	r2, #176	; 0xb0
 8005d3a:	68f9      	ldr	r1, [r7, #12]
 8005d3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	32b0      	adds	r2, #176	; 0xb0
 8005d4a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	7c1b      	ldrb	r3, [r3, #16]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d138      	bne.n	8005dce <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005d5c:	4b5e      	ldr	r3, [pc, #376]	; (8005ed8 <USBD_CDC_Init+0x1e4>)
 8005d5e:	7819      	ldrb	r1, [r3, #0]
 8005d60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d64:	2202      	movs	r2, #2
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f002 fb4b 	bl	8008402 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005d6c:	4b5a      	ldr	r3, [pc, #360]	; (8005ed8 <USBD_CDC_Init+0x1e4>)
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	f003 020f 	and.w	r2, r3, #15
 8005d74:	6879      	ldr	r1, [r7, #4]
 8005d76:	4613      	mov	r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4413      	add	r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	440b      	add	r3, r1
 8005d80:	3324      	adds	r3, #36	; 0x24
 8005d82:	2201      	movs	r2, #1
 8005d84:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005d86:	4b55      	ldr	r3, [pc, #340]	; (8005edc <USBD_CDC_Init+0x1e8>)
 8005d88:	7819      	ldrb	r1, [r3, #0]
 8005d8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005d8e:	2202      	movs	r2, #2
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f002 fb36 	bl	8008402 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005d96:	4b51      	ldr	r3, [pc, #324]	; (8005edc <USBD_CDC_Init+0x1e8>)
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	f003 020f 	and.w	r2, r3, #15
 8005d9e:	6879      	ldr	r1, [r7, #4]
 8005da0:	4613      	mov	r3, r2
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	4413      	add	r3, r2
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	440b      	add	r3, r1
 8005daa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005dae:	2201      	movs	r2, #1
 8005db0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005db2:	4b4b      	ldr	r3, [pc, #300]	; (8005ee0 <USBD_CDC_Init+0x1ec>)
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	f003 020f 	and.w	r2, r3, #15
 8005dba:	6879      	ldr	r1, [r7, #4]
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	009b      	lsls	r3, r3, #2
 8005dc4:	440b      	add	r3, r1
 8005dc6:	3326      	adds	r3, #38	; 0x26
 8005dc8:	2210      	movs	r2, #16
 8005dca:	801a      	strh	r2, [r3, #0]
 8005dcc:	e035      	b.n	8005e3a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005dce:	4b42      	ldr	r3, [pc, #264]	; (8005ed8 <USBD_CDC_Init+0x1e4>)
 8005dd0:	7819      	ldrb	r1, [r3, #0]
 8005dd2:	2340      	movs	r3, #64	; 0x40
 8005dd4:	2202      	movs	r2, #2
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f002 fb13 	bl	8008402 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005ddc:	4b3e      	ldr	r3, [pc, #248]	; (8005ed8 <USBD_CDC_Init+0x1e4>)
 8005dde:	781b      	ldrb	r3, [r3, #0]
 8005de0:	f003 020f 	and.w	r2, r3, #15
 8005de4:	6879      	ldr	r1, [r7, #4]
 8005de6:	4613      	mov	r3, r2
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4413      	add	r3, r2
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	440b      	add	r3, r1
 8005df0:	3324      	adds	r3, #36	; 0x24
 8005df2:	2201      	movs	r2, #1
 8005df4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005df6:	4b39      	ldr	r3, [pc, #228]	; (8005edc <USBD_CDC_Init+0x1e8>)
 8005df8:	7819      	ldrb	r1, [r3, #0]
 8005dfa:	2340      	movs	r3, #64	; 0x40
 8005dfc:	2202      	movs	r2, #2
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f002 faff 	bl	8008402 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005e04:	4b35      	ldr	r3, [pc, #212]	; (8005edc <USBD_CDC_Init+0x1e8>)
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	f003 020f 	and.w	r2, r3, #15
 8005e0c:	6879      	ldr	r1, [r7, #4]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4413      	add	r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	440b      	add	r3, r1
 8005e18:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005e20:	4b2f      	ldr	r3, [pc, #188]	; (8005ee0 <USBD_CDC_Init+0x1ec>)
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	f003 020f 	and.w	r2, r3, #15
 8005e28:	6879      	ldr	r1, [r7, #4]
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	4413      	add	r3, r2
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	440b      	add	r3, r1
 8005e34:	3326      	adds	r3, #38	; 0x26
 8005e36:	2210      	movs	r2, #16
 8005e38:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005e3a:	4b29      	ldr	r3, [pc, #164]	; (8005ee0 <USBD_CDC_Init+0x1ec>)
 8005e3c:	7819      	ldrb	r1, [r3, #0]
 8005e3e:	2308      	movs	r3, #8
 8005e40:	2203      	movs	r2, #3
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f002 fadd 	bl	8008402 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005e48:	4b25      	ldr	r3, [pc, #148]	; (8005ee0 <USBD_CDC_Init+0x1ec>)
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	f003 020f 	and.w	r2, r3, #15
 8005e50:	6879      	ldr	r1, [r7, #4]
 8005e52:	4613      	mov	r3, r2
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	4413      	add	r3, r2
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	440b      	add	r3, r1
 8005e5c:	3324      	adds	r3, #36	; 0x24
 8005e5e:	2201      	movs	r2, #1
 8005e60:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	33b0      	adds	r3, #176	; 0xb0
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	4413      	add	r3, r2
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d101      	bne.n	8005e9c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005e98:	2302      	movs	r3, #2
 8005e9a:	e018      	b.n	8005ece <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	7c1b      	ldrb	r3, [r3, #16]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10a      	bne.n	8005eba <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005ea4:	4b0d      	ldr	r3, [pc, #52]	; (8005edc <USBD_CDC_Init+0x1e8>)
 8005ea6:	7819      	ldrb	r1, [r3, #0]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005eae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f002 fb94 	bl	80085e0 <USBD_LL_PrepareReceive>
 8005eb8:	e008      	b.n	8005ecc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005eba:	4b08      	ldr	r3, [pc, #32]	; (8005edc <USBD_CDC_Init+0x1e8>)
 8005ebc:	7819      	ldrb	r1, [r3, #0]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005ec4:	2340      	movs	r3, #64	; 0x40
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f002 fb8a 	bl	80085e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3710      	adds	r7, #16
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	200000bf 	.word	0x200000bf
 8005edc:	200000c0 	.word	0x200000c0
 8005ee0:	200000c1 	.word	0x200000c1

08005ee4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	460b      	mov	r3, r1
 8005eee:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005ef0:	4b3a      	ldr	r3, [pc, #232]	; (8005fdc <USBD_CDC_DeInit+0xf8>)
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f002 faa9 	bl	800844e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005efc:	4b37      	ldr	r3, [pc, #220]	; (8005fdc <USBD_CDC_DeInit+0xf8>)
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	f003 020f 	and.w	r2, r3, #15
 8005f04:	6879      	ldr	r1, [r7, #4]
 8005f06:	4613      	mov	r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	4413      	add	r3, r2
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	440b      	add	r3, r1
 8005f10:	3324      	adds	r3, #36	; 0x24
 8005f12:	2200      	movs	r2, #0
 8005f14:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005f16:	4b32      	ldr	r3, [pc, #200]	; (8005fe0 <USBD_CDC_DeInit+0xfc>)
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f002 fa96 	bl	800844e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005f22:	4b2f      	ldr	r3, [pc, #188]	; (8005fe0 <USBD_CDC_DeInit+0xfc>)
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	f003 020f 	and.w	r2, r3, #15
 8005f2a:	6879      	ldr	r1, [r7, #4]
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	4413      	add	r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	440b      	add	r3, r1
 8005f36:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005f3e:	4b29      	ldr	r3, [pc, #164]	; (8005fe4 <USBD_CDC_DeInit+0x100>)
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	4619      	mov	r1, r3
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f002 fa82 	bl	800844e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005f4a:	4b26      	ldr	r3, [pc, #152]	; (8005fe4 <USBD_CDC_DeInit+0x100>)
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	f003 020f 	and.w	r2, r3, #15
 8005f52:	6879      	ldr	r1, [r7, #4]
 8005f54:	4613      	mov	r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	4413      	add	r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	440b      	add	r3, r1
 8005f5e:	3324      	adds	r3, #36	; 0x24
 8005f60:	2200      	movs	r2, #0
 8005f62:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005f64:	4b1f      	ldr	r3, [pc, #124]	; (8005fe4 <USBD_CDC_DeInit+0x100>)
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	f003 020f 	and.w	r2, r3, #15
 8005f6c:	6879      	ldr	r1, [r7, #4]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	4413      	add	r3, r2
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	440b      	add	r3, r1
 8005f78:	3326      	adds	r3, #38	; 0x26
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	32b0      	adds	r2, #176	; 0xb0
 8005f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d01f      	beq.n	8005fd0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	33b0      	adds	r3, #176	; 0xb0
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	4413      	add	r3, r2
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	32b0      	adds	r2, #176	; 0xb0
 8005fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f002 fb56 	bl	8008664 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	32b0      	adds	r2, #176	; 0xb0
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3708      	adds	r7, #8
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	200000bf 	.word	0x200000bf
 8005fe0:	200000c0 	.word	0x200000c0
 8005fe4:	200000c1 	.word	0x200000c1

08005fe8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	32b0      	adds	r2, #176	; 0xb0
 8005ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006000:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006002:	2300      	movs	r3, #0
 8006004:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006006:	2300      	movs	r3, #0
 8006008:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800600a:	2300      	movs	r3, #0
 800600c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d101      	bne.n	8006018 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006014:	2303      	movs	r3, #3
 8006016:	e0bf      	b.n	8006198 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006020:	2b00      	cmp	r3, #0
 8006022:	d050      	beq.n	80060c6 <USBD_CDC_Setup+0xde>
 8006024:	2b20      	cmp	r3, #32
 8006026:	f040 80af 	bne.w	8006188 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	88db      	ldrh	r3, [r3, #6]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d03a      	beq.n	80060a8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	b25b      	sxtb	r3, r3
 8006038:	2b00      	cmp	r3, #0
 800603a:	da1b      	bge.n	8006074 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	33b0      	adds	r3, #176	; 0xb0
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	4413      	add	r3, r2
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	683a      	ldr	r2, [r7, #0]
 8006050:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006052:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006054:	683a      	ldr	r2, [r7, #0]
 8006056:	88d2      	ldrh	r2, [r2, #6]
 8006058:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	88db      	ldrh	r3, [r3, #6]
 800605e:	2b07      	cmp	r3, #7
 8006060:	bf28      	it	cs
 8006062:	2307      	movcs	r3, #7
 8006064:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	89fa      	ldrh	r2, [r7, #14]
 800606a:	4619      	mov	r1, r3
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f001 fd89 	bl	8007b84 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8006072:	e090      	b.n	8006196 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	785a      	ldrb	r2, [r3, #1]
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	88db      	ldrh	r3, [r3, #6]
 8006082:	2b3f      	cmp	r3, #63	; 0x3f
 8006084:	d803      	bhi.n	800608e <USBD_CDC_Setup+0xa6>
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	88db      	ldrh	r3, [r3, #6]
 800608a:	b2da      	uxtb	r2, r3
 800608c:	e000      	b.n	8006090 <USBD_CDC_Setup+0xa8>
 800608e:	2240      	movs	r2, #64	; 0x40
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006096:	6939      	ldr	r1, [r7, #16]
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800609e:	461a      	mov	r2, r3
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f001 fd9b 	bl	8007bdc <USBD_CtlPrepareRx>
      break;
 80060a6:	e076      	b.n	8006196 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	33b0      	adds	r3, #176	; 0xb0
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	4413      	add	r3, r2
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	683a      	ldr	r2, [r7, #0]
 80060bc:	7850      	ldrb	r0, [r2, #1]
 80060be:	2200      	movs	r2, #0
 80060c0:	6839      	ldr	r1, [r7, #0]
 80060c2:	4798      	blx	r3
      break;
 80060c4:	e067      	b.n	8006196 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	785b      	ldrb	r3, [r3, #1]
 80060ca:	2b0b      	cmp	r3, #11
 80060cc:	d851      	bhi.n	8006172 <USBD_CDC_Setup+0x18a>
 80060ce:	a201      	add	r2, pc, #4	; (adr r2, 80060d4 <USBD_CDC_Setup+0xec>)
 80060d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d4:	08006105 	.word	0x08006105
 80060d8:	08006181 	.word	0x08006181
 80060dc:	08006173 	.word	0x08006173
 80060e0:	08006173 	.word	0x08006173
 80060e4:	08006173 	.word	0x08006173
 80060e8:	08006173 	.word	0x08006173
 80060ec:	08006173 	.word	0x08006173
 80060f0:	08006173 	.word	0x08006173
 80060f4:	08006173 	.word	0x08006173
 80060f8:	08006173 	.word	0x08006173
 80060fc:	0800612f 	.word	0x0800612f
 8006100:	08006159 	.word	0x08006159
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800610a:	b2db      	uxtb	r3, r3
 800610c:	2b03      	cmp	r3, #3
 800610e:	d107      	bne.n	8006120 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006110:	f107 030a 	add.w	r3, r7, #10
 8006114:	2202      	movs	r2, #2
 8006116:	4619      	mov	r1, r3
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f001 fd33 	bl	8007b84 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800611e:	e032      	b.n	8006186 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006120:	6839      	ldr	r1, [r7, #0]
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f001 fcbd 	bl	8007aa2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006128:	2303      	movs	r3, #3
 800612a:	75fb      	strb	r3, [r7, #23]
          break;
 800612c:	e02b      	b.n	8006186 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006134:	b2db      	uxtb	r3, r3
 8006136:	2b03      	cmp	r3, #3
 8006138:	d107      	bne.n	800614a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800613a:	f107 030d 	add.w	r3, r7, #13
 800613e:	2201      	movs	r2, #1
 8006140:	4619      	mov	r1, r3
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f001 fd1e 	bl	8007b84 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006148:	e01d      	b.n	8006186 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800614a:	6839      	ldr	r1, [r7, #0]
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f001 fca8 	bl	8007aa2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006152:	2303      	movs	r3, #3
 8006154:	75fb      	strb	r3, [r7, #23]
          break;
 8006156:	e016      	b.n	8006186 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800615e:	b2db      	uxtb	r3, r3
 8006160:	2b03      	cmp	r3, #3
 8006162:	d00f      	beq.n	8006184 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8006164:	6839      	ldr	r1, [r7, #0]
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f001 fc9b 	bl	8007aa2 <USBD_CtlError>
            ret = USBD_FAIL;
 800616c:	2303      	movs	r3, #3
 800616e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006170:	e008      	b.n	8006184 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006172:	6839      	ldr	r1, [r7, #0]
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f001 fc94 	bl	8007aa2 <USBD_CtlError>
          ret = USBD_FAIL;
 800617a:	2303      	movs	r3, #3
 800617c:	75fb      	strb	r3, [r7, #23]
          break;
 800617e:	e002      	b.n	8006186 <USBD_CDC_Setup+0x19e>
          break;
 8006180:	bf00      	nop
 8006182:	e008      	b.n	8006196 <USBD_CDC_Setup+0x1ae>
          break;
 8006184:	bf00      	nop
      }
      break;
 8006186:	e006      	b.n	8006196 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006188:	6839      	ldr	r1, [r7, #0]
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f001 fc89 	bl	8007aa2 <USBD_CtlError>
      ret = USBD_FAIL;
 8006190:	2303      	movs	r3, #3
 8006192:	75fb      	strb	r3, [r7, #23]
      break;
 8006194:	bf00      	nop
  }

  return (uint8_t)ret;
 8006196:	7dfb      	ldrb	r3, [r7, #23]
}
 8006198:	4618      	mov	r0, r3
 800619a:	3718      	adds	r7, #24
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	460b      	mov	r3, r1
 80061aa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80061b2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	32b0      	adds	r2, #176	; 0xb0
 80061be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d101      	bne.n	80061ca <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e065      	b.n	8006296 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	32b0      	adds	r2, #176	; 0xb0
 80061d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061d8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80061da:	78fb      	ldrb	r3, [r7, #3]
 80061dc:	f003 020f 	and.w	r2, r3, #15
 80061e0:	6879      	ldr	r1, [r7, #4]
 80061e2:	4613      	mov	r3, r2
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	4413      	add	r3, r2
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	440b      	add	r3, r1
 80061ec:	3318      	adds	r3, #24
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d02f      	beq.n	8006254 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80061f4:	78fb      	ldrb	r3, [r7, #3]
 80061f6:	f003 020f 	and.w	r2, r3, #15
 80061fa:	6879      	ldr	r1, [r7, #4]
 80061fc:	4613      	mov	r3, r2
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	4413      	add	r3, r2
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	440b      	add	r3, r1
 8006206:	3318      	adds	r3, #24
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	78fb      	ldrb	r3, [r7, #3]
 800620c:	f003 010f 	and.w	r1, r3, #15
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	460b      	mov	r3, r1
 8006214:	00db      	lsls	r3, r3, #3
 8006216:	440b      	add	r3, r1
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	4403      	add	r3, r0
 800621c:	3348      	adds	r3, #72	; 0x48
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	fbb2 f1f3 	udiv	r1, r2, r3
 8006224:	fb01 f303 	mul.w	r3, r1, r3
 8006228:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800622a:	2b00      	cmp	r3, #0
 800622c:	d112      	bne.n	8006254 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800622e:	78fb      	ldrb	r3, [r7, #3]
 8006230:	f003 020f 	and.w	r2, r3, #15
 8006234:	6879      	ldr	r1, [r7, #4]
 8006236:	4613      	mov	r3, r2
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	4413      	add	r3, r2
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	440b      	add	r3, r1
 8006240:	3318      	adds	r3, #24
 8006242:	2200      	movs	r2, #0
 8006244:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006246:	78f9      	ldrb	r1, [r7, #3]
 8006248:	2300      	movs	r3, #0
 800624a:	2200      	movs	r2, #0
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f002 f9a6 	bl	800859e <USBD_LL_Transmit>
 8006252:	e01f      	b.n	8006294 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	2200      	movs	r2, #0
 8006258:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	33b0      	adds	r3, #176	; 0xb0
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	4413      	add	r3, r2
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d010      	beq.n	8006294 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	33b0      	adds	r3, #176	; 0xb0
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	4413      	add	r3, r2
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800628a:	68ba      	ldr	r2, [r7, #8]
 800628c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006290:	78fa      	ldrb	r2, [r7, #3]
 8006292:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800629e:	b580      	push	{r7, lr}
 80062a0:	b084      	sub	sp, #16
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
 80062a6:	460b      	mov	r3, r1
 80062a8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	32b0      	adds	r2, #176	; 0xb0
 80062b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062b8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	32b0      	adds	r2, #176	; 0xb0
 80062c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d101      	bne.n	80062d0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80062cc:	2303      	movs	r3, #3
 80062ce:	e01a      	b.n	8006306 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80062d0:	78fb      	ldrb	r3, [r7, #3]
 80062d2:	4619      	mov	r1, r3
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f002 f9a4 	bl	8008622 <USBD_LL_GetRxDataSize>
 80062da:	4602      	mov	r2, r0
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	33b0      	adds	r3, #176	; 0xb0
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	4413      	add	r3, r2
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006300:	4611      	mov	r1, r2
 8006302:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b084      	sub	sp, #16
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	32b0      	adds	r2, #176	; 0xb0
 8006320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006324:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d101      	bne.n	8006330 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800632c:	2303      	movs	r3, #3
 800632e:	e025      	b.n	800637c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	33b0      	adds	r3, #176	; 0xb0
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	4413      	add	r3, r2
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d01a      	beq.n	800637a <USBD_CDC_EP0_RxReady+0x6c>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800634a:	2bff      	cmp	r3, #255	; 0xff
 800634c:	d015      	beq.n	800637a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	33b0      	adds	r3, #176	; 0xb0
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	4413      	add	r3, r2
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006366:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800636e:	b292      	uxth	r2, r2
 8006370:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	22ff      	movs	r2, #255	; 0xff
 8006376:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b086      	sub	sp, #24
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800638c:	2182      	movs	r1, #130	; 0x82
 800638e:	4818      	ldr	r0, [pc, #96]	; (80063f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006390:	f000 fd4f 	bl	8006e32 <USBD_GetEpDesc>
 8006394:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006396:	2101      	movs	r1, #1
 8006398:	4815      	ldr	r0, [pc, #84]	; (80063f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800639a:	f000 fd4a 	bl	8006e32 <USBD_GetEpDesc>
 800639e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80063a0:	2181      	movs	r1, #129	; 0x81
 80063a2:	4813      	ldr	r0, [pc, #76]	; (80063f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80063a4:	f000 fd45 	bl	8006e32 <USBD_GetEpDesc>
 80063a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d002      	beq.n	80063b6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	2210      	movs	r2, #16
 80063b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d006      	beq.n	80063ca <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	2200      	movs	r2, #0
 80063c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063c4:	711a      	strb	r2, [r3, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d006      	beq.n	80063de <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063d8:	711a      	strb	r2, [r3, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2243      	movs	r2, #67	; 0x43
 80063e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80063e4:	4b02      	ldr	r3, [pc, #8]	; (80063f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3718      	adds	r7, #24
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	2000007c 	.word	0x2000007c

080063f4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b086      	sub	sp, #24
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80063fc:	2182      	movs	r1, #130	; 0x82
 80063fe:	4818      	ldr	r0, [pc, #96]	; (8006460 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006400:	f000 fd17 	bl	8006e32 <USBD_GetEpDesc>
 8006404:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006406:	2101      	movs	r1, #1
 8006408:	4815      	ldr	r0, [pc, #84]	; (8006460 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800640a:	f000 fd12 	bl	8006e32 <USBD_GetEpDesc>
 800640e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006410:	2181      	movs	r1, #129	; 0x81
 8006412:	4813      	ldr	r0, [pc, #76]	; (8006460 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006414:	f000 fd0d 	bl	8006e32 <USBD_GetEpDesc>
 8006418:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d002      	beq.n	8006426 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	2210      	movs	r2, #16
 8006424:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d006      	beq.n	800643a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	2200      	movs	r2, #0
 8006430:	711a      	strb	r2, [r3, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	f042 0202 	orr.w	r2, r2, #2
 8006438:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d006      	beq.n	800644e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	711a      	strb	r2, [r3, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	f042 0202 	orr.w	r2, r2, #2
 800644c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2243      	movs	r2, #67	; 0x43
 8006452:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006454:	4b02      	ldr	r3, [pc, #8]	; (8006460 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006456:	4618      	mov	r0, r3
 8006458:	3718      	adds	r7, #24
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	2000007c 	.word	0x2000007c

08006464 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b086      	sub	sp, #24
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800646c:	2182      	movs	r1, #130	; 0x82
 800646e:	4818      	ldr	r0, [pc, #96]	; (80064d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006470:	f000 fcdf 	bl	8006e32 <USBD_GetEpDesc>
 8006474:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006476:	2101      	movs	r1, #1
 8006478:	4815      	ldr	r0, [pc, #84]	; (80064d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800647a:	f000 fcda 	bl	8006e32 <USBD_GetEpDesc>
 800647e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006480:	2181      	movs	r1, #129	; 0x81
 8006482:	4813      	ldr	r0, [pc, #76]	; (80064d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006484:	f000 fcd5 	bl	8006e32 <USBD_GetEpDesc>
 8006488:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d002      	beq.n	8006496 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	2210      	movs	r2, #16
 8006494:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d006      	beq.n	80064aa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	2200      	movs	r2, #0
 80064a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064a4:	711a      	strb	r2, [r3, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d006      	beq.n	80064be <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064b8:	711a      	strb	r2, [r3, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2243      	movs	r2, #67	; 0x43
 80064c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80064c4:	4b02      	ldr	r3, [pc, #8]	; (80064d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3718      	adds	r7, #24
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	2000007c 	.word	0x2000007c

080064d4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	220a      	movs	r2, #10
 80064e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80064e2:	4b03      	ldr	r3, [pc, #12]	; (80064f0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr
 80064f0:	20000038 	.word	0x20000038

080064f4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d101      	bne.n	8006508 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006504:	2303      	movs	r3, #3
 8006506:	e009      	b.n	800651c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	33b0      	adds	r3, #176	; 0xb0
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	4413      	add	r3, r2
 8006516:	683a      	ldr	r2, [r7, #0]
 8006518:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	370c      	adds	r7, #12
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006528:	b480      	push	{r7}
 800652a:	b087      	sub	sp, #28
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	32b0      	adds	r2, #176	; 0xb0
 800653e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006542:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d101      	bne.n	800654e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800654a:	2303      	movs	r3, #3
 800654c:	e008      	b.n	8006560 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	371c      	adds	r7, #28
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800656c:	b480      	push	{r7}
 800656e:	b085      	sub	sp, #20
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	32b0      	adds	r2, #176	; 0xb0
 8006580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006584:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d101      	bne.n	8006590 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800658c:	2303      	movs	r3, #3
 800658e:	e004      	b.n	800659a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	683a      	ldr	r2, [r7, #0]
 8006594:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006598:	2300      	movs	r3, #0
}
 800659a:	4618      	mov	r0, r3
 800659c:	3714      	adds	r7, #20
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr
	...

080065a8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	32b0      	adds	r2, #176	; 0xb0
 80065ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065be:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80065c0:	2301      	movs	r3, #1
 80065c2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	32b0      	adds	r2, #176	; 0xb0
 80065ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d101      	bne.n	80065da <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e025      	b.n	8006626 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d11f      	bne.n	8006624 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80065ec:	4b10      	ldr	r3, [pc, #64]	; (8006630 <USBD_CDC_TransmitPacket+0x88>)
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	f003 020f 	and.w	r2, r3, #15
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	4613      	mov	r3, r2
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	4413      	add	r3, r2
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	4403      	add	r3, r0
 8006606:	3318      	adds	r3, #24
 8006608:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800660a:	4b09      	ldr	r3, [pc, #36]	; (8006630 <USBD_CDC_TransmitPacket+0x88>)
 800660c:	7819      	ldrb	r1, [r3, #0]
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f001 ffbf 	bl	800859e <USBD_LL_Transmit>

    ret = USBD_OK;
 8006620:	2300      	movs	r3, #0
 8006622:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006624:	7bfb      	ldrb	r3, [r7, #15]
}
 8006626:	4618      	mov	r0, r3
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	200000bf 	.word	0x200000bf

08006634 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	32b0      	adds	r2, #176	; 0xb0
 8006646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800664a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	32b0      	adds	r2, #176	; 0xb0
 8006656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d101      	bne.n	8006662 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800665e:	2303      	movs	r3, #3
 8006660:	e018      	b.n	8006694 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	7c1b      	ldrb	r3, [r3, #16]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d10a      	bne.n	8006680 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800666a:	4b0c      	ldr	r3, [pc, #48]	; (800669c <USBD_CDC_ReceivePacket+0x68>)
 800666c:	7819      	ldrb	r1, [r3, #0]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006674:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f001 ffb1 	bl	80085e0 <USBD_LL_PrepareReceive>
 800667e:	e008      	b.n	8006692 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006680:	4b06      	ldr	r3, [pc, #24]	; (800669c <USBD_CDC_ReceivePacket+0x68>)
 8006682:	7819      	ldrb	r1, [r3, #0]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800668a:	2340      	movs	r3, #64	; 0x40
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f001 ffa7 	bl	80085e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3710      	adds	r7, #16
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}
 800669c:	200000c0 	.word	0x200000c0

080066a0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b086      	sub	sp, #24
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	4613      	mov	r3, r2
 80066ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d101      	bne.n	80066b8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80066b4:	2303      	movs	r3, #3
 80066b6:	e01f      	b.n	80066f8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d003      	beq.n	80066de <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	68ba      	ldr	r2, [r7, #8]
 80066da:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2201      	movs	r2, #1
 80066e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	79fa      	ldrb	r2, [r7, #7]
 80066ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f001 fe21 	bl	8008334 <USBD_LL_Init>
 80066f2:	4603      	mov	r3, r0
 80066f4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80066f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3718      	adds	r7, #24
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800670a:	2300      	movs	r3, #0
 800670c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d101      	bne.n	8006718 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006714:	2303      	movs	r3, #3
 8006716:	e025      	b.n	8006764 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	683a      	ldr	r2, [r7, #0]
 800671c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	32ae      	adds	r2, #174	; 0xae
 800672a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800672e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006730:	2b00      	cmp	r3, #0
 8006732:	d00f      	beq.n	8006754 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	32ae      	adds	r2, #174	; 0xae
 800673e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006744:	f107 020e 	add.w	r2, r7, #14
 8006748:	4610      	mov	r0, r2
 800674a:	4798      	blx	r3
 800674c:	4602      	mov	r2, r0
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800675a:	1c5a      	adds	r2, r3, #1
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3710      	adds	r7, #16
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f001 fe29 	bl	80083cc <USBD_LL_Start>
 800677a:	4603      	mov	r3, r0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3708      	adds	r7, #8
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800678c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800678e:	4618      	mov	r0, r3
 8006790:	370c      	adds	r7, #12
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr

0800679a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800679a:	b580      	push	{r7, lr}
 800679c:	b084      	sub	sp, #16
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
 80067a2:	460b      	mov	r3, r1
 80067a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80067a6:	2300      	movs	r3, #0
 80067a8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d009      	beq.n	80067c8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	78fa      	ldrb	r2, [r7, #3]
 80067be:	4611      	mov	r1, r2
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	4798      	blx	r3
 80067c4:	4603      	mov	r3, r0
 80067c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80067c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b084      	sub	sp, #16
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
 80067da:	460b      	mov	r3, r1
 80067dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80067de:	2300      	movs	r3, #0
 80067e0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	78fa      	ldrb	r2, [r7, #3]
 80067ec:	4611      	mov	r1, r2
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	4798      	blx	r3
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d001      	beq.n	80067fc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80067f8:	2303      	movs	r3, #3
 80067fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80067fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b084      	sub	sp, #16
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
 800680e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006816:	6839      	ldr	r1, [r7, #0]
 8006818:	4618      	mov	r0, r3
 800681a:	f001 f908 	bl	8007a2e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2201      	movs	r2, #1
 8006822:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800682c:	461a      	mov	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800683a:	f003 031f 	and.w	r3, r3, #31
 800683e:	2b02      	cmp	r3, #2
 8006840:	d01a      	beq.n	8006878 <USBD_LL_SetupStage+0x72>
 8006842:	2b02      	cmp	r3, #2
 8006844:	d822      	bhi.n	800688c <USBD_LL_SetupStage+0x86>
 8006846:	2b00      	cmp	r3, #0
 8006848:	d002      	beq.n	8006850 <USBD_LL_SetupStage+0x4a>
 800684a:	2b01      	cmp	r3, #1
 800684c:	d00a      	beq.n	8006864 <USBD_LL_SetupStage+0x5e>
 800684e:	e01d      	b.n	800688c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006856:	4619      	mov	r1, r3
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 fb5f 	bl	8006f1c <USBD_StdDevReq>
 800685e:	4603      	mov	r3, r0
 8006860:	73fb      	strb	r3, [r7, #15]
      break;
 8006862:	e020      	b.n	80068a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800686a:	4619      	mov	r1, r3
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 fbc7 	bl	8007000 <USBD_StdItfReq>
 8006872:	4603      	mov	r3, r0
 8006874:	73fb      	strb	r3, [r7, #15]
      break;
 8006876:	e016      	b.n	80068a6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800687e:	4619      	mov	r1, r3
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 fc29 	bl	80070d8 <USBD_StdEPReq>
 8006886:	4603      	mov	r3, r0
 8006888:	73fb      	strb	r3, [r7, #15]
      break;
 800688a:	e00c      	b.n	80068a6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006892:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006896:	b2db      	uxtb	r3, r3
 8006898:	4619      	mov	r1, r3
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f001 fdf6 	bl	800848c <USBD_LL_StallEP>
 80068a0:	4603      	mov	r3, r0
 80068a2:	73fb      	strb	r3, [r7, #15]
      break;
 80068a4:	bf00      	nop
  }

  return ret;
 80068a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3710      	adds	r7, #16
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b086      	sub	sp, #24
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	460b      	mov	r3, r1
 80068ba:	607a      	str	r2, [r7, #4]
 80068bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80068be:	2300      	movs	r3, #0
 80068c0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80068c2:	7afb      	ldrb	r3, [r7, #11]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d16e      	bne.n	80069a6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80068ce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068d6:	2b03      	cmp	r3, #3
 80068d8:	f040 8098 	bne.w	8006a0c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	689a      	ldr	r2, [r3, #8]
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d913      	bls.n	8006910 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	689a      	ldr	r2, [r3, #8]
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	1ad2      	subs	r2, r2, r3
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	68da      	ldr	r2, [r3, #12]
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	4293      	cmp	r3, r2
 8006900:	bf28      	it	cs
 8006902:	4613      	movcs	r3, r2
 8006904:	461a      	mov	r2, r3
 8006906:	6879      	ldr	r1, [r7, #4]
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	f001 f984 	bl	8007c16 <USBD_CtlContinueRx>
 800690e:	e07d      	b.n	8006a0c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006916:	f003 031f 	and.w	r3, r3, #31
 800691a:	2b02      	cmp	r3, #2
 800691c:	d014      	beq.n	8006948 <USBD_LL_DataOutStage+0x98>
 800691e:	2b02      	cmp	r3, #2
 8006920:	d81d      	bhi.n	800695e <USBD_LL_DataOutStage+0xae>
 8006922:	2b00      	cmp	r3, #0
 8006924:	d002      	beq.n	800692c <USBD_LL_DataOutStage+0x7c>
 8006926:	2b01      	cmp	r3, #1
 8006928:	d003      	beq.n	8006932 <USBD_LL_DataOutStage+0x82>
 800692a:	e018      	b.n	800695e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800692c:	2300      	movs	r3, #0
 800692e:	75bb      	strb	r3, [r7, #22]
            break;
 8006930:	e018      	b.n	8006964 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006938:	b2db      	uxtb	r3, r3
 800693a:	4619      	mov	r1, r3
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f000 fa5e 	bl	8006dfe <USBD_CoreFindIF>
 8006942:	4603      	mov	r3, r0
 8006944:	75bb      	strb	r3, [r7, #22]
            break;
 8006946:	e00d      	b.n	8006964 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800694e:	b2db      	uxtb	r3, r3
 8006950:	4619      	mov	r1, r3
 8006952:	68f8      	ldr	r0, [r7, #12]
 8006954:	f000 fa60 	bl	8006e18 <USBD_CoreFindEP>
 8006958:	4603      	mov	r3, r0
 800695a:	75bb      	strb	r3, [r7, #22]
            break;
 800695c:	e002      	b.n	8006964 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800695e:	2300      	movs	r3, #0
 8006960:	75bb      	strb	r3, [r7, #22]
            break;
 8006962:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006964:	7dbb      	ldrb	r3, [r7, #22]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d119      	bne.n	800699e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b03      	cmp	r3, #3
 8006974:	d113      	bne.n	800699e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006976:	7dba      	ldrb	r2, [r7, #22]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	32ae      	adds	r2, #174	; 0xae
 800697c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00b      	beq.n	800699e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006986:	7dba      	ldrb	r2, [r7, #22]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800698e:	7dba      	ldrb	r2, [r7, #22]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	32ae      	adds	r2, #174	; 0xae
 8006994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	68f8      	ldr	r0, [r7, #12]
 800699c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f001 f94a 	bl	8007c38 <USBD_CtlSendStatus>
 80069a4:	e032      	b.n	8006a0c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80069a6:	7afb      	ldrb	r3, [r7, #11]
 80069a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	4619      	mov	r1, r3
 80069b0:	68f8      	ldr	r0, [r7, #12]
 80069b2:	f000 fa31 	bl	8006e18 <USBD_CoreFindEP>
 80069b6:	4603      	mov	r3, r0
 80069b8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80069ba:	7dbb      	ldrb	r3, [r7, #22]
 80069bc:	2bff      	cmp	r3, #255	; 0xff
 80069be:	d025      	beq.n	8006a0c <USBD_LL_DataOutStage+0x15c>
 80069c0:	7dbb      	ldrb	r3, [r7, #22]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d122      	bne.n	8006a0c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	2b03      	cmp	r3, #3
 80069d0:	d117      	bne.n	8006a02 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80069d2:	7dba      	ldrb	r2, [r7, #22]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	32ae      	adds	r2, #174	; 0xae
 80069d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069dc:	699b      	ldr	r3, [r3, #24]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00f      	beq.n	8006a02 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80069e2:	7dba      	ldrb	r2, [r7, #22]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80069ea:	7dba      	ldrb	r2, [r7, #22]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	32ae      	adds	r2, #174	; 0xae
 80069f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069f4:	699b      	ldr	r3, [r3, #24]
 80069f6:	7afa      	ldrb	r2, [r7, #11]
 80069f8:	4611      	mov	r1, r2
 80069fa:	68f8      	ldr	r0, [r7, #12]
 80069fc:	4798      	blx	r3
 80069fe:	4603      	mov	r3, r0
 8006a00:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006a02:	7dfb      	ldrb	r3, [r7, #23]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d001      	beq.n	8006a0c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006a08:	7dfb      	ldrb	r3, [r7, #23]
 8006a0a:	e000      	b.n	8006a0e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3718      	adds	r7, #24
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b086      	sub	sp, #24
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	60f8      	str	r0, [r7, #12]
 8006a1e:	460b      	mov	r3, r1
 8006a20:	607a      	str	r2, [r7, #4]
 8006a22:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006a24:	7afb      	ldrb	r3, [r7, #11]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d16f      	bne.n	8006b0a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	3314      	adds	r3, #20
 8006a2e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d15a      	bne.n	8006af0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	689a      	ldr	r2, [r3, #8]
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d914      	bls.n	8006a70 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	689a      	ldr	r2, [r3, #8]
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	1ad2      	subs	r2, r2, r3
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	461a      	mov	r2, r3
 8006a5a:	6879      	ldr	r1, [r7, #4]
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f001 f8ac 	bl	8007bba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a62:	2300      	movs	r3, #0
 8006a64:	2200      	movs	r2, #0
 8006a66:	2100      	movs	r1, #0
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f001 fdb9 	bl	80085e0 <USBD_LL_PrepareReceive>
 8006a6e:	e03f      	b.n	8006af0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	68da      	ldr	r2, [r3, #12]
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d11c      	bne.n	8006ab6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	685a      	ldr	r2, [r3, #4]
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d316      	bcc.n	8006ab6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	685a      	ldr	r2, [r3, #4]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d20f      	bcs.n	8006ab6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006a96:	2200      	movs	r2, #0
 8006a98:	2100      	movs	r1, #0
 8006a9a:	68f8      	ldr	r0, [r7, #12]
 8006a9c:	f001 f88d 	bl	8007bba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	2200      	movs	r2, #0
 8006aac:	2100      	movs	r1, #0
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f001 fd96 	bl	80085e0 <USBD_LL_PrepareReceive>
 8006ab4:	e01c      	b.n	8006af0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	2b03      	cmp	r3, #3
 8006ac0:	d10f      	bne.n	8006ae2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d009      	beq.n	8006ae2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	68f8      	ldr	r0, [r7, #12]
 8006ae0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006ae2:	2180      	movs	r1, #128	; 0x80
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f001 fcd1 	bl	800848c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006aea:	68f8      	ldr	r0, [r7, #12]
 8006aec:	f001 f8b7 	bl	8007c5e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d03a      	beq.n	8006b70 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	f7ff fe42 	bl	8006784 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006b08:	e032      	b.n	8006b70 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006b0a:	7afb      	ldrb	r3, [r7, #11]
 8006b0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	4619      	mov	r1, r3
 8006b14:	68f8      	ldr	r0, [r7, #12]
 8006b16:	f000 f97f 	bl	8006e18 <USBD_CoreFindEP>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b1e:	7dfb      	ldrb	r3, [r7, #23]
 8006b20:	2bff      	cmp	r3, #255	; 0xff
 8006b22:	d025      	beq.n	8006b70 <USBD_LL_DataInStage+0x15a>
 8006b24:	7dfb      	ldrb	r3, [r7, #23]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d122      	bne.n	8006b70 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	2b03      	cmp	r3, #3
 8006b34:	d11c      	bne.n	8006b70 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006b36:	7dfa      	ldrb	r2, [r7, #23]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	32ae      	adds	r2, #174	; 0xae
 8006b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b40:	695b      	ldr	r3, [r3, #20]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d014      	beq.n	8006b70 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006b46:	7dfa      	ldrb	r2, [r7, #23]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006b4e:	7dfa      	ldrb	r2, [r7, #23]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	32ae      	adds	r2, #174	; 0xae
 8006b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b58:	695b      	ldr	r3, [r3, #20]
 8006b5a:	7afa      	ldrb	r2, [r7, #11]
 8006b5c:	4611      	mov	r1, r2
 8006b5e:	68f8      	ldr	r0, [r7, #12]
 8006b60:	4798      	blx	r3
 8006b62:	4603      	mov	r3, r0
 8006b64:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006b66:	7dbb      	ldrb	r3, [r7, #22]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d001      	beq.n	8006b70 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006b6c:	7dbb      	ldrb	r3, [r7, #22]
 8006b6e:	e000      	b.n	8006b72 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3718      	adds	r7, #24
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b084      	sub	sp, #16
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b82:	2300      	movs	r3, #0
 8006b84:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d014      	beq.n	8006be0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00e      	beq.n	8006be0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	6852      	ldr	r2, [r2, #4]
 8006bce:	b2d2      	uxtb	r2, r2
 8006bd0:	4611      	mov	r1, r2
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	4798      	blx	r3
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d001      	beq.n	8006be0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006bdc:	2303      	movs	r3, #3
 8006bde:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006be0:	2340      	movs	r3, #64	; 0x40
 8006be2:	2200      	movs	r2, #0
 8006be4:	2100      	movs	r1, #0
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f001 fc0b 	bl	8008402 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2240      	movs	r2, #64	; 0x40
 8006bf8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006bfc:	2340      	movs	r3, #64	; 0x40
 8006bfe:	2200      	movs	r2, #0
 8006c00:	2180      	movs	r1, #128	; 0x80
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f001 fbfd 	bl	8008402 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2240      	movs	r2, #64	; 0x40
 8006c12:	621a      	str	r2, [r3, #32]

  return ret;
 8006c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3710      	adds	r7, #16
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006c1e:	b480      	push	{r7}
 8006c20:	b083      	sub	sp, #12
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
 8006c26:	460b      	mov	r3, r1
 8006c28:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	78fa      	ldrb	r2, [r7, #3]
 8006c2e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	370c      	adds	r7, #12
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr

08006c3e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b083      	sub	sp, #12
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c4c:	b2da      	uxtb	r2, r3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2204      	movs	r2, #4
 8006c58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	370c      	adds	r7, #12
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr

08006c6a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006c6a:	b480      	push	{r7}
 8006c6c:	b083      	sub	sp, #12
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c78:	b2db      	uxtb	r3, r3
 8006c7a:	2b04      	cmp	r3, #4
 8006c7c:	d106      	bne.n	8006c8c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006c84:	b2da      	uxtb	r2, r3
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	370c      	adds	r7, #12
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr

08006c9a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b082      	sub	sp, #8
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	2b03      	cmp	r3, #3
 8006cac:	d110      	bne.n	8006cd0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d00b      	beq.n	8006cd0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cbe:	69db      	ldr	r3, [r3, #28]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d005      	beq.n	8006cd0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cca:	69db      	ldr	r3, [r3, #28]
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3708      	adds	r7, #8
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}

08006cda <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006cda:	b580      	push	{r7, lr}
 8006cdc:	b082      	sub	sp, #8
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	32ae      	adds	r2, #174	; 0xae
 8006cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d101      	bne.n	8006cfc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	e01c      	b.n	8006d36 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d02:	b2db      	uxtb	r3, r3
 8006d04:	2b03      	cmp	r3, #3
 8006d06:	d115      	bne.n	8006d34 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	32ae      	adds	r2, #174	; 0xae
 8006d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d16:	6a1b      	ldr	r3, [r3, #32]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d00b      	beq.n	8006d34 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	32ae      	adds	r2, #174	; 0xae
 8006d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d2a:	6a1b      	ldr	r3, [r3, #32]
 8006d2c:	78fa      	ldrb	r2, [r7, #3]
 8006d2e:	4611      	mov	r1, r2
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3708      	adds	r7, #8
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}

08006d3e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006d3e:	b580      	push	{r7, lr}
 8006d40:	b082      	sub	sp, #8
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
 8006d46:	460b      	mov	r3, r1
 8006d48:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	32ae      	adds	r2, #174	; 0xae
 8006d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d101      	bne.n	8006d60 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e01c      	b.n	8006d9a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	2b03      	cmp	r3, #3
 8006d6a:	d115      	bne.n	8006d98 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	32ae      	adds	r2, #174	; 0xae
 8006d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d00b      	beq.n	8006d98 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	32ae      	adds	r2, #174	; 0xae
 8006d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d90:	78fa      	ldrb	r2, [r7, #3]
 8006d92:	4611      	mov	r1, r2
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3708      	adds	r7, #8
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006da2:	b480      	push	{r7}
 8006da4:	b083      	sub	sp, #12
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	370c      	adds	r7, #12
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00e      	beq.n	8006df4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	6852      	ldr	r2, [r2, #4]
 8006de2:	b2d2      	uxtb	r2, r2
 8006de4:	4611      	mov	r1, r2
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	4798      	blx	r3
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d001      	beq.n	8006df4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006df0:	2303      	movs	r3, #3
 8006df2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3710      	adds	r7, #16
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006dfe:	b480      	push	{r7}
 8006e00:	b083      	sub	sp, #12
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
 8006e06:	460b      	mov	r3, r1
 8006e08:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006e0a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	460b      	mov	r3, r1
 8006e22:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006e24:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	370c      	adds	r7, #12
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr

08006e32 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b086      	sub	sp, #24
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006e46:	2300      	movs	r3, #0
 8006e48:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	885b      	ldrh	r3, [r3, #2]
 8006e4e:	b29a      	uxth	r2, r3
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d920      	bls.n	8006e9c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006e62:	e013      	b.n	8006e8c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006e64:	f107 030a 	add.w	r3, r7, #10
 8006e68:	4619      	mov	r1, r3
 8006e6a:	6978      	ldr	r0, [r7, #20]
 8006e6c:	f000 f81b 	bl	8006ea6 <USBD_GetNextDesc>
 8006e70:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	785b      	ldrb	r3, [r3, #1]
 8006e76:	2b05      	cmp	r3, #5
 8006e78:	d108      	bne.n	8006e8c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	789b      	ldrb	r3, [r3, #2]
 8006e82:	78fa      	ldrb	r2, [r7, #3]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d008      	beq.n	8006e9a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	885b      	ldrh	r3, [r3, #2]
 8006e90:	b29a      	uxth	r2, r3
 8006e92:	897b      	ldrh	r3, [r7, #10]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d8e5      	bhi.n	8006e64 <USBD_GetEpDesc+0x32>
 8006e98:	e000      	b.n	8006e9c <USBD_GetEpDesc+0x6a>
          break;
 8006e9a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006e9c:	693b      	ldr	r3, [r7, #16]
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3718      	adds	r7, #24
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}

08006ea6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006ea6:	b480      	push	{r7}
 8006ea8:	b085      	sub	sp, #20
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
 8006eae:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	881a      	ldrh	r2, [r3, #0]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	4413      	add	r3, r2
 8006ec0:	b29a      	uxth	r2, r3
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	461a      	mov	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4413      	add	r3, r2
 8006ed0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3714      	adds	r7, #20
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b087      	sub	sp, #28
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006efe:	8a3b      	ldrh	r3, [r7, #16]
 8006f00:	021b      	lsls	r3, r3, #8
 8006f02:	b21a      	sxth	r2, r3
 8006f04:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	b21b      	sxth	r3, r3
 8006f0c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006f0e:	89fb      	ldrh	r3, [r7, #14]
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	371c      	adds	r7, #28
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f26:	2300      	movs	r3, #0
 8006f28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f32:	2b40      	cmp	r3, #64	; 0x40
 8006f34:	d005      	beq.n	8006f42 <USBD_StdDevReq+0x26>
 8006f36:	2b40      	cmp	r3, #64	; 0x40
 8006f38:	d857      	bhi.n	8006fea <USBD_StdDevReq+0xce>
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00f      	beq.n	8006f5e <USBD_StdDevReq+0x42>
 8006f3e:	2b20      	cmp	r3, #32
 8006f40:	d153      	bne.n	8006fea <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	32ae      	adds	r2, #174	; 0xae
 8006f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	6839      	ldr	r1, [r7, #0]
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	4798      	blx	r3
 8006f58:	4603      	mov	r3, r0
 8006f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f5c:	e04a      	b.n	8006ff4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	785b      	ldrb	r3, [r3, #1]
 8006f62:	2b09      	cmp	r3, #9
 8006f64:	d83b      	bhi.n	8006fde <USBD_StdDevReq+0xc2>
 8006f66:	a201      	add	r2, pc, #4	; (adr r2, 8006f6c <USBD_StdDevReq+0x50>)
 8006f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f6c:	08006fc1 	.word	0x08006fc1
 8006f70:	08006fd5 	.word	0x08006fd5
 8006f74:	08006fdf 	.word	0x08006fdf
 8006f78:	08006fcb 	.word	0x08006fcb
 8006f7c:	08006fdf 	.word	0x08006fdf
 8006f80:	08006f9f 	.word	0x08006f9f
 8006f84:	08006f95 	.word	0x08006f95
 8006f88:	08006fdf 	.word	0x08006fdf
 8006f8c:	08006fb7 	.word	0x08006fb7
 8006f90:	08006fa9 	.word	0x08006fa9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006f94:	6839      	ldr	r1, [r7, #0]
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 fa3c 	bl	8007414 <USBD_GetDescriptor>
          break;
 8006f9c:	e024      	b.n	8006fe8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006f9e:	6839      	ldr	r1, [r7, #0]
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f000 fba1 	bl	80076e8 <USBD_SetAddress>
          break;
 8006fa6:	e01f      	b.n	8006fe8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006fa8:	6839      	ldr	r1, [r7, #0]
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 fbe0 	bl	8007770 <USBD_SetConfig>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	73fb      	strb	r3, [r7, #15]
          break;
 8006fb4:	e018      	b.n	8006fe8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006fb6:	6839      	ldr	r1, [r7, #0]
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 fc83 	bl	80078c4 <USBD_GetConfig>
          break;
 8006fbe:	e013      	b.n	8006fe8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006fc0:	6839      	ldr	r1, [r7, #0]
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 fcb4 	bl	8007930 <USBD_GetStatus>
          break;
 8006fc8:	e00e      	b.n	8006fe8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006fca:	6839      	ldr	r1, [r7, #0]
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 fce3 	bl	8007998 <USBD_SetFeature>
          break;
 8006fd2:	e009      	b.n	8006fe8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006fd4:	6839      	ldr	r1, [r7, #0]
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 fd07 	bl	80079ea <USBD_ClrFeature>
          break;
 8006fdc:	e004      	b.n	8006fe8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006fde:	6839      	ldr	r1, [r7, #0]
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 fd5e 	bl	8007aa2 <USBD_CtlError>
          break;
 8006fe6:	bf00      	nop
      }
      break;
 8006fe8:	e004      	b.n	8006ff4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006fea:	6839      	ldr	r1, [r7, #0]
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f000 fd58 	bl	8007aa2 <USBD_CtlError>
      break;
 8006ff2:	bf00      	nop
  }

  return ret;
 8006ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3710      	adds	r7, #16
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop

08007000 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800700a:	2300      	movs	r3, #0
 800700c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007016:	2b40      	cmp	r3, #64	; 0x40
 8007018:	d005      	beq.n	8007026 <USBD_StdItfReq+0x26>
 800701a:	2b40      	cmp	r3, #64	; 0x40
 800701c:	d852      	bhi.n	80070c4 <USBD_StdItfReq+0xc4>
 800701e:	2b00      	cmp	r3, #0
 8007020:	d001      	beq.n	8007026 <USBD_StdItfReq+0x26>
 8007022:	2b20      	cmp	r3, #32
 8007024:	d14e      	bne.n	80070c4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800702c:	b2db      	uxtb	r3, r3
 800702e:	3b01      	subs	r3, #1
 8007030:	2b02      	cmp	r3, #2
 8007032:	d840      	bhi.n	80070b6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	889b      	ldrh	r3, [r3, #4]
 8007038:	b2db      	uxtb	r3, r3
 800703a:	2b01      	cmp	r3, #1
 800703c:	d836      	bhi.n	80070ac <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	889b      	ldrh	r3, [r3, #4]
 8007042:	b2db      	uxtb	r3, r3
 8007044:	4619      	mov	r1, r3
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f7ff fed9 	bl	8006dfe <USBD_CoreFindIF>
 800704c:	4603      	mov	r3, r0
 800704e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007050:	7bbb      	ldrb	r3, [r7, #14]
 8007052:	2bff      	cmp	r3, #255	; 0xff
 8007054:	d01d      	beq.n	8007092 <USBD_StdItfReq+0x92>
 8007056:	7bbb      	ldrb	r3, [r7, #14]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d11a      	bne.n	8007092 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800705c:	7bba      	ldrb	r2, [r7, #14]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	32ae      	adds	r2, #174	; 0xae
 8007062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00f      	beq.n	800708c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800706c:	7bba      	ldrb	r2, [r7, #14]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007074:	7bba      	ldrb	r2, [r7, #14]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	32ae      	adds	r2, #174	; 0xae
 800707a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	6839      	ldr	r1, [r7, #0]
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	4798      	blx	r3
 8007086:	4603      	mov	r3, r0
 8007088:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800708a:	e004      	b.n	8007096 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800708c:	2303      	movs	r3, #3
 800708e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007090:	e001      	b.n	8007096 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007092:	2303      	movs	r3, #3
 8007094:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	88db      	ldrh	r3, [r3, #6]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d110      	bne.n	80070c0 <USBD_StdItfReq+0xc0>
 800709e:	7bfb      	ldrb	r3, [r7, #15]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d10d      	bne.n	80070c0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 fdc7 	bl	8007c38 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80070aa:	e009      	b.n	80070c0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80070ac:	6839      	ldr	r1, [r7, #0]
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 fcf7 	bl	8007aa2 <USBD_CtlError>
          break;
 80070b4:	e004      	b.n	80070c0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80070b6:	6839      	ldr	r1, [r7, #0]
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 fcf2 	bl	8007aa2 <USBD_CtlError>
          break;
 80070be:	e000      	b.n	80070c2 <USBD_StdItfReq+0xc2>
          break;
 80070c0:	bf00      	nop
      }
      break;
 80070c2:	e004      	b.n	80070ce <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80070c4:	6839      	ldr	r1, [r7, #0]
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 fceb 	bl	8007aa2 <USBD_CtlError>
      break;
 80070cc:	bf00      	nop
  }

  return ret;
 80070ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3710      	adds	r7, #16
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80070e2:	2300      	movs	r3, #0
 80070e4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	889b      	ldrh	r3, [r3, #4]
 80070ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070f4:	2b40      	cmp	r3, #64	; 0x40
 80070f6:	d007      	beq.n	8007108 <USBD_StdEPReq+0x30>
 80070f8:	2b40      	cmp	r3, #64	; 0x40
 80070fa:	f200 817f 	bhi.w	80073fc <USBD_StdEPReq+0x324>
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d02a      	beq.n	8007158 <USBD_StdEPReq+0x80>
 8007102:	2b20      	cmp	r3, #32
 8007104:	f040 817a 	bne.w	80073fc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007108:	7bbb      	ldrb	r3, [r7, #14]
 800710a:	4619      	mov	r1, r3
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f7ff fe83 	bl	8006e18 <USBD_CoreFindEP>
 8007112:	4603      	mov	r3, r0
 8007114:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007116:	7b7b      	ldrb	r3, [r7, #13]
 8007118:	2bff      	cmp	r3, #255	; 0xff
 800711a:	f000 8174 	beq.w	8007406 <USBD_StdEPReq+0x32e>
 800711e:	7b7b      	ldrb	r3, [r7, #13]
 8007120:	2b00      	cmp	r3, #0
 8007122:	f040 8170 	bne.w	8007406 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007126:	7b7a      	ldrb	r2, [r7, #13]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800712e:	7b7a      	ldrb	r2, [r7, #13]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	32ae      	adds	r2, #174	; 0xae
 8007134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	2b00      	cmp	r3, #0
 800713c:	f000 8163 	beq.w	8007406 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007140:	7b7a      	ldrb	r2, [r7, #13]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	32ae      	adds	r2, #174	; 0xae
 8007146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	6839      	ldr	r1, [r7, #0]
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	4798      	blx	r3
 8007152:	4603      	mov	r3, r0
 8007154:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007156:	e156      	b.n	8007406 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	785b      	ldrb	r3, [r3, #1]
 800715c:	2b03      	cmp	r3, #3
 800715e:	d008      	beq.n	8007172 <USBD_StdEPReq+0x9a>
 8007160:	2b03      	cmp	r3, #3
 8007162:	f300 8145 	bgt.w	80073f0 <USBD_StdEPReq+0x318>
 8007166:	2b00      	cmp	r3, #0
 8007168:	f000 809b 	beq.w	80072a2 <USBD_StdEPReq+0x1ca>
 800716c:	2b01      	cmp	r3, #1
 800716e:	d03c      	beq.n	80071ea <USBD_StdEPReq+0x112>
 8007170:	e13e      	b.n	80073f0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007178:	b2db      	uxtb	r3, r3
 800717a:	2b02      	cmp	r3, #2
 800717c:	d002      	beq.n	8007184 <USBD_StdEPReq+0xac>
 800717e:	2b03      	cmp	r3, #3
 8007180:	d016      	beq.n	80071b0 <USBD_StdEPReq+0xd8>
 8007182:	e02c      	b.n	80071de <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007184:	7bbb      	ldrb	r3, [r7, #14]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00d      	beq.n	80071a6 <USBD_StdEPReq+0xce>
 800718a:	7bbb      	ldrb	r3, [r7, #14]
 800718c:	2b80      	cmp	r3, #128	; 0x80
 800718e:	d00a      	beq.n	80071a6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007190:	7bbb      	ldrb	r3, [r7, #14]
 8007192:	4619      	mov	r1, r3
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f001 f979 	bl	800848c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800719a:	2180      	movs	r1, #128	; 0x80
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f001 f975 	bl	800848c <USBD_LL_StallEP>
 80071a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80071a4:	e020      	b.n	80071e8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80071a6:	6839      	ldr	r1, [r7, #0]
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 fc7a 	bl	8007aa2 <USBD_CtlError>
              break;
 80071ae:	e01b      	b.n	80071e8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	885b      	ldrh	r3, [r3, #2]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d10e      	bne.n	80071d6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80071b8:	7bbb      	ldrb	r3, [r7, #14]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00b      	beq.n	80071d6 <USBD_StdEPReq+0xfe>
 80071be:	7bbb      	ldrb	r3, [r7, #14]
 80071c0:	2b80      	cmp	r3, #128	; 0x80
 80071c2:	d008      	beq.n	80071d6 <USBD_StdEPReq+0xfe>
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	88db      	ldrh	r3, [r3, #6]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d104      	bne.n	80071d6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80071cc:	7bbb      	ldrb	r3, [r7, #14]
 80071ce:	4619      	mov	r1, r3
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f001 f95b 	bl	800848c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 fd2e 	bl	8007c38 <USBD_CtlSendStatus>

              break;
 80071dc:	e004      	b.n	80071e8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80071de:	6839      	ldr	r1, [r7, #0]
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 fc5e 	bl	8007aa2 <USBD_CtlError>
              break;
 80071e6:	bf00      	nop
          }
          break;
 80071e8:	e107      	b.n	80073fa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d002      	beq.n	80071fc <USBD_StdEPReq+0x124>
 80071f6:	2b03      	cmp	r3, #3
 80071f8:	d016      	beq.n	8007228 <USBD_StdEPReq+0x150>
 80071fa:	e04b      	b.n	8007294 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071fc:	7bbb      	ldrb	r3, [r7, #14]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00d      	beq.n	800721e <USBD_StdEPReq+0x146>
 8007202:	7bbb      	ldrb	r3, [r7, #14]
 8007204:	2b80      	cmp	r3, #128	; 0x80
 8007206:	d00a      	beq.n	800721e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007208:	7bbb      	ldrb	r3, [r7, #14]
 800720a:	4619      	mov	r1, r3
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f001 f93d 	bl	800848c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007212:	2180      	movs	r1, #128	; 0x80
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f001 f939 	bl	800848c <USBD_LL_StallEP>
 800721a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800721c:	e040      	b.n	80072a0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800721e:	6839      	ldr	r1, [r7, #0]
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 fc3e 	bl	8007aa2 <USBD_CtlError>
              break;
 8007226:	e03b      	b.n	80072a0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	885b      	ldrh	r3, [r3, #2]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d136      	bne.n	800729e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007230:	7bbb      	ldrb	r3, [r7, #14]
 8007232:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007236:	2b00      	cmp	r3, #0
 8007238:	d004      	beq.n	8007244 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800723a:	7bbb      	ldrb	r3, [r7, #14]
 800723c:	4619      	mov	r1, r3
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f001 f943 	bl	80084ca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 fcf7 	bl	8007c38 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800724a:	7bbb      	ldrb	r3, [r7, #14]
 800724c:	4619      	mov	r1, r3
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f7ff fde2 	bl	8006e18 <USBD_CoreFindEP>
 8007254:	4603      	mov	r3, r0
 8007256:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007258:	7b7b      	ldrb	r3, [r7, #13]
 800725a:	2bff      	cmp	r3, #255	; 0xff
 800725c:	d01f      	beq.n	800729e <USBD_StdEPReq+0x1c6>
 800725e:	7b7b      	ldrb	r3, [r7, #13]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d11c      	bne.n	800729e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007264:	7b7a      	ldrb	r2, [r7, #13]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800726c:	7b7a      	ldrb	r2, [r7, #13]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	32ae      	adds	r2, #174	; 0xae
 8007272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d010      	beq.n	800729e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800727c:	7b7a      	ldrb	r2, [r7, #13]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	32ae      	adds	r2, #174	; 0xae
 8007282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	6839      	ldr	r1, [r7, #0]
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	4798      	blx	r3
 800728e:	4603      	mov	r3, r0
 8007290:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007292:	e004      	b.n	800729e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007294:	6839      	ldr	r1, [r7, #0]
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 fc03 	bl	8007aa2 <USBD_CtlError>
              break;
 800729c:	e000      	b.n	80072a0 <USBD_StdEPReq+0x1c8>
              break;
 800729e:	bf00      	nop
          }
          break;
 80072a0:	e0ab      	b.n	80073fa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	2b02      	cmp	r3, #2
 80072ac:	d002      	beq.n	80072b4 <USBD_StdEPReq+0x1dc>
 80072ae:	2b03      	cmp	r3, #3
 80072b0:	d032      	beq.n	8007318 <USBD_StdEPReq+0x240>
 80072b2:	e097      	b.n	80073e4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072b4:	7bbb      	ldrb	r3, [r7, #14]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d007      	beq.n	80072ca <USBD_StdEPReq+0x1f2>
 80072ba:	7bbb      	ldrb	r3, [r7, #14]
 80072bc:	2b80      	cmp	r3, #128	; 0x80
 80072be:	d004      	beq.n	80072ca <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80072c0:	6839      	ldr	r1, [r7, #0]
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 fbed 	bl	8007aa2 <USBD_CtlError>
                break;
 80072c8:	e091      	b.n	80073ee <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	da0b      	bge.n	80072ea <USBD_StdEPReq+0x212>
 80072d2:	7bbb      	ldrb	r3, [r7, #14]
 80072d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072d8:	4613      	mov	r3, r2
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	4413      	add	r3, r2
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	3310      	adds	r3, #16
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	4413      	add	r3, r2
 80072e6:	3304      	adds	r3, #4
 80072e8:	e00b      	b.n	8007302 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80072ea:	7bbb      	ldrb	r3, [r7, #14]
 80072ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072f0:	4613      	mov	r3, r2
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	4413      	add	r3, r2
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	4413      	add	r3, r2
 8007300:	3304      	adds	r3, #4
 8007302:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	2200      	movs	r2, #0
 8007308:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	2202      	movs	r2, #2
 800730e:	4619      	mov	r1, r3
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 fc37 	bl	8007b84 <USBD_CtlSendData>
              break;
 8007316:	e06a      	b.n	80073ee <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007318:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800731c:	2b00      	cmp	r3, #0
 800731e:	da11      	bge.n	8007344 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007320:	7bbb      	ldrb	r3, [r7, #14]
 8007322:	f003 020f 	and.w	r2, r3, #15
 8007326:	6879      	ldr	r1, [r7, #4]
 8007328:	4613      	mov	r3, r2
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	4413      	add	r3, r2
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	440b      	add	r3, r1
 8007332:	3324      	adds	r3, #36	; 0x24
 8007334:	881b      	ldrh	r3, [r3, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d117      	bne.n	800736a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800733a:	6839      	ldr	r1, [r7, #0]
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 fbb0 	bl	8007aa2 <USBD_CtlError>
                  break;
 8007342:	e054      	b.n	80073ee <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007344:	7bbb      	ldrb	r3, [r7, #14]
 8007346:	f003 020f 	and.w	r2, r3, #15
 800734a:	6879      	ldr	r1, [r7, #4]
 800734c:	4613      	mov	r3, r2
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	4413      	add	r3, r2
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	440b      	add	r3, r1
 8007356:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800735a:	881b      	ldrh	r3, [r3, #0]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d104      	bne.n	800736a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007360:	6839      	ldr	r1, [r7, #0]
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fb9d 	bl	8007aa2 <USBD_CtlError>
                  break;
 8007368:	e041      	b.n	80073ee <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800736a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800736e:	2b00      	cmp	r3, #0
 8007370:	da0b      	bge.n	800738a <USBD_StdEPReq+0x2b2>
 8007372:	7bbb      	ldrb	r3, [r7, #14]
 8007374:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007378:	4613      	mov	r3, r2
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	4413      	add	r3, r2
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	3310      	adds	r3, #16
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	4413      	add	r3, r2
 8007386:	3304      	adds	r3, #4
 8007388:	e00b      	b.n	80073a2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800738a:	7bbb      	ldrb	r3, [r7, #14]
 800738c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007390:	4613      	mov	r3, r2
 8007392:	009b      	lsls	r3, r3, #2
 8007394:	4413      	add	r3, r2
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	4413      	add	r3, r2
 80073a0:	3304      	adds	r3, #4
 80073a2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80073a4:	7bbb      	ldrb	r3, [r7, #14]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d002      	beq.n	80073b0 <USBD_StdEPReq+0x2d8>
 80073aa:	7bbb      	ldrb	r3, [r7, #14]
 80073ac:	2b80      	cmp	r3, #128	; 0x80
 80073ae:	d103      	bne.n	80073b8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	2200      	movs	r2, #0
 80073b4:	601a      	str	r2, [r3, #0]
 80073b6:	e00e      	b.n	80073d6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80073b8:	7bbb      	ldrb	r3, [r7, #14]
 80073ba:	4619      	mov	r1, r3
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f001 f8a3 	bl	8008508 <USBD_LL_IsStallEP>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d003      	beq.n	80073d0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	2201      	movs	r2, #1
 80073cc:	601a      	str	r2, [r3, #0]
 80073ce:	e002      	b.n	80073d6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	2200      	movs	r2, #0
 80073d4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	2202      	movs	r2, #2
 80073da:	4619      	mov	r1, r3
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 fbd1 	bl	8007b84 <USBD_CtlSendData>
              break;
 80073e2:	e004      	b.n	80073ee <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80073e4:	6839      	ldr	r1, [r7, #0]
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 fb5b 	bl	8007aa2 <USBD_CtlError>
              break;
 80073ec:	bf00      	nop
          }
          break;
 80073ee:	e004      	b.n	80073fa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80073f0:	6839      	ldr	r1, [r7, #0]
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 fb55 	bl	8007aa2 <USBD_CtlError>
          break;
 80073f8:	bf00      	nop
      }
      break;
 80073fa:	e005      	b.n	8007408 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80073fc:	6839      	ldr	r1, [r7, #0]
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 fb4f 	bl	8007aa2 <USBD_CtlError>
      break;
 8007404:	e000      	b.n	8007408 <USBD_StdEPReq+0x330>
      break;
 8007406:	bf00      	nop
  }

  return ret;
 8007408:	7bfb      	ldrb	r3, [r7, #15]
}
 800740a:	4618      	mov	r0, r3
 800740c:	3710      	adds	r7, #16
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}
	...

08007414 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800741e:	2300      	movs	r3, #0
 8007420:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007422:	2300      	movs	r3, #0
 8007424:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007426:	2300      	movs	r3, #0
 8007428:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	885b      	ldrh	r3, [r3, #2]
 800742e:	0a1b      	lsrs	r3, r3, #8
 8007430:	b29b      	uxth	r3, r3
 8007432:	3b01      	subs	r3, #1
 8007434:	2b06      	cmp	r3, #6
 8007436:	f200 8128 	bhi.w	800768a <USBD_GetDescriptor+0x276>
 800743a:	a201      	add	r2, pc, #4	; (adr r2, 8007440 <USBD_GetDescriptor+0x2c>)
 800743c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007440:	0800745d 	.word	0x0800745d
 8007444:	08007475 	.word	0x08007475
 8007448:	080074b5 	.word	0x080074b5
 800744c:	0800768b 	.word	0x0800768b
 8007450:	0800768b 	.word	0x0800768b
 8007454:	0800762b 	.word	0x0800762b
 8007458:	08007657 	.word	0x08007657
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	7c12      	ldrb	r2, [r2, #16]
 8007468:	f107 0108 	add.w	r1, r7, #8
 800746c:	4610      	mov	r0, r2
 800746e:	4798      	blx	r3
 8007470:	60f8      	str	r0, [r7, #12]
      break;
 8007472:	e112      	b.n	800769a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	7c1b      	ldrb	r3, [r3, #16]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d10d      	bne.n	8007498 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007484:	f107 0208 	add.w	r2, r7, #8
 8007488:	4610      	mov	r0, r2
 800748a:	4798      	blx	r3
 800748c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	3301      	adds	r3, #1
 8007492:	2202      	movs	r2, #2
 8007494:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007496:	e100      	b.n	800769a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800749e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a0:	f107 0208 	add.w	r2, r7, #8
 80074a4:	4610      	mov	r0, r2
 80074a6:	4798      	blx	r3
 80074a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	3301      	adds	r3, #1
 80074ae:	2202      	movs	r2, #2
 80074b0:	701a      	strb	r2, [r3, #0]
      break;
 80074b2:	e0f2      	b.n	800769a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	885b      	ldrh	r3, [r3, #2]
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	2b05      	cmp	r3, #5
 80074bc:	f200 80ac 	bhi.w	8007618 <USBD_GetDescriptor+0x204>
 80074c0:	a201      	add	r2, pc, #4	; (adr r2, 80074c8 <USBD_GetDescriptor+0xb4>)
 80074c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c6:	bf00      	nop
 80074c8:	080074e1 	.word	0x080074e1
 80074cc:	08007515 	.word	0x08007515
 80074d0:	08007549 	.word	0x08007549
 80074d4:	0800757d 	.word	0x0800757d
 80074d8:	080075b1 	.word	0x080075b1
 80074dc:	080075e5 	.word	0x080075e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00b      	beq.n	8007504 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	7c12      	ldrb	r2, [r2, #16]
 80074f8:	f107 0108 	add.w	r1, r7, #8
 80074fc:	4610      	mov	r0, r2
 80074fe:	4798      	blx	r3
 8007500:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007502:	e091      	b.n	8007628 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007504:	6839      	ldr	r1, [r7, #0]
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 facb 	bl	8007aa2 <USBD_CtlError>
            err++;
 800750c:	7afb      	ldrb	r3, [r7, #11]
 800750e:	3301      	adds	r3, #1
 8007510:	72fb      	strb	r3, [r7, #11]
          break;
 8007512:	e089      	b.n	8007628 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00b      	beq.n	8007538 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	7c12      	ldrb	r2, [r2, #16]
 800752c:	f107 0108 	add.w	r1, r7, #8
 8007530:	4610      	mov	r0, r2
 8007532:	4798      	blx	r3
 8007534:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007536:	e077      	b.n	8007628 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007538:	6839      	ldr	r1, [r7, #0]
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 fab1 	bl	8007aa2 <USBD_CtlError>
            err++;
 8007540:	7afb      	ldrb	r3, [r7, #11]
 8007542:	3301      	adds	r3, #1
 8007544:	72fb      	strb	r3, [r7, #11]
          break;
 8007546:	e06f      	b.n	8007628 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00b      	beq.n	800756c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	7c12      	ldrb	r2, [r2, #16]
 8007560:	f107 0108 	add.w	r1, r7, #8
 8007564:	4610      	mov	r0, r2
 8007566:	4798      	blx	r3
 8007568:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800756a:	e05d      	b.n	8007628 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800756c:	6839      	ldr	r1, [r7, #0]
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f000 fa97 	bl	8007aa2 <USBD_CtlError>
            err++;
 8007574:	7afb      	ldrb	r3, [r7, #11]
 8007576:	3301      	adds	r3, #1
 8007578:	72fb      	strb	r3, [r7, #11]
          break;
 800757a:	e055      	b.n	8007628 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007582:	691b      	ldr	r3, [r3, #16]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d00b      	beq.n	80075a0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	7c12      	ldrb	r2, [r2, #16]
 8007594:	f107 0108 	add.w	r1, r7, #8
 8007598:	4610      	mov	r0, r2
 800759a:	4798      	blx	r3
 800759c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800759e:	e043      	b.n	8007628 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075a0:	6839      	ldr	r1, [r7, #0]
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 fa7d 	bl	8007aa2 <USBD_CtlError>
            err++;
 80075a8:	7afb      	ldrb	r3, [r7, #11]
 80075aa:	3301      	adds	r3, #1
 80075ac:	72fb      	strb	r3, [r7, #11]
          break;
 80075ae:	e03b      	b.n	8007628 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075b6:	695b      	ldr	r3, [r3, #20]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d00b      	beq.n	80075d4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075c2:	695b      	ldr	r3, [r3, #20]
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	7c12      	ldrb	r2, [r2, #16]
 80075c8:	f107 0108 	add.w	r1, r7, #8
 80075cc:	4610      	mov	r0, r2
 80075ce:	4798      	blx	r3
 80075d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075d2:	e029      	b.n	8007628 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075d4:	6839      	ldr	r1, [r7, #0]
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 fa63 	bl	8007aa2 <USBD_CtlError>
            err++;
 80075dc:	7afb      	ldrb	r3, [r7, #11]
 80075de:	3301      	adds	r3, #1
 80075e0:	72fb      	strb	r3, [r7, #11]
          break;
 80075e2:	e021      	b.n	8007628 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ea:	699b      	ldr	r3, [r3, #24]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00b      	beq.n	8007608 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075f6:	699b      	ldr	r3, [r3, #24]
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	7c12      	ldrb	r2, [r2, #16]
 80075fc:	f107 0108 	add.w	r1, r7, #8
 8007600:	4610      	mov	r0, r2
 8007602:	4798      	blx	r3
 8007604:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007606:	e00f      	b.n	8007628 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007608:	6839      	ldr	r1, [r7, #0]
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 fa49 	bl	8007aa2 <USBD_CtlError>
            err++;
 8007610:	7afb      	ldrb	r3, [r7, #11]
 8007612:	3301      	adds	r3, #1
 8007614:	72fb      	strb	r3, [r7, #11]
          break;
 8007616:	e007      	b.n	8007628 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007618:	6839      	ldr	r1, [r7, #0]
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 fa41 	bl	8007aa2 <USBD_CtlError>
          err++;
 8007620:	7afb      	ldrb	r3, [r7, #11]
 8007622:	3301      	adds	r3, #1
 8007624:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007626:	bf00      	nop
      }
      break;
 8007628:	e037      	b.n	800769a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	7c1b      	ldrb	r3, [r3, #16]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d109      	bne.n	8007646 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800763a:	f107 0208 	add.w	r2, r7, #8
 800763e:	4610      	mov	r0, r2
 8007640:	4798      	blx	r3
 8007642:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007644:	e029      	b.n	800769a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007646:	6839      	ldr	r1, [r7, #0]
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 fa2a 	bl	8007aa2 <USBD_CtlError>
        err++;
 800764e:	7afb      	ldrb	r3, [r7, #11]
 8007650:	3301      	adds	r3, #1
 8007652:	72fb      	strb	r3, [r7, #11]
      break;
 8007654:	e021      	b.n	800769a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	7c1b      	ldrb	r3, [r3, #16]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d10d      	bne.n	800767a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007666:	f107 0208 	add.w	r2, r7, #8
 800766a:	4610      	mov	r0, r2
 800766c:	4798      	blx	r3
 800766e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	3301      	adds	r3, #1
 8007674:	2207      	movs	r2, #7
 8007676:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007678:	e00f      	b.n	800769a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800767a:	6839      	ldr	r1, [r7, #0]
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 fa10 	bl	8007aa2 <USBD_CtlError>
        err++;
 8007682:	7afb      	ldrb	r3, [r7, #11]
 8007684:	3301      	adds	r3, #1
 8007686:	72fb      	strb	r3, [r7, #11]
      break;
 8007688:	e007      	b.n	800769a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800768a:	6839      	ldr	r1, [r7, #0]
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 fa08 	bl	8007aa2 <USBD_CtlError>
      err++;
 8007692:	7afb      	ldrb	r3, [r7, #11]
 8007694:	3301      	adds	r3, #1
 8007696:	72fb      	strb	r3, [r7, #11]
      break;
 8007698:	bf00      	nop
  }

  if (err != 0U)
 800769a:	7afb      	ldrb	r3, [r7, #11]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d11e      	bne.n	80076de <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	88db      	ldrh	r3, [r3, #6]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d016      	beq.n	80076d6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80076a8:	893b      	ldrh	r3, [r7, #8]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00e      	beq.n	80076cc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	88da      	ldrh	r2, [r3, #6]
 80076b2:	893b      	ldrh	r3, [r7, #8]
 80076b4:	4293      	cmp	r3, r2
 80076b6:	bf28      	it	cs
 80076b8:	4613      	movcs	r3, r2
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80076be:	893b      	ldrh	r3, [r7, #8]
 80076c0:	461a      	mov	r2, r3
 80076c2:	68f9      	ldr	r1, [r7, #12]
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 fa5d 	bl	8007b84 <USBD_CtlSendData>
 80076ca:	e009      	b.n	80076e0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80076cc:	6839      	ldr	r1, [r7, #0]
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 f9e7 	bl	8007aa2 <USBD_CtlError>
 80076d4:	e004      	b.n	80076e0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 faae 	bl	8007c38 <USBD_CtlSendStatus>
 80076dc:	e000      	b.n	80076e0 <USBD_GetDescriptor+0x2cc>
    return;
 80076de:	bf00      	nop
  }
}
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop

080076e8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	889b      	ldrh	r3, [r3, #4]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d131      	bne.n	800775e <USBD_SetAddress+0x76>
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	88db      	ldrh	r3, [r3, #6]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d12d      	bne.n	800775e <USBD_SetAddress+0x76>
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	885b      	ldrh	r3, [r3, #2]
 8007706:	2b7f      	cmp	r3, #127	; 0x7f
 8007708:	d829      	bhi.n	800775e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	885b      	ldrh	r3, [r3, #2]
 800770e:	b2db      	uxtb	r3, r3
 8007710:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007714:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800771c:	b2db      	uxtb	r3, r3
 800771e:	2b03      	cmp	r3, #3
 8007720:	d104      	bne.n	800772c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007722:	6839      	ldr	r1, [r7, #0]
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 f9bc 	bl	8007aa2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800772a:	e01d      	b.n	8007768 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	7bfa      	ldrb	r2, [r7, #15]
 8007730:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007734:	7bfb      	ldrb	r3, [r7, #15]
 8007736:	4619      	mov	r1, r3
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	f000 ff11 	bl	8008560 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 fa7a 	bl	8007c38 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007744:	7bfb      	ldrb	r3, [r7, #15]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d004      	beq.n	8007754 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2202      	movs	r2, #2
 800774e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007752:	e009      	b.n	8007768 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800775c:	e004      	b.n	8007768 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800775e:	6839      	ldr	r1, [r7, #0]
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 f99e 	bl	8007aa2 <USBD_CtlError>
  }
}
 8007766:	bf00      	nop
 8007768:	bf00      	nop
 800776a:	3710      	adds	r7, #16
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800777a:	2300      	movs	r3, #0
 800777c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	885b      	ldrh	r3, [r3, #2]
 8007782:	b2da      	uxtb	r2, r3
 8007784:	4b4e      	ldr	r3, [pc, #312]	; (80078c0 <USBD_SetConfig+0x150>)
 8007786:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007788:	4b4d      	ldr	r3, [pc, #308]	; (80078c0 <USBD_SetConfig+0x150>)
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	2b01      	cmp	r3, #1
 800778e:	d905      	bls.n	800779c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007790:	6839      	ldr	r1, [r7, #0]
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 f985 	bl	8007aa2 <USBD_CtlError>
    return USBD_FAIL;
 8007798:	2303      	movs	r3, #3
 800779a:	e08c      	b.n	80078b6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d002      	beq.n	80077ae <USBD_SetConfig+0x3e>
 80077a8:	2b03      	cmp	r3, #3
 80077aa:	d029      	beq.n	8007800 <USBD_SetConfig+0x90>
 80077ac:	e075      	b.n	800789a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80077ae:	4b44      	ldr	r3, [pc, #272]	; (80078c0 <USBD_SetConfig+0x150>)
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d020      	beq.n	80077f8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80077b6:	4b42      	ldr	r3, [pc, #264]	; (80078c0 <USBD_SetConfig+0x150>)
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	461a      	mov	r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80077c0:	4b3f      	ldr	r3, [pc, #252]	; (80078c0 <USBD_SetConfig+0x150>)
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	4619      	mov	r1, r3
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f7fe ffe7 	bl	800679a <USBD_SetClassConfig>
 80077cc:	4603      	mov	r3, r0
 80077ce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80077d0:	7bfb      	ldrb	r3, [r7, #15]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d008      	beq.n	80077e8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80077d6:	6839      	ldr	r1, [r7, #0]
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 f962 	bl	8007aa2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2202      	movs	r2, #2
 80077e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80077e6:	e065      	b.n	80078b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 fa25 	bl	8007c38 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2203      	movs	r2, #3
 80077f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80077f6:	e05d      	b.n	80078b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 fa1d 	bl	8007c38 <USBD_CtlSendStatus>
      break;
 80077fe:	e059      	b.n	80078b4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007800:	4b2f      	ldr	r3, [pc, #188]	; (80078c0 <USBD_SetConfig+0x150>)
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d112      	bne.n	800782e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2202      	movs	r2, #2
 800780c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007810:	4b2b      	ldr	r3, [pc, #172]	; (80078c0 <USBD_SetConfig+0x150>)
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	461a      	mov	r2, r3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800781a:	4b29      	ldr	r3, [pc, #164]	; (80078c0 <USBD_SetConfig+0x150>)
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	4619      	mov	r1, r3
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f7fe ffd6 	bl	80067d2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 fa06 	bl	8007c38 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800782c:	e042      	b.n	80078b4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800782e:	4b24      	ldr	r3, [pc, #144]	; (80078c0 <USBD_SetConfig+0x150>)
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	461a      	mov	r2, r3
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	429a      	cmp	r2, r3
 800783a:	d02a      	beq.n	8007892 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	b2db      	uxtb	r3, r3
 8007842:	4619      	mov	r1, r3
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f7fe ffc4 	bl	80067d2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800784a:	4b1d      	ldr	r3, [pc, #116]	; (80078c0 <USBD_SetConfig+0x150>)
 800784c:	781b      	ldrb	r3, [r3, #0]
 800784e:	461a      	mov	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007854:	4b1a      	ldr	r3, [pc, #104]	; (80078c0 <USBD_SetConfig+0x150>)
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	4619      	mov	r1, r3
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f7fe ff9d 	bl	800679a <USBD_SetClassConfig>
 8007860:	4603      	mov	r3, r0
 8007862:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007864:	7bfb      	ldrb	r3, [r7, #15]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00f      	beq.n	800788a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800786a:	6839      	ldr	r1, [r7, #0]
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 f918 	bl	8007aa2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	b2db      	uxtb	r3, r3
 8007878:	4619      	mov	r1, r3
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f7fe ffa9 	bl	80067d2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2202      	movs	r2, #2
 8007884:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007888:	e014      	b.n	80078b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 f9d4 	bl	8007c38 <USBD_CtlSendStatus>
      break;
 8007890:	e010      	b.n	80078b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 f9d0 	bl	8007c38 <USBD_CtlSendStatus>
      break;
 8007898:	e00c      	b.n	80078b4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800789a:	6839      	ldr	r1, [r7, #0]
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 f900 	bl	8007aa2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80078a2:	4b07      	ldr	r3, [pc, #28]	; (80078c0 <USBD_SetConfig+0x150>)
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	4619      	mov	r1, r3
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f7fe ff92 	bl	80067d2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80078ae:	2303      	movs	r3, #3
 80078b0:	73fb      	strb	r3, [r7, #15]
      break;
 80078b2:	bf00      	nop
  }

  return ret;
 80078b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3710      	adds	r7, #16
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	20000320 	.word	0x20000320

080078c4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	88db      	ldrh	r3, [r3, #6]
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d004      	beq.n	80078e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80078d6:	6839      	ldr	r1, [r7, #0]
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f8e2 	bl	8007aa2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80078de:	e023      	b.n	8007928 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	2b02      	cmp	r3, #2
 80078ea:	dc02      	bgt.n	80078f2 <USBD_GetConfig+0x2e>
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	dc03      	bgt.n	80078f8 <USBD_GetConfig+0x34>
 80078f0:	e015      	b.n	800791e <USBD_GetConfig+0x5a>
 80078f2:	2b03      	cmp	r3, #3
 80078f4:	d00b      	beq.n	800790e <USBD_GetConfig+0x4a>
 80078f6:	e012      	b.n	800791e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	3308      	adds	r3, #8
 8007902:	2201      	movs	r2, #1
 8007904:	4619      	mov	r1, r3
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 f93c 	bl	8007b84 <USBD_CtlSendData>
        break;
 800790c:	e00c      	b.n	8007928 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	3304      	adds	r3, #4
 8007912:	2201      	movs	r2, #1
 8007914:	4619      	mov	r1, r3
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 f934 	bl	8007b84 <USBD_CtlSendData>
        break;
 800791c:	e004      	b.n	8007928 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800791e:	6839      	ldr	r1, [r7, #0]
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 f8be 	bl	8007aa2 <USBD_CtlError>
        break;
 8007926:	bf00      	nop
}
 8007928:	bf00      	nop
 800792a:	3708      	adds	r7, #8
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	b082      	sub	sp, #8
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007940:	b2db      	uxtb	r3, r3
 8007942:	3b01      	subs	r3, #1
 8007944:	2b02      	cmp	r3, #2
 8007946:	d81e      	bhi.n	8007986 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	88db      	ldrh	r3, [r3, #6]
 800794c:	2b02      	cmp	r3, #2
 800794e:	d004      	beq.n	800795a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007950:	6839      	ldr	r1, [r7, #0]
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 f8a5 	bl	8007aa2 <USBD_CtlError>
        break;
 8007958:	e01a      	b.n	8007990 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2201      	movs	r2, #1
 800795e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007966:	2b00      	cmp	r3, #0
 8007968:	d005      	beq.n	8007976 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	f043 0202 	orr.w	r2, r3, #2
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	330c      	adds	r3, #12
 800797a:	2202      	movs	r2, #2
 800797c:	4619      	mov	r1, r3
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 f900 	bl	8007b84 <USBD_CtlSendData>
      break;
 8007984:	e004      	b.n	8007990 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007986:	6839      	ldr	r1, [r7, #0]
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 f88a 	bl	8007aa2 <USBD_CtlError>
      break;
 800798e:	bf00      	nop
  }
}
 8007990:	bf00      	nop
 8007992:	3708      	adds	r7, #8
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	885b      	ldrh	r3, [r3, #2]
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d107      	bne.n	80079ba <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2201      	movs	r2, #1
 80079ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 f940 	bl	8007c38 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80079b8:	e013      	b.n	80079e2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	885b      	ldrh	r3, [r3, #2]
 80079be:	2b02      	cmp	r3, #2
 80079c0:	d10b      	bne.n	80079da <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	889b      	ldrh	r3, [r3, #4]
 80079c6:	0a1b      	lsrs	r3, r3, #8
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	b2da      	uxtb	r2, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 f930 	bl	8007c38 <USBD_CtlSendStatus>
}
 80079d8:	e003      	b.n	80079e2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80079da:	6839      	ldr	r1, [r7, #0]
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 f860 	bl	8007aa2 <USBD_CtlError>
}
 80079e2:	bf00      	nop
 80079e4:	3708      	adds	r7, #8
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}

080079ea <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079ea:	b580      	push	{r7, lr}
 80079ec:	b082      	sub	sp, #8
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
 80079f2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	3b01      	subs	r3, #1
 80079fe:	2b02      	cmp	r3, #2
 8007a00:	d80b      	bhi.n	8007a1a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	885b      	ldrh	r3, [r3, #2]
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d10c      	bne.n	8007a24 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 f910 	bl	8007c38 <USBD_CtlSendStatus>
      }
      break;
 8007a18:	e004      	b.n	8007a24 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007a1a:	6839      	ldr	r1, [r7, #0]
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 f840 	bl	8007aa2 <USBD_CtlError>
      break;
 8007a22:	e000      	b.n	8007a26 <USBD_ClrFeature+0x3c>
      break;
 8007a24:	bf00      	nop
  }
}
 8007a26:	bf00      	nop
 8007a28:	3708      	adds	r7, #8
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}

08007a2e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007a2e:	b580      	push	{r7, lr}
 8007a30:	b084      	sub	sp, #16
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
 8007a36:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	781a      	ldrb	r2, [r3, #0]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	3301      	adds	r3, #1
 8007a48:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	781a      	ldrb	r2, [r3, #0]
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	3301      	adds	r3, #1
 8007a56:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f7ff fa41 	bl	8006ee0 <SWAPBYTE>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	461a      	mov	r2, r3
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	3301      	adds	r3, #1
 8007a6a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	3301      	adds	r3, #1
 8007a70:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007a72:	68f8      	ldr	r0, [r7, #12]
 8007a74:	f7ff fa34 	bl	8006ee0 <SWAPBYTE>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	3301      	adds	r3, #1
 8007a84:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007a8c:	68f8      	ldr	r0, [r7, #12]
 8007a8e:	f7ff fa27 	bl	8006ee0 <SWAPBYTE>
 8007a92:	4603      	mov	r3, r0
 8007a94:	461a      	mov	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	80da      	strh	r2, [r3, #6]
}
 8007a9a:	bf00      	nop
 8007a9c:	3710      	adds	r7, #16
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}

08007aa2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007aa2:	b580      	push	{r7, lr}
 8007aa4:	b082      	sub	sp, #8
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
 8007aaa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007aac:	2180      	movs	r1, #128	; 0x80
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 fcec 	bl	800848c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 fce8 	bl	800848c <USBD_LL_StallEP>
}
 8007abc:	bf00      	nop
 8007abe:	3708      	adds	r7, #8
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b086      	sub	sp, #24
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	60b9      	str	r1, [r7, #8]
 8007ace:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d036      	beq.n	8007b48 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007ade:	6938      	ldr	r0, [r7, #16]
 8007ae0:	f000 f836 	bl	8007b50 <USBD_GetLen>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	005b      	lsls	r3, r3, #1
 8007aec:	b29a      	uxth	r2, r3
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007af2:	7dfb      	ldrb	r3, [r7, #23]
 8007af4:	68ba      	ldr	r2, [r7, #8]
 8007af6:	4413      	add	r3, r2
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	7812      	ldrb	r2, [r2, #0]
 8007afc:	701a      	strb	r2, [r3, #0]
  idx++;
 8007afe:	7dfb      	ldrb	r3, [r7, #23]
 8007b00:	3301      	adds	r3, #1
 8007b02:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007b04:	7dfb      	ldrb	r3, [r7, #23]
 8007b06:	68ba      	ldr	r2, [r7, #8]
 8007b08:	4413      	add	r3, r2
 8007b0a:	2203      	movs	r2, #3
 8007b0c:	701a      	strb	r2, [r3, #0]
  idx++;
 8007b0e:	7dfb      	ldrb	r3, [r7, #23]
 8007b10:	3301      	adds	r3, #1
 8007b12:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007b14:	e013      	b.n	8007b3e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007b16:	7dfb      	ldrb	r3, [r7, #23]
 8007b18:	68ba      	ldr	r2, [r7, #8]
 8007b1a:	4413      	add	r3, r2
 8007b1c:	693a      	ldr	r2, [r7, #16]
 8007b1e:	7812      	ldrb	r2, [r2, #0]
 8007b20:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	3301      	adds	r3, #1
 8007b26:	613b      	str	r3, [r7, #16]
    idx++;
 8007b28:	7dfb      	ldrb	r3, [r7, #23]
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007b2e:	7dfb      	ldrb	r3, [r7, #23]
 8007b30:	68ba      	ldr	r2, [r7, #8]
 8007b32:	4413      	add	r3, r2
 8007b34:	2200      	movs	r2, #0
 8007b36:	701a      	strb	r2, [r3, #0]
    idx++;
 8007b38:	7dfb      	ldrb	r3, [r7, #23]
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1e7      	bne.n	8007b16 <USBD_GetString+0x52>
 8007b46:	e000      	b.n	8007b4a <USBD_GetString+0x86>
    return;
 8007b48:	bf00      	nop
  }
}
 8007b4a:	3718      	adds	r7, #24
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b085      	sub	sp, #20
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007b60:	e005      	b.n	8007b6e <USBD_GetLen+0x1e>
  {
    len++;
 8007b62:	7bfb      	ldrb	r3, [r7, #15]
 8007b64:	3301      	adds	r3, #1
 8007b66:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d1f5      	bne.n	8007b62 <USBD_GetLen+0x12>
  }

  return len;
 8007b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3714      	adds	r7, #20
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	60f8      	str	r0, [r7, #12]
 8007b8c:	60b9      	str	r1, [r7, #8]
 8007b8e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2202      	movs	r2, #2
 8007b94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	68ba      	ldr	r2, [r7, #8]
 8007ba8:	2100      	movs	r1, #0
 8007baa:	68f8      	ldr	r0, [r7, #12]
 8007bac:	f000 fcf7 	bl	800859e <USBD_LL_Transmit>

  return USBD_OK;
 8007bb0:	2300      	movs	r3, #0
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3710      	adds	r7, #16
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007bba:	b580      	push	{r7, lr}
 8007bbc:	b084      	sub	sp, #16
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	60f8      	str	r0, [r7, #12]
 8007bc2:	60b9      	str	r1, [r7, #8]
 8007bc4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	68ba      	ldr	r2, [r7, #8]
 8007bca:	2100      	movs	r1, #0
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	f000 fce6 	bl	800859e <USBD_LL_Transmit>

  return USBD_OK;
 8007bd2:	2300      	movs	r3, #0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3710      	adds	r7, #16
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	60f8      	str	r0, [r7, #12]
 8007be4:	60b9      	str	r1, [r7, #8]
 8007be6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2203      	movs	r2, #3
 8007bec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	68ba      	ldr	r2, [r7, #8]
 8007c04:	2100      	movs	r1, #0
 8007c06:	68f8      	ldr	r0, [r7, #12]
 8007c08:	f000 fcea 	bl	80085e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3710      	adds	r7, #16
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b084      	sub	sp, #16
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	60f8      	str	r0, [r7, #12]
 8007c1e:	60b9      	str	r1, [r7, #8]
 8007c20:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	68ba      	ldr	r2, [r7, #8]
 8007c26:	2100      	movs	r1, #0
 8007c28:	68f8      	ldr	r0, [r7, #12]
 8007c2a:	f000 fcd9 	bl	80085e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c2e:	2300      	movs	r3, #0
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3710      	adds	r7, #16
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b082      	sub	sp, #8
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2204      	movs	r2, #4
 8007c44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007c48:	2300      	movs	r3, #0
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	2100      	movs	r1, #0
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 fca5 	bl	800859e <USBD_LL_Transmit>

  return USBD_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3708      	adds	r7, #8
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}

08007c5e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b082      	sub	sp, #8
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2205      	movs	r2, #5
 8007c6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c6e:	2300      	movs	r3, #0
 8007c70:	2200      	movs	r2, #0
 8007c72:	2100      	movs	r1, #0
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 fcb3 	bl	80085e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3708      	adds	r7, #8
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007c88:	2200      	movs	r2, #0
 8007c8a:	4912      	ldr	r1, [pc, #72]	; (8007cd4 <MX_USB_DEVICE_Init+0x50>)
 8007c8c:	4812      	ldr	r0, [pc, #72]	; (8007cd8 <MX_USB_DEVICE_Init+0x54>)
 8007c8e:	f7fe fd07 	bl	80066a0 <USBD_Init>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d001      	beq.n	8007c9c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007c98:	f7f9 f93c 	bl	8000f14 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007c9c:	490f      	ldr	r1, [pc, #60]	; (8007cdc <MX_USB_DEVICE_Init+0x58>)
 8007c9e:	480e      	ldr	r0, [pc, #56]	; (8007cd8 <MX_USB_DEVICE_Init+0x54>)
 8007ca0:	f7fe fd2e 	bl	8006700 <USBD_RegisterClass>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d001      	beq.n	8007cae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007caa:	f7f9 f933 	bl	8000f14 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007cae:	490c      	ldr	r1, [pc, #48]	; (8007ce0 <MX_USB_DEVICE_Init+0x5c>)
 8007cb0:	4809      	ldr	r0, [pc, #36]	; (8007cd8 <MX_USB_DEVICE_Init+0x54>)
 8007cb2:	f7fe fc1f 	bl	80064f4 <USBD_CDC_RegisterInterface>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d001      	beq.n	8007cc0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007cbc:	f7f9 f92a 	bl	8000f14 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007cc0:	4805      	ldr	r0, [pc, #20]	; (8007cd8 <MX_USB_DEVICE_Init+0x54>)
 8007cc2:	f7fe fd53 	bl	800676c <USBD_Start>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d001      	beq.n	8007cd0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007ccc:	f7f9 f922 	bl	8000f14 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007cd0:	bf00      	nop
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	200000d8 	.word	0x200000d8
 8007cd8:	20000324 	.word	0x20000324
 8007cdc:	20000044 	.word	0x20000044
 8007ce0:	200000c4 	.word	0x200000c4

08007ce4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007ce8:	2200      	movs	r2, #0
 8007cea:	4905      	ldr	r1, [pc, #20]	; (8007d00 <CDC_Init_FS+0x1c>)
 8007cec:	4805      	ldr	r0, [pc, #20]	; (8007d04 <CDC_Init_FS+0x20>)
 8007cee:	f7fe fc1b 	bl	8006528 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007cf2:	4905      	ldr	r1, [pc, #20]	; (8007d08 <CDC_Init_FS+0x24>)
 8007cf4:	4803      	ldr	r0, [pc, #12]	; (8007d04 <CDC_Init_FS+0x20>)
 8007cf6:	f7fe fc39 	bl	800656c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007cfa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	20000e00 	.word	0x20000e00
 8007d04:	20000324 	.word	0x20000324
 8007d08:	20000600 	.word	0x20000600

08007d0c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007d10:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	4603      	mov	r3, r0
 8007d24:	6039      	str	r1, [r7, #0]
 8007d26:	71fb      	strb	r3, [r7, #7]
 8007d28:	4613      	mov	r3, r2
 8007d2a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007d2c:	79fb      	ldrb	r3, [r7, #7]
 8007d2e:	2b23      	cmp	r3, #35	; 0x23
 8007d30:	d84a      	bhi.n	8007dc8 <CDC_Control_FS+0xac>
 8007d32:	a201      	add	r2, pc, #4	; (adr r2, 8007d38 <CDC_Control_FS+0x1c>)
 8007d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d38:	08007dc9 	.word	0x08007dc9
 8007d3c:	08007dc9 	.word	0x08007dc9
 8007d40:	08007dc9 	.word	0x08007dc9
 8007d44:	08007dc9 	.word	0x08007dc9
 8007d48:	08007dc9 	.word	0x08007dc9
 8007d4c:	08007dc9 	.word	0x08007dc9
 8007d50:	08007dc9 	.word	0x08007dc9
 8007d54:	08007dc9 	.word	0x08007dc9
 8007d58:	08007dc9 	.word	0x08007dc9
 8007d5c:	08007dc9 	.word	0x08007dc9
 8007d60:	08007dc9 	.word	0x08007dc9
 8007d64:	08007dc9 	.word	0x08007dc9
 8007d68:	08007dc9 	.word	0x08007dc9
 8007d6c:	08007dc9 	.word	0x08007dc9
 8007d70:	08007dc9 	.word	0x08007dc9
 8007d74:	08007dc9 	.word	0x08007dc9
 8007d78:	08007dc9 	.word	0x08007dc9
 8007d7c:	08007dc9 	.word	0x08007dc9
 8007d80:	08007dc9 	.word	0x08007dc9
 8007d84:	08007dc9 	.word	0x08007dc9
 8007d88:	08007dc9 	.word	0x08007dc9
 8007d8c:	08007dc9 	.word	0x08007dc9
 8007d90:	08007dc9 	.word	0x08007dc9
 8007d94:	08007dc9 	.word	0x08007dc9
 8007d98:	08007dc9 	.word	0x08007dc9
 8007d9c:	08007dc9 	.word	0x08007dc9
 8007da0:	08007dc9 	.word	0x08007dc9
 8007da4:	08007dc9 	.word	0x08007dc9
 8007da8:	08007dc9 	.word	0x08007dc9
 8007dac:	08007dc9 	.word	0x08007dc9
 8007db0:	08007dc9 	.word	0x08007dc9
 8007db4:	08007dc9 	.word	0x08007dc9
 8007db8:	08007dc9 	.word	0x08007dc9
 8007dbc:	08007dc9 	.word	0x08007dc9
 8007dc0:	08007dc9 	.word	0x08007dc9
 8007dc4:	08007dc9 	.word	0x08007dc9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007dc8:	bf00      	nop
  }

  return (USBD_OK);
 8007dca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b084      	sub	sp, #16
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007de2:	6879      	ldr	r1, [r7, #4]
 8007de4:	480f      	ldr	r0, [pc, #60]	; (8007e24 <CDC_Receive_FS+0x4c>)
 8007de6:	f7fe fbc1 	bl	800656c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007dea:	480e      	ldr	r0, [pc, #56]	; (8007e24 <CDC_Receive_FS+0x4c>)
 8007dec:	f7fe fc22 	bl	8006634 <USBD_CDC_ReceivePacket>
  memset (buffer, '\0', 64);  // clear the buffer
 8007df0:	2240      	movs	r2, #64	; 0x40
 8007df2:	2100      	movs	r1, #0
 8007df4:	480c      	ldr	r0, [pc, #48]	; (8007e28 <CDC_Receive_FS+0x50>)
 8007df6:	f000 fca7 	bl	8008748 <memset>
  uint8_t len = (uint8_t)*Len;
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	73fb      	strb	r3, [r7, #15]
  memcpy(buffer, Buf, len);  // copy the data to the buffer
 8007e00:	7bfb      	ldrb	r3, [r7, #15]
 8007e02:	461a      	mov	r2, r3
 8007e04:	6879      	ldr	r1, [r7, #4]
 8007e06:	4808      	ldr	r0, [pc, #32]	; (8007e28 <CDC_Receive_FS+0x50>)
 8007e08:	f000 fc90 	bl	800872c <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 8007e0c:	7bfb      	ldrb	r3, [r7, #15]
 8007e0e:	461a      	mov	r2, r3
 8007e10:	2100      	movs	r1, #0
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 fc98 	bl	8008748 <memset>
  return (USBD_OK);
 8007e18:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3710      	adds	r7, #16
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	20000324 	.word	0x20000324
 8007e28:	200002d0 	.word	0x200002d0

08007e2c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	460b      	mov	r3, r1
 8007e36:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007e3c:	4b0d      	ldr	r3, [pc, #52]	; (8007e74 <CDC_Transmit_FS+0x48>)
 8007e3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e42:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d001      	beq.n	8007e52 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e00b      	b.n	8007e6a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007e52:	887b      	ldrh	r3, [r7, #2]
 8007e54:	461a      	mov	r2, r3
 8007e56:	6879      	ldr	r1, [r7, #4]
 8007e58:	4806      	ldr	r0, [pc, #24]	; (8007e74 <CDC_Transmit_FS+0x48>)
 8007e5a:	f7fe fb65 	bl	8006528 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007e5e:	4805      	ldr	r0, [pc, #20]	; (8007e74 <CDC_Transmit_FS+0x48>)
 8007e60:	f7fe fba2 	bl	80065a8 <USBD_CDC_TransmitPacket>
 8007e64:	4603      	mov	r3, r0
 8007e66:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3710      	adds	r7, #16
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop
 8007e74:	20000324 	.word	0x20000324

08007e78 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b087      	sub	sp, #28
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	4613      	mov	r3, r2
 8007e84:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007e86:	2300      	movs	r3, #0
 8007e88:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007e8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	371c      	adds	r7, #28
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr
	...

08007e9c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	6039      	str	r1, [r7, #0]
 8007ea6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	2212      	movs	r2, #18
 8007eac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007eae:	4b03      	ldr	r3, [pc, #12]	; (8007ebc <USBD_FS_DeviceDescriptor+0x20>)
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	370c      	adds	r7, #12
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr
 8007ebc:	200000f4 	.word	0x200000f4

08007ec0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	6039      	str	r1, [r7, #0]
 8007eca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	2204      	movs	r2, #4
 8007ed0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007ed2:	4b03      	ldr	r3, [pc, #12]	; (8007ee0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	370c      	adds	r7, #12
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr
 8007ee0:	20000108 	.word	0x20000108

08007ee4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	4603      	mov	r3, r0
 8007eec:	6039      	str	r1, [r7, #0]
 8007eee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ef0:	79fb      	ldrb	r3, [r7, #7]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d105      	bne.n	8007f02 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007ef6:	683a      	ldr	r2, [r7, #0]
 8007ef8:	4907      	ldr	r1, [pc, #28]	; (8007f18 <USBD_FS_ProductStrDescriptor+0x34>)
 8007efa:	4808      	ldr	r0, [pc, #32]	; (8007f1c <USBD_FS_ProductStrDescriptor+0x38>)
 8007efc:	f7ff fde2 	bl	8007ac4 <USBD_GetString>
 8007f00:	e004      	b.n	8007f0c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007f02:	683a      	ldr	r2, [r7, #0]
 8007f04:	4904      	ldr	r1, [pc, #16]	; (8007f18 <USBD_FS_ProductStrDescriptor+0x34>)
 8007f06:	4805      	ldr	r0, [pc, #20]	; (8007f1c <USBD_FS_ProductStrDescriptor+0x38>)
 8007f08:	f7ff fddc 	bl	8007ac4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f0c:	4b02      	ldr	r3, [pc, #8]	; (8007f18 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3708      	adds	r7, #8
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
 8007f16:	bf00      	nop
 8007f18:	20001600 	.word	0x20001600
 8007f1c:	08008950 	.word	0x08008950

08007f20 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	4603      	mov	r3, r0
 8007f28:	6039      	str	r1, [r7, #0]
 8007f2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007f2c:	683a      	ldr	r2, [r7, #0]
 8007f2e:	4904      	ldr	r1, [pc, #16]	; (8007f40 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007f30:	4804      	ldr	r0, [pc, #16]	; (8007f44 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007f32:	f7ff fdc7 	bl	8007ac4 <USBD_GetString>
  return USBD_StrDesc;
 8007f36:	4b02      	ldr	r3, [pc, #8]	; (8007f40 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3708      	adds	r7, #8
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	20001600 	.word	0x20001600
 8007f44:	08008968 	.word	0x08008968

08007f48 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	4603      	mov	r3, r0
 8007f50:	6039      	str	r1, [r7, #0]
 8007f52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	221a      	movs	r2, #26
 8007f58:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007f5a:	f000 f843 	bl	8007fe4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007f5e:	4b02      	ldr	r3, [pc, #8]	; (8007f68 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3708      	adds	r7, #8
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}
 8007f68:	2000010c 	.word	0x2000010c

08007f6c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	4603      	mov	r3, r0
 8007f74:	6039      	str	r1, [r7, #0]
 8007f76:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007f78:	79fb      	ldrb	r3, [r7, #7]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d105      	bne.n	8007f8a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f7e:	683a      	ldr	r2, [r7, #0]
 8007f80:	4907      	ldr	r1, [pc, #28]	; (8007fa0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f82:	4808      	ldr	r0, [pc, #32]	; (8007fa4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f84:	f7ff fd9e 	bl	8007ac4 <USBD_GetString>
 8007f88:	e004      	b.n	8007f94 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f8a:	683a      	ldr	r2, [r7, #0]
 8007f8c:	4904      	ldr	r1, [pc, #16]	; (8007fa0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f8e:	4805      	ldr	r0, [pc, #20]	; (8007fa4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f90:	f7ff fd98 	bl	8007ac4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f94:	4b02      	ldr	r3, [pc, #8]	; (8007fa0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3708      	adds	r7, #8
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	20001600 	.word	0x20001600
 8007fa4:	0800897c 	.word	0x0800897c

08007fa8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b082      	sub	sp, #8
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	4603      	mov	r3, r0
 8007fb0:	6039      	str	r1, [r7, #0]
 8007fb2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007fb4:	79fb      	ldrb	r3, [r7, #7]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d105      	bne.n	8007fc6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007fba:	683a      	ldr	r2, [r7, #0]
 8007fbc:	4907      	ldr	r1, [pc, #28]	; (8007fdc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007fbe:	4808      	ldr	r0, [pc, #32]	; (8007fe0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007fc0:	f7ff fd80 	bl	8007ac4 <USBD_GetString>
 8007fc4:	e004      	b.n	8007fd0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007fc6:	683a      	ldr	r2, [r7, #0]
 8007fc8:	4904      	ldr	r1, [pc, #16]	; (8007fdc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007fca:	4805      	ldr	r0, [pc, #20]	; (8007fe0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007fcc:	f7ff fd7a 	bl	8007ac4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007fd0:	4b02      	ldr	r3, [pc, #8]	; (8007fdc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3708      	adds	r7, #8
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	20001600 	.word	0x20001600
 8007fe0:	08008988 	.word	0x08008988

08007fe4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007fea:	4b0f      	ldr	r3, [pc, #60]	; (8008028 <Get_SerialNum+0x44>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007ff0:	4b0e      	ldr	r3, [pc, #56]	; (800802c <Get_SerialNum+0x48>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007ff6:	4b0e      	ldr	r3, [pc, #56]	; (8008030 <Get_SerialNum+0x4c>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007ffc:	68fa      	ldr	r2, [r7, #12]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4413      	add	r3, r2
 8008002:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d009      	beq.n	800801e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800800a:	2208      	movs	r2, #8
 800800c:	4909      	ldr	r1, [pc, #36]	; (8008034 <Get_SerialNum+0x50>)
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	f000 f814 	bl	800803c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008014:	2204      	movs	r2, #4
 8008016:	4908      	ldr	r1, [pc, #32]	; (8008038 <Get_SerialNum+0x54>)
 8008018:	68b8      	ldr	r0, [r7, #8]
 800801a:	f000 f80f 	bl	800803c <IntToUnicode>
  }
}
 800801e:	bf00      	nop
 8008020:	3710      	adds	r7, #16
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop
 8008028:	1fff7a10 	.word	0x1fff7a10
 800802c:	1fff7a14 	.word	0x1fff7a14
 8008030:	1fff7a18 	.word	0x1fff7a18
 8008034:	2000010e 	.word	0x2000010e
 8008038:	2000011e 	.word	0x2000011e

0800803c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800803c:	b480      	push	{r7}
 800803e:	b087      	sub	sp, #28
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	4613      	mov	r3, r2
 8008048:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800804a:	2300      	movs	r3, #0
 800804c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800804e:	2300      	movs	r3, #0
 8008050:	75fb      	strb	r3, [r7, #23]
 8008052:	e027      	b.n	80080a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	0f1b      	lsrs	r3, r3, #28
 8008058:	2b09      	cmp	r3, #9
 800805a:	d80b      	bhi.n	8008074 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	0f1b      	lsrs	r3, r3, #28
 8008060:	b2da      	uxtb	r2, r3
 8008062:	7dfb      	ldrb	r3, [r7, #23]
 8008064:	005b      	lsls	r3, r3, #1
 8008066:	4619      	mov	r1, r3
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	440b      	add	r3, r1
 800806c:	3230      	adds	r2, #48	; 0x30
 800806e:	b2d2      	uxtb	r2, r2
 8008070:	701a      	strb	r2, [r3, #0]
 8008072:	e00a      	b.n	800808a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	0f1b      	lsrs	r3, r3, #28
 8008078:	b2da      	uxtb	r2, r3
 800807a:	7dfb      	ldrb	r3, [r7, #23]
 800807c:	005b      	lsls	r3, r3, #1
 800807e:	4619      	mov	r1, r3
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	440b      	add	r3, r1
 8008084:	3237      	adds	r2, #55	; 0x37
 8008086:	b2d2      	uxtb	r2, r2
 8008088:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	011b      	lsls	r3, r3, #4
 800808e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008090:	7dfb      	ldrb	r3, [r7, #23]
 8008092:	005b      	lsls	r3, r3, #1
 8008094:	3301      	adds	r3, #1
 8008096:	68ba      	ldr	r2, [r7, #8]
 8008098:	4413      	add	r3, r2
 800809a:	2200      	movs	r2, #0
 800809c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800809e:	7dfb      	ldrb	r3, [r7, #23]
 80080a0:	3301      	adds	r3, #1
 80080a2:	75fb      	strb	r3, [r7, #23]
 80080a4:	7dfa      	ldrb	r2, [r7, #23]
 80080a6:	79fb      	ldrb	r3, [r7, #7]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d3d3      	bcc.n	8008054 <IntToUnicode+0x18>
  }
}
 80080ac:	bf00      	nop
 80080ae:	bf00      	nop
 80080b0:	371c      	adds	r7, #28
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr
	...

080080bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b08a      	sub	sp, #40	; 0x28
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080c4:	f107 0314 	add.w	r3, r7, #20
 80080c8:	2200      	movs	r2, #0
 80080ca:	601a      	str	r2, [r3, #0]
 80080cc:	605a      	str	r2, [r3, #4]
 80080ce:	609a      	str	r2, [r3, #8]
 80080d0:	60da      	str	r2, [r3, #12]
 80080d2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080dc:	d13a      	bne.n	8008154 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80080de:	2300      	movs	r3, #0
 80080e0:	613b      	str	r3, [r7, #16]
 80080e2:	4b1e      	ldr	r3, [pc, #120]	; (800815c <HAL_PCD_MspInit+0xa0>)
 80080e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080e6:	4a1d      	ldr	r2, [pc, #116]	; (800815c <HAL_PCD_MspInit+0xa0>)
 80080e8:	f043 0301 	orr.w	r3, r3, #1
 80080ec:	6313      	str	r3, [r2, #48]	; 0x30
 80080ee:	4b1b      	ldr	r3, [pc, #108]	; (800815c <HAL_PCD_MspInit+0xa0>)
 80080f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080f2:	f003 0301 	and.w	r3, r3, #1
 80080f6:	613b      	str	r3, [r7, #16]
 80080f8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80080fa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80080fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008100:	2302      	movs	r3, #2
 8008102:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008104:	2300      	movs	r3, #0
 8008106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008108:	2303      	movs	r3, #3
 800810a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800810c:	230a      	movs	r3, #10
 800810e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008110:	f107 0314 	add.w	r3, r7, #20
 8008114:	4619      	mov	r1, r3
 8008116:	4812      	ldr	r0, [pc, #72]	; (8008160 <HAL_PCD_MspInit+0xa4>)
 8008118:	f7f9 fc6e 	bl	80019f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800811c:	4b0f      	ldr	r3, [pc, #60]	; (800815c <HAL_PCD_MspInit+0xa0>)
 800811e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008120:	4a0e      	ldr	r2, [pc, #56]	; (800815c <HAL_PCD_MspInit+0xa0>)
 8008122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008126:	6353      	str	r3, [r2, #52]	; 0x34
 8008128:	2300      	movs	r3, #0
 800812a:	60fb      	str	r3, [r7, #12]
 800812c:	4b0b      	ldr	r3, [pc, #44]	; (800815c <HAL_PCD_MspInit+0xa0>)
 800812e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008130:	4a0a      	ldr	r2, [pc, #40]	; (800815c <HAL_PCD_MspInit+0xa0>)
 8008132:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008136:	6453      	str	r3, [r2, #68]	; 0x44
 8008138:	4b08      	ldr	r3, [pc, #32]	; (800815c <HAL_PCD_MspInit+0xa0>)
 800813a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800813c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008140:	60fb      	str	r3, [r7, #12]
 8008142:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008144:	2200      	movs	r2, #0
 8008146:	2100      	movs	r1, #0
 8008148:	2043      	movs	r0, #67	; 0x43
 800814a:	f7f9 fc1e 	bl	800198a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800814e:	2043      	movs	r0, #67	; 0x43
 8008150:	f7f9 fc37 	bl	80019c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008154:	bf00      	nop
 8008156:	3728      	adds	r7, #40	; 0x28
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}
 800815c:	40023800 	.word	0x40023800
 8008160:	40020000 	.word	0x40020000

08008164 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008178:	4619      	mov	r1, r3
 800817a:	4610      	mov	r0, r2
 800817c:	f7fe fb43 	bl	8006806 <USBD_LL_SetupStage>
}
 8008180:	bf00      	nop
 8008182:	3708      	adds	r7, #8
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	460b      	mov	r3, r1
 8008192:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800819a:	78fa      	ldrb	r2, [r7, #3]
 800819c:	6879      	ldr	r1, [r7, #4]
 800819e:	4613      	mov	r3, r2
 80081a0:	00db      	lsls	r3, r3, #3
 80081a2:	4413      	add	r3, r2
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	440b      	add	r3, r1
 80081a8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80081ac:	681a      	ldr	r2, [r3, #0]
 80081ae:	78fb      	ldrb	r3, [r7, #3]
 80081b0:	4619      	mov	r1, r3
 80081b2:	f7fe fb7d 	bl	80068b0 <USBD_LL_DataOutStage>
}
 80081b6:	bf00      	nop
 80081b8:	3708      	adds	r7, #8
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}

080081be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081be:	b580      	push	{r7, lr}
 80081c0:	b082      	sub	sp, #8
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
 80081c6:	460b      	mov	r3, r1
 80081c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80081d0:	78fa      	ldrb	r2, [r7, #3]
 80081d2:	6879      	ldr	r1, [r7, #4]
 80081d4:	4613      	mov	r3, r2
 80081d6:	00db      	lsls	r3, r3, #3
 80081d8:	4413      	add	r3, r2
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	440b      	add	r3, r1
 80081de:	334c      	adds	r3, #76	; 0x4c
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	78fb      	ldrb	r3, [r7, #3]
 80081e4:	4619      	mov	r1, r3
 80081e6:	f7fe fc16 	bl	8006a16 <USBD_LL_DataInStage>
}
 80081ea:	bf00      	nop
 80081ec:	3708      	adds	r7, #8
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b082      	sub	sp, #8
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008200:	4618      	mov	r0, r3
 8008202:	f7fe fd4a 	bl	8006c9a <USBD_LL_SOF>
}
 8008206:	bf00      	nop
 8008208:	3708      	adds	r7, #8
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800820e:	b580      	push	{r7, lr}
 8008210:	b084      	sub	sp, #16
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008216:	2301      	movs	r3, #1
 8008218:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	2b02      	cmp	r3, #2
 8008220:	d001      	beq.n	8008226 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008222:	f7f8 fe77 	bl	8000f14 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800822c:	7bfa      	ldrb	r2, [r7, #15]
 800822e:	4611      	mov	r1, r2
 8008230:	4618      	mov	r0, r3
 8008232:	f7fe fcf4 	bl	8006c1e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800823c:	4618      	mov	r0, r3
 800823e:	f7fe fc9c 	bl	8006b7a <USBD_LL_Reset>
}
 8008242:	bf00      	nop
 8008244:	3710      	adds	r7, #16
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
	...

0800824c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800825a:	4618      	mov	r0, r3
 800825c:	f7fe fcef 	bl	8006c3e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	687a      	ldr	r2, [r7, #4]
 800826c:	6812      	ldr	r2, [r2, #0]
 800826e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008272:	f043 0301 	orr.w	r3, r3, #1
 8008276:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6a1b      	ldr	r3, [r3, #32]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d005      	beq.n	800828c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008280:	4b04      	ldr	r3, [pc, #16]	; (8008294 <HAL_PCD_SuspendCallback+0x48>)
 8008282:	691b      	ldr	r3, [r3, #16]
 8008284:	4a03      	ldr	r2, [pc, #12]	; (8008294 <HAL_PCD_SuspendCallback+0x48>)
 8008286:	f043 0306 	orr.w	r3, r3, #6
 800828a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800828c:	bf00      	nop
 800828e:	3708      	adds	r7, #8
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	e000ed00 	.word	0xe000ed00

08008298 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80082a6:	4618      	mov	r0, r3
 80082a8:	f7fe fcdf 	bl	8006c6a <USBD_LL_Resume>
}
 80082ac:	bf00      	nop
 80082ae:	3708      	adds	r7, #8
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b082      	sub	sp, #8
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	460b      	mov	r3, r1
 80082be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80082c6:	78fa      	ldrb	r2, [r7, #3]
 80082c8:	4611      	mov	r1, r2
 80082ca:	4618      	mov	r0, r3
 80082cc:	f7fe fd37 	bl	8006d3e <USBD_LL_IsoOUTIncomplete>
}
 80082d0:	bf00      	nop
 80082d2:	3708      	adds	r7, #8
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b082      	sub	sp, #8
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	460b      	mov	r3, r1
 80082e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80082ea:	78fa      	ldrb	r2, [r7, #3]
 80082ec:	4611      	mov	r1, r2
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7fe fcf3 	bl	8006cda <USBD_LL_IsoINIncomplete>
}
 80082f4:	bf00      	nop
 80082f6:	3708      	adds	r7, #8
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800830a:	4618      	mov	r0, r3
 800830c:	f7fe fd49 	bl	8006da2 <USBD_LL_DevConnected>
}
 8008310:	bf00      	nop
 8008312:	3708      	adds	r7, #8
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008326:	4618      	mov	r0, r3
 8008328:	f7fe fd46 	bl	8006db8 <USBD_LL_DevDisconnected>
}
 800832c:	bf00      	nop
 800832e:	3708      	adds	r7, #8
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b082      	sub	sp, #8
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d13c      	bne.n	80083be <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008344:	4a20      	ldr	r2, [pc, #128]	; (80083c8 <USBD_LL_Init+0x94>)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	4a1e      	ldr	r2, [pc, #120]	; (80083c8 <USBD_LL_Init+0x94>)
 8008350:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008354:	4b1c      	ldr	r3, [pc, #112]	; (80083c8 <USBD_LL_Init+0x94>)
 8008356:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800835a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800835c:	4b1a      	ldr	r3, [pc, #104]	; (80083c8 <USBD_LL_Init+0x94>)
 800835e:	2204      	movs	r2, #4
 8008360:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008362:	4b19      	ldr	r3, [pc, #100]	; (80083c8 <USBD_LL_Init+0x94>)
 8008364:	2202      	movs	r2, #2
 8008366:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008368:	4b17      	ldr	r3, [pc, #92]	; (80083c8 <USBD_LL_Init+0x94>)
 800836a:	2200      	movs	r2, #0
 800836c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800836e:	4b16      	ldr	r3, [pc, #88]	; (80083c8 <USBD_LL_Init+0x94>)
 8008370:	2202      	movs	r2, #2
 8008372:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008374:	4b14      	ldr	r3, [pc, #80]	; (80083c8 <USBD_LL_Init+0x94>)
 8008376:	2200      	movs	r2, #0
 8008378:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800837a:	4b13      	ldr	r3, [pc, #76]	; (80083c8 <USBD_LL_Init+0x94>)
 800837c:	2200      	movs	r2, #0
 800837e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008380:	4b11      	ldr	r3, [pc, #68]	; (80083c8 <USBD_LL_Init+0x94>)
 8008382:	2200      	movs	r2, #0
 8008384:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008386:	4b10      	ldr	r3, [pc, #64]	; (80083c8 <USBD_LL_Init+0x94>)
 8008388:	2200      	movs	r2, #0
 800838a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800838c:	4b0e      	ldr	r3, [pc, #56]	; (80083c8 <USBD_LL_Init+0x94>)
 800838e:	2200      	movs	r2, #0
 8008390:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008392:	480d      	ldr	r0, [pc, #52]	; (80083c8 <USBD_LL_Init+0x94>)
 8008394:	f7f9 fcfe 	bl	8001d94 <HAL_PCD_Init>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d001      	beq.n	80083a2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800839e:	f7f8 fdb9 	bl	8000f14 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80083a2:	2180      	movs	r1, #128	; 0x80
 80083a4:	4808      	ldr	r0, [pc, #32]	; (80083c8 <USBD_LL_Init+0x94>)
 80083a6:	f7fa ff56 	bl	8003256 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80083aa:	2240      	movs	r2, #64	; 0x40
 80083ac:	2100      	movs	r1, #0
 80083ae:	4806      	ldr	r0, [pc, #24]	; (80083c8 <USBD_LL_Init+0x94>)
 80083b0:	f7fa ff0a 	bl	80031c8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80083b4:	2280      	movs	r2, #128	; 0x80
 80083b6:	2101      	movs	r1, #1
 80083b8:	4803      	ldr	r0, [pc, #12]	; (80083c8 <USBD_LL_Init+0x94>)
 80083ba:	f7fa ff05 	bl	80031c8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80083be:	2300      	movs	r3, #0
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3708      	adds	r7, #8
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}
 80083c8:	20001800 	.word	0x20001800

080083cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083d4:	2300      	movs	r3, #0
 80083d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083d8:	2300      	movs	r3, #0
 80083da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7f9 fdf3 	bl	8001fce <HAL_PCD_Start>
 80083e8:	4603      	mov	r3, r0
 80083ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083ec:	7bfb      	ldrb	r3, [r7, #15]
 80083ee:	4618      	mov	r0, r3
 80083f0:	f000 f942 	bl	8008678 <USBD_Get_USB_Status>
 80083f4:	4603      	mov	r3, r0
 80083f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b084      	sub	sp, #16
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
 800840a:	4608      	mov	r0, r1
 800840c:	4611      	mov	r1, r2
 800840e:	461a      	mov	r2, r3
 8008410:	4603      	mov	r3, r0
 8008412:	70fb      	strb	r3, [r7, #3]
 8008414:	460b      	mov	r3, r1
 8008416:	70bb      	strb	r3, [r7, #2]
 8008418:	4613      	mov	r3, r2
 800841a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800841c:	2300      	movs	r3, #0
 800841e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008420:	2300      	movs	r3, #0
 8008422:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800842a:	78bb      	ldrb	r3, [r7, #2]
 800842c:	883a      	ldrh	r2, [r7, #0]
 800842e:	78f9      	ldrb	r1, [r7, #3]
 8008430:	f7fa fac4 	bl	80029bc <HAL_PCD_EP_Open>
 8008434:	4603      	mov	r3, r0
 8008436:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008438:	7bfb      	ldrb	r3, [r7, #15]
 800843a:	4618      	mov	r0, r3
 800843c:	f000 f91c 	bl	8008678 <USBD_Get_USB_Status>
 8008440:	4603      	mov	r3, r0
 8008442:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008444:	7bbb      	ldrb	r3, [r7, #14]
}
 8008446:	4618      	mov	r0, r3
 8008448:	3710      	adds	r7, #16
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}

0800844e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800844e:	b580      	push	{r7, lr}
 8008450:	b084      	sub	sp, #16
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
 8008456:	460b      	mov	r3, r1
 8008458:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800845a:	2300      	movs	r3, #0
 800845c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800845e:	2300      	movs	r3, #0
 8008460:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008468:	78fa      	ldrb	r2, [r7, #3]
 800846a:	4611      	mov	r1, r2
 800846c:	4618      	mov	r0, r3
 800846e:	f7fa fb0d 	bl	8002a8c <HAL_PCD_EP_Close>
 8008472:	4603      	mov	r3, r0
 8008474:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008476:	7bfb      	ldrb	r3, [r7, #15]
 8008478:	4618      	mov	r0, r3
 800847a:	f000 f8fd 	bl	8008678 <USBD_Get_USB_Status>
 800847e:	4603      	mov	r3, r0
 8008480:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008482:	7bbb      	ldrb	r3, [r7, #14]
}
 8008484:	4618      	mov	r0, r3
 8008486:	3710      	adds	r7, #16
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
 8008494:	460b      	mov	r3, r1
 8008496:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008498:	2300      	movs	r3, #0
 800849a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800849c:	2300      	movs	r3, #0
 800849e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80084a6:	78fa      	ldrb	r2, [r7, #3]
 80084a8:	4611      	mov	r1, r2
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7fa fbe5 	bl	8002c7a <HAL_PCD_EP_SetStall>
 80084b0:	4603      	mov	r3, r0
 80084b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084b4:	7bfb      	ldrb	r3, [r7, #15]
 80084b6:	4618      	mov	r0, r3
 80084b8:	f000 f8de 	bl	8008678 <USBD_Get_USB_Status>
 80084bc:	4603      	mov	r3, r0
 80084be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3710      	adds	r7, #16
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}

080084ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084ca:	b580      	push	{r7, lr}
 80084cc:	b084      	sub	sp, #16
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
 80084d2:	460b      	mov	r3, r1
 80084d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084d6:	2300      	movs	r3, #0
 80084d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084da:	2300      	movs	r3, #0
 80084dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80084e4:	78fa      	ldrb	r2, [r7, #3]
 80084e6:	4611      	mov	r1, r2
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7fa fc2a 	bl	8002d42 <HAL_PCD_EP_ClrStall>
 80084ee:	4603      	mov	r3, r0
 80084f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084f2:	7bfb      	ldrb	r3, [r7, #15]
 80084f4:	4618      	mov	r0, r3
 80084f6:	f000 f8bf 	bl	8008678 <USBD_Get_USB_Status>
 80084fa:	4603      	mov	r3, r0
 80084fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8008500:	4618      	mov	r0, r3
 8008502:	3710      	adds	r7, #16
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008508:	b480      	push	{r7}
 800850a:	b085      	sub	sp, #20
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	460b      	mov	r3, r1
 8008512:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800851a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800851c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008520:	2b00      	cmp	r3, #0
 8008522:	da0b      	bge.n	800853c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008524:	78fb      	ldrb	r3, [r7, #3]
 8008526:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800852a:	68f9      	ldr	r1, [r7, #12]
 800852c:	4613      	mov	r3, r2
 800852e:	00db      	lsls	r3, r3, #3
 8008530:	4413      	add	r3, r2
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	440b      	add	r3, r1
 8008536:	333e      	adds	r3, #62	; 0x3e
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	e00b      	b.n	8008554 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800853c:	78fb      	ldrb	r3, [r7, #3]
 800853e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008542:	68f9      	ldr	r1, [r7, #12]
 8008544:	4613      	mov	r3, r2
 8008546:	00db      	lsls	r3, r3, #3
 8008548:	4413      	add	r3, r2
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	440b      	add	r3, r1
 800854e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008552:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008554:	4618      	mov	r0, r3
 8008556:	3714      	adds	r7, #20
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr

08008560 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	460b      	mov	r3, r1
 800856a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800856c:	2300      	movs	r3, #0
 800856e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008570:	2300      	movs	r3, #0
 8008572:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800857a:	78fa      	ldrb	r2, [r7, #3]
 800857c:	4611      	mov	r1, r2
 800857e:	4618      	mov	r0, r3
 8008580:	f7fa f9f7 	bl	8002972 <HAL_PCD_SetAddress>
 8008584:	4603      	mov	r3, r0
 8008586:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008588:	7bfb      	ldrb	r3, [r7, #15]
 800858a:	4618      	mov	r0, r3
 800858c:	f000 f874 	bl	8008678 <USBD_Get_USB_Status>
 8008590:	4603      	mov	r3, r0
 8008592:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008594:	7bbb      	ldrb	r3, [r7, #14]
}
 8008596:	4618      	mov	r0, r3
 8008598:	3710      	adds	r7, #16
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}

0800859e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800859e:	b580      	push	{r7, lr}
 80085a0:	b086      	sub	sp, #24
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	60f8      	str	r0, [r7, #12]
 80085a6:	607a      	str	r2, [r7, #4]
 80085a8:	603b      	str	r3, [r7, #0]
 80085aa:	460b      	mov	r3, r1
 80085ac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085ae:	2300      	movs	r3, #0
 80085b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085b2:	2300      	movs	r3, #0
 80085b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80085bc:	7af9      	ldrb	r1, [r7, #11]
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	f7fa fb10 	bl	8002be6 <HAL_PCD_EP_Transmit>
 80085c6:	4603      	mov	r3, r0
 80085c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085ca:	7dfb      	ldrb	r3, [r7, #23]
 80085cc:	4618      	mov	r0, r3
 80085ce:	f000 f853 	bl	8008678 <USBD_Get_USB_Status>
 80085d2:	4603      	mov	r3, r0
 80085d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80085d6:	7dbb      	ldrb	r3, [r7, #22]
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3718      	adds	r7, #24
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b086      	sub	sp, #24
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	607a      	str	r2, [r7, #4]
 80085ea:	603b      	str	r3, [r7, #0]
 80085ec:	460b      	mov	r3, r1
 80085ee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085f0:	2300      	movs	r3, #0
 80085f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085f4:	2300      	movs	r3, #0
 80085f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80085fe:	7af9      	ldrb	r1, [r7, #11]
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	f7fa fa8c 	bl	8002b20 <HAL_PCD_EP_Receive>
 8008608:	4603      	mov	r3, r0
 800860a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800860c:	7dfb      	ldrb	r3, [r7, #23]
 800860e:	4618      	mov	r0, r3
 8008610:	f000 f832 	bl	8008678 <USBD_Get_USB_Status>
 8008614:	4603      	mov	r3, r0
 8008616:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008618:	7dbb      	ldrb	r3, [r7, #22]
}
 800861a:	4618      	mov	r0, r3
 800861c:	3718      	adds	r7, #24
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}

08008622 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008622:	b580      	push	{r7, lr}
 8008624:	b082      	sub	sp, #8
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
 800862a:	460b      	mov	r3, r1
 800862c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008634:	78fa      	ldrb	r2, [r7, #3]
 8008636:	4611      	mov	r1, r2
 8008638:	4618      	mov	r0, r3
 800863a:	f7fa fabc 	bl	8002bb6 <HAL_PCD_EP_GetRxCount>
 800863e:	4603      	mov	r3, r0
}
 8008640:	4618      	mov	r0, r3
 8008642:	3708      	adds	r7, #8
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008648:	b480      	push	{r7}
 800864a:	b083      	sub	sp, #12
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008650:	4b03      	ldr	r3, [pc, #12]	; (8008660 <USBD_static_malloc+0x18>)
}
 8008652:	4618      	mov	r0, r3
 8008654:	370c      	adds	r7, #12
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr
 800865e:	bf00      	nop
 8008660:	20001d0c 	.word	0x20001d0c

08008664 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]

}
 800866c:	bf00      	nop
 800866e:	370c      	adds	r7, #12
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008678:	b480      	push	{r7}
 800867a:	b085      	sub	sp, #20
 800867c:	af00      	add	r7, sp, #0
 800867e:	4603      	mov	r3, r0
 8008680:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008682:	2300      	movs	r3, #0
 8008684:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008686:	79fb      	ldrb	r3, [r7, #7]
 8008688:	2b03      	cmp	r3, #3
 800868a:	d817      	bhi.n	80086bc <USBD_Get_USB_Status+0x44>
 800868c:	a201      	add	r2, pc, #4	; (adr r2, 8008694 <USBD_Get_USB_Status+0x1c>)
 800868e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008692:	bf00      	nop
 8008694:	080086a5 	.word	0x080086a5
 8008698:	080086ab 	.word	0x080086ab
 800869c:	080086b1 	.word	0x080086b1
 80086a0:	080086b7 	.word	0x080086b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80086a4:	2300      	movs	r3, #0
 80086a6:	73fb      	strb	r3, [r7, #15]
    break;
 80086a8:	e00b      	b.n	80086c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80086aa:	2303      	movs	r3, #3
 80086ac:	73fb      	strb	r3, [r7, #15]
    break;
 80086ae:	e008      	b.n	80086c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80086b0:	2301      	movs	r3, #1
 80086b2:	73fb      	strb	r3, [r7, #15]
    break;
 80086b4:	e005      	b.n	80086c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80086b6:	2303      	movs	r3, #3
 80086b8:	73fb      	strb	r3, [r7, #15]
    break;
 80086ba:	e002      	b.n	80086c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80086bc:	2303      	movs	r3, #3
 80086be:	73fb      	strb	r3, [r7, #15]
    break;
 80086c0:	bf00      	nop
  }
  return usb_status;
 80086c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3714      	adds	r7, #20
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr

080086d0 <atoi>:
 80086d0:	220a      	movs	r2, #10
 80086d2:	2100      	movs	r1, #0
 80086d4:	f000 b8d8 	b.w	8008888 <strtol>

080086d8 <__errno>:
 80086d8:	4b01      	ldr	r3, [pc, #4]	; (80086e0 <__errno+0x8>)
 80086da:	6818      	ldr	r0, [r3, #0]
 80086dc:	4770      	bx	lr
 80086de:	bf00      	nop
 80086e0:	20000128 	.word	0x20000128

080086e4 <__libc_init_array>:
 80086e4:	b570      	push	{r4, r5, r6, lr}
 80086e6:	4d0d      	ldr	r5, [pc, #52]	; (800871c <__libc_init_array+0x38>)
 80086e8:	4c0d      	ldr	r4, [pc, #52]	; (8008720 <__libc_init_array+0x3c>)
 80086ea:	1b64      	subs	r4, r4, r5
 80086ec:	10a4      	asrs	r4, r4, #2
 80086ee:	2600      	movs	r6, #0
 80086f0:	42a6      	cmp	r6, r4
 80086f2:	d109      	bne.n	8008708 <__libc_init_array+0x24>
 80086f4:	4d0b      	ldr	r5, [pc, #44]	; (8008724 <__libc_init_array+0x40>)
 80086f6:	4c0c      	ldr	r4, [pc, #48]	; (8008728 <__libc_init_array+0x44>)
 80086f8:	f000 f8d0 	bl	800889c <_init>
 80086fc:	1b64      	subs	r4, r4, r5
 80086fe:	10a4      	asrs	r4, r4, #2
 8008700:	2600      	movs	r6, #0
 8008702:	42a6      	cmp	r6, r4
 8008704:	d105      	bne.n	8008712 <__libc_init_array+0x2e>
 8008706:	bd70      	pop	{r4, r5, r6, pc}
 8008708:	f855 3b04 	ldr.w	r3, [r5], #4
 800870c:	4798      	blx	r3
 800870e:	3601      	adds	r6, #1
 8008710:	e7ee      	b.n	80086f0 <__libc_init_array+0xc>
 8008712:	f855 3b04 	ldr.w	r3, [r5], #4
 8008716:	4798      	blx	r3
 8008718:	3601      	adds	r6, #1
 800871a:	e7f2      	b.n	8008702 <__libc_init_array+0x1e>
 800871c:	08008ab4 	.word	0x08008ab4
 8008720:	08008ab4 	.word	0x08008ab4
 8008724:	08008ab4 	.word	0x08008ab4
 8008728:	08008ab8 	.word	0x08008ab8

0800872c <memcpy>:
 800872c:	440a      	add	r2, r1
 800872e:	4291      	cmp	r1, r2
 8008730:	f100 33ff 	add.w	r3, r0, #4294967295
 8008734:	d100      	bne.n	8008738 <memcpy+0xc>
 8008736:	4770      	bx	lr
 8008738:	b510      	push	{r4, lr}
 800873a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800873e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008742:	4291      	cmp	r1, r2
 8008744:	d1f9      	bne.n	800873a <memcpy+0xe>
 8008746:	bd10      	pop	{r4, pc}

08008748 <memset>:
 8008748:	4402      	add	r2, r0
 800874a:	4603      	mov	r3, r0
 800874c:	4293      	cmp	r3, r2
 800874e:	d100      	bne.n	8008752 <memset+0xa>
 8008750:	4770      	bx	lr
 8008752:	f803 1b01 	strb.w	r1, [r3], #1
 8008756:	e7f9      	b.n	800874c <memset+0x4>

08008758 <strstr>:
 8008758:	780a      	ldrb	r2, [r1, #0]
 800875a:	b570      	push	{r4, r5, r6, lr}
 800875c:	b96a      	cbnz	r2, 800877a <strstr+0x22>
 800875e:	bd70      	pop	{r4, r5, r6, pc}
 8008760:	429a      	cmp	r2, r3
 8008762:	d109      	bne.n	8008778 <strstr+0x20>
 8008764:	460c      	mov	r4, r1
 8008766:	4605      	mov	r5, r0
 8008768:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800876c:	2b00      	cmp	r3, #0
 800876e:	d0f6      	beq.n	800875e <strstr+0x6>
 8008770:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008774:	429e      	cmp	r6, r3
 8008776:	d0f7      	beq.n	8008768 <strstr+0x10>
 8008778:	3001      	adds	r0, #1
 800877a:	7803      	ldrb	r3, [r0, #0]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d1ef      	bne.n	8008760 <strstr+0x8>
 8008780:	4618      	mov	r0, r3
 8008782:	e7ec      	b.n	800875e <strstr+0x6>

08008784 <_strtol_l.constprop.0>:
 8008784:	2b01      	cmp	r3, #1
 8008786:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800878a:	d001      	beq.n	8008790 <_strtol_l.constprop.0+0xc>
 800878c:	2b24      	cmp	r3, #36	; 0x24
 800878e:	d906      	bls.n	800879e <_strtol_l.constprop.0+0x1a>
 8008790:	f7ff ffa2 	bl	80086d8 <__errno>
 8008794:	2316      	movs	r3, #22
 8008796:	6003      	str	r3, [r0, #0]
 8008798:	2000      	movs	r0, #0
 800879a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800879e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008884 <_strtol_l.constprop.0+0x100>
 80087a2:	460d      	mov	r5, r1
 80087a4:	462e      	mov	r6, r5
 80087a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80087aa:	f814 700c 	ldrb.w	r7, [r4, ip]
 80087ae:	f017 0708 	ands.w	r7, r7, #8
 80087b2:	d1f7      	bne.n	80087a4 <_strtol_l.constprop.0+0x20>
 80087b4:	2c2d      	cmp	r4, #45	; 0x2d
 80087b6:	d132      	bne.n	800881e <_strtol_l.constprop.0+0x9a>
 80087b8:	782c      	ldrb	r4, [r5, #0]
 80087ba:	2701      	movs	r7, #1
 80087bc:	1cb5      	adds	r5, r6, #2
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d05b      	beq.n	800887a <_strtol_l.constprop.0+0xf6>
 80087c2:	2b10      	cmp	r3, #16
 80087c4:	d109      	bne.n	80087da <_strtol_l.constprop.0+0x56>
 80087c6:	2c30      	cmp	r4, #48	; 0x30
 80087c8:	d107      	bne.n	80087da <_strtol_l.constprop.0+0x56>
 80087ca:	782c      	ldrb	r4, [r5, #0]
 80087cc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80087d0:	2c58      	cmp	r4, #88	; 0x58
 80087d2:	d14d      	bne.n	8008870 <_strtol_l.constprop.0+0xec>
 80087d4:	786c      	ldrb	r4, [r5, #1]
 80087d6:	2310      	movs	r3, #16
 80087d8:	3502      	adds	r5, #2
 80087da:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80087de:	f108 38ff 	add.w	r8, r8, #4294967295
 80087e2:	f04f 0c00 	mov.w	ip, #0
 80087e6:	fbb8 f9f3 	udiv	r9, r8, r3
 80087ea:	4666      	mov	r6, ip
 80087ec:	fb03 8a19 	mls	sl, r3, r9, r8
 80087f0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80087f4:	f1be 0f09 	cmp.w	lr, #9
 80087f8:	d816      	bhi.n	8008828 <_strtol_l.constprop.0+0xa4>
 80087fa:	4674      	mov	r4, lr
 80087fc:	42a3      	cmp	r3, r4
 80087fe:	dd24      	ble.n	800884a <_strtol_l.constprop.0+0xc6>
 8008800:	f1bc 0f00 	cmp.w	ip, #0
 8008804:	db1e      	blt.n	8008844 <_strtol_l.constprop.0+0xc0>
 8008806:	45b1      	cmp	r9, r6
 8008808:	d31c      	bcc.n	8008844 <_strtol_l.constprop.0+0xc0>
 800880a:	d101      	bne.n	8008810 <_strtol_l.constprop.0+0x8c>
 800880c:	45a2      	cmp	sl, r4
 800880e:	db19      	blt.n	8008844 <_strtol_l.constprop.0+0xc0>
 8008810:	fb06 4603 	mla	r6, r6, r3, r4
 8008814:	f04f 0c01 	mov.w	ip, #1
 8008818:	f815 4b01 	ldrb.w	r4, [r5], #1
 800881c:	e7e8      	b.n	80087f0 <_strtol_l.constprop.0+0x6c>
 800881e:	2c2b      	cmp	r4, #43	; 0x2b
 8008820:	bf04      	itt	eq
 8008822:	782c      	ldrbeq	r4, [r5, #0]
 8008824:	1cb5      	addeq	r5, r6, #2
 8008826:	e7ca      	b.n	80087be <_strtol_l.constprop.0+0x3a>
 8008828:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800882c:	f1be 0f19 	cmp.w	lr, #25
 8008830:	d801      	bhi.n	8008836 <_strtol_l.constprop.0+0xb2>
 8008832:	3c37      	subs	r4, #55	; 0x37
 8008834:	e7e2      	b.n	80087fc <_strtol_l.constprop.0+0x78>
 8008836:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800883a:	f1be 0f19 	cmp.w	lr, #25
 800883e:	d804      	bhi.n	800884a <_strtol_l.constprop.0+0xc6>
 8008840:	3c57      	subs	r4, #87	; 0x57
 8008842:	e7db      	b.n	80087fc <_strtol_l.constprop.0+0x78>
 8008844:	f04f 3cff 	mov.w	ip, #4294967295
 8008848:	e7e6      	b.n	8008818 <_strtol_l.constprop.0+0x94>
 800884a:	f1bc 0f00 	cmp.w	ip, #0
 800884e:	da05      	bge.n	800885c <_strtol_l.constprop.0+0xd8>
 8008850:	2322      	movs	r3, #34	; 0x22
 8008852:	6003      	str	r3, [r0, #0]
 8008854:	4646      	mov	r6, r8
 8008856:	b942      	cbnz	r2, 800886a <_strtol_l.constprop.0+0xe6>
 8008858:	4630      	mov	r0, r6
 800885a:	e79e      	b.n	800879a <_strtol_l.constprop.0+0x16>
 800885c:	b107      	cbz	r7, 8008860 <_strtol_l.constprop.0+0xdc>
 800885e:	4276      	negs	r6, r6
 8008860:	2a00      	cmp	r2, #0
 8008862:	d0f9      	beq.n	8008858 <_strtol_l.constprop.0+0xd4>
 8008864:	f1bc 0f00 	cmp.w	ip, #0
 8008868:	d000      	beq.n	800886c <_strtol_l.constprop.0+0xe8>
 800886a:	1e69      	subs	r1, r5, #1
 800886c:	6011      	str	r1, [r2, #0]
 800886e:	e7f3      	b.n	8008858 <_strtol_l.constprop.0+0xd4>
 8008870:	2430      	movs	r4, #48	; 0x30
 8008872:	2b00      	cmp	r3, #0
 8008874:	d1b1      	bne.n	80087da <_strtol_l.constprop.0+0x56>
 8008876:	2308      	movs	r3, #8
 8008878:	e7af      	b.n	80087da <_strtol_l.constprop.0+0x56>
 800887a:	2c30      	cmp	r4, #48	; 0x30
 800887c:	d0a5      	beq.n	80087ca <_strtol_l.constprop.0+0x46>
 800887e:	230a      	movs	r3, #10
 8008880:	e7ab      	b.n	80087da <_strtol_l.constprop.0+0x56>
 8008882:	bf00      	nop
 8008884:	080089a9 	.word	0x080089a9

08008888 <strtol>:
 8008888:	4613      	mov	r3, r2
 800888a:	460a      	mov	r2, r1
 800888c:	4601      	mov	r1, r0
 800888e:	4802      	ldr	r0, [pc, #8]	; (8008898 <strtol+0x10>)
 8008890:	6800      	ldr	r0, [r0, #0]
 8008892:	f7ff bf77 	b.w	8008784 <_strtol_l.constprop.0>
 8008896:	bf00      	nop
 8008898:	20000128 	.word	0x20000128

0800889c <_init>:
 800889c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800889e:	bf00      	nop
 80088a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088a2:	bc08      	pop	{r3}
 80088a4:	469e      	mov	lr, r3
 80088a6:	4770      	bx	lr

080088a8 <_fini>:
 80088a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088aa:	bf00      	nop
 80088ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088ae:	bc08      	pop	{r3}
 80088b0:	469e      	mov	lr, r3
 80088b2:	4770      	bx	lr
